<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java面试之JUC</title>
    <url>/2020/02/21/20200221192831555/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[toc]</p>
<h1 id="Volatile"><a href="#Volatile" class="headerlink" title="Volatile"></a>Volatile</h1><h2 id="volatile是什么？为什么引入了volatile"><a href="#volatile是什么？为什么引入了volatile" class="headerlink" title="volatile是什么？为什么引入了volatile"></a>volatile是什么？为什么引入了volatile</h2><p>volatile是java虚拟机提供的一种轻量级同步机制</p>
<ol>
<li>保证可见性</li>
<li>不保证原子性</li>
<li>禁止指令重排（保证了有序性）</li>
</ol>
<p>高并发下不用synchronized，因为并发性不好；用volatile和juc下面的类；</p>
<h2 id="JMM抽象结构图描述"><a href="#JMM抽象结构图描述" class="headerlink" title="JMM抽象结构图描述"></a>JMM抽象结构图描述</h2><p>关于JMM: blog/2018/07/27/15326929363424/#2-3-JAVA内存模型（JMM）</p>
<p>结构图主要描述：</p>
<ul>
<li>主内存/工作内存/共享变量/拷贝副本</li>
<li>JMM是一种抽象概念，不真实存在，它描述的是一组规则/规范</li>
</ul>
<h2 id="JMM如何保证同步的？"><a href="#JMM如何保证同步的？" class="headerlink" title="JMM如何保证同步的？"></a>JMM如何保证同步的？</h2><ol>
<li>解锁前，把工作内存的值刷到主内存</li>
<li>加锁时，从主内存读取最新值到工作内存</li>
<li>加锁解锁是同一把锁</li>
</ol>
<h2 id="JMM三大特性是什么？"><a href="#JMM三大特性是什么？" class="headerlink" title="JMM三大特性是什么？"></a>JMM三大特性是什么？</h2><ol>
<li>可见性</li>
<li>原子性</li>
<li>有序性</li>
</ol>
<p>三大特性使线程安全性获得保证</p>
<h2 id="可见性是什么意思？"><a href="#可见性是什么意思？" class="headerlink" title="可见性是什么意思？"></a>可见性是什么意思？</h2><p>某线程如果修改了主内存的共享变量，对其他线程是可见的。</p>
<h2 id="volatile保证可见性代码演示"><a href="#volatile保证可见性代码演示" class="headerlink" title="volatile保证可见性代码演示"></a>volatile保证可见性代码演示</h2><p>demo</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mxx.juc;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 可见性验证：</span></span><br><span class="line"><span class="comment">* - a线程修改变量值</span></span><br><span class="line"><span class="comment">* - 对b线程（main）是否可见</span></span><br><span class="line"><span class="comment">* 结论：</span></span><br><span class="line"><span class="comment">* - 不加volatile，a线程的修改对b线程不可见</span></span><br><span class="line"><span class="comment">* - 加volatile，a线程的修改对b线程可见</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileDemo</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// int num = 1;</span></span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeNum</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.num = <span class="number">30</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 线程 操作 资源类</span></span><br><span class="line">VolatileDemo vd = <span class="keyword">new</span> VolatileDemo();</span><br><span class="line"><span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">System.out.println(<span class="string">"进入线程"</span>+Thread.currentThread().getName()+<span class="string">"，num="</span>+vd.num);</span><br><span class="line"><span class="comment">// 休息，等待num被其他线程读取到</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">vd.changeNum();</span><br><span class="line">System.out.println(<span class="string">"线程"</span>+Thread.currentThread().getName()+<span class="string">"修改num，num="</span>+vd.num);</span><br><span class="line">&#125;,<span class="string">"a"</span>).start();</span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> (vd.num==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="comment">// 一直等待循环</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"线程结束，num="</span>+vd.num);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 加volatile:</span></span><br><span class="line"><span class="comment">//进入线程a，num=1</span></span><br><span class="line"><span class="comment">//线程a修改num，num=30</span></span><br><span class="line"><span class="comment">//main线程结束，num=30</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="原子性是什么意思？"><a href="#原子性是什么意思？" class="headerlink" title="原子性是什么意思？"></a>原子性是什么意思？</h2><p>某个线程在做具体业务时，要么整体成功，要么整体失败，保证数据一致性</p>
<h2 id="volatile不保证原子性代码演示"><a href="#volatile不保证原子性代码演示" class="headerlink" title="volatile不保证原子性代码演示"></a>volatile不保证原子性代码演示</h2><p>demo</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mxx.juc;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// int num = 1;</span></span><br><span class="line">  <span class="keyword">volatile</span> <span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addNum</span><span class="params">()</span></span>&#123;</span><br><span class="line">    num++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 不保证原子性验证：</span></span><br><span class="line"><span class="comment">   * - 20个线程，每个线程1000次，做+1操作</span></span><br><span class="line"><span class="comment">   * - 20个线程全部跑完后，看main函数打印结果</span></span><br><span class="line"><span class="comment">   * 结论：</span></span><br><span class="line"><span class="comment">   * - 每次结果都不一样，小于20001</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    VolatileDemo vd = <span class="keyword">new</span> VolatileDemo();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">1000</span>; j++) &#123;</span><br><span class="line">          vd.addNum();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,<span class="string">"线程"</span>+i).start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 主线程+GC线程</span></span><br><span class="line">    <span class="keyword">while</span> (Thread.activeCount()&gt;<span class="number">2</span>)&#123;</span><br><span class="line">      <span class="comment">// 线程礼让</span></span><br><span class="line">      Thread.yield();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(Thread.currentThread().getName()+<span class="string">"线程: num="</span>+ vd.num);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="volatile不保证原子性理论解释（num-为什么不安全）"><a href="#volatile不保证原子性理论解释（num-为什么不安全）" class="headerlink" title="volatile不保证原子性理论解释（num++为什么不安全）"></a>volatile不保证原子性理论解释（num++为什么不安全）</h2><p>num++出现问题底层逻辑（javap -c）：</p>
<ol>
<li>获得：各线程从主内存读num到工作内存</li>
<li>修改：各线程在各自工作内存做+1操作，工作内存中的操作互相不可见。</li>
<li>写回：线程在写回前被挂起了，写回的时候<strong>相互覆盖</strong>，造成数值丢失。</li>
</ol>
<h2 id="volatile不保证原子性问题怎么解决？"><a href="#volatile不保证原子性问题怎么解决？" class="headerlink" title="volatile不保证原子性问题怎么解决？"></a>volatile不保证原子性问题怎么解决？</h2><ol>
<li>加synchronized，并发性能不好</li>
<li>juc的atomic，比如AtomicInteger的getAndIncrement()</li>
</ol>
<h2 id="AtomicInteger保证原子性代码演示"><a href="#AtomicInteger保证原子性代码演示" class="headerlink" title="AtomicInteger保证原子性代码演示"></a>AtomicInteger保证原子性代码演示</h2><p>demo</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AtomicInteger num2 = <span class="keyword">new</span> AtomicInteger(<span class="number">1</span>);</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addNumByAtomic</span><span class="params">()</span></span>&#123;</span><br><span class="line">    num2.getAndIncrement();</span><br><span class="line">     <span class="comment">// num2.incrementAndGet();</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * volatile不保证原子性解决：</span></span><br><span class="line"><span class="comment"> * - AtomicInteger</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// seeOkByVolatile();</span></span><br><span class="line">  VolatileDemo vd = <span class="keyword">new</span> VolatileDemo();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">1000</span>; j++) &#123;</span><br><span class="line">        <span class="comment">// 不安全</span></span><br><span class="line">        vd.addNum();</span><br><span class="line">        <span class="comment">// 安全</span></span><br><span class="line">        vd.addNumByAtomic();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,<span class="string">"线程"</span>+i).start();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 主线程+GC线程</span></span><br><span class="line">  <span class="keyword">while</span> (Thread.activeCount()&gt;<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="comment">// 线程礼让</span></span><br><span class="line">    Thread.yield();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  System.out.println(Thread.currentThread().getName()+<span class="string">"线程: num="</span>+ vd.num);</span><br><span class="line">  System.out.println(Thread.currentThread().getName()+<span class="string">"线程: num2="</span>+ vd.num2);</span><br><span class="line">  <span class="comment">// main线程: num=13808</span></span><br><span class="line">  <span class="comment">// main线程: num2=20001</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="有序性之Happens-before原则"><a href="#有序性之Happens-before原则" class="headerlink" title="* 有序性之Happens-before原则"></a>* 有序性之Happens-before原则</h2><p>java内存模型一个列出了八种Happens-before规则，如果两个操作的次序不能从这八种规则中推倒出来，则不能保证有序性</p>
<p>更详细的：blog/2018/07/28/15327607157902/#4-4-有序性</p>
<h2 id="Volatile通过什么实现可见性？"><a href="#Volatile通过什么实现可见性？" class="headerlink" title="Volatile通过什么实现可见性？"></a>Volatile通过什么实现可见性？</h2><p>通过加入 <strong>内存屏障</strong> 和 <strong>禁止重排序优化</strong>来实现</p>
<h2 id="什么是指令重排？造成什么问题？"><a href="#什么是指令重排？造成什么问题？" class="headerlink" title="什么是指令重排？造成什么问题？"></a>什么是指令重排？造成什么问题？</h2><ol>
<li>Java内存模型中，为提高性能，允许编译器和处理器对指令进行重排序。</li>
<li>重排时会考虑到指令间的数据依赖性</li>
<li>不会影响单线程环境下程序执行</li>
<li>多线程下，线程交替执行，由于优化重排的存在，两线程使用的变量能否保证一致性是无法确定的。结果无法预测。</li>
</ol>
<h2 id="指令重排造成的不安全举例"><a href="#指令重排造成的不安全举例" class="headerlink" title="* 指令重排造成的不安全举例"></a>* 指令重排造成的不安全举例</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span></span>&#123;</span><br><span class="line">  a=<span class="number">1</span>; <span class="comment">// 1</span></span><br><span class="line">  flag=<span class="keyword">true</span>; <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">    a = a+<span class="number">5</span>; <span class="comment">// 3</span></span><br><span class="line">    System.out.println(<span class="string">"revalue="</span>+a);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>解释：</p>
<ol>
<li>线程1执行m1，线程2执行m2</li>
<li>在不重排时，一定是按照123步骤执行，结果为6</li>
<li>如果发生重排，比如1和2交换了顺序，当m1执行完2时，线程切换，执行m1，这时可以进入if函数，a结果为5 </li>
</ol>
<h2 id="什么是内存屏障？"><a href="#什么是内存屏障？" class="headerlink" title="* 什么是内存屏障？"></a>* 什么是内存屏障？</h2><p>详细：blog/2018/07/28/15327607157902/#4-3-可见性</p>
<p>关键字：</p>
<ul>
<li>load屏障/store屏障</li>
<li>volatile读/volatile写</li>
<li>内存屏障还能强制刷出cpu缓存，保证数据最新</li>
</ul>
<h2 id="如何保证有序性？"><a href="#如何保证有序性？" class="headerlink" title="如何保证有序性？"></a>如何保证有序性？</h2><p>保证有序性：volatile、synchronized、Lock</p>
<h2 id="你在哪些地方用到了volatile"><a href="#你在哪些地方用到了volatile" class="headerlink" title="你在哪些地方用到了volatile?"></a>你在哪些地方用到了volatile?</h2><ol>
<li>单例模式在多线程下不安全</li>
<li>读写锁/手写缓存</li>
<li>cas底层源码分析</li>
</ol>
<h2 id="单例模式在多线程下不安全代码演示"><a href="#单例模式在多线程下不安全代码演示" class="headerlink" title="单例模式在多线程下不安全代码演示"></a>单例模式在多线程下不安全代码演示</h2><p>demo</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> SingletonDemo instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">SingletonDemo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(Thread.currentThread().getName()+<span class="string">"\t调用构造方法"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonDemo <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">      instance = <span class="keyword">new</span> SingletonDemo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 单线程下，单例模式正常。</span></span><br><span class="line"><span class="comment">//    System.out.println(SingletonDemo.getInstance() == SingletonDemo.getInstance());</span></span><br><span class="line"><span class="comment">//    System.out.println(SingletonDemo.getInstance() == SingletonDemo.getInstance());</span></span><br><span class="line"><span class="comment">//    System.out.println(SingletonDemo.getInstance() == SingletonDemo.getInstance());</span></span><br><span class="line">    <span class="comment">//main 调用构造方法</span></span><br><span class="line">    <span class="comment">//true</span></span><br><span class="line">    <span class="comment">//true</span></span><br><span class="line">    <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 多线程下，单例模式不行</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">        SingletonDemo.getInstance();</span><br><span class="line">      &#125;,<span class="string">"线程"</span>+i).start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//线程0 调用构造方法</span></span><br><span class="line">    <span class="comment">//线程4 调用构造方法</span></span><br><span class="line">    <span class="comment">//线程3 调用构造方法</span></span><br><span class="line">    <span class="comment">//线程2 调用构造方法</span></span><br><span class="line">    <span class="comment">//线程1 调用构造方法</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="单例模式在多线程下不安全解决方案？"><a href="#单例模式在多线程下不安全解决方案？" class="headerlink" title="! 单例模式在多线程下不安全解决方案？"></a>! 单例模式在多线程下不安全解决方案？</h2><p>DCL双端检索机制+volatile</p>
<h2 id="为什么只用DCL不能保证线程安全？"><a href="#为什么只用DCL不能保证线程安全？" class="headerlink" title="为什么只用DCL不能保证线程安全？"></a>为什么只用DCL不能保证线程安全？</h2><p>简答：在创建对象过程中发生指令重排。检测到intance不为null但对象却没有完全创建成功。</p>
<p>双端检索机制：在加锁前和加锁后都进行一次判断</p>
<p>demo:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonDemo <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (SingletonDemo<span class="class">.<span class="keyword">class</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">        instance = <span class="keyword">new</span> SingletonDemo();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>为什么以上代码不一定安全？</p>
<ol>
<li>因为有指令重排序的存在</li>
<li>原因在于：某线程读到instance不为nul时，instance的引用对象可能还没有完成初始化（new SingletonDemo()做到一半）<br>instance = new SingletonDemo()分为以下步骤：<br>1）分配对象内存空间<br>2）初始化对象<br>3）设置instance指向内存地址，此时instance != nul<br>其中步骤2 3可能发生重排，</li>
<li>因此多线程下，当线程a访问instance!=null时，instance实例却未必初始化完成（还没做2）；此时切到线程b，线程b直接取intance实例，这个实例是未完成初始化的实例。因此线程不安全。</li>
</ol>
<p>如何解决？</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> SingletonDemo instance = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">// 告诉编译器禁止指令重排</span></span><br></pre></td></tr></table></figure></div>



<h1 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h1><p>提问线路：CAS—&gt; Unsafe—&gt; CAS底层原理 —&gt; 原子引用更新 —&gt; 如何规避ABA问题</p>
<h2 id="compareAndSet怎么用？"><a href="#compareAndSet怎么用？" class="headerlink" title="compareAndSet怎么用？"></a>compareAndSet怎么用？</h2><p>比较并交换（compareAndSet）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * boolean compareAndSet(int expect, int update)</span></span><br><span class="line"><span class="comment"> * - 如果主内存的值=期待值expect，就将主内存值改为update</span></span><br><span class="line"><span class="comment"> * - 该方法可以检测线程a的操作变量X没有被其他线程修改过</span></span><br><span class="line"><span class="comment"> * - 保证了线程安全</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    AtomicInteger atomicInteger = <span class="keyword">new</span> AtomicInteger(<span class="number">5</span>);</span><br><span class="line">    System.out.println(atomicInteger.compareAndSet(<span class="number">5</span>, <span class="number">10</span>)+ <span class="string">"\t"</span> + atomicInteger);</span><br><span class="line">    System.out.println(atomicInteger.compareAndSet(<span class="number">5</span>, <span class="number">20</span>)+ <span class="string">"\t"</span> + atomicInteger);</span><br><span class="line">    <span class="comment">//true	10</span></span><br><span class="line">    <span class="comment">//false	10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="CAS底层原理简述？"><a href="#CAS底层原理简述？" class="headerlink" title="CAS底层原理简述？"></a>CAS底层原理简述？</h2><ol>
<li>Compare-And-Swap。是一条CPU并发原语。（原语：操作系统范畴，依赖硬件，不被中断。）</li>
<li>功能是判断内存某个位置的值是否为预期值（Compare），是就更新（Swap），这个过程是原子的。</li>
<li>功能描述：<ol>
<li>判断内存某个位置的值是否为预期值（Compare），是就更新（Swap），这个过程是原子的。</li>
<li>cas有三个操作数，内存值V，旧预期值A，要更新的值B。仅当预期值A=内存值V时，才将内存值V修改为B，否则什么都不做。</li>
</ol>
</li>
<li>自旋：比较并交换，直到比较成功</li>
<li>底层靠Unsafe类保证原子性。</li>
</ol>
<h2 id="getAndIncrement-源码解析（用了cas保证线程安全）"><a href="#getAndIncrement-源码解析（用了cas保证线程安全）" class="headerlink" title="getAndIncrement() 源码解析（用了cas保证线程安全）"></a>getAndIncrement() 源码解析（用了cas保证线程安全）</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 参数说明：</span></span><br><span class="line"><span class="comment"> * this: atomicInteger对象</span></span><br><span class="line"><span class="comment"> * valueOffset：对象的内存地址</span></span><br><span class="line"><span class="comment"> * unsafe：sun.misc.Unsafe类</span></span><br><span class="line"><span class="comment"> * AtomicInteger中变量value使用volatile修饰，保证内存可见。</span></span><br><span class="line"><span class="comment"> * 结论：底层依赖CAS操作/Unsafe类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndIncrement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> unsafe.getAndAddInt(<span class="keyword">this</span>, valueOffset, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * compareAndSwapInt：即CAS</span></span><br><span class="line"><span class="comment"> * while: 如果修改失败，会一直尝试修改，直到成功。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndAddInt</span><span class="params">(Object var1, <span class="keyword">long</span> var2, <span class="keyword">int</span> var4)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> var5;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        var5 = <span class="keyword">this</span>.getIntVolatile(var1, var2);</span><br><span class="line">    &#125; <span class="keyword">while</span>(!<span class="keyword">this</span>.compareAndSwapInt(var1, var2, var5, var5 + var4));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> var5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>简述：</p>
<ol>
<li>调用了Unsafe类的getAndAddInt</li>
<li>getAndAddInt使用cas一直循环尝试修改主内存</li>
</ol>
<h2 id="对Unsafe的理解"><a href="#对Unsafe的理解" class="headerlink" title="对Unsafe的理解?"></a>对Unsafe的理解?</h2><p>Unsave类</p>
<ol>
<li>该类所有方法都是native修饰，直接调用底层资源。sun.misc包中。</li>
<li>可以像C的指针一样直接操作内存。java的CAS操作依赖Unsafe类的方法。</li>
</ol>
<h2 id="CAS有哪些缺点？"><a href="#CAS有哪些缺点？" class="headerlink" title="! CAS有哪些缺点？"></a>! CAS有哪些缺点？</h2><ol>
<li>循环时间长，开销大<ol>
<li>如果cas失败，就一直do while尝试。如果长时间不成功，可能给CPU带来很大开销。</li>
</ol>
</li>
<li>只能保证一个共享变量的原子操作<ol>
<li>如果时多个共享变量，cas无法保证原子性，只能加锁，锁住代码段。</li>
</ol>
</li>
<li>引出来ABA问题。</li>
</ol>
<h1 id="ABA问题"><a href="#ABA问题" class="headerlink" title="ABA问题"></a>ABA问题</h1><h2 id="简述ABA问题和解决方案？"><a href="#简述ABA问题和解决方案？" class="headerlink" title="简述ABA问题和解决方案？"></a>简述ABA问题和解决方案？</h2><p>简述版：</p>
<p>ABA问题描述: 线程1做CAS操作将A改为B再改为A，而线程2再做CAS时修改成功了，这不符合设计思想。</p>
<p>怎么解决：AtomicStampReference时间戳原子引用</p>
<h2 id="ABA问题描述？问题出在哪？"><a href="#ABA问题描述？问题出在哪？" class="headerlink" title="ABA问题描述？问题出在哪？"></a>ABA问题描述？问题出在哪？</h2><p>ABA问题描述：</p>
<ul>
<li>比如线程1从内存位置V中取出A，此时线程2也取出A。且线程2做了一次cas将值改为了B，然后又做了一次cas将值改回了A。此时线程1做cas发现内存中还是A，则线程1操作成功。这个时候实际上A值已经被其他线程改变过，这与设计思想是不符合的。</li>
</ul>
<p>这个过程问题出在哪？</p>
<ul>
<li>如果只在乎结果，ABA不介意B的存在，没什么问题</li>
<li>如果B的存在会造成影响，需要通过AtomicStampReference，加时间戳解决。</li>
</ul>
<h2 id="原子更新引用是啥？"><a href="#原子更新引用是啥？" class="headerlink" title="原子更新引用是啥？"></a>原子更新引用是啥？</h2><p>AtomicStampReference，使用时间戳，解决cas中出现的ABA问题。</p>
<h2 id="AtomicReference使用代码演示"><a href="#AtomicReference使用代码演示" class="headerlink" title="AtomicReference使用代码演示"></a>AtomicReference使用代码演示</h2><p>demo</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果希望原子操作的变量是User,Book,此时需要使用AtomicReference类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    User z3 = <span class="keyword">new</span> User(<span class="string">"z3"</span>,<span class="number">18</span>);</span><br><span class="line">    User l4 = <span class="keyword">new</span> User(<span class="string">"l4"</span>,<span class="number">19</span>);</span><br><span class="line">    AtomicReference&lt;User&gt; atomicReference = <span class="keyword">new</span> AtomicReference&lt;&gt;(z3);</span><br><span class="line">    System.out.println(atomicReference.compareAndSet(z3, l4) + <span class="string">"\t"</span> + atomicReference.get().toString());</span><br><span class="line">    System.out.println(atomicReference.compareAndSet(z3, l4) + <span class="string">"\t"</span> + atomicReference.get().toString());</span><br><span class="line">    <span class="comment">//truecom.mxx.juc.User@4554617c</span></span><br><span class="line">    <span class="comment">//false  com.mxx.juc.User@4554617c</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="AtomicReference存在ABA问题代码验证"><a href="#AtomicReference存在ABA问题代码验证" class="headerlink" title="AtomicReference存在ABA问题代码验证"></a>AtomicReference存在ABA问题代码验证</h2><p>demo</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AtomicReference atomicReference = <span class="keyword">new</span> AtomicReference&lt;Integer&gt;(<span class="number">100</span>);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ABA问题验证：</span></span><br><span class="line"><span class="comment"> * 1--ABA</span></span><br><span class="line"><span class="comment"> * 2--A,C</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ABADemo abaDemo = <span class="keyword">new</span> ABADemo();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">        abaDemo.atomicReference.compareAndSet(<span class="number">100</span>,<span class="number">101</span>);</span><br><span class="line">        abaDemo.atomicReference.compareAndSet(<span class="number">101</span>,<span class="number">100</span>);</span><br><span class="line">    &#125;,<span class="string">"1"</span>).start();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">        <span class="comment">// 睡1s等线程1执行完ABA</span></span><br><span class="line">        <span class="keyword">try</span> &#123;TimeUnit.SECONDS.sleep(<span class="number">1</span>);&#125; <span class="keyword">catch</span> (InterruptedException e) &#123; e.printStackTrace();&#125;</span><br><span class="line">        System.out.println(abaDemo.atomicReference.compareAndSet(<span class="number">100</span>, <span class="number">2020</span>)+<span class="string">"\t"</span>+abaDemo.atomicReference.get());</span><br><span class="line">        <span class="comment">//true  2020</span></span><br><span class="line"></span><br><span class="line">    &#125;,<span class="string">"2"</span>).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="AtomicStampReference解决ABA问题代码验证"><a href="#AtomicStampReference解决ABA问题代码验证" class="headerlink" title="AtomicStampReference解决ABA问题代码验证"></a>AtomicStampReference解决ABA问题代码验证</h2><p>解决思路：每次变量更新的时候，把变量的版本号加一，这样只要变量被某一个线程修改过，该变量版本号就会发生递增操作，从而解决了ABA变化</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AtomicStampedReference atomicStampedReference = <span class="keyword">new</span> AtomicStampedReference&lt;Integer&gt;(<span class="number">100</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ABAProblem();</span></span><br><span class="line">    ABADemo abaDemo = <span class="keyword">new</span> ABADemo();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">        <span class="comment">// 等线程2读到初始版本号的值</span></span><br><span class="line">        <span class="keyword">try</span> &#123;TimeUnit.SECONDS.sleep(<span class="number">1</span>);&#125; <span class="keyword">catch</span> (InterruptedException e) &#123; e.printStackTrace();&#125;</span><br><span class="line">        System.out.println(<span class="string">"线程1在ABA前的版本号："</span>+abaDemo.atomicStampedReference.getStamp());</span><br><span class="line">        abaDemo.atomicStampedReference.compareAndSet(<span class="number">100</span>,<span class="number">101</span>,abaDemo.atomicStampedReference.getStamp(),abaDemo.atomicStampedReference.getStamp()+<span class="number">1</span>);</span><br><span class="line">        abaDemo.atomicStampedReference.compareAndSet(<span class="number">101</span>,<span class="number">100</span>,abaDemo.atomicStampedReference.getStamp(),abaDemo.atomicStampedReference.getStamp()+<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">"线程1在ABA后的版本号："</span>+abaDemo.atomicStampedReference.getStamp());</span><br><span class="line">    &#125;,<span class="string">"1"</span>).start();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">        <span class="comment">// 存一下修改前的版本号</span></span><br><span class="line">        <span class="keyword">int</span> stamp = abaDemo.atomicStampedReference.getStamp();</span><br><span class="line">        System.out.println(<span class="string">"线程2在修改操作前的版本号："</span>+stamp);</span><br><span class="line">        <span class="comment">// 睡1s等线程1执行完ABA</span></span><br><span class="line">        <span class="keyword">try</span> &#123;TimeUnit.SECONDS.sleep(<span class="number">2</span>);&#125; <span class="keyword">catch</span> (InterruptedException e) &#123; e.printStackTrace();&#125;</span><br><span class="line">        System.out.println(abaDemo.atomicStampedReference.compareAndSet(<span class="number">100</span>,<span class="number">2020</span>,stamp,abaDemo.atomicStampedReference.getStamp()+<span class="number">1</span>)+ <span class="string">"\t"</span> + abaDemo.atomicStampedReference.getReference());</span><br><span class="line">        <span class="comment">//线程2在修改操作前的版本号：1</span></span><br><span class="line">        <span class="comment">//线程1在ABA前的版本号：1</span></span><br><span class="line">        <span class="comment">//线程1在ABA后的版本号：3</span></span><br><span class="line">        <span class="comment">//false 100</span></span><br><span class="line"></span><br><span class="line">        &#125;,<span class="string">"2"</span>).start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="集合类不安全"><a href="#集合类不安全" class="headerlink" title="集合类不安全"></a>集合类不安全</h1><h2 id="ArrayList线程不安全演示-什么故障？什么原因？怎么解决？"><a href="#ArrayList线程不安全演示-什么故障？什么原因？怎么解决？" class="headerlink" title="ArrayList线程不安全演示-什么故障？什么原因？怎么解决？"></a>ArrayList线程不安全演示-什么故障？什么原因？怎么解决？</h2><p>ArrayList底层是一个数组，默认大小10，超过就扩容，扩原值的一半10+5=15</p>
<p>线程不安全，因为add方法没有加锁。</p>
<p>不安全案例：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContainerNotSafeDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1. 故障</span></span><br><span class="line"><span class="comment">     *      java.util.ConcurrentModificationException   并发修改异常</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 2. 原因</span></span><br><span class="line"><span class="comment">     *      线程并发修改导致，线程1正在写入，线程2抢占资源，导致数据不一致。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 3. 解决</span></span><br><span class="line"><span class="comment">     *      1 new Vector(); add方法加锁，线程安全，并发性差。</span></span><br><span class="line"><span class="comment">     *      2 Collections.synchronizedList(new ArrayList&lt;&gt;()); 包装成安全的，还是加锁，并发性差。</span></span><br><span class="line"><span class="comment">     *      3 new CopyOnWriteArrayList&lt;&gt;();  juc的类，写时复制</span></span><br><span class="line"><span class="comment">     * 4. 优化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        List&lt;String&gt; list = new ArrayList&lt;&gt;();</span></span><br><span class="line"><span class="comment">//        List&lt;String&gt; list = new Vector&lt;&gt;();</span></span><br><span class="line">        List&lt;String&gt; list = Collections.synchronizedList(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line"><span class="comment">//        List&lt;String&gt; list = new CopyOnWriteArrayList&lt;&gt;();</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">30</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                list.add(UUID.randomUUID().toString().substring(<span class="number">0</span>,<span class="number">4</span>));</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">"\t"</span>+list);</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="CopyOnWriteArrayList原理？它有什么好？"><a href="#CopyOnWriteArrayList原理？它有什么好？" class="headerlink" title="CopyOnWriteArrayList原理？它有什么好？"></a>CopyOnWriteArrayList原理？它有什么好？</h2><p>参考：<a href="https://blog.csdn.net/linsongbin1/article/details/54581787" target="_blank" rel="noopener">https://blog.csdn.net/linsongbin1/article/details/54581787</a></p>
<p>add源码：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 加锁</span></span><br><span class="line">    <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Object[] elements = getArray();</span><br><span class="line">        <span class="keyword">int</span> len = elements.length;</span><br><span class="line">        <span class="comment">// 2. 拷贝数组</span></span><br><span class="line">        Object[] newElements = Arrays.copyOf(elements, len + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 3. 新增元素到新数组</span></span><br><span class="line">        newElements[len] = e;</span><br><span class="line">        <span class="comment">// 4. 将array引用指向新数组</span></span><br><span class="line">        setArray(newElements);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 解锁</span></span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>解释写时复制：</p>
<ol>
<li>写操作时，先从原有的数组中拷贝一份出来，然后在新的数组做写操作，写完之后，再将原来的数组引用指向到新数组。整个add操作都是在<strong>锁的保护下进行的</strong>。</li>
<li>读操作时，如果写完成且引用指向新数组，则读到的是最新数据；否则读到的是原始数组数据。可见<strong>读操作是不加锁的</strong>。</li>
</ol>
<h2 id="CopyOnWriteArrayList-缺点-amp-使用场合"><a href="#CopyOnWriteArrayList-缺点-amp-使用场合" class="headerlink" title="CopyOnWriteArrayList 缺点&amp;使用场合"></a>CopyOnWriteArrayList 缺点&amp;使用场合</h2><ol>
<li><strong>消耗内存</strong>。写操作，拷贝数组，消耗内存，数组大的话可能导致gc</li>
<li><strong>不能实时读</strong>。拷贝新增需要时间，读到的可能是旧数据，能保证最终一致性，但不满足实时要求。</li>
</ol>
<p>因此，适合<strong>读多写少</strong>的场景。</p>
<h2 id="CopyOnWriteArrayList透露的思想"><a href="#CopyOnWriteArrayList透露的思想" class="headerlink" title="CopyOnWriteArrayList透露的思想"></a>CopyOnWriteArrayList透露的思想</h2><ol>
<li>读写分离，提高并发</li>
<li>最终一致性</li>
<li>通过另辟空间，来解决并发冲突</li>
</ol>
<h2 id="集合类不安全之Set-演示-故障-解决"><a href="#集合类不安全之Set-演示-故障-解决" class="headerlink" title="集合类不安全之Set-演示/故障/解决"></a>集合类不安全之Set-演示/故障/解决</h2><p>Set同理</p>
<p>HashSet &gt; Collections.synchronizedSet() &gt; CopyOnWriteArraySet</p>
<p>且CopyOnWriteArraySet底层还是用的CopyOnWriteArrayList</p>
<p>HashSet底层是HashMap, add(key,一个常量)</p>
<h2 id="集合类不安全之Map-演示-故障-解决"><a href="#集合类不安全之Map-演示-故障-解决" class="headerlink" title="集合类不安全之Map-演示/故障/解决"></a>集合类不安全之Map-演示/故障/解决</h2><p>Map类似</p>
<p>HashMap &gt; Collections.synchronizedMap() &gt; ConcurrentHashMap</p>
<h2 id="HashMap底层实现原理-jdk7"><a href="#HashMap底层实现原理-jdk7" class="headerlink" title="HashMap底层实现原理-jdk7"></a>HashMap底层实现原理-jdk7</h2><p>可参考：</p>
<ul>
<li><p>2018/10/30/20181030111752438/#10-4-HashMap与ConcurrentHashMap解析</p>
</li>
<li><p>HashMap源码分析：<a href="https://blog.csdn.net/weixin_36910300/article/details/79985197" target="_blank" rel="noopener">https://blog.csdn.net/weixin_36910300/article/details/79985197</a></p>
</li>
</ul>
<p><strong>map的存储结构是什么？</strong></p>
<ol>
<li>Hash表（数组+链表）</li>
<li>key-value构成一个entry对象</li>
<li>数组容量：默认16，始终保持 2^n（为了存取高效，减少碰撞，数据分配均匀）</li>
</ol>
<p><strong>new HashMap&lt;&gt;()底层发生了什么？</strong></p>
<p>创建了长度=16的 Entry table。</p>
<p><strong>源码分析</strong></p>
<ul>
<li>capacity : 当前数组容量</li>
<li>loadFactor：负载因子，默认为 0.75。</li>
<li>threshold：扩容的阈值，等于 capacity * loadFactor。当元素个数超过这个值就触发扩容。</li>
<li>MAXIMUM_CAPACITY = 1 &lt;&lt; 30：最大的容量为 2 ^ 30</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//调用无参构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//默认初始容量大小为16,默认的加载因子为0.75f</span></span><br><span class="line">    <span class="keyword">this</span>(DEFAULT_INITIAL_CAPACITY, DEFAULT_LOAD_FACTOR);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//初始容量不能小于0</span></span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal initial capacity: "</span> +</span><br><span class="line">                                           initialCapacity);</span><br><span class="line">    <span class="comment">//初始容量不能超过MAXIMUM_CAPACITY</span></span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">        initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">    <span class="comment">//加载因子不能小于等于0,或者加载因子不能是非数字   </span></span><br><span class="line">    <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal load factor: "</span> +</span><br><span class="line">                                           loadFactor);</span><br><span class="line">    <span class="comment">//设置加载因子</span></span><br><span class="line">    <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">    <span class="comment">//设置临界值</span></span><br><span class="line">    threshold = initialCapacity;</span><br><span class="line">    <span class="comment">//伪构造,里面没有代码</span></span><br><span class="line">    init();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>map.put(key1,value1)底层发生了什么？</strong></p>
<ol>
<li>求key1的hash值，调用hashCode()，该hash值用来计算Entry数组下标，得到存放位置。</li>
<li>如果该位置为空，则添加成功。</li>
<li>如果不为空，意味着该位置存在链表：<ol>
<li>如果hash值与其他key不同，则添加成功。</li>
<li>如果key1的hash值有key与之相同，则调用equal()，继续比较：<ol>
<li>如果equal返回false，则添加成功。</li>
<li>如果equal返回true，则使用value1替换旧值（修改操作）</li>
</ol>
</li>
</ol>
</li>
</ol>
<p><strong>map.get(key1)底层发生了什么？</strong></p>
<ol>
<li>根据key1计算hash，找到对应数组下标。</li>
<li>遍历该位置处的链表，找到key1.equal(key2)为true的entry，返回其value。</li>
</ol>
<p><strong>扩容的原理？</strong></p>
<p>扩容后，数组大小为原来的 2 倍。</p>
<h2 id="ConcurrentHashMap底层原理-jdk7"><a href="#ConcurrentHashMap底层原理-jdk7" class="headerlink" title="ConcurrentHashMap底层原理-jdk7"></a>ConcurrentHashMap底层原理-jdk7</h2><p>关键词：Segment数组/基于分段锁/提高并发</p>
<ol>
<li><p>引入一个Segment数组。每个Segment单元都包含一个与HashMap结构差不多hash表</p>
</li>
<li><p>读取过程：</p>
<ol>
<li>先取key的hash值，取高sshift位决定属于哪个Segment单元。</li>
<li>接着就是HashMap那一套</li>
</ol>
</li>
<li><p>Segment继承jucReetrantLock，上锁方便，即分段锁。因此segment[1]锁了，不影响其他Segment单元并发。</p>
</li>
</ol>
<h2 id="HashMap底层实现原理-jdk8"><a href="#HashMap底层实现原理-jdk8" class="headerlink" title="HashMap底层实现原理-jdk8"></a>HashMap底层实现原理-jdk8</h2><p>与jdk7的不同的地方：</p>
<ol>
<li><p>new HashMap()时，不创建长度为16的数组。</p>
</li>
<li><p>底层使用Node[], 而不是Entry[]</p>
</li>
<li><p>数组结构采用</p>
<p>数组+链表+红黑树</p>
<ol>
<li>触发时机：当某索引位置链表长度&gt;8 且 数组长度&gt;64时，次索引位置的链表改为红黑树</li>
<li>红黑树的关键性质: 从根到叶子最长的可能路径不多于最短的可能路径的两倍长。结果是这棵树大致上是平衡的。</li>
<li>目的：加快检索速度</li>
</ol>
</li>
</ol>
<h2 id="ConcurrentHashMap底层原理-jdk8"><a href="#ConcurrentHashMap底层原理-jdk8" class="headerlink" title="! ConcurrentHashMap底层原理-jdk8"></a>! ConcurrentHashMap底层原理-jdk8</h2><p>参考：<a href="https://www.jianshu.com/p/5dbaa6707017" target="_blank" rel="noopener">https://www.jianshu.com/p/5dbaa6707017</a></p>
<p>底层结构</p>
<ul>
<li>和 1.8 HashMap 结构类似，也是数组+链表+红黑树的。<strong>取消了Segment 分段锁</strong></li>
</ul>
<p>那如何保证线程安全的？</p>
<ul>
<li><strong>CAS + synchronized + volatile 来保证并发安全性</strong>，具体的如下</li>
</ul>
<p>put方法逻辑</p>
<p>源代码解析：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** Implementation for put and putIfAbsent */</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(K key, V value, <span class="keyword">boolean</span> onlyIfAbsent)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span> || value == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="comment">//1. 计算key的hash值</span></span><br><span class="line">    <span class="keyword">int</span> hash = spread(key.hashCode());</span><br><span class="line">    <span class="keyword">int</span> binCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123;</span><br><span class="line">        Node&lt;K,V&gt; f; <span class="keyword">int</span> n, i, fh;</span><br><span class="line">        <span class="comment">//2. 判断Node[]数组是否初始化，没有则进行初始化操作</span></span><br><span class="line">        <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            tab = initTable();</span><br><span class="line">        <span class="comment">//3. 通过hash定位数组的索引坐标，是否有Node节点，如果没有则使用CAS进行添加（链表的头节点），添加失败则进入下次循环。</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i = (n - <span class="number">1</span>) &amp; hash)) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (casTabAt(tab, i, <span class="keyword">null</span>,</span><br><span class="line">                         <span class="keyword">new</span> Node&lt;K,V&gt;(hash, key, value, <span class="keyword">null</span>)))</span><br><span class="line">                <span class="keyword">break</span>;                   <span class="comment">// no lock when adding to empty bin</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//4. 检查到内部正在扩容，就帮助它一块扩容。</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)</span><br><span class="line">            tab = helpTransfer(tab, f);</span><br><span class="line">        <span class="comment">// 如果该坐标Node不为null且没有正在扩容，就加锁，进行链表/红黑树 节点添加操作</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            V oldVal = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">synchronized</span> (f) &#123;</span><br><span class="line">                <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class="line">                    <span class="comment">//5. 当前为链表，在链表中插入新的键值对</span></span><br><span class="line">                    <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                        binCount = <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">for</span> (Node&lt;K,V&gt; e = f;; ++binCount) &#123;</span><br><span class="line">                            K ek;</span><br><span class="line">                            <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                                ((ek = e.key) == key ||</span><br><span class="line">                                 (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek)))) &#123;</span><br><span class="line">                                oldVal = e.val;</span><br><span class="line">                                <span class="keyword">if</span> (!onlyIfAbsent)</span><br><span class="line">                                    e.val = value;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            Node&lt;K,V&gt; pred = e;</span><br><span class="line">                            <span class="keyword">if</span> ((e = e.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                                pred.next = <span class="keyword">new</span> Node&lt;K,V&gt;(hash, key,</span><br><span class="line">                                                          value, <span class="keyword">null</span>);</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 6.当前为红黑树，将新的键值对插入到红黑树中</span></span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123;</span><br><span class="line">                        Node&lt;K,V&gt; p;</span><br><span class="line">                        binCount = <span class="number">2</span>;</span><br><span class="line">                        <span class="keyword">if</span> ((p = ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key,</span><br><span class="line">                                                       value)) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            oldVal = p.val;</span><br><span class="line">                            <span class="keyword">if</span> (!onlyIfAbsent)</span><br><span class="line">                                p.val = value;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 7.判断链表长度已经达到临界值8（默认值），当节点超过这个值就需要把链表转换为树结构</span></span><br><span class="line">            <span class="keyword">if</span> (binCount != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD)</span><br><span class="line">                    treeifyBin(tab, i);</span><br><span class="line">                <span class="keyword">if</span> (oldVal != <span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> oldVal;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//8.对当前容量大小进行检查，如果超过了临界值（实际大小*加载因子）就需要扩容 </span></span><br><span class="line">    addCount(<span class="number">1L</span>, binCount);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>解析：对当前的table进行<strong>无条件自循环直到put成功（cas自旋）</strong>。</p>
<ol>
<li>如果数组下标没有Node节点，就用<strong>CAS+自旋</strong>添加链表头节点。</li>
<li>如果有Node节点，就加synchronized，添加链表或红黑树节点。</li>
</ol>
<p>get操作，由于数组被volatile修饰了，因此不用担心数组的可见性问题。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">volatile</span> Node&lt;K,V&gt;[] table;</span><br></pre></td></tr></table></figure></div>



<h2 id="Map类的各种对比"><a href="#Map类的各种对比" class="headerlink" title="Map类的各种对比"></a>Map类的各种对比</h2><ul>
<li>HashMap和ConcurrentHashMap对比</li>
<li>HashMap和HashTable的对比</li>
<li>HashTable和ConcurrentHashMap对比</li>
</ul>
<h1 id="Java锁"><a href="#Java锁" class="headerlink" title="Java锁"></a>Java锁</h1><h2 id="Java-15锁，列举一些？"><a href="#Java-15锁，列举一些？" class="headerlink" title="Java 15锁，列举一些？"></a>Java 15锁，列举一些？</h2><p>1.公平锁 / 非公平锁<br>2.可重入锁 / 不可重入锁<br>3.独享锁 / 共享锁<br>4.互斥锁 / 读写锁<br>5.乐观锁 / 悲观锁<br>6.分段锁<br>7.偏向锁 / 轻量级锁 / 重量级锁<br>8.自旋锁</p>
<h2 id="公平和非公平锁是什么？两者区别（优缺点）？两种锁举例？"><a href="#公平和非公平锁是什么？两者区别（优缺点）？两种锁举例？" class="headerlink" title="公平和非公平锁是什么？两者区别（优缺点）？两种锁举例？"></a>公平和非公平锁是什么？两者区别（优缺点）？两种锁举例？</h2><p>是什么？</p>
<ul>
<li>公平锁：多个线程按照申请锁的顺序来获取锁。</li>
<li>非公平锁：多个线程获取锁的顺序不是按照申请舒顺序来的，有可能后申请的线程比先申请的线程优先获取锁。<pre><code>高并发下，有可能造成优先级反转或者饥饿现象。</code></pre></li>
</ul>
<p>区别：</p>
<ul>
<li>公平锁：保证顺序（队列，FIFO），性能下降。</li>
<li>非公平：先尝试直接占有锁，如果尝试失败，再采用类似公平锁的方式。优点在于吞吐量比公平锁大。</li>
</ul>
<p>举例：</p>
<ul>
<li>ReentrantLock可以指定创建公平锁或非公平锁，无参构造默认创建非公平锁。</li>
<li>synchronized是非公平的。</li>
</ul>
<h2 id="可重入锁是什么？与不可重入的区别？可重入锁举例？作用？实现原理？"><a href="#可重入锁是什么？与不可重入的区别？可重入锁举例？作用？实现原理？" class="headerlink" title="可重入锁是什么？与不可重入的区别？可重入锁举例？作用？实现原理？"></a>可重入锁是什么？与不可重入的区别？可重入锁举例？作用？实现原理？</h2><p>是什么？</p>
<ul>
<li>也叫递归锁</li>
<li>当一个线程获取某个对象锁后，可以再次获取同一把对象锁。</li>
<li>即，线程可进入任何他所拥有的对象锁所同步着的代码块。</li>
</ul>
<p>区别？</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span>  <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span></span>&#123;</span><br><span class="line">      m1();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<ul>
<li>可重入锁：某线程进入外层m1后，可以再次进入递归m1方法。也叫递归锁。</li>
<li>不可重入锁：某线程进入外部m1后，不可再进如内部m1，必须等待锁释放。这里就造成了死锁。</li>
</ul>
<p>举例：</p>
<ul>
<li>ReentrantLock/synchronized就是典型的可重入锁</li>
</ul>
<p>作用：</p>
<ul>
<li>避免死锁。案例：递归</li>
</ul>
<p>实现原理：</p>
<ul>
<li>计数器：进入最外层计数器=1，每递归一次，计数器+1，每退出一层，计数器-1，直到计数器=0，说明退出了最外层，此时该线程释放锁对象，其他线程才能获取该锁。</li>
</ul>
<h2 id="可重入锁代码验证"><a href="#可重入锁代码验证" class="headerlink" title="可重入锁代码验证"></a>可重入锁代码验证</h2><p>synchronized</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedLockDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"----m1----"</span>);</span><br><span class="line">        m2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"----m2----"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可以看出，m1,m2是同一把锁，只有线程释放最外层锁，其他线程才能占用该锁。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SynchronizedLockDemo rd = <span class="keyword">new</span> SynchronizedLockDemo();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                rd.m1();</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//0----m1----</span></span><br><span class="line">    <span class="comment">//0----m2----</span></span><br><span class="line">    <span class="comment">//4----m1----</span></span><br><span class="line">    <span class="comment">//4----m2----</span></span><br><span class="line">    <span class="comment">//3----m1----</span></span><br><span class="line">    <span class="comment">//3----m2----</span></span><br><span class="line">    <span class="comment">//2----m1----</span></span><br><span class="line">    <span class="comment">//2----m2----</span></span><br><span class="line">    <span class="comment">//1----m1----</span></span><br><span class="line">    <span class="comment">//1----m2----</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>ReentrantLock</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReentrantLockDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line"><span class="comment">//        lock.lock();</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"----m1----"</span>);</span><br><span class="line">            m2();</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line"><span class="comment">//            lock.unlock();</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"----m2----"</span>);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 锁要成对出现，否则：</span></span><br><span class="line"><span class="comment">     *  - 多一个lock.lock()会造成锁无法释放,程序卡住</span></span><br><span class="line"><span class="comment">     *  - 多一个lock.unlock()直接报错</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ReentrantLockDemo rd = <span class="keyword">new</span> ReentrantLockDemo();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                rd.m1();</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//0----m1----</span></span><br><span class="line">        <span class="comment">//0----m2----</span></span><br><span class="line">        <span class="comment">//2----m1----</span></span><br><span class="line">        <span class="comment">//2----m2----</span></span><br><span class="line">        <span class="comment">//1----m1----</span></span><br><span class="line">        <span class="comment">//1----m2----</span></span><br><span class="line">        <span class="comment">//3----m1----</span></span><br><span class="line">        <span class="comment">//3----m2----</span></span><br><span class="line">        <span class="comment">//4----m1----</span></span><br><span class="line">        <span class="comment">//4----m2----</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="自旋锁是什么？优点？缺点？"><a href="#自旋锁是什么？优点？缺点？" class="headerlink" title="自旋锁是什么？优点？缺点？"></a>自旋锁是什么？优点？缺点？</h2><ul>
<li>自旋锁（spinlock）是指尝试获取锁的对象不会立即阻塞，而是采用循环的方式取尝试获取锁。好处是减少线程上下文切换的消耗，缺点是循环会消耗CPU</li>
</ul>
<h2 id="手写一个自旋锁"><a href="#手写一个自旋锁" class="headerlink" title="手写一个自旋锁"></a>手写一个自旋锁</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpinLockDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手写自旋锁</span></span><br><span class="line"><span class="comment">     * 自旋锁的核心：while+cas+原子引用线程</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * A线程加锁，一顿操作5秒钟，解锁。B线程一直自旋等待A线程释放锁，然后获取锁。</span></span><br><span class="line"><span class="comment">     * 打印结果：</span></span><br><span class="line"><span class="comment">     * A尝试获取锁</span></span><br><span class="line"><span class="comment">     * A成功获取锁</span></span><br><span class="line"><span class="comment">     * A一顿操作5秒...</span></span><br><span class="line"><span class="comment">     * B尝试获取锁</span></span><br><span class="line"><span class="comment">     * A释放锁</span></span><br><span class="line"><span class="comment">     * B成功获取锁</span></span><br><span class="line"><span class="comment">     * B一顿操作</span></span><br><span class="line"><span class="comment">     * B释放锁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpinLockDemo sDemo = <span class="keyword">new</span> SpinLockDemo();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            sDemo.myLock();</span><br><span class="line"></span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"一顿操作5秒..."</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;TimeUnit.SECONDS.sleep(<span class="number">5</span>);&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;e.printStackTrace();&#125;</span><br><span class="line"></span><br><span class="line">            sDemo.myUnLock();</span><br><span class="line"></span><br><span class="line">        &#125;,<span class="string">"A"</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 保证线程A先上的锁</span></span><br><span class="line">        <span class="keyword">try</span> &#123;TimeUnit.SECONDS.sleep(<span class="number">1</span>);&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;e.printStackTrace();&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            sDemo.myLock();</span><br><span class="line"></span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"一顿操作"</span>);</span><br><span class="line"></span><br><span class="line">            sDemo.myUnLock();</span><br><span class="line"></span><br><span class="line">        &#125;,<span class="string">"B"</span>).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    AtomicReference atomicThreadRef = <span class="keyword">new</span> AtomicReference&lt;Thread&gt;();</span><br><span class="line">    <span class="comment">// 加锁</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myLock</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 线程A进来，发现是null值，成功操作cas把自己放进去</span></span><br><span class="line">        <span class="comment">// 线程B进来，发现不是null值，一直自旋等待线程A释放锁</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"尝试获取锁"</span>);</span><br><span class="line">        <span class="keyword">while</span> (!atomicThreadRef.compareAndSet(<span class="keyword">null</span>,Thread.currentThread()))&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"成功获取锁"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放锁</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myUnLock</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 线程A发现原子引用是自己，于是cas成功修改为null值，即释放锁</span></span><br><span class="line">        atomicThreadRef.compareAndSet(Thread.currentThread(),<span class="keyword">null</span>);</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"释放锁"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="独占锁和共享锁是什么？举例？优缺点比较？"><a href="#独占锁和共享锁是什么？举例？优缺点比较？" class="headerlink" title="独占锁和共享锁是什么？举例？优缺点比较？"></a>独占锁和共享锁是什么？举例？优缺点比较？</h2><p>是什么？</p>
<ul>
<li>独占锁：写锁，该锁只能被一个线程所持有。</li>
<li>共享锁：读锁，该锁可被多个线程所持有。</li>
</ul>
<p>举例</p>
<ul>
<li>ReentrantLock和sychronized都是独占锁。</li>
<li>ReentrantReadWriteLock，其读锁是共享锁，写锁是独占锁。</li>
</ul>
<p>优缺：</p>
<ul>
<li>共享锁保证并发读是非常高效的；读写、写读、写写过程是互斥的。</li>
</ul>
<h2 id="验证读写锁ReentrantReadWriteLock"><a href="#验证读写锁ReentrantReadWriteLock" class="headerlink" title="验证读写锁ReentrantReadWriteLock"></a>验证读写锁ReentrantReadWriteLock</h2><p>并发读写不安全演示</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadWriteUnsafeDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Map&lt;Integer,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myPut</span><span class="params">(Integer key, String value)</span></span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"\t"</span> + <span class="string">"正在写入："</span>+key);</span><br><span class="line">        map.put(key ,value);</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"\t"</span> + <span class="string">"写入完成："</span>+key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myGet</span><span class="params">(Integer key)</span></span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"\t"</span> + <span class="string">"正在读取："</span>+key);</span><br><span class="line">        String value = map.get(key);</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"\t"</span> + <span class="string">"读取完成："</span>+key+<span class="string">","</span>+value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 并发读写不安全演示</span></span><br><span class="line"><span class="comment">     * 打印：</span></span><br><span class="line"><span class="comment">     * 0	正在写入：0</span></span><br><span class="line"><span class="comment">     * 2	正在写入：2</span></span><br><span class="line"><span class="comment">     * 4	正在写入：4</span></span><br><span class="line"><span class="comment">     * 3	正在写入：3</span></span><br><span class="line"><span class="comment">     * 1	正在写入：1</span></span><br><span class="line"><span class="comment">     * 3	写入完成：3</span></span><br><span class="line"><span class="comment">     * 0	正在读取：0</span></span><br><span class="line"><span class="comment">     * 4	写入完成：4</span></span><br><span class="line"><span class="comment">     * 0	读取完成：0,0</span></span><br><span class="line"><span class="comment">     * 2	写入完成：2</span></span><br><span class="line"><span class="comment">     * 0	写入完成：0</span></span><br><span class="line"><span class="comment">     * ...</span></span><br><span class="line"><span class="comment">     * 结论：写入不是原子操作，线程不安全</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 只锁put不锁get会发生什么？</span></span><br><span class="line"><span class="comment">     * 2	正在写入</span></span><br><span class="line"><span class="comment">     * 0	正在读取</span></span><br><span class="line"><span class="comment">     * 2	写入完成：2</span></span><br><span class="line"><span class="comment">     * 造成写时读，不安全。没有保证写的原子性。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ReadWriteUnsafeDemo demo = <span class="keyword">new</span> ReadWriteUnsafeDemo();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; ++i)&#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> tmp = i;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                demo.myPut(tmp,String.valueOf(tmp));</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; ++i)&#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> tmp = i;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                demo.myGet(tmp);</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>验证读写锁ReentrantReadWriteLock</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadWriteLockDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 缓存资源都加一下volatile，保证线程间可见</span></span><br><span class="line">    <span class="keyword">volatile</span> Map&lt;Integer,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    ReadWriteLock rwLock = <span class="keyword">new</span> ReentrantReadWriteLock();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myPut</span><span class="params">(Integer key, String value)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        rwLock.writeLock().lock();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"\t"</span> + <span class="string">"正在写入"</span>);</span><br><span class="line">            map.put(key ,value);</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"\t"</span> + <span class="string">"写入完成："</span>+key);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            rwLock.writeLock().unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myGet</span><span class="params">(Integer key)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        rwLock.readLock().lock();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"\t"</span> + <span class="string">"正在读取"</span>);</span><br><span class="line">            String value = map.get(key);</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"\t"</span> + <span class="string">"读取完成："</span>+value);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            rwLock.readLock().unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 要求：</span></span><br><span class="line"><span class="comment">     * - 读可并发</span></span><br><span class="line"><span class="comment">     * - 写和任何操作互斥</span></span><br><span class="line"><span class="comment">     * 核心：ReentrantReadWriteLock + volatile</span></span><br><span class="line"><span class="comment">     * 打印：</span></span><br><span class="line"><span class="comment">     * 2	正在写入</span></span><br><span class="line"><span class="comment">     * 2	写入完成：2</span></span><br><span class="line"><span class="comment">     * 3	正在写入</span></span><br><span class="line"><span class="comment">     * 3	写入完成：3</span></span><br><span class="line"><span class="comment">     * 4	正在写入</span></span><br><span class="line"><span class="comment">     * 4	写入完成：4</span></span><br><span class="line"><span class="comment">     * 4	正在读取</span></span><br><span class="line"><span class="comment">     * 2	正在读取</span></span><br><span class="line"><span class="comment">     * 1	正在读取</span></span><br><span class="line"><span class="comment">     * 1	读取完成：1</span></span><br><span class="line"><span class="comment">     * 3	正在读取</span></span><br><span class="line"><span class="comment">     * 结论：读写锁保证了写原子性，读并发</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ReadWriteLockDemo demo = <span class="keyword">new</span> ReadWriteLockDemo();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; ++i)&#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> tmp = i;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                demo.myPut(tmp,String.valueOf(tmp));</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; ++i)&#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> tmp = i;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                demo.myGet(tmp);</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="什么是乐观锁-悲观锁？举例？"><a href="#什么是乐观锁-悲观锁？举例？" class="headerlink" title="什么是乐观锁/悲观锁？举例？"></a>什么是乐观锁/悲观锁？举例？</h2><p>悲观锁</p>
<ul>
<li>总是假设最坏的情况，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，Java中synchronized和ReentrantLock等<strong>独占锁就是悲观锁思想的实现</strong>。</li>
</ul>
<p>乐观锁</p>
<ul>
<li>总是假设最好的情况，每次去拿数据的时候都认为别人不会修改，所以不会上锁，采用版本号+cas的方式去保证线程安全。乐观锁适用于多读写少的应用类型，这样可以提高吞吐量。atomic包的类就是基于cas实现乐观锁的。</li>
</ul>
<h2 id="什么是乐观读-悲观读？"><a href="#什么是乐观读-悲观读？" class="headerlink" title="什么是乐观读/悲观读？"></a>什么是乐观读/悲观读？</h2><ul>
<li>悲观读：在没有任何读写锁的时候才能取得写入的锁，可用于实现悲观读取（读优先，没有读时才能写），读多写少的场景下可能会出现线程饥饿。 </li>
<li>乐观读：如果读多写少，就乐观的认为读写同时发生的情况少，因此不采用完全锁定的方式，而是采用cas实现乐观锁。</li>
</ul>
<h2 id="ReentrantReadWriteLock是乐观读还是悲观读？"><a href="#ReentrantReadWriteLock是乐观读还是悲观读？" class="headerlink" title="ReentrantReadWriteLock是乐观读还是悲观读？"></a>ReentrantReadWriteLock是乐观读还是悲观读？</h2><p>读优先：在没有任何读写锁的时候才能取得写入的锁，可用于实现悲观读取（读优先，没有读时才能写），读多写少的场景下可能会出现线程饥饿。</p>
<h2 id="StempedLock作用？"><a href="#StempedLock作用？" class="headerlink" title="StempedLock作用？"></a>StempedLock作用？</h2><p>参考：blog/2018/10/27/20181027234153307/#7-5-ReentrantLock与锁</p>
<p>它控制锁有三种模式（写、悲观读、乐观读）。</p>
<p>核心代码：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> StampedLock sl = <span class="keyword">new</span> StampedLock();</span><br><span class="line"><span class="keyword">long</span> stamp = sl.tryOptimisticRead(); <span class="comment">//获得一个乐观读锁</span></span><br><span class="line"><span class="comment">// stamp=0表示没有写锁入侵，</span></span><br><span class="line"><span class="keyword">long</span> stamp = sl.readLock(); <span class="comment">// 获取悲观读锁</span></span><br><span class="line"><span class="keyword">long</span> stamp = lock.writeLock();<span class="comment">// 获得写锁</span></span><br></pre></td></tr></table></figure></div>



]]></content>
      <categories>
        <category>Java面试笔试</category>
      </categories>
      <tags>
        <tag>Java面试笔试</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM</title>
    <url>/2020/02/15/20200215102406916/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>参考：</p>
<ul>
<li><p><a href="http://www.atguigu.com" target="_blank" rel="noopener">www.atguigu.com</a></p>
</li>
<li><p><a href="https://www.bilibili.com/video/av70166821?p=13" target="_blank" rel="noopener">https://www.bilibili.com/video/av70166821?p=13</a></p>
</li>
</ul>
</blockquote>
<h1 id="JVM体系结构"><a href="#JVM体系结构" class="headerlink" title="JVM体系结构"></a>JVM体系结构</h1><h2 id="JVM类型"><a href="#JVM类型" class="headerlink" title="JVM类型"></a>JVM类型</h2><p>HotSpot</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sh</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; java -version</span><br><span class="line">java version <span class="string">"1.8.0_231"</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_231-b11)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.231-b11, mixed mode)</span><br></pre></td></tr></table></figure></div>



<h2 id="JVM架构图"><a href="#JVM架构图" class="headerlink" title="JVM架构图"></a>JVM架构图</h2><a href="/2020/02/15/20200215102406916/image-20200215124708658.png" data-fancybox="group" data-caption="image-20200215124708658" class="fancybox"><img alt="image-20200215124708658" style="zoom:80%;" title="image-20200215124708658" data-src="/2020/02/15/20200215102406916/image-20200215124708658.png" class="lazyload"></a>

<p>灰色：线程私有，内存很小（kb），不存在垃圾回收（因为生命周期随线程生死）。</p>
<p>橘色：线程共享，存在垃圾回收，大部分垃圾回收都是收的堆。</p>
<h2 id="类装载器ClassLoader"><a href="#类装载器ClassLoader" class="headerlink" title="类装载器ClassLoader"></a>类装载器ClassLoader</h2><p>负责加载class文件，class文件在文件开头有<strong>特定的文件标示（cafe babe）</strong>，将class文件字节码内容加载到内存中，并将这些内容转换成方法区中的运行时数据结构并且ClassLoader只负责class文件的加载，至于它是否可以运行，则由Execution Engine决定</p>
<a href="/2020/02/15/20200215102406916/image-20200215112732617.png" data-fancybox="group" data-caption="image-20200215112732617" class="fancybox"><img alt="image-20200215112732617" style="zoom:80%;" title="image-20200215112732617" data-src="/2020/02/15/20200215102406916/image-20200215112732617.png" class="lazyload"></a>

<h3 id="ClassLoader类型"><a href="#ClassLoader类型" class="headerlink" title="ClassLoader类型"></a><strong>ClassLoader类型</strong></h3><ul>
<li>虚拟机自带的加载器<ul>
<li>启动类加载器（Bootstrap）C++</li>
<li>扩展类加载器（Extension）Java</li>
<li>应用程序类加载器（AppClassLoader）Java也叫系统类加载器，加载当前应用的classpath的所有类</li>
</ul>
</li>
<li>用户自定义加载器<ul>
<li>Java.lang.ClassLoader的子类，用户可以定制类的加载方式</li>
</ul>
</li>
</ul>
<a href="/2020/02/15/20200215102406916/image-20200215115409132.png" data-fancybox="group" data-caption="image-20200215115409132" class="fancybox"><img alt="image-20200215115409132" style="zoom:80%;" title="image-20200215115409132" data-src="/2020/02/15/20200215102406916/image-20200215115409132.png" class="lazyload"></a>

<p>这些加载器的使用场合？</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mxx.jvm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyObject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. java自带的用Bootstrap</span></span><br><span class="line">        <span class="comment">// 因为根加载器（Bootstrap）一开始就加载了这些类</span></span><br><span class="line">        <span class="comment">// jre/lib/rt.jar包一启动就加载进了JVM里</span></span><br><span class="line">        Object object = <span class="keyword">new</span> Object();</span><br><span class="line">        System.out.println(object.getClass().getClassLoader()); <span class="comment">// null，因为Bootstrap是c++写的</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 用户自己写的用AppClassLoader</span></span><br><span class="line">        <span class="comment">// sun.misc.Launcher就是JVM相关调用的入口程序</span></span><br><span class="line">        MyObject myObject = <span class="keyword">new</span> MyObject();</span><br><span class="line">        System.out.println(myObject.getClass().getClassLoader().getParent().getParent());<span class="comment">// null</span></span><br><span class="line">        System.out.println(myObject.getClass().getClassLoader().getParent());<span class="comment">// sun.misc.Launcher$ExtClassLoader@1b6d3586</span></span><br><span class="line">        System.out.println(myObject.getClass().getClassLoader()); <span class="comment">// sun.misc.Launcher$AppClassLoader@18b4aac2</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. javax开头的包就是使用扩展类加载器（Extension）加载的</span></span><br><span class="line">        <span class="comment">// lib/ext/*里面的jar包会被装载</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 4. 用户自定义，继承java.lang.ClassLoader</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="双亲委派机制-沙箱安全机制"><a href="#双亲委派机制-沙箱安全机制" class="headerlink" title="双亲委派机制 沙箱安全机制"></a><strong>双亲委派机制 沙箱安全机制</strong></h3><p>双亲委派机制：</p>
<p>一个类是如何找加载器的？</p>
<p>当一个类收到了类加载请求，他首先不会尝试自己去加载这个类，而是把这个请求委派给父类去完成，每一个层次类加载器都是如此，因此所有的加载请求都应该传送到启动类加载其中，只有当父类加载器反馈自己无法完成这个请求的时候（在它的加载路径下没有找到所需加载的Class），子类加载器才会尝试自己去加载。</p>
<p>采用双亲委派的一个好处是比如加载位于 rt.jar 包中的类 java.lang.Object，不管是哪个加载器加载这个类，最终都是委托给顶层的启动类加载器进行加载，这样就保证了使用不同的类加载器最终得到的都是同样一个 Object对象。 </p>
<p>证明：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">String</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello"</span>);</span><br><span class="line">        <span class="comment">// 会报错：错误: 在类 java.lang.String 中找不到 main 方法</span></span><br><span class="line">        <span class="comment">// 因为先找的Bootstrap，结果直接找到了。所以用户自定义的这个类是无法被加载的。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>即，你写的代码不能污染java源代码，</p>
<hr>
<p>沙箱安全机制：<br>沙箱安全机制是由基于双亲委派机制上 采取的一种JVM的自我保护机制,假设你要写一个java.lang.String 的类,由于双亲委派机制的原理,此请求会先交给Bootstrap试图进行加载,但是Bootstrap在加载类时首先通过包和类名查找rt.jar中有没有该类,有则优先加载rt.jar包中的类,因此就保证了java的运行机制不会被破坏.</p>
<h2 id="Execution-Engine执行引擎"><a href="#Execution-Engine执行引擎" class="headerlink" title="Execution Engine执行引擎"></a>Execution Engine执行引擎</h2><p>负责解释命令，提交操作系统执行。</p>
<h2 id="Native-Method-Stack-amp-Native-Interface-amp-native-libraies"><a href="#Native-Method-Stack-amp-Native-Interface-amp-native-libraies" class="headerlink" title="Native Method Stack &amp; Native Interface &amp; native libraies"></a>Native Method Stack &amp; Native Interface &amp; native libraies</h2><p>本地接口的作用是融合不同的编程语言为 Java 所用，它的初衷是融合 C/C++程序，Java 诞生的时候是 C/C++横行的时候，要想立足，必须有调用 C/C++程序，就在内存中专门开辟了一块区域处理标记为native的代码，它的具体做法是 Native Method Stack中登记 native方法，在Execution Engine 执行时加载native libraies。</p>
<p>目前该方法使用的越来越少了，除非是与硬件有关的应用，比如通过Java程序驱动打印机或者Java系统管理生产设备，<strong>在企业级应用中已经比较少见</strong>。因为现在的<strong>异构领域间的通信很发达</strong>（因此不用关心内部），比如可以使用 Socket通信，也可以使用Web Service等等</p>
<p>native方法举例</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Thread().start();</span><br><span class="line"><span class="comment">// 核心源码：</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">start0</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 线程是系统级的，需要底层操作系统支持。而native申明的方法就是调用的本地方法库。</span></span><br><span class="line"><span class="comment">// 这个方法只有申明，实现是交给底层的。</span></span><br><span class="line"><span class="comment">// 如果是native方法，就放native栈里。</span></span><br></pre></td></tr></table></figure></div>



<h2 id="PC寄存器"><a href="#PC寄存器" class="headerlink" title="PC寄存器"></a>PC寄存器</h2><p>每个线程都有一个程序计数器，是线程私有的,就是一个指针，指向方法区中的方法字节码（<strong>用来存储指向下一条指令的地址,也即将要执行的指令代码</strong>），由执行引擎读取下一条指令，是一个非常小的内存空间，几乎可以忽略不记。</p>
<p>这块内存区域很小，它是<strong>当前线程所执行的字节码的行号指示器</strong>，字节码解释器通过改变这个计数器的值来选取下一条需要执行的字节码指令。</p>
<p>如果执行的是一个Native方法，那这个计数器是空的。</p>
<p>用以完成分支、循环、跳转、异常处理、线程恢复等基础功能。不会发生内存溢出(OutOfMemory=OOM)错误。（占用很小，只是记个行号）</p>
<h2 id="Method-Area-方法区"><a href="#Method-Area-方法区" class="headerlink" title="Method Area 方法区"></a>Method Area 方法区</h2><p>供各线程共享的运行时内存区域。<strong>它存储了每一个类的结构信息（Xxx.class–&gt;classLoader –&gt;Xxx Class，这个Xxx Class就存在方法区里）</strong>，例如<strong>运行时常量池（Runtime Constant Pool）</strong>、字段和方法数据、构造函数和普通方法的字节码内容。上面讲的是规范，在不同虚拟机里头实现是不一样的，最典型的就是永久代(PermGen space)和元空间(Metaspace)。</p>
<p>But</p>
<p>实例变量存在堆内存中,和方法区无关。</p>
<h2 id="Stack栈"><a href="#Stack栈" class="headerlink" title="Stack栈"></a>Stack栈</h2><p>栈管运行，堆管存储。</p>
<p>栈也叫栈内存，主管Java程序的运行，是在线程创建时创建，它的生命期是跟随线程的生命期，线程结束栈内存也就释放，<strong>对于栈来说不存在垃圾回收问题</strong>，只要线程一结束该栈就Over，生命周期和线程一致，是线程私有的。<strong>8种基本类型的变量+对象的引用变量+实例方法都是在函数的栈内存中分配</strong>。</p>
<p>函数栈内存：<br>基本类型：int，long，float<br>引用变量：User = new User();  等号左边叫引用变量<br>实例方法：user.eat()</p>
<p>Java方法 = 栈帧        （就是把方法压栈的意思）</p>
<a href="/2020/02/15/20200215102406916/image-20200215150006565.png" data-fancybox="group" data-caption="image-20200215150006565" class="fancybox"><img alt="image-20200215150006565" style="zoom:80%;" title="image-20200215150006565" data-src="/2020/02/15/20200215102406916/image-20200215150006565.png" class="lazyload"></a>

<p><strong>栈存储什么?</strong><br>栈帧中主要保存3 类数据：<br>本地变量（Local Variables）:输入参数和输出参数以及方法内的变量；<br>栈操作（Operand Stack）:记录出栈、入栈的操作；<br>栈帧数据（Frame Data）:包括类文件、方法等等。</p>
<p><strong>栈运行原理：</strong></p>
<p>栈中的数据都是以栈帧（Stack Frame）的格式存在，栈帧是一个内存区块，是一个数据集，是一个有关方法(Method)和运行期数据的数据集，<strong>当一个方法A被调用时就产生了一个栈帧 F1，并被压入到栈中</strong>。</p>
<p>A方法又调用了 B方法，于是产生栈帧 F2 也被压入栈，<br>B方法又调用了 C方法，于是产生栈帧 F3 也被压入栈，<br>……<br>执行完毕后，先弹出F3栈帧，再弹出F2栈帧，再弹出F1栈帧……<br>遵循“先进后出”/“后进先出”原则。</p>
<p>每个方法执行的同时都会创建一个栈帧，用于存储<strong>局部变量表（方法内的参数）、操作数栈、动态链接、方法出口等信息</strong>，每一个方法从调用直至执行完毕的过程，就对应着一个栈帧在虚拟机中入栈到出栈的过程。栈的大小和具体JVM的实现有关，通常在256K~756K之间,与等于1Mb左右。</p>
<p><strong>SOF(StackOverflowError)</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mxx.jvm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stack</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        m1();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        m1();</span><br><span class="line">        <span class="comment">// Exception in thread "main" java.lang.StackOverflowError</span></span><br><span class="line">        <span class="comment">// 使用递归把java栈压爆</span></span><br><span class="line">        <span class="comment">// 原理：方法的加载，深度调用使栈被压爆。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这不是异常，属于错误</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.lang.Object </span><br><span class="line">	java.lang.Throwable </span><br><span class="line">		java.lang.Error </span><br><span class="line">			java.lang.VirtualMachineError </span><br><span class="line">				java.lang.StackOverflowError</span><br></pre></td></tr></table></figure></div>



<h2 id="栈-堆-方法区的交互关系"><a href="#栈-堆-方法区的交互关系" class="headerlink" title="栈+堆+方法区的交互关系"></a>栈+堆+方法区的交互关系</h2><a href="/2020/02/15/20200215102406916/image-20200215152824741.png" data-fancybox="group" data-caption="image-20200215152824741" class="fancybox"><img alt="image-20200215152824741" style="zoom:80%;" title="image-20200215152824741" data-src="/2020/02/15/20200215102406916/image-20200215152824741.png" class="lazyload"></a>

<p>User user = new User()</p>
<p>reference: 就是等号左边的引用user<br>referrence指向右边的实例对象，这个对象存在堆里。<br>实例对象里有指针，指向对象类型数据，这类型数据存在方法区里。</p>
<p>HotSpot是使用指针的方式来访问对象：<br>Java堆中会存放访问类元数据的地址（类结构信息），<br>reference存储的就直接是对象的地址</p>
<h1 id="堆体系结构"><a href="#堆体系结构" class="headerlink" title="堆体系结构"></a>堆体系结构</h1><h2 id="堆结构简介"><a href="#堆结构简介" class="headerlink" title="堆结构简介"></a>堆结构简介</h2><p>一个JVM实例只存在一个堆内存，堆内存的大小是可以调节的。类加载器读取了类文件后，需要把类、方法、常变量放到堆内存中，保存所有引用类型的真实信息，以方便执行器执行，堆内存分为三部分</p>
<a href="/2020/02/15/20200215102406916/image-20200215161821093.png" data-fancybox="group" data-caption="image-20200215161821093" class="fancybox"><img alt="image-20200215161821093" style="zoom:80%;" title="image-20200215161821093" data-src="/2020/02/15/20200215102406916/image-20200215161821093.png" class="lazyload"></a>

<p>一个JVM实例只存在一个堆内存，堆内存的大小是可以调节的。类加载器读取了类文件后，需要把类、方法、常变量放到堆内存中，保存所有引用类型的真实信息，以方便执行器执行。</p>
<p>堆内存逻辑上分为三部分：新生+养老+永久<br>物理上：新生+养老</p>
<h2 id="字符串常量池"><a href="#字符串常量池" class="headerlink" title="字符串常量池"></a>字符串常量池</h2><p>字符串虽然是引用类型，但传进方法是无法改变方法外部的值的。为什么？<br>因为存在字符串常量池</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">changeStr</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        str = <span class="string">"bbb"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"aaa"</span>;</span><br><span class="line">        changeStr(str);</span><br><span class="line">        System.out.println(str);    <span class="comment">// aaa</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>原理：</p>
<a href="/2020/02/15/20200215102406916/image-20200215171959791.png" data-fancybox="group" data-caption="image-20200215171959791" class="fancybox"><img alt="image-20200215171959791" style="zoom:80%;" title="image-20200215171959791" data-src="/2020/02/15/20200215102406916/image-20200215171959791.png" class="lazyload"></a>

<h2 id="堆的new对象流程"><a href="#堆的new对象流程" class="headerlink" title="堆的new对象流程"></a>堆的new对象流程</h2><ol>
<li><p>new Book()是new在新生代伊甸园区</p>
</li>
<li><p>当伊甸园区用完，程序又需要创建对象，就会触发GC（或者叫YGC，Young GC）</p>
</li>
<li><p>YGC将伊甸园区中的不再被其他对象所引用的对象进行销毁</p>
</li>
<li><p>然后将伊甸园中的剩余对象移动到幸存 0区（S0区）</p>
</li>
<li><p>如果一直往伊甸园new对象，就造成幸存 0区也满了，再对该区进行垃圾回收，然后移动到 1 区。</p>
</li>
<li><p>那如果1 区也满了呢？再移动到养老区。</p>
</li>
<li><p>若养老区也满了，那么这个时候将产生MajorGC（FullGC，FGC），进行养老区的内存清理。</p>
</li>
<li><p>若养老区执行了Full GC之后发现依然无法进行对象的保存，就会产生OOM异常“OutOfMemoryError”。</p>
<p>如果出现java.lang.OutOfMemoryError: Java heap space异常，说明Java虚拟机的堆内存不够。原因有二：</p>
<p>（1）Java虚拟机的堆内存设置不够，可以通过参数-Xms、-Xmx来调整。</p>
<p>（2）代码中创建了大量大对象，并且长时间不能被垃圾收集器收集（存在被引用）。</p>
</li>
</ol>
<h1 id="堆参数调优"><a href="#堆参数调优" class="headerlink" title="堆参数调优"></a>堆参数调优</h1><h1 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h1><p>面试高频考点在java栈和堆。其他几个结构需要浅层理解功能作用。</p>
<p>难记：*</p>
<ol>
<li>什么是类加载器</li>
<li>装载器类型？</li>
<li>双亲委派机制？沙箱安全机制？</li>
<li>native是什么东西？为什么有申明无实现？</li>
<li>pc寄存器是什么？</li>
<li>方法区</li>
<li>栈是干嘛的？</li>
<li>*函数的栈内存保存了哪些东西？</li>
<li>*栈帧中主要保存什么数据？</li>
<li>栈运行原理？</li>
<li>StackOverflowError是怎么发生的？</li>
<li>栈+堆+方法区的交互关系</li>
</ol>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>Java面试笔试</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>SparkCore</title>
    <url>/2020/02/13/20200213103244757/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>引言：</p>
<p>RDD（Resilient Distributed Dataset）叫做分布式数据集，是 Spark 中最基本的数据抽象。<br>代码中是一个抽象类， 它代表一个不可变、可分区、里面的元素可并行计算的集合。  </p>
<p>参考：    </p>
<ul>
<li><a href="http://www.atguigu.com/" target="_blank" rel="noopener">www.atguigu.com</a></li>
<li><a href="https://www.bilibili.com/video/av62992342?from=search&amp;seid=11601397416766722848" target="_blank" rel="noopener">https://www.bilibili.com/video/av62992342?from=search&amp;seid=11601397416766722848</a></li>
</ul>
</blockquote>
<p>[toc]</p>
<h1 id="RDD概述"><a href="#RDD概述" class="headerlink" title="RDD概述"></a>RDD概述</h1><h2 id="javaIO和RDD"><a href="#javaIO和RDD" class="headerlink" title="javaIO和RDD"></a>javaIO和RDD</h2><p><strong>java IO</strong></p>
<a href="/2020/02/13/20200213103244757/image-20200213105119461.png" data-fancybox="group" data-caption="image-20200213105119461" class="fancybox"><img alt="image-20200213105119461" style="zoom:80%;" title="image-20200213105119461" data-src="/2020/02/13/20200213103244757/image-20200213105119461.png" class="lazyload"></a>

<p>只是结构转换，真正readLine的时候，才开始去读</p>
<hr>
<p><strong>RDD简介</strong></p>
<p><a href="/2020/02/13/20200213103244757/image-20200213110320014.png" data-fancybox="group" data-caption="image-20200213110320014" class="fancybox"><img alt="image-20200213110320014" title="image-20200213110320014" data-src="/2020/02/13/20200213103244757/image-20200213110320014.png" class="lazyload"></a></p>
<p>RDD是抽象类，和IO的InputStream类似，底下有不同的实现类。</p>
<p>RDD适合分布式读文件，javaIO只适合读特定文件。</p>
<p>只有collect时候，才开始真正读取。RDD只封装了数据处理逻辑，并没有在处理数据。而javaIO里面还是有Buffer的。</p>
<h2 id="RDD介绍"><a href="#RDD介绍" class="headerlink" title="RDD介绍"></a>RDD介绍</h2><p>RDD（Resilient Distributed Dataset）叫做分布式数据集，是 Spark 中最基本的数据抽象。<br>代码中是一个抽象类， 它代表一个不可变（为了保护数据）、可分区（为了并行计算）、里面的元素可并行计算的集合。  </p>
<p>属性：</p>
<p>一个列表，存储存取每个 Partition 的优先位置（preferred location）。  （将计算任务发给数据所在节点：移动数据不如移动计算）</p>
<p>特点：</p>
<ul>
<li><p>分区</p>
</li>
<li><p>只读</p>
<p>操作（算子，Operate）：解决问题就是状态转换。</p>
<p>所有RDD方法都叫算子，分两类：转换算子，行动算子</p>
</li>
<li><p>依赖</p>
</li>
<li><p>缓存</p>
<p>血缘关系很长时，为了防止丢失，可以缓存起来。</p>
</li>
</ul>
<h1 id="RDD编程"><a href="#RDD编程" class="headerlink" title="RDD编程"></a>RDD编程</h1><h2 id="RDD创建"><a href="#RDD创建" class="headerlink" title="RDD创建"></a>RDD创建</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mxx.spark</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">C01_RDD</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// 获得sc</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[*]"</span>).setAppName(<span class="string">"WordCount"</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建RDD</span></span><br><span class="line">    <span class="comment">// 1) 从内存中创建 makeRDD, 底层实现就是parallelize</span></span><br><span class="line">    <span class="keyword">val</span> listRDD: <span class="type">RDD</span>[<span class="type">Int</span>] = sc.makeRDD(<span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">    <span class="comment">// 2) 从内存中创建 parallelize</span></span><br><span class="line">    <span class="keyword">val</span> listRDD2: <span class="type">RDD</span>[<span class="type">Int</span>] = sc.parallelize(<span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">    <span class="comment">// 3) 从外部存储中创建</span></span><br><span class="line">    sc.textFile(<span class="string">"in"</span>)</span><br><span class="line"></span><br><span class="line">    listRDD.collect().foreach(println)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="RDD分区"><a href="#RDD分区" class="headerlink" title="RDD分区"></a>RDD分区</h2><p>分区是为了并行，默认是怎么分区的？</p>
<p>demo</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// parallelize默认分区</span></span><br><span class="line"><span class="keyword">val</span> listRDD1: <span class="type">RDD</span>[<span class="type">Int</span>] = sc.makeRDD(<span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line"><span class="comment">// listRDD1.saveAsTextFile("output") // 生成了16个分区文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// textFile默认分区</span></span><br><span class="line"><span class="keyword">val</span> listRDD2: <span class="type">RDD</span>[<span class="type">String</span>] = sc.textFile(<span class="string">"input"</span>)</span><br><span class="line"><span class="comment">// listRDD2.saveAsTextFile("output") // 生成了2个分区文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// parallelize指定分区</span></span><br><span class="line"><span class="keyword">val</span> listRDD3: <span class="type">RDD</span>[<span class="type">Int</span>] = sc.makeRDD(<span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>),<span class="number">3</span>)</span><br><span class="line"><span class="comment">// listRDD3.saveAsTextFile("output") // 生成了16个分区文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// textFile指定分区</span></span><br><span class="line"><span class="comment">// minPartitions，取的最小分区数，但有可能实际分区比指定的3大，因为依赖hadoop分区规则</span></span><br><span class="line"><span class="comment">// hadoopFile，切片规则依赖hdfs</span></span><br><span class="line"><span class="keyword">val</span> listRDD4: <span class="type">RDD</span>[<span class="type">String</span>] = sc.textFile(<span class="string">"input"</span>,<span class="number">3</span>)</span><br><span class="line">listRDD4.saveAsTextFile(<span class="string">"output"</span>) <span class="comment">// 生成了2个分区文件</span></span><br></pre></td></tr></table></figure></div>

<p>源码解析</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// parallelize分区策略：</span></span><br><span class="line"><span class="comment">// spark.default.parallelism配置</span></span><br><span class="line"><span class="comment">// 读取cpu核数，与2比较，选大的</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">defaultParallelism</span></span>(): <span class="type">Int</span> = &#123;</span><br><span class="line">    conf.getInt(<span class="string">"spark.default.parallelism"</span>, math.max(totalCoreCount.get(), <span class="number">2</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// textFile分区策略：最小分区取2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">defaultMinPartitions</span></span>: <span class="type">Int</span> = math.min(defaultParallelism, <span class="number">2</span>)</span><br></pre></td></tr></table></figure></div>



<h2 id="RDD转换"><a href="#RDD转换" class="headerlink" title="RDD转换"></a>RDD转换</h2><p>RDD 整体上分为 Value 类型和 Key-Value 类型  </p>
<h3 id="Value-类型"><a href="#Value-类型" class="headerlink" title="Value 类型"></a>Value 类型</h3><h4 id="map算子"><a href="#map算子" class="headerlink" title="map算子"></a>map算子</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// map算子</span></span><br><span class="line"><span class="comment">// 1. 作用： 返回一个新的 RDD，该 RDD 由每一个输入元素经过 func 函数转换后组成</span></span><br><span class="line"><span class="comment">// 2. 需求： 创建一个 1-10 数组的 RDD，将所有元素*2 形成新的 RDD</span></span><br><span class="line"><span class="keyword">val</span> listRDD: <span class="type">RDD</span>[<span class="type">Int</span>] = sc.makeRDD(<span class="number">1</span> to <span class="number">10</span>)</span><br><span class="line"><span class="keyword">val</span> mapRDD: <span class="type">RDD</span>[<span class="type">Int</span>] = listRDD.map( _*<span class="number">2</span> )</span><br><span class="line"><span class="comment">// mapRDD.collect().foreach(println)</span></span><br></pre></td></tr></table></figure></div>



<h4 id="mapPartitions算子"><a href="#mapPartitions算子" class="headerlink" title="mapPartitions算子"></a>mapPartitions算子</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// mapPartitions</span></span><br><span class="line"><span class="comment">// 1. 作用： 类似于 map，但独立地在 RDD 的每一个分片(分区)上运行，而map是在每条数据上运行。</span></span><br><span class="line"><span class="comment">//  Iterator[T] =&gt; Iterator[U]</span></span><br><span class="line"><span class="comment">//  mapPartitions可理解为批处理，有两个分区就走两遍mapPartitions。</span></span><br><span class="line"><span class="comment">// 2. 需求： 创建一个 RDD，使每个元素*2 组成新的 RDD</span></span><br><span class="line"><span class="keyword">val</span> mapPartitionsRDD: <span class="type">RDD</span>[<span class="type">Int</span>] = listRDD.mapPartitions(datas =&gt; &#123;</span><br><span class="line">    <span class="comment">// 这个map是scala map，返回的是Iterator</span></span><br><span class="line">    datas.map(_ * <span class="number">2</span>)</span><br><span class="line">&#125;)</span><br><span class="line">mapPartitionsRDD.collect().foreach(println)</span><br></pre></td></tr></table></figure></div>

<h4 id="map-amp-mapPartitions区别"><a href="#map-amp-mapPartitions区别" class="headerlink" title="map &amp; mapPartitions区别"></a>map &amp; mapPartitions区别</h4><p>原理区别：</p>
<a href="/2020/02/13/20200213103244757/image-20200213132148062.png" data-fancybox="group" data-caption="image-20200213132148062" class="fancybox"><img alt="image-20200213132148062" style="zoom:80%;" title="image-20200213132148062" data-src="/2020/02/13/20200213103244757/image-20200213132148062.png" class="lazyload"></a>

<p>为什么需要mapPartitions？</p>
<ol>
<li>map：10条数据有可能发给3个Executor，算10个计算。</li>
<li>mapPartitions：datas.map(_ * 2)算一个计算，spark的计算是指发给executor的计算，所以两个分区只需要发给两个Executor,减少网络交互，计算效率高。</li>
<li>但是mapPartitions以分区为单位释放内存，可能造成内存溢出（oom）</li>
</ol>
<h4 id="mapPartitionsWithIndex"><a href="#mapPartitionsWithIndex" class="headerlink" title="mapPartitionsWithIndex"></a>mapPartitionsWithIndex</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 作用：类似于 mapPartitions，但 func 带有一个整数参数表示分片的索引值</span></span><br><span class="line"><span class="comment">//  (Int, Interator[T]) =&gt; Iterator[U]</span></span><br><span class="line"><span class="comment">// 2. 需求： 创建一个 RDD，使每个元素跟所在分区形成一个元组组成一个新的 RDD</span></span><br><span class="line"><span class="comment">// mapPartitionsWithIndex</span></span><br><span class="line"><span class="keyword">val</span> mapPartitionsWithIndexRDD: <span class="type">RDD</span>[(<span class="type">Int</span>, <span class="type">Int</span>)] = listRDD.mapPartitionsWithIndex( (index,datas)=&gt;datas.map( (index,_) ) )</span><br><span class="line">mapPartitionsWithIndexRDD.collect().foreach(println)</span><br><span class="line"><span class="comment">//(0,1)</span></span><br><span class="line"><span class="comment">//(0,2)</span></span><br><span class="line"><span class="comment">//(0,3)</span></span><br><span class="line"><span class="comment">//(1,4)</span></span><br><span class="line"><span class="comment">//(1,5)</span></span><br><span class="line"><span class="comment">//(1,6)</span></span><br><span class="line"><span class="comment">//(2,7)</span></span><br><span class="line"><span class="comment">//(2,8)</span></span><br><span class="line"><span class="comment">//(2,9)</span></span><br><span class="line"><span class="comment">//(2,10)</span></span><br></pre></td></tr></table></figure></div>

<p>原理图：</p>
<a href="/2020/02/13/20200213103244757/image-20200213133716624.png" data-fancybox="group" data-caption="image-20200213133716624" class="fancybox"><img alt="image-20200213133716624" style="zoom:80%;" title="image-20200213133716624" data-src="/2020/02/13/20200213103244757/image-20200213133716624.png" class="lazyload"></a>



<h4 id="Driver-amp-Executor的关系"><a href="#Driver-amp-Executor的关系" class="headerlink" title="Driver &amp; Executor的关系"></a>Driver &amp; Executor的关系</h4><a href="/2020/02/13/20200213103244757/image-20200213134903396.png" data-fancybox="group" data-caption="image-20200213134903396" class="fancybox"><img alt="image-20200213134903396" style="zoom:80%;" title="image-20200213134903396" data-src="/2020/02/13/20200213103244757/image-20200213134903396.png" class="lazyload"></a>

<ol>
<li>所有算子的计算功能都是Excutor做</li>
<li>Driver和Excutor可能不是一台机器，所以在Driver申明的变量i，在算子操作时需要序列化，然后网络io传到Executor去。因此要保证 i 可以序列化(他可能时user)。</li>
</ol>
<h4 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 作用：类似于 map，但是每一个输入元素可以被映射为 0 或多个输出元素。扁平化。</span></span><br><span class="line"><span class="comment">// 2. 需求：创建一个元素为 1-5 的 RDD，运用 flatMap 创建一个新的 RDD，新的 RDD 为原RDD 的每个元素的 2 倍（2， 4， 6， 8， 10）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// flatMap demo1</span></span><br><span class="line"><span class="keyword">val</span> sourceFlat: <span class="type">RDD</span>[<span class="type">Int</span>] = sc.makeRDD(<span class="number">1</span> to <span class="number">5</span>)</span><br><span class="line"><span class="keyword">val</span> flatMapRDD: <span class="type">RDD</span>[<span class="type">String</span>] = sourceFlat.flatMap( x =&gt; <span class="type">List</span>(x+<span class="string">"a"</span>,x+<span class="string">"b"</span>) )</span><br><span class="line">flatMapRDD.collect().foreach(println)</span><br><span class="line"><span class="comment">//1a</span></span><br><span class="line"><span class="comment">//1b</span></span><br><span class="line"><span class="comment">//2a</span></span><br><span class="line"><span class="comment">//2b</span></span><br><span class="line"><span class="comment">//3a</span></span><br><span class="line"><span class="comment">//3b</span></span><br><span class="line"><span class="comment">//4a</span></span><br><span class="line"><span class="comment">//4b</span></span><br><span class="line"><span class="comment">//5a</span></span><br><span class="line"><span class="comment">//5b</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// flatMap demo2 展开</span></span><br><span class="line"><span class="keyword">val</span> sourceFlat2: <span class="type">RDD</span>[<span class="type">List</span>[<span class="type">Int</span>]] = sc.makeRDD(<span class="type">Array</span>(<span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>), <span class="type">List</span>(<span class="number">3</span>,<span class="number">4</span>)))</span><br><span class="line"><span class="keyword">val</span> flatMapRDD2: <span class="type">RDD</span>[<span class="type">Int</span>] = sourceFlat2.flatMap( datas =&gt; datas)</span><br><span class="line">flatMapRDD2.collect().foreach(println)</span><br><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="comment">//2</span></span><br><span class="line"><span class="comment">//3</span></span><br><span class="line"><span class="comment">//4</span></span><br></pre></td></tr></table></figure></div>



<h4 id="glom"><a href="#glom" class="headerlink" title="glom"></a>glom</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 作用： 将每一个分区形成一个数组，形成新的 RDD 类型 RDD[Array[T]]。可用于以分区为单位的数据统计。</span></span><br><span class="line"><span class="comment">// 2. 需求：创建一个 4 个分区的 RDD，并将每个分区的数据放到一个数组</span></span><br><span class="line"><span class="comment">// glom</span></span><br><span class="line"><span class="keyword">val</span> rdd: <span class="type">RDD</span>[<span class="type">Int</span>] = sc.makeRDD(<span class="number">1</span> to <span class="number">16</span>,<span class="number">4</span>)</span><br><span class="line"><span class="keyword">val</span> arrayRDD: <span class="type">RDD</span>[<span class="type">Array</span>[<span class="type">Int</span>]] = rdd.glom()</span><br><span class="line">arrayRDD.collect().foreach( array =&gt; println(array.mkString(<span class="string">","</span>)) )</span><br><span class="line"><span class="comment">//1,2,3,4</span></span><br><span class="line"><span class="comment">//5,6,7,8</span></span><br><span class="line"><span class="comment">//9,10,11,12</span></span><br><span class="line"><span class="comment">//13,14,15,16</span></span><br></pre></td></tr></table></figure></div>



<h4 id="groupBy"><a href="#groupBy" class="headerlink" title="groupBy"></a>groupBy</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// groupBy</span></span><br><span class="line"><span class="comment">//1. 作用： 分组，按照传入函数的返回值进行分组。 将相同的 key 对应的值放入一个迭代器。</span></span><br><span class="line"><span class="comment">//2. 需求：创建一个 RDD，按照元素模以 2 的值进行分组。</span></span><br><span class="line"><span class="keyword">val</span> rdd2: <span class="type">RDD</span>[<span class="type">Int</span>] = sc.parallelize(<span class="number">1</span> to <span class="number">4</span>)</span><br><span class="line"><span class="keyword">val</span> group: <span class="type">RDD</span>[(<span class="type">Int</span>, <span class="type">Iterable</span>[<span class="type">Int</span>])] = rdd2.groupBy(_%<span class="number">2</span>)</span><br><span class="line"><span class="comment">// group.collect().foreach(println)</span></span><br><span class="line"><span class="comment">//(0,CompactBuffer(2, 4))</span></span><br><span class="line"><span class="comment">//(1,CompactBuffer(1, 3))</span></span><br></pre></td></tr></table></figure></div>



<h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// filter</span></span><br><span class="line"><span class="comment">//1. 作用： 过滤。 返回一个新的 RDD，该 RDD 由经过 func 函数计算后返回值为 true 的输入</span></span><br><span class="line"><span class="comment">//元素组成。</span></span><br><span class="line"><span class="comment">//2. 需求：创建一个 RDD（由字符串组成），过滤出一个新 RDD（包含”xiao”子串）</span></span><br><span class="line"><span class="keyword">val</span> sourceFilter2: <span class="type">RDD</span>[<span class="type">String</span>] = sc.parallelize(<span class="type">Array</span>(<span class="string">"xiaoming"</span>,<span class="string">"xiaojiang"</span>,<span class="string">"xiaohe"</span>,<span class="string">"dazhi"</span>))</span><br><span class="line"><span class="keyword">val</span> filter: <span class="type">RDD</span>[<span class="type">String</span>] = sourceFilter2.filter(_.contains(<span class="string">"xiao"</span>))</span><br><span class="line"><span class="comment">// filter.collect().foreach(println)</span></span><br><span class="line"><span class="comment">//xiaoming</span></span><br><span class="line"><span class="comment">//xiaojiang</span></span><br><span class="line"><span class="comment">//xiaohe</span></span><br></pre></td></tr></table></figure></div>



<h4 id="sample"><a href="#sample" class="headerlink" title="sample"></a>sample</h4><p>fraction相当于抽样算法里面的因子？</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// sample(withReplacement, fraction, seed)</span></span><br><span class="line"><span class="comment">//1. 作用： 以指定的随机种子随机抽样出数量为 fraction 的数据， withReplacement 表示是抽出的数据是否放回， true 为有放回的抽样， false 为无放回的抽样， seed 用于指定随机数生成器种子。</span></span><br><span class="line"><span class="comment">// 应用：从一亿条数据中抽样来进行数据分析。</span></span><br><span class="line"><span class="comment">//2. 需求：创建一个 RDD（1-10），从中选择放回和不放回抽样</span></span><br><span class="line"><span class="keyword">val</span> rdd3: <span class="type">RDD</span>[<span class="type">Int</span>] = sc.parallelize(<span class="number">1</span> to <span class="number">10</span>)</span><br><span class="line"><span class="comment">// 有放回：</span></span><br><span class="line"><span class="keyword">val</span> sample: <span class="type">RDD</span>[<span class="type">Int</span>] = rdd3.sample(<span class="literal">true</span>,<span class="number">0.4</span>,<span class="number">2</span>)</span><br><span class="line"><span class="comment">// sample.collect().foreach(x=&gt;print(x+" "))  // 3 4 4 5 6 8</span></span><br><span class="line"><span class="keyword">val</span> sample2: <span class="type">RDD</span>[<span class="type">Int</span>] = rdd.sample(<span class="literal">false</span>,<span class="number">0.2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="comment">// sample2.collect().foreach(x=&gt;print(x+" "))  // 1 8 14</span></span><br></pre></td></tr></table></figure></div>



<h4 id="distinct"><a href="#distinct" class="headerlink" title="distinct"></a>distinct</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// distinct([numTasks]))</span></span><br><span class="line"><span class="comment">//1. 作用： 对源 RDD 进行去重后返回一个新的 RDD。 默认情况下，只有 8 个并行任务来操作，但是可以传入一个可选的 numTasks 参数改变它。</span></span><br><span class="line"><span class="comment">// numTasks的意义：去重后数据量变小，不用原来那么多分区了，因此可以控制分区变小一点。</span></span><br><span class="line"><span class="comment">//2. 需求：创建一个 RDD， 使用 distinct()对其去重。</span></span><br><span class="line"><span class="keyword">val</span> rdd4: <span class="type">RDD</span>[<span class="type">Int</span>] = sc.parallelize(<span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">1</span>))</span><br><span class="line"><span class="keyword">val</span> distinctRDD: <span class="type">RDD</span>[<span class="type">Int</span>] = rdd4.distinct()</span><br><span class="line"><span class="comment">// distinctRDD.collect().foreach(x=&gt;print(x+" ")) // 1 2 5 6 9</span></span><br><span class="line">distinctRDD.saveAsTextFile(<span class="string">"output"</span>)</span><br><span class="line"><span class="comment">// 指定分区</span></span><br><span class="line"><span class="keyword">val</span> distinctRDD2: <span class="type">RDD</span>[<span class="type">Int</span>] = rdd4.distinct(<span class="number">3</span>)</span><br><span class="line"><span class="comment">// distinctRDD2.saveAsTextFile("output")</span></span><br></pre></td></tr></table></figure></div>

<p>原理：</p>
<a href="/2020/02/13/20200213103244757/image-20200213160152966.png" data-fancybox="group" data-caption="image-20200213160152966" class="fancybox"><img alt="image-20200213160152966" style="zoom:80%;" title="image-20200213160152966" data-src="/2020/02/13/20200213103244757/image-20200213160152966.png" class="lazyload"></a>

<p>要去重，必须要所有分区做完，才有结果，所以需要等待。所以shuffle慢。</p>
<h4 id="coalesce"><a href="#coalesce" class="headerlink" title="coalesce"></a>coalesce</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// coalesce(numPartitions) 案例</span></span><br><span class="line"><span class="comment">//1. 作用： 缩减分区数，用于大数据集过滤后，提高小数据集的执行效率。</span></span><br><span class="line"><span class="comment">//2. 需求：创建一个 4 个分区的 RDD，对其缩减分区</span></span><br><span class="line"><span class="keyword">val</span> rdd5: <span class="type">RDD</span>[<span class="type">Int</span>] = sc.parallelize(<span class="number">1</span> to <span class="number">16</span>,<span class="number">4</span>)</span><br><span class="line"><span class="keyword">val</span> coalesceRDD: <span class="type">RDD</span>[<span class="type">Int</span>] = rdd5.coalesce(<span class="number">3</span>)</span><br><span class="line">println(coalesceRDD.partitions.size) <span class="comment">//3</span></span><br></pre></td></tr></table></figure></div>

<p>如何缩减的？</p>
<p>比如最开始17个数，要分3个区，实际会被分4个区，因为16/3除不尽，变成4个分区：</p>
<p>(1,2,3,4,5 )   (6,7,8,9,10 )   (11,12,13,14,15)  (16,17)</p>
<p>缩减策略：可以简单理解为合并分区，没有shuffle过程：</p>
<p>(1,2,3,4,5 )   (6,7,8,9,10 )   (11,12,13,14,15,16,17)</p>
<h4 id="repartition"><a href="#repartition" class="headerlink" title="repartition"></a>repartition</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">//repartition(numPartitions)</span></span><br><span class="line"><span class="comment">//1. 作用： 根据分区数， 重新通过网络随机洗牌所有数据。</span></span><br><span class="line"><span class="comment">//2. 需求：创建一个 4 个分区的 RDD，对其重新分区</span></span><br><span class="line"><span class="keyword">val</span> rdd = sc.parallelize(<span class="number">1</span> to <span class="number">16</span>,<span class="number">4</span>)</span><br><span class="line"><span class="keyword">val</span> rerdd = rdd.repartition(<span class="number">2</span>)</span><br><span class="line">println(rerdd.partitions.size)  <span class="comment">// 2</span></span><br><span class="line"><span class="comment">// repartition底层：默认shuffle的</span></span><br><span class="line"><span class="comment">// coalesce(numPartitions, shuffle = true)</span></span><br></pre></td></tr></table></figure></div>

<h4 id="coalesce-amp-repartition-区别"><a href="#coalesce-amp-repartition-区别" class="headerlink" title="coalesce &amp; repartition 区别"></a>coalesce &amp; repartition 区别</h4><ol>
<li>coalesce 重新分区，可以选择是否进行 shuffle 过程。由参数 shuffle: Boolean = false/true 决<br>定。</li>
<li>repartition 实际上是调用的 coalesce，默认是进行 shuffle 的。   </li>
</ol>
<h4 id="sortBy"><a href="#sortBy" class="headerlink" title="sortBy"></a>sortBy</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">//sortBy(func,[ascending], [numTasks])</span></span><br><span class="line"><span class="comment">//1. 作用；使用 func 先对数据进行处理，按照处理后的数据比较结果排序，默认为正序。</span></span><br><span class="line"><span class="comment">//2. 需求：创建一个 RDD，按照不同的规则进行排序</span></span><br><span class="line"><span class="keyword">val</span> rdd = sc.parallelize(<span class="type">List</span>(<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">rdd.sortBy(x =&gt; x).collect().foreach(x=&gt;print(x+<span class="string">" "</span>)) <span class="comment">// 1 2 3 4</span></span><br></pre></td></tr></table></figure></div>

<h4 id="pipe"><a href="#pipe" class="headerlink" title="pipe"></a>pipe</h4><h3 id="双-Value-类型交互"><a href="#双-Value-类型交互" class="headerlink" title="双 Value 类型交互"></a>双 Value 类型交互</h3><h4 id="union"><a href="#union" class="headerlink" title="union"></a>union</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; <span class="comment">// 作用： 对源 RDD 和参数 RDD 求并集后返回一个新的 RDD</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> rdd1 = sc.parallelize(<span class="number">1</span> to <span class="number">5</span>)</span><br><span class="line">rdd1: org.apache.spark.rdd.<span class="type">RDD</span>[<span class="type">Int</span>] = <span class="type">ParallelCollectionRDD</span>[<span class="number">0</span>] at parallelize at &lt;console&gt;:<span class="number">24</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> rdd2 = sc.parallelize(<span class="number">5</span> to <span class="number">10</span>)</span><br><span class="line">rdd2: org.apache.spark.rdd.<span class="type">RDD</span>[<span class="type">Int</span>] = <span class="type">ParallelCollectionRDD</span>[<span class="number">1</span>] at parallelize at &lt;console&gt;:<span class="number">24</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> rdd3 = rdd1.union(rdd2)</span><br><span class="line">rdd3: org.apache.spark.rdd.<span class="type">RDD</span>[<span class="type">Int</span>] = <span class="type">UnionRDD</span>[<span class="number">2</span>] at union at &lt;console&gt;:<span class="number">28</span></span><br><span class="line"></span><br><span class="line">scala&gt; rdd3.collect()</span><br><span class="line">res0: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure></div>

<h4 id="subtract"><a href="#subtract" class="headerlink" title="subtract"></a>subtract</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; <span class="comment">// 作用： 计算差的一种函数，去除两个 RDD 中相同的元素，不同的 RDD 将保留下来</span></span><br><span class="line"></span><br><span class="line">scala&gt;  <span class="keyword">val</span> rdd = sc.parallelize(<span class="number">3</span> to <span class="number">8</span>)</span><br><span class="line">rdd: org.apache.spark.rdd.<span class="type">RDD</span>[<span class="type">Int</span>] = <span class="type">ParallelCollectionRDD</span>[<span class="number">3</span>] at parallelize at &lt;console&gt;:<span class="number">24</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> rdd1 = sc.parallelize(<span class="number">1</span> to <span class="number">5</span>)</span><br><span class="line">rdd1: org.apache.spark.rdd.<span class="type">RDD</span>[<span class="type">Int</span>] = <span class="type">ParallelCollectionRDD</span>[<span class="number">4</span>] at parallelize at &lt;console&gt;:<span class="number">24</span></span><br><span class="line"></span><br><span class="line">scala&gt; rdd.subtract(rdd1).collect()</span><br><span class="line">res1: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">6</span>, <span class="number">8</span>, <span class="number">7</span>)</span><br></pre></td></tr></table></figure></div>



<h4 id="intersection"><a href="#intersection" class="headerlink" title="intersection"></a>intersection</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; <span class="comment">// 作用： 对源 RDD 和参数 RDD 求交集后返回一个新的 RDD</span></span><br><span class="line"></span><br><span class="line">scala&gt;  <span class="keyword">val</span> rdd1 = sc.parallelize(<span class="number">1</span> to <span class="number">7</span>)</span><br><span class="line">rdd1: org.apache.spark.rdd.<span class="type">RDD</span>[<span class="type">Int</span>] = <span class="type">ParallelCollectionRDD</span>[<span class="number">9</span>] at parallelize at &lt;console&gt;:<span class="number">24</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> rdd2 = sc.parallelize(<span class="number">5</span> to <span class="number">10</span>)</span><br><span class="line">rdd2: org.apache.spark.rdd.<span class="type">RDD</span>[<span class="type">Int</span>] = <span class="type">ParallelCollectionRDD</span>[<span class="number">10</span>] at parallelize at &lt;console&gt;:<span class="number">24</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> rdd3 = rdd1.intersection(rdd2)</span><br><span class="line">rdd3: org.apache.spark.rdd.<span class="type">RDD</span>[<span class="type">Int</span>] = <span class="type">MapPartitionsRDD</span>[<span class="number">16</span>] at intersection at &lt;console&gt;:<span class="number">28</span></span><br><span class="line"></span><br><span class="line">scala&gt;  rdd3.collect()</span><br><span class="line">res2: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">6</span>, <span class="number">7</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure></div>



<h4 id="cartesian"><a href="#cartesian" class="headerlink" title="cartesian"></a>cartesian</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; <span class="comment">// 作用： 笛卡尔积（尽量避免使用）</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> rdd1 = sc.parallelize(<span class="number">1</span> to <span class="number">3</span>)</span><br><span class="line">rdd1: org.apache.spark.rdd.<span class="type">RDD</span>[<span class="type">Int</span>] = <span class="type">ParallelCollectionRDD</span>[<span class="number">17</span>] at parallelize at &lt;console&gt;:<span class="number">24</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> rdd2 = sc.parallelize(<span class="number">2</span> to <span class="number">5</span>)</span><br><span class="line">rdd2: org.apache.spark.rdd.<span class="type">RDD</span>[<span class="type">Int</span>] = <span class="type">ParallelCollectionRDD</span>[<span class="number">18</span>] at parallelize at &lt;console&gt;:<span class="number">24</span></span><br><span class="line"></span><br><span class="line">scala&gt; rdd1.cartesian(rdd2).collect()</span><br><span class="line">res3: <span class="type">Array</span>[(<span class="type">Int</span>, <span class="type">Int</span>)] = <span class="type">Array</span>((<span class="number">1</span>,<span class="number">2</span>), (<span class="number">1</span>,<span class="number">3</span>), (<span class="number">1</span>,<span class="number">4</span>), (<span class="number">1</span>,<span class="number">5</span>), (<span class="number">2</span>,<span class="number">2</span>), (<span class="number">2</span>,<span class="number">3</span>), (<span class="number">3</span>,<span class="number">2</span>), (<span class="number">3</span>,<span class="number">3</span>), (<span class="number">2</span>,<span class="number">4</span>), (<span class="number">2</span>,<span class="number">5</span>), (<span class="number">3</span>,<span class="number">4</span>), (<span class="number">3</span>,<span class="number">5</span>))</span><br></pre></td></tr></table></figure></div>



<h4 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; <span class="comment">// 作用： 将两个 RDD 组合成 Key/Value 形式的 RDD,这里默认两个 RDD 的 partition 数量以及元素数量都相同，否则会抛出异常。 </span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> rdd1 = sc.parallelize(<span class="type">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>),<span class="number">3</span>)</span><br><span class="line">rdd1: org.apache.spark.rdd.<span class="type">RDD</span>[<span class="type">Int</span>] = <span class="type">ParallelCollectionRDD</span>[<span class="number">20</span>] at parallelize at &lt;console&gt;:<span class="number">24</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> rdd2 = sc.parallelize(<span class="type">Array</span>(<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>),<span class="number">3</span>)</span><br><span class="line">rdd2: org.apache.spark.rdd.<span class="type">RDD</span>[<span class="type">String</span>] = <span class="type">ParallelCollectionRDD</span>[<span class="number">21</span>] at parallelize at &lt;console&gt;:<span class="number">24</span></span><br><span class="line"></span><br><span class="line">scala&gt; rdd1.zip(rdd2).collect</span><br><span class="line">res4: <span class="type">Array</span>[(<span class="type">Int</span>, <span class="type">String</span>)] = <span class="type">Array</span>((<span class="number">1</span>,a), (<span class="number">2</span>,b), (<span class="number">3</span>,c))</span><br><span class="line"></span><br><span class="line">scala&gt;  rdd2.zip(rdd1).collect</span><br><span class="line">res5: <span class="type">Array</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = <span class="type">Array</span>((a,<span class="number">1</span>), (b,<span class="number">2</span>), (c,<span class="number">3</span>))</span><br></pre></td></tr></table></figure></div>



<h3 id="Key-Value-类型"><a href="#Key-Value-类型" class="headerlink" title="Key-Value 类型"></a>Key-Value 类型</h3><p>k-v算子</p>
<h4 id="partitionBy"><a href="#partitionBy" class="headerlink" title="partitionBy"></a>partitionBy</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; <span class="comment">// 作用：对 pairRDD 进行分区操作，如果原有的 partionRDD 和现有的 partionRDD 是一leRDD，即会产生 shuffle 过程。. Shuff </span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="comment">// 相当于自定义分区策略来进行分区。</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> rdd = sc.parallelize(<span class="type">Array</span>((<span class="number">1</span>,<span class="string">"aaa"</span>),(<span class="number">2</span>,<span class="string">"bbb"</span>),(<span class="number">3</span>,<span class="string">"ccc"</span>),(<span class="number">4</span>,<span class="string">"ddd"</span>)),<span class="number">4</span>)</span><br><span class="line">rdd: org.apache.spark.rdd.<span class="type">RDD</span>[(<span class="type">Int</span>, <span class="type">String</span>)] = <span class="type">ParallelCollectionRDD</span>[<span class="number">24</span>] at parallelize at &lt;console&gt;:<span class="number">24</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="comment">// HashPartitioner, 一个自带的分区器</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">var</span> rdd2 = rdd.partitionBy(<span class="keyword">new</span> org.apache.spark.<span class="type">HashPartitioner</span>(<span class="number">2</span>))</span><br><span class="line">rdd2: org.apache.spark.rdd.<span class="type">RDD</span>[(<span class="type">Int</span>, <span class="type">String</span>)] = <span class="type">ShuffledRDD</span>[<span class="number">25</span>] at partitionBy at &lt;console&gt;:<span class="number">26</span></span><br><span class="line"></span><br><span class="line">scala&gt; rdd2.partitions.size</span><br><span class="line">res6: <span class="type">Int</span> = <span class="number">2</span></span><br></pre></td></tr></table></figure></div>

<p>自定义分区器</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPartitioner</span>(<span class="params">partitions: <span class="type">Int</span></span>) <span class="keyword">extends</span> <span class="title">Partitioner</span> </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">numPartitions</span></span>: <span class="type">Int</span> = &#123;</span><br><span class="line">    partitions</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">getPartition</span></span>(key: <span class="type">Any</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// 获得sc</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[*]"</span>).setAppName(<span class="string">"WordCount"</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> rdd1: <span class="type">RDD</span>[(<span class="type">Int</span>, <span class="type">String</span>)] = sc.makeRDD(<span class="type">List</span>((<span class="number">1</span>,<span class="string">"a"</span>),(<span class="number">2</span>,<span class="string">"b"</span>),(<span class="number">3</span>,<span class="string">"c"</span>)),<span class="number">4</span>)</span><br><span class="line">    <span class="keyword">val</span> rdd2: <span class="type">RDD</span>[(<span class="type">Int</span>, <span class="type">String</span>)] = rdd1.partitionBy(<span class="keyword">new</span> <span class="type">MyPartitioner</span>(<span class="number">2</span>))</span><br><span class="line">    rdd2.saveAsTextFile(<span class="string">"output"</span>) <span class="comment">// 数据都在1号分区</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h4 id="groupByKey"><a href="#groupByKey" class="headerlink" title="groupByKey"></a>groupByKey</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; <span class="comment">// 需求：创建一个 pairRDD，将相同 key 对应值聚合到一个 sequence 中，并计算相同 key对应值的相加结果。</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> words = <span class="type">Array</span>(<span class="string">"one"</span>, <span class="string">"two"</span>, <span class="string">"two"</span>, <span class="string">"three"</span>, <span class="string">"three"</span>, <span class="string">"three"</span>)</span><br><span class="line">words: <span class="type">Array</span>[<span class="type">String</span>] = <span class="type">Array</span>(one, two, two, three, three, three)</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> wordPairsRDD = sc.parallelize(words).map(word =&gt; (word, <span class="number">1</span>))</span><br><span class="line">wordPairsRDD: org.apache.spark.rdd.<span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = <span class="type">MapPartitionsRDD</span>[<span class="number">27</span>] at map at &lt;console&gt;:<span class="number">26</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> group = wordPairsRDD.groupByKey()</span><br><span class="line">group: org.apache.spark.rdd.<span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Iterable</span>[<span class="type">Int</span>])] = <span class="type">ShuffledRDD</span>[<span class="number">28</span>] at groupByKey at &lt;console&gt;:<span class="number">28</span></span><br><span class="line"></span><br><span class="line">scala&gt; group.collect()</span><br><span class="line">res7: <span class="type">Array</span>[(<span class="type">String</span>, <span class="type">Iterable</span>[<span class="type">Int</span>])] = <span class="type">Array</span>((two,<span class="type">CompactBuffer</span>(<span class="number">1</span>, <span class="number">1</span>)), (one,<span class="type">CompactBuffer</span>(<span class="number">1</span>)), (three,<span class="type">CompactBuffer</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)))</span><br><span class="line"></span><br><span class="line">scala&gt; group.map(t =&gt; (t._1, t._2.sum)).collect()</span><br><span class="line">res10: <span class="type">Array</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = <span class="type">Array</span>((two,<span class="number">2</span>), (one,<span class="number">1</span>), (three,<span class="number">3</span>))</span><br></pre></td></tr></table></figure></div>



<h4 id="reduceByKey"><a href="#reduceByKey" class="headerlink" title="reduceByKey"></a>reduceByKey</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; <span class="comment">// 使用指定的 reduce 函数，将相同key 的值聚合到一起（value1,value2）， reduce 任务的个数可以通过第二个可选的参数来设置。</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="comment">// 需求：创建一个 pairRDD，计算相同 key 对应值的相加结果</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> rdd = sc.parallelize(<span class="type">List</span>((<span class="string">"female"</span>,<span class="number">1</span>),(<span class="string">"male"</span>,<span class="number">5</span>),(<span class="string">"female"</span>,<span class="number">5</span>),(<span class="string">"male"</span>,<span class="number">2</span>)))</span><br><span class="line">rdd: org.apache.spark.rdd.<span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = <span class="type">ParallelCollectionRDD</span>[<span class="number">31</span>] at parallelize at &lt;console&gt;:<span class="number">24</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="comment">// 使相同key的value(x和y)两两相加</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> reduce = rdd.reduceByKey((x,y) =&gt; x+y)</span><br><span class="line">reduce: org.apache.spark.rdd.<span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = <span class="type">ShuffledRDD</span>[<span class="number">32</span>] at reduceByKey at &lt;console&gt;:<span class="number">26</span></span><br><span class="line"></span><br><span class="line">scala&gt; reduce.collect()</span><br><span class="line">res11: <span class="type">Array</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = <span class="type">Array</span>((female,<span class="number">6</span>), (male,<span class="number">7</span>))</span><br></pre></td></tr></table></figure></div>

<h4 id="reduceByKey-amp-groupByKey-区别"><a href="#reduceByKey-amp-groupByKey-区别" class="headerlink" title="reduceByKey &amp;  groupByKey 区别"></a>reduceByKey &amp;  groupByKey 区别</h4><a href="/2020/02/13/20200213103244757/image-20200220220201840.png" data-fancybox="group" data-caption="image-20200220220201840" class="fancybox"><img alt="image-20200220220201840" style="zoom:80%;" title="image-20200220220201840" data-src="/2020/02/13/20200213103244757/image-20200220220201840.png" class="lazyload"></a>

<ol>
<li>reduceByKey：按照 key 进行聚合，在 shuffle 之前有 combine（预聚合）操作  </li>
<li>groupByKey：按照 key 进行分组，直接进行 shuffle。  </li>
<li>reduceByKey比groupByKey性能好。</li>
</ol>
<h4 id="aggregateByKey"><a href="#aggregateByKey" class="headerlink" title="aggregateByKey"></a>aggregateByKey</h4><h4 id="foldByKey"><a href="#foldByKey" class="headerlink" title="foldByKey"></a>foldByKey</h4><h4 id="combineByKey"><a href="#combineByKey" class="headerlink" title="combineByKey"></a>combineByKey</h4><h4 id="sortByKey"><a href="#sortByKey" class="headerlink" title="sortByKey"></a>sortByKey</h4><h4 id="mapValues"><a href="#mapValues" class="headerlink" title="mapValues"></a>mapValues</h4><h4 id="join"><a href="#join" class="headerlink" title="join"></a>join</h4><h4 id="cogroup"><a href="#cogroup" class="headerlink" title="cogroup"></a>cogroup</h4><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4>]]></content>
      <categories>
        <category>大数据分布式</category>
        <category>Spark</category>
      </categories>
      <tags>
        <tag>Spark</tag>
      </tags>
  </entry>
  <entry>
    <title>Spark-基础</title>
    <url>/2020/02/11/20200211151842560/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>引言：</p>
<p>Spark是一种基于内存的快速、通用、可扩展的大数据分析引擎。  </p>
<p>参考：</p>
<ul>
<li><a href="http://www.atguigu.com" target="_blank" rel="noopener">www.atguigu.com</a></li>
<li><a href="https://www.bilibili.com/video/av62992342?from=search&amp;seid=11601397416766722848" target="_blank" rel="noopener">https://www.bilibili.com/video/av62992342?from=search&amp;seid=11601397416766722848</a></li>
</ul>
</blockquote>
<p>[toc]</p>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="历史渊源"><a href="#历史渊源" class="headerlink" title="历史渊源"></a>历史渊源</h2><p>1.X的mapreduce缺陷</p>
<ul>
<li>主要用于一次性计算，不适合机器学习数据挖掘的迭代计算。</li>
<li>基于文件存储介质，非常慢。</li>
<li>MR和Hadoop紧密耦合，无法动态替换</li>
</ul>
<p>2.x</p>
<ul>
<li>提出了Yarn资源调度</li>
<li>将资源管理RM和任务调度Driver解耦，可插拔。</li>
</ul>
<p>Spark</p>
<ul>
<li>计算：迭代计算之间的数据是基于内存的，基于Scale语言，非常适合迭代式计算。</li>
<li>存储：还是基于Hadoop。</li>
<li>利用2.X的Yarn解耦，变成HDFS+Yarn+Spark</li>
</ul>
<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><a href="/2020/02/11/20200211151842560/image-20200211173725703.png" data-fancybox="group" data-caption="image-20200211173725703" class="fancybox"><img alt="image-20200211173725703" style="zoom:80%;" title="image-20200211173725703" data-src="/2020/02/11/20200211151842560/image-20200211173725703.png" class="lazyload"></a>



<h1 id="Spark运行模式"><a href="#Spark运行模式" class="headerlink" title="Spark运行模式"></a>Spark运行模式</h1><h2 id="重要角色"><a href="#重要角色" class="headerlink" title="重要角色"></a>重要角色</h2><p>Driver: 管理</p>
<p>Executor: 计算</p>
<h2 id="Local模式"><a href="#Local模式" class="headerlink" title="Local模式"></a>Local模式</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sh</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tar -zxvf spark-2.1.1-bin-hadoop2.7.tgz -C /opt/module/</span><br><span class="line">mv spark-2.1.1-bin-hadoop2.7 spark</span><br><span class="line"><span class="comment"># 官方案例：迭代计算pi</span></span><br><span class="line">bin/spark-submit \</span><br><span class="line">--class org.apache.spark.examples.SparkPi \</span><br><span class="line">--executor-memory 1G \</span><br><span class="line">--total-executor-cores 2 \</span><br><span class="line">./examples/jars/spark-examples_2.11-2.1.1.jar \</span><br><span class="line">100</span><br><span class="line"><span class="comment"># 启动spark-shell</span></span><br><span class="line">bin/spark-shell</span><br><span class="line"><span class="comment"># ui http://spark101:4040/</span></span><br></pre></td></tr></table></figure></div>

<h3 id="shell-WordCount"><a href="#shell-WordCount" class="headerlink" title="shell-WordCount"></a>shell-WordCount</h3><p>读取&gt; 扁平化&gt; 分组&gt; 聚合</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sh</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动spark-shell</span></span><br><span class="line"><span class="comment"># 在spark根目录下创建input目录，写两个文件进去</span></span><br><span class="line"><span class="comment"># 路径：相对路径，spark的上下文对象sc能判断</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取：返回一行一行的数据</span></span><br><span class="line">sc.textFile(<span class="string">"input"</span>)</span><br><span class="line">res0: org.apache.spark.rdd.RDD[String] = input MapPartitionsRDD[1] at textFile at &lt;console&gt;:25</span><br><span class="line"></span><br><span class="line"><span class="comment"># 扁平化：(hello world, hello scala) -&gt; hello,world,hello,scala</span></span><br><span class="line">sc.textFile(<span class="string">"input"</span>).flatMap(_.split(<span class="string">" "</span>))</span><br><span class="line">res2: org.apache.spark.rdd.RDD[String] = MapPartitionsRDD[4] at flatMap at &lt;console&gt;:25</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结构转换：map(x=&gt;&#123;(x,1)&#125;) 简化 map((_,1))</span></span><br><span class="line">sc.textFile(<span class="string">"input"</span>).flatMap(_.split(<span class="string">" "</span>)).map((_,1))</span><br><span class="line">org.apache.spark.rdd.RDD[(String, Int)] = MapPartitionsRDD[8] at map at &lt;console&gt;:25</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分组聚合: key就是单词，聚合就是把value两两相加,两个_代表参数1和参数2  reduceByKey(x1,x2 =&gt; x1+x2)</span></span><br><span class="line">sc.textFile(<span class="string">"input"</span>).flatMap(_.split(<span class="string">" "</span>)).map((_,1)).reduceByKey(_+_)</span><br><span class="line">res4: org.apache.spark.rdd.RDD[(String, Int)] = ShuffledRDD[13] at reduceByKey at &lt;console&gt;:25</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜集，展示</span></span><br><span class="line">sc.textFile(<span class="string">"input"</span>).flatMap(_.split(<span class="string">" "</span>)).map((_,1)).reduceByKey(_+_).collect</span><br><span class="line">res5: Array[(String, Int)] = Array((scala,1), (world,1), (hello,3), (spark,1))</span><br></pre></td></tr></table></figure></div>

<p> 程序解析</p>
<a href="/2020/02/11/20200211151842560/image-20200212101811444.png" data-fancybox="group" data-caption="image-20200212101811444" class="fancybox"><img alt="image-20200212101811444" style="zoom:80%;" title="image-20200212101811444" data-src="/2020/02/11/20200211151842560/image-20200212101811444.png" class="lazyload"></a>

<h3 id="idea-WordCount"><a href="#idea-WordCount" class="headerlink" title="idea-WordCount"></a>idea-WordCount</h3><p>pom</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mxx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>demo-spark<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-core_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>WordCount<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 自动增加scala支持 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.alchim31.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>scala-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>testCompile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 打包插件 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>WordCount<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">descriptorRef</span>&gt;</span>jar-with-dependencies<span class="tag">&lt;/<span class="name">descriptorRef</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>make-assembly<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>single<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>WordCount</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mxx.spark</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">WordCount</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得sc</span></span><br><span class="line">    <span class="comment">// local模式</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[*]"</span>).setAppName(<span class="string">"WordCount"</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line">    <span class="comment">// println(sc)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取:</span></span><br><span class="line">    <span class="comment">// 没有配置yarn：默认从当前部署环境找相对目录</span></span><br><span class="line">    <span class="comment">// 配置了yarn：会读取hdfs文件</span></span><br><span class="line">    <span class="comment">// 如果本地查找：file:///opt/module/spark/input</span></span><br><span class="line">    <span class="keyword">val</span> lines = sc.textFile(<span class="string">"file:///opt/module/spark/input"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 扁平化</span></span><br><span class="line">    <span class="keyword">val</span> words = lines.flatMap(_.split(<span class="string">" "</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 结构转换</span></span><br><span class="line">    <span class="keyword">val</span> wordToOne = words.map( (_,<span class="number">1</span>) )</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分组聚合</span></span><br><span class="line">    <span class="keyword">val</span> wordToSum = wordToOne.reduceByKey(_+_)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 搜集到Driver打印</span></span><br><span class="line">    <span class="keyword">val</span> result = wordToSum.collect()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 控制台显示</span></span><br><span class="line">    result.foreach(println)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="Yarn模式"><a href="#Yarn模式" class="headerlink" title="Yarn模式"></a>Yarn模式</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>有 yarn-client 和 yarn-cluster<br>两种模式， 主要区别在于： Driver 程序的运行节点。  </p>
<hr>
<h3 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a><strong>安装使用</strong></h3><ol>
<li><p>安装hadoop2.7</p>
</li>
<li><p>配置伪分布式hadoop</p>
<p>hdfs+yarn+JobHistory+日志聚集  </p>
</li>
<li><p>配置spark</p>
<p>yarn-site.xml  </p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--是否启动一个线程检查每个任务正使用的物理内存量，如果任务超出分配值，</span></span><br><span class="line"><span class="comment">则直接将其杀掉，默认是 true --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.pmem-check-enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--是否启动一个线程检查每个任务正使用的虚拟内存量，如果任务超出分配值，</span></span><br><span class="line"><span class="comment">则直接将其杀掉，默认是 true --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.vmem-check-enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>spark-env.sh </p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sh</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">YARN_CONF_DIR=/opt/module/hadoop/etc/hadoop</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>配置日志</p>
<blockquote>
<p>参考：<a href="https://www.jianshu.com/p/16f324d5a956" target="_blank" rel="noopener">spark history server配置使用</a></p>
</blockquote>
<p>spark-defaults.conf</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spark.eventLog.enabled           true</span><br><span class="line">spark.eventLog.dir               hdfs:&#x2F;&#x2F;mxxcentos6:9000&#x2F;spark_event_data</span><br><span class="line">spark.eventLog.compress          true</span><br><span class="line">spark.yarn.historyServer.address http:&#x2F;&#x2F;mxxcentos6:18080</span><br></pre></td></tr></table></figure></div>

<p>spark-env.sh</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sh</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> SPARK_HISTORY_OPTS=<span class="string">"-Dspark.history.ui.port=18080 -Dspark.history.retainedApplications=3 -Dspark.history.fs.logDirectory=hdfs://mxxcentos6:9000/spark_event_data"</span></span><br></pre></td></tr></table></figure></div>

<p>访问：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;spark101:18080&#x2F;</span><br></pre></td></tr></table></figure></div>

</li>
</ol>
<hr>
<h3 id="yarn部署spark流程"><a href="#yarn部署spark流程" class="headerlink" title="yarn部署spark流程"></a>yarn部署spark流程</h3><p>yarn调度流程</p>
<a href="/2020/02/11/20200211151842560/image-20200212144204404.png" data-fancybox="group" data-caption="image-20200212144204404" class="fancybox"><img alt="image-20200212144204404" style="zoom:80%;" title="image-20200212144204404" data-src="/2020/02/11/20200211151842560/image-20200212144204404.png" class="lazyload"></a>

<p>spark程序是在container里跑的</p>
<p>spark yarn部署流程</p>
<a href="/2020/02/11/20200211151842560/image-20200212153859818.png" data-fancybox="group" data-caption="image-20200212153859818" class="fancybox"><img alt="image-20200212153859818" style="zoom:80%;" title="image-20200212153859818" data-src="/2020/02/11/20200211151842560/image-20200212153859818.png" class="lazyload"></a>

<h3 id="wordcount程序打包到环境中运行"><a href="#wordcount程序打包到环境中运行" class="headerlink" title="wordcount程序打包到环境中运行"></a>wordcount程序打包到环境中运行</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bin&#x2F;spark-submit \</span><br><span class="line">--class com.mxx.spark.WordCount \</span><br><span class="line">&#x2F;opt&#x2F;module&#x2F;WordCount-jar-with-dependencies.jar</span><br></pre></td></tr></table></figure></div>



<h2 id="Standalone模式"><a href="#Standalone模式" class="headerlink" title="Standalone模式"></a>Standalone模式</h2><p>不需要hadoop, 构建一个由 Master+Slave 构成的 Spark 集群， Spark 运行在集群中。  </p>
<a href="/2020/02/11/20200211151842560/image-20200212161031490.png" data-fancybox="group" data-caption="image-20200212161031490" class="fancybox"><img alt="image-20200212161031490" style="zoom:80%;" title="image-20200212161031490" data-src="/2020/02/11/20200211151842560/image-20200212161031490.png" class="lazyload"></a>

<hr>
<p><strong>安装使用</strong></p>
<p>…</p>
<h2 id="Mesos-模式"><a href="#Mesos-模式" class="headerlink" title="Mesos 模式"></a>Mesos 模式</h2><p>…</p>
<h2 id="模式对比"><a href="#模式对比" class="headerlink" title="模式对比"></a>模式对比</h2><table>
<thead>
<tr>
<th>模式</th>
<th>Spark 安装机器数</th>
<th>需启动的进程</th>
<th>所属者</th>
</tr>
</thead>
<tbody><tr>
<td>Local</td>
<td>1</td>
<td>无</td>
<td>Spark</td>
</tr>
<tr>
<td>Standalone</td>
<td>3</td>
<td>Master 及 Worker</td>
<td>Spark</td>
</tr>
<tr>
<td>Yarn</td>
<td>1</td>
<td>Yarn 及 HDFS</td>
<td>Hadoop</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>大数据分布式</category>
        <category>Spark</category>
      </categories>
      <tags>
        <tag>Spark</tag>
      </tags>
  </entry>
  <entry>
    <title>Scala</title>
    <url>/2020/01/18/20200118180040984/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>引言：</p>
<ul>
<li>Spark 就是使用 Scala 编写的。</li>
<li>Scala 是 Scalable Language 的简写，是一门多范式(编程的方式[面向对象编程,函数式编程])的编程语言  </li>
</ul>
<p>参考：</p>
<ul>
<li><p><a href="http://www.atguigu.com" target="_blank" rel="noopener">www.atguigu.com</a></p>
</li>
<li><p><a href="https://www.bilibili.com/video/av39126512?from=search&amp;seid=1688498345924793113" target="_blank" rel="noopener">https://www.bilibili.com/video/av39126512?from=search&amp;seid=1688498345924793113</a></p>
</li>
</ul>
</blockquote>
<p>[toc]</p>
<h1 id="Scala概述"><a href="#Scala概述" class="headerlink" title="Scala概述"></a>Scala概述</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Spark源码</p>
<p>.scala &gt; .class  &gt;  JVM虚拟机</p>
<h2 id="环境安装-windows"><a href="#环境安装-windows" class="headerlink" title="环境安装-windows"></a>环境安装-windows</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下载：http:&#x2F;&#x2F;www.scala-lang.org&#x2F;    压缩包</span><br><span class="line"></span><br><span class="line">配置JDK的环境变量 JAVA_HOME</span><br><span class="line"></span><br><span class="line">配置Scala的环境变量SCALA_HOME</span><br><span class="line"></span><br><span class="line">将Scala安装目录下的bin目录加入到PATH环境变量。在PATH变量中添加：%SCALA_HOME%\bin</span><br><span class="line"></span><br><span class="line">在命令行窗口中输入“scala”命令打开scala解释器(REPL)，安装完成</span><br></pre></td></tr></table></figure></div>

<p>hello.scala</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> =  &#123;</span><br><span class="line">         println(“<span class="type">Hello</span> <span class="type">World</span>”)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>编译</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scalac Hello.scala</span><br></pre></td></tr></table></figure></div>

<p>运行</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala Hello</span><br></pre></td></tr></table></figure></div>

<p>直接运行</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scala Hello.scala</span><br></pre></td></tr></table></figure></div>

<p>没有在磁盘生成.class ,直接在内存里操作的。</p>
<h2 id="环境安装-IDEA"><a href="#环境安装-IDEA" class="headerlink" title="环境安装-IDEA"></a>环境安装-IDEA</h2><p>插件安装</p>
<p>idea下的hello world</p>
<h2 id="第一个Scala程序"><a href="#第一个Scala程序" class="headerlink" title="第一个Scala程序"></a>第一个Scala程序</h2><p>不用再写分号了（太优秀了…java啥时候学学呀）</p>
<p><strong>输出的三种方式</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 字符串通过+号连接（类似java）</span></span><br><span class="line">println(<span class="string">"name="</span> + name + <span class="string">" age="</span> + age + <span class="string">" url="</span> + url)</span><br><span class="line"></span><br><span class="line"><span class="comment">// printf用法 （类似C语言）字符串通过 % 传值。(格式化输出)</span></span><br><span class="line">printf(<span class="string">"name=%s, age=%d, url=%s \n"</span>, name, age, url)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串插值：通过$引用(类似PHP）</span></span><br><span class="line">println(<span class="string">s"name=<span class="subst">$name</span>, age=<span class="subst">$age</span>, url=<span class="subst">$url</span>"</span>)</span><br></pre></td></tr></table></figure></div>

<p><strong>反编译</strong></p>
<p>scala字节码 &gt; 反编译&gt; java代码</p>
<p>java反编译工具：<strong>jd-gui.exe</strong></p>
<p><strong>注释</strong></p>
<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p><strong>变量说明</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">C01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 申明变量</span></span><br><span class="line">  <span class="keyword">var</span> num1: <span class="type">Int</span> = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 类型可以省略（自动判断）</span></span><br><span class="line">  <span class="keyword">var</span> num2 = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 类型确定后，就不能修改</span></span><br><span class="line">  <span class="comment">// num2 = "1"</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// var 修饰的变量可改变，val 修饰的变量不可改</span></span><br><span class="line">  num2 = <span class="number">20</span></span><br><span class="line">  <span class="keyword">val</span> num3 = <span class="number">10</span></span><br><span class="line">  <span class="comment">// num3 = 20</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// val修饰的对象属性在编译后，等同于加上final</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// var 修饰的对象引用可以改变，val 修饰的则不可改变，但对象的状态(值)却是可以改变的。(比如: 自定义对象、数组、集合等等)</span></span><br><span class="line">  <span class="keyword">val</span> dog = <span class="keyword">new</span> <span class="type">Dog</span>()</span><br><span class="line">  dog.name = <span class="string">"mimi"</span></span><br><span class="line">  <span class="comment">//  dog = new Dog()</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 变量声明时，必须有初始值</span></span><br><span class="line">  <span class="comment">// var num</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>数据类型</strong></p>
<a href="/2020/01/18/20200118180040984/image-20200118210840247.png" data-fancybox="group" data-caption="image-20200118210840247" class="fancybox"><img alt="image-20200118210840247" style="zoom:60%;" title="image-20200118210840247" data-src="/2020/01/18/20200118180040984/image-20200118210840247.png" class="lazyload"></a>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在Scala中数据类型都是对象，也就是说scala没有java中的原生(基本)类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Scala数据类型分为两大类 AnyVal(值类型) 和 AnyRef(引用类型)  ?</span></span><br><span class="line"><span class="comment">// 引用类型：集合、java类、scala类。Null在Scala中也是对象。user= Null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Unit就是void</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型隐式转换</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 复杂多变的类型 --&gt; 面向对象编程+函数式编程的融合</span></span><br></pre></td></tr></table></figure></div>



<p><strong>Unit、Null、Nothing</strong></p>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>Unit</td>
<td>表示无值，和其他语言中void等同。用作不返回任何结果的方法的结果类型。Unit只有一个实例值，写成()。</td>
</tr>
<tr>
<td>Null</td>
<td>null  , Null 类型只有一个实例值  null</td>
</tr>
<tr>
<td>Nothing</td>
<td>Nothing类型在Scala的类层级的最低端；它是任何其他类型的子类型。  当一个函数，我们确定没有正常的返回值，可以用Nothing 来指定返回类型，这样有一个好处，就是我们可以把返回的值（异常）赋给其它的函数或者变量（兼容性）  def  f1():Nothing = {       throw new Exception()  }</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// -----------------值类型转换------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// java</span></span><br><span class="line"><span class="comment">//  int num = (int)2.5</span></span><br><span class="line"><span class="comment">// scala</span></span><br><span class="line"><span class="keyword">var</span> num : <span class="type">Int</span> = <span class="number">2.7</span>.toInt</span><br></pre></td></tr></table></figure></div>



<h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><p>Scala不支持三目运算符 <strong>,</strong> 在Scala中使用 <strong>if – else</strong>的方式实现。</p>
<p>和java差不多</p>
<h1 id="程序流程控制"><a href="#程序流程控制" class="headerlink" title="程序流程控制"></a>程序流程控制</h1><h2 id="顺序控制"><a href="#顺序控制" class="headerlink" title="顺序控制"></a>顺序控制</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def main(args : Array[String]) : Unit &#x3D; &#123;</span><br><span class="line">        var num1 &#x3D; 12</span><br><span class="line">        var num2 &#x3D; num1 + 2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="分支控制"><a href="#分支控制" class="headerlink" title="分支控制"></a>分支控制</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if()&#123;</span><br><span class="line"></span><br><span class="line">&#125;else if()&#123;</span><br><span class="line"></span><br><span class="line">&#125;else&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="循环控制：for"><a href="#循环控制：for" class="headerlink" title="循环控制：for"></a>循环控制：for</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">println(<span class="string">"案例1：to"</span>)</span><br><span class="line"><span class="keyword">for</span>(i &lt;- <span class="number">1</span> to <span class="number">3</span>)&#123;</span><br><span class="line">    print(i + <span class="string">" "</span>)</span><br><span class="line">&#125;</span><br><span class="line">println()</span><br><span class="line"><span class="comment">// 说明</span></span><br><span class="line"><span class="comment">//i 表示循环的变量， &lt;- 规定好 to 规定</span></span><br><span class="line"><span class="comment">//i 将会从 1-3 循环， 前后闭合 （包括1 和 3）</span></span><br><span class="line"></span><br><span class="line">println(<span class="string">"案例2：until"</span>)</span><br><span class="line"><span class="keyword">for</span>(i &lt;- <span class="number">1</span> until <span class="number">3</span>) &#123;</span><br><span class="line">    print(i + <span class="string">" "</span>)</span><br><span class="line">&#125;</span><br><span class="line">println()</span><br><span class="line"><span class="comment">// 说明:</span></span><br><span class="line"><span class="comment">//这种方式和前面的区别在于 i 是从1 到 (3-1)</span></span><br><span class="line"><span class="comment">//前闭合后开的范围</span></span><br><span class="line"></span><br><span class="line">println(<span class="string">"案例3: 循环守卫"</span>)</span><br><span class="line"><span class="keyword">for</span>(i &lt;- <span class="number">1</span> to <span class="number">3</span> <span class="keyword">if</span> i != <span class="number">2</span>) &#123;</span><br><span class="line">    print(i + <span class="string">" "</span>)</span><br><span class="line">&#125;</span><br><span class="line">println()</span><br><span class="line"><span class="comment">// 说明</span></span><br><span class="line"><span class="comment">//循环守卫，即循环保护式（也称条件判断式，守卫）。保护式为true则进入循环体内部，为false则跳过，类似于continue</span></span><br><span class="line"></span><br><span class="line">println(<span class="string">"案例4：引入变量"</span>)</span><br><span class="line"><span class="keyword">for</span>(i &lt;- <span class="number">1</span> to <span class="number">3</span>; j = <span class="number">4</span> - i) &#123;</span><br><span class="line">    print(j + <span class="string">" "</span>)</span><br><span class="line">&#125;</span><br><span class="line">println()</span><br><span class="line"></span><br><span class="line">println(<span class="string">"案例5：嵌套循环"</span>)</span><br><span class="line"><span class="keyword">for</span>(i &lt;- <span class="number">1</span> to <span class="number">3</span>; j &lt;- <span class="number">1</span> to <span class="number">3</span>) &#123;</span><br><span class="line">    println(<span class="string">" i ="</span> + i + <span class="string">" j = "</span> + j)</span><br><span class="line">&#125;</span><br><span class="line">println()</span><br><span class="line"></span><br><span class="line">println(<span class="string">"案例6：循环返回值"</span>)</span><br><span class="line"><span class="keyword">val</span> res = <span class="keyword">for</span>(i &lt;- <span class="number">1</span> to <span class="number">10</span>) <span class="keyword">yield</span> i * <span class="number">2</span></span><br><span class="line">println(res)</span><br><span class="line"><span class="comment">// 说明</span></span><br><span class="line"><span class="comment">//将遍历过程中处理的结果返回到一个新Vector集合中，使用yield关键字</span></span><br><span class="line">println()</span><br><span class="line"></span><br><span class="line">println(<span class="string">"案例6：使用花括号&#123;&#125;代替小括号()"</span>)</span><br><span class="line"><span class="keyword">for</span>&#123;i &lt;- <span class="number">1</span> to <span class="number">3</span>; j =  i * <span class="number">2</span>&#125; &#123;</span><br><span class="line">    println(<span class="string">" i= "</span> + i + <span class="string">" j= "</span> + j)</span><br><span class="line">&#125;</span><br><span class="line">println()</span><br><span class="line"><span class="comment">// 说明</span></span><br><span class="line"><span class="comment">//&#123;&#125;和()对于for表达式来说都可以</span></span><br><span class="line"><span class="comment">//for 推导式有一个不成文的约定：当for 推导式仅包含单一表达式时使用圆括号，当其包含多个表达式时使用大括号</span></span><br><span class="line"><span class="comment">//当使用&#123;&#125;i 来换行写表达式时，分号就不用写了</span></span><br></pre></td></tr></table></figure></div>

<p>结果：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">案例1：to</span><br><span class="line">1 2 3 </span><br><span class="line">案例2：until</span><br><span class="line">1 2 </span><br><span class="line">案例3: 循环守卫</span><br><span class="line">1 3 </span><br><span class="line">案例4：引入变量</span><br><span class="line">3 2 1 </span><br><span class="line">案例5：嵌套循环</span><br><span class="line"> i &#x3D;1 j &#x3D; 1</span><br><span class="line"> i &#x3D;1 j &#x3D; 2</span><br><span class="line"> i &#x3D;1 j &#x3D; 3</span><br><span class="line"> i &#x3D;2 j &#x3D; 1</span><br><span class="line"> i &#x3D;2 j &#x3D; 2</span><br><span class="line"> i &#x3D;2 j &#x3D; 3</span><br><span class="line"> i &#x3D;3 j &#x3D; 1</span><br><span class="line"> i &#x3D;3 j &#x3D; 2</span><br><span class="line"> i &#x3D;3 j &#x3D; 3</span><br><span class="line"></span><br><span class="line">案例6：循环返回值</span><br><span class="line">Vector(2, 4, 6, 8, 10, 12, 14, 16, 18, 20)</span><br><span class="line"></span><br><span class="line">案例6：使用花括号&#123;&#125;代替小括号()</span><br><span class="line"> i&#x3D; 1 j&#x3D; 2</span><br><span class="line"> i&#x3D; 2 j&#x3D; 4</span><br><span class="line"> i&#x3D; 3 j&#x3D; 6</span><br></pre></td></tr></table></figure></div>

<h2 id="循环控制：while"><a href="#循环控制：while" class="headerlink" title="循环控制：while"></a>循环控制：while</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">循环变量初始化 <span class="comment">//循环的四个要素</span></span><br><span class="line"><span class="keyword">while</span> (循环条件) &#123;</span><br><span class="line">    循环体(语句)</span><br><span class="line">    循环变量迭代</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">循环变量初始化;</span><br><span class="line">do&#123;</span><br><span class="line">    循环体(语句)</span><br><span class="line">    循环变量迭代</span><br><span class="line">&#125; <span class="keyword">while</span>(循环条件)</span><br></pre></td></tr></table></figure></div>

<p>推荐使用for</p>
<h2 id="循环控制：循环中断"><a href="#循环控制：循环中断" class="headerlink" title="循环控制：循环中断"></a>循环控制：循环中断</h2><p>去掉了break和continue。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">println(<span class="string">"案例: 循环中断"</span>)</span><br><span class="line"><span class="keyword">for</span>(i &lt;- <span class="number">1</span> to <span class="number">10</span>)&#123;</span><br><span class="line">    print(i + <span class="string">" "</span>)</span><br><span class="line">    <span class="keyword">if</span>(i==<span class="number">5</span>)&#123;</span><br><span class="line">        <span class="keyword">break</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="函数式编程-基础"><a href="#函数式编程-基础" class="headerlink" title="函数式编程-基础"></a>函数式编程-基础</h1><p>在scala中函数式编程和面向对象编程融合在一起了 </p>
<h2 id="函数-方法"><a href="#函数-方法" class="headerlink" title="函数/方法"></a>函数/方法</h2><p>函数/方法定义</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def 函数名 ([参数名: 参数类型], ...)[[: 返回值类型] &#x3D;] &#123;</span><br><span class="line">	语句... &#x2F;&#x2F;完成某个功能</span><br><span class="line">	return 返回值</span><br><span class="line">&#125;</span><br><span class="line">返回值形式1:  &#x2F;&#x2F; def 函数名(参数列表) : 数据类型 &#x3D; &#123;函数体&#125;  &#x2F;&#x2F; 返回值确定,清晰   </span><br><span class="line">返回值形式2:  &#x2F;&#x2F; def 函数名(参数列表) &#x3D; &#123;函数体&#125;  &#x2F;&#x2F; 有返回值, 类型是推断出来的</span><br><span class="line">返回值形式3:  &#x2F;&#x2F; def 函数名(参数列表) &#123;函数体&#125;  &#x2F;&#x2F; 无返回值 Unit</span><br><span class="line">如果没有return ,默认以执行到最后一行的结果作为返回值</span><br></pre></td></tr></table></figure></div>

<p>demo</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数/方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// --案例1：调用</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span></span>(n1: <span class="type">Int</span>, n2: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">return</span> n1 + n2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// --案例2：可变参数</span></span><br><span class="line"><span class="comment">//支持0到多个参数</span></span><br><span class="line"><span class="comment">//    def sum(args: Int*) : Int = &#123; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//支持1到多个参数</span></span><br><span class="line"><span class="comment">//    def sum(n1: Int, args:  Int*) : Int  = &#123; &#125;</span></span><br><span class="line"><span class="comment">// 说明:</span></span><br><span class="line"><span class="comment">//args 是集合, 通过 for循环 可以访问到各个值。</span></span><br><span class="line"><span class="comment">//可变参数需要写在形参列表的最后。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// --案例3：方法转为函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span></span>(): <span class="type">Int</span> = &#123;<span class="number">100</span>&#125;  <span class="comment">// 定义方法</span></span><br><span class="line">println(f1) <span class="comment">//100</span></span><br><span class="line">println(f1()) <span class="comment">// 100</span></span><br><span class="line"><span class="keyword">var</span> f2 = f1</span><br><span class="line"><span class="keyword">var</span> f3 = f1 _   <span class="comment">// 方法转为函数</span></span><br><span class="line">println(f2) <span class="comment">//100</span></span><br><span class="line">println(f3) <span class="comment">// 打印的是100吗? &lt;function0&gt;</span></span><br><span class="line"><span class="comment">// 如果要打印f3函数的返回值</span></span><br><span class="line">println(f3()) <span class="comment">// 100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// --案例4：匿名函数</span></span><br><span class="line"><span class="keyword">val</span> f1 = () =&gt; <span class="string">"abc"</span></span><br><span class="line">println(f1()) <span class="comment">// abc</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 完整的写法:</span></span><br><span class="line"><span class="keyword">val</span> f2: (<span class="type">String</span>, <span class="type">Double</span>) =&gt; <span class="type">Int</span> = (a: <span class="type">String</span>, b : <span class="type">Double</span>) =&gt; a.toInt + b.toInt</span><br><span class="line">println(f2(<span class="string">"2"</span>,<span class="number">1.5</span>)) <span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 简化版1,  后面的函数写法省略全部类型</span></span><br><span class="line"><span class="keyword">val</span> f3: (<span class="type">String</span>, <span class="type">Double</span>) =&gt; <span class="type">Int</span> = (a, b) =&gt; a.toInt + b.toInt</span><br><span class="line">println(f3(<span class="string">"2"</span>,<span class="number">1.5</span>)) <span class="comment">// 3</span></span><br><span class="line"><span class="comment">// (String, Double) =&gt; Int 是一个数据类型(函数签名)</span></span><br><span class="line"><span class="comment">// 简化版2 , 省略函数签名</span></span><br><span class="line"><span class="keyword">var</span> f4 = (a: <span class="type">String</span>, b:<span class="type">Double</span>) =&gt; a.toInt + b.toInt</span><br><span class="line">println(f4(<span class="string">"2"</span>,<span class="number">1.5</span>)) <span class="comment">//3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 案例5：传值调用与传名调用</span></span><br><span class="line"><span class="keyword">var</span> money = <span class="number">100</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">buy</span></span>(): <span class="type">Int</span> = &#123;</span><br><span class="line">    money  -= <span class="number">10</span></span><br><span class="line">    money</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传值：不会改变外部传参money值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span></span>(a: <span class="type">Int</span>) = &#123;</span><br><span class="line">    println(a)</span><br><span class="line">    println(a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 传名：会改变外部传参money值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span></span>(a: =&gt; <span class="type">Int</span>) = &#123;</span><br><span class="line">    println(a)</span><br><span class="line">    println(a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test1(buy) <span class="comment">// 90 90</span></span><br><span class="line">test2(buy) <span class="comment">// 80 70</span></span><br></pre></td></tr></table></figure></div>



<h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 高阶函数：将其他函数作为参数或返回值为一个函数的函数函数(higher-order function)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数的第一个参数类型是另一个函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(f: <span class="type">Int</span> =&gt; <span class="type">String</span>, v: <span class="type">Int</span>) = f(v)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fmtInt</span></span>(n: <span class="type">Int</span>) : <span class="type">String</span> = <span class="string">"[整数值&#123;"</span> + n + <span class="string">"&#125;]"</span></span><br><span class="line">println(apply(fmtInt, <span class="number">1200</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数的返回值是一个函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addBy</span></span>(n: <span class="type">Int</span>) = &#123;</span><br><span class="line">    (d : <span class="type">Double</span>) =&gt; n + d</span><br><span class="line">&#125;</span><br><span class="line">println(addBy(<span class="number">50</span>)(<span class="number">80.223</span>))</span><br></pre></td></tr></table></figure></div>



<h2 id="函数柯里化"><a href="#函数柯里化" class="headerlink" title="函数柯里化"></a>函数柯里化</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 柯里化指的是将原来接受多个参数的函数变成新的接受一个参数的函数的过程</span></span><br><span class="line"><span class="comment">// 原始函数, 有3个参数的函数</span></span><br><span class="line"><span class="comment">// def addMulti(a: Int, b: Int, c: Int) = (a + b) * c</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数A的返回值是一个函数B, 函数B的返回值是函数C</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addMulti</span></span>(a: <span class="type">Int</span>) = &#123;</span><br><span class="line">    (b: <span class="type">Int</span>) =&gt; (c: <span class="type">Int</span>) =&gt; (a + b) * c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">println(addMulti(<span class="number">50</span>)(<span class="number">80</span>)(<span class="number">20</span>))</span><br></pre></td></tr></table></figure></div>



<h2 id="参数（类型）判断"><a href="#参数（类型）判断" class="headerlink" title="参数（类型）判断"></a>参数（类型）判断</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、参数类型是可以推断时，可以省略参数类型</span><br><span class="line">2、当传入的函数，只有单个参数时，可以省去括号</span><br><span class="line">3、如果变量只在&#x3D;&gt;右边只出现一次，可以用_来代替</span><br></pre></td></tr></table></figure></div>

<p>demo</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> list = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">println(list.map((x:<span class="type">Int</span>)=&gt;x + <span class="number">1</span>))</span><br><span class="line">println(list.map((x)=&gt;x + <span class="number">1</span>))</span><br><span class="line">println(list.map(x=&gt;x + <span class="number">1</span>))</span><br><span class="line">println(list.map(_ + <span class="number">1</span>))</span><br></pre></td></tr></table></figure></div>



<h2 id="惰性函数"><a href="#惰性函数" class="headerlink" title="惰性函数"></a>惰性函数</h2><p>类似懒加载，将耗时的计算推迟到绝对需要的时候。</p>
<p>比如java使用<strong>单例模式懒汉式</strong>实现该思路</p>
<p>定义：当<strong>函数返回值</strong>被声明为<strong>lazy</strong>时，函数的执行将被推迟，直到我们首次对此取值，该函数才会执行。这种函数我们称之为<strong>惰性函数</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span></span>(n1 : <span class="type">Int</span>, n2 : <span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">    println(<span class="string">"sum() 执行了.."</span>)</span><br><span class="line">    <span class="keyword">return</span>  n1 + n2</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">lazy</span> <span class="keyword">val</span> res = sum(<span class="number">10</span>, <span class="number">20</span>)  <span class="comment">// 不会执行</span></span><br><span class="line">println(<span class="string">"-----------------"</span>)</span><br><span class="line">println(<span class="string">"res="</span> + res)   <span class="comment">// 在真正使用时才执行</span></span><br></pre></td></tr></table></figure></div>



<h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>类似java</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// demo1: 异常</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> r = <span class="number">10</span> / <span class="number">0</span></span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="comment">// catch子句是按次序捕捉的</span></span><br><span class="line">    <span class="keyword">case</span> ex: <span class="type">ArithmeticException</span>=&gt; println(<span class="string">"捕获了除数为零的算术异常"</span>)</span><br><span class="line">    <span class="keyword">case</span> ex: <span class="type">Exception</span> =&gt; println(<span class="string">"捕获了异常"</span>)  <span class="comment">// 不会打印</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">// 最终要执行的代码</span></span><br><span class="line">    println(<span class="string">"scala finally..."</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// demo2: throw关键字</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span></span>(): <span class="type">Nothing</span> = &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">Exception</span>(<span class="string">"不对"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">val</span> res = test()</span><br><span class="line"><span class="comment">// throw表达式是有类型的，就是Nothing，因为Nothing是所有类型的子类型，所以throw表达式可以用在需要类型的地方</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// demo3: 可以使用throws注释来声明异常</span></span><br><span class="line"><span class="meta">@throws</span>(classOf[<span class="type">NumberFormatException</span>])</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f11</span></span>()  = &#123;</span><br><span class="line">    <span class="string">"abc"</span>.toInt</span><br><span class="line">&#125;</span><br><span class="line">f11()</span><br><span class="line">println(<span class="string">"---"</span>)</span><br></pre></td></tr></table></figure></div>





<h1 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h1><h2 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h2><p>与java对比</p>
<ol>
<li>scala语法中，类并不声明为public，所有这些类都具有公有可见性(即默认就是public)</li>
<li>一个Scala源文件可以包含多个类. </li>
</ol>
<p>定义类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Scala中声明一个属性,必须显示的初始化，然后根据初始化数据的类型自动推断，属性类型可以省略</span></span><br><span class="line">    <span class="keyword">var</span> age : <span class="type">Int</span> = <span class="number">10</span></span><br><span class="line">    <span class="keyword">var</span> sal = <span class="number">8090.9</span></span><br><span class="line">    <span class="keyword">var</span> name  = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">var</span> address : <span class="type">String</span> = <span class="literal">null</span>   <span class="comment">// 如果赋值为null,则一定要加类型，因为不加类型, 那么该属性的类型就是Null类型</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果在定义属性时，暂时不赋值，也可以使用符号_(下划线)，让系统分配默认值.</span></span><br><span class="line">    <span class="keyword">var</span> a : <span class="type">Double</span> = _</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>创建对象</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> | <span class="keyword">var</span> 对象名 [：类型]  = <span class="keyword">new</span> 类型()</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>、如果我们不希望改变对象的引用(即：内存地址), 应该声明为<span class="keyword">val</span> 性质的，否则声明为<span class="keyword">var</span>, scala设计者推荐使用<span class="keyword">val</span> ,因为一般来说，在程序中，我们只是改变对象属性的值，而不是改变对象的引用。</span><br><span class="line"><span class="number">2</span>、类型声明可以省略，但当类型和后面<span class="keyword">new</span> 对象类型有继承关系即多态时，就必须写了</span><br></pre></td></tr></table></figure></div>

<p>访问属性</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对象名.属性名</span><br></pre></td></tr></table></figure></div>

<p>类和对象的内存分配机制</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> p1 = <span class="keyword">new</span> <span class="type">Person</span></span><br><span class="line">p1.name = <span class="string">"jack"</span></span><br><span class="line">p1.age = <span class="number">30</span></span><br><span class="line"><span class="keyword">val</span> p2 = p1   <span class="comment">//内存布局?</span></span><br><span class="line">p2.age = <span class="number">18</span></span><br><span class="line">println(<span class="string">"p2.age="</span> + p2.age) <span class="comment">//18</span></span><br><span class="line">println(<span class="string">"p1.age="</span>+ p1.age) <span class="comment">//18</span></span><br></pre></td></tr></table></figure></div>

<p>构造器</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造器</span></span><br><span class="line"><span class="comment">// Scala类的构造器包括： 主构造器（一个） 和 辅助构造器(多个)</span></span><br><span class="line"><span class="comment">// 可以体会到Scala的函数式编程和面向对象编程融合在一起，即：构造器也是方法（函数）</span></span><br><span class="line"><span class="comment">// 如果主构造器无参数，小括号可省略，构建对象时调用的构造方法的小括号也可以省略</span></span><br><span class="line"><span class="comment">// 如果想让主构造器变成私有的，可以在()之前加上private，这样用户不能直接通过主构造器来构造对象了 class Person private()</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  class 类名(形参列表) &#123;  // 主构造器</span></span><br><span class="line"><span class="comment">    // 类体</span></span><br><span class="line"><span class="comment">    def  this(形参列表) &#123;  // 辅助构造器</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    def  this(形参列表) &#123;  //辅助构造器可以有多个...</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span> = _</span><br><span class="line">    <span class="keyword">var</span> age: <span class="type">Int</span> = _</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">this</span></span>(name : <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="comment">//辅助构造器无论是直接或间接，最终都一定要调用主构造器，执行主构造器的逻辑</span></span><br><span class="line">        <span class="comment">//而且需要放在辅助构造器的第一行[这点和java一样，java中一个构造器要调用同类的其它构造器，也需要放在第一行]</span></span><br><span class="line">        <span class="keyword">this</span>()  <span class="comment">//直接调用主构造器</span></span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">this</span></span>(name : <span class="type">String</span>, age : <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>() <span class="comment">//直接调用主构造器</span></span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">        <span class="keyword">this</span>.age = age</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">this</span></span>(age : <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="string">"匿名"</span>) <span class="comment">//简介调用主构造器,因为 def this(name : String) 中调用了主构造器!</span></span><br><span class="line">        <span class="keyword">this</span>.age = age</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">showInfo</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">        println(<span class="string">"person信息如下:"</span>)</span><br><span class="line">        println(<span class="string">"name="</span> + <span class="keyword">this</span>.name)</span><br><span class="line">        println(<span class="string">"age="</span> + <span class="keyword">this</span>.age)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>构造器参数</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、Scala类的主构造器的形参未用任何修饰符修饰，那么这个参数是局部变量。</span><br><span class="line">2、如果参数使用val关键字声明，那么Scala会将参数作为类的私有的只读属性使用 </span><br><span class="line">3、如果参数使用var关键字声明，那么Scala会将参数作为类的成员属性使用,并会提供属性对应的xxx()[类似getter]&#x2F;xxx_$eq()[类似setter]方法，即这时的成员属性是私有的，但是可读写。</span><br></pre></td></tr></table></figure></div>

<p>Bean属性</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 给某个属性加入@BeanPropetry注解后，会生成getXXX和setXXX的方法</span></span><br><span class="line"><span class="comment">// 并且对原来底层自动生成类似xxx(),xxx_$eq()方法，没有冲突，二者可以共存。</span></span><br><span class="line"><span class="keyword">import</span> scala.beans.<span class="type">BeanProperty</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="meta">@BeanProperty</span> <span class="keyword">var</span> name: <span class="type">String</span> = <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>Scala对象创建对象流程分析</p>
<ol>
<li>加载类的信息(属性信息和方法信息), 如果父类也没有加载, 则由父到子加载父类</li>
<li>在内存中(堆)给对象开辟空间</li>
<li>使用父类的构造器(主构造器/辅助构造器)完成父类的初始化 (多个父类)</li>
<li>使用本类的主构造器完成初始化</li>
<li>使用本类的辅助构造器继续初始化</li>
<li>将对象在内存中的地址赋给 p 这个引用</li>
</ol>
<h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><p><strong>基本</strong></p>
<p>1、Scala中包名和源码所在的系统文件目录结构要可以不一致，但是编译后的字节码文件路径和包名会保持一致(这个工作由编译器完成)。<br>2、Scala会自动引入的常用包</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java.lang.*</span><br><span class="line">scala包</span><br><span class="line">Predef包</span><br></pre></td></tr></table></figure></div>

<p>3、使用嵌套形式打包：好处是：程序员可以在同一个文件中，将类(class / object)、trait 创建在不同的包中<br>4、作用域原则：可以直接向上访问。即: Scala中子包中直接访问父包中的内容, 大括号体现作用域。<br>5、父包要访问子包的内容时，需要import对应的类等<br>6、可以在同一个.scala文件中，声明多个并列的package(建议嵌套的pakage不要超过3层)<br>7、包名可以相对路径也可以绝对路径，比如，访问BeanProperty的绝对路径是：<em>root</em>. scala.beans.BeanProperty ，在一般情况下：我们使用相对路径来引入包，只有当包名冲突时，使用绝对路径来处理。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第一种形式</span></span><br><span class="line"><span class="comment">//@BeanProperty var age: Int = _</span></span><br><span class="line"><span class="comment">//第二种形式, 和第一种一样，都是相对路径引入</span></span><br><span class="line"><span class="comment">//@scala.beans.BeanProperty var age: Int = _scala</span></span><br><span class="line"><span class="comment">//第三种形式, 是绝对路径引入，可以解决包名冲突</span></span><br><span class="line">@_root_. scala.beans.<span class="type">BeanProperty</span> <span class="keyword">var</span> age: <span class="type">Int</span> = _</span><br></pre></td></tr></table></figure></div>

<p>demo</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mxx&#123;</span><br><span class="line">    <span class="comment">//这个类就是在com.mxx包下</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//这个类对象就是在Monster$ , 也在com.mxx包下</span></span><br><span class="line">    <span class="class"><span class="keyword">object</span> <span class="title">Monster</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">package</span> scala &#123;</span><br><span class="line">        <span class="comment">//这个类就是在com.mxx.scala包下</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//这个Test 类对象</span></span><br><span class="line">        <span class="class"><span class="keyword">object</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">                <span class="comment">//子包可以直接访问父包的内容</span></span><br><span class="line">                <span class="keyword">var</span> dog = <span class="keyword">new</span> <span class="type">Dog</span>()</span><br><span class="line">                println(<span class="string">"dog="</span> + dog)</span><br><span class="line">                <span class="comment">//在子包和父包 类重名时，默认采用就近原则.</span></span><br><span class="line">                <span class="keyword">var</span> u = <span class="keyword">new</span> <span class="type">User</span>()</span><br><span class="line">                println(<span class="string">"u="</span> + u)</span><br><span class="line">                <span class="comment">//在子包和父包 类重名时，如果希望指定使用某个类，则带上包路径</span></span><br><span class="line">                <span class="keyword">var</span> u2 = <span class="keyword">new</span> com.mxx.<span class="type">User</span>()</span><br><span class="line">                println(<span class="string">"u2="</span> + u2)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<hr>
<p><strong>包对象</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">包对象：包可以包含类、对象和特质trait，但不能包含函数/方法或变量的定义。</span></span><br><span class="line"><span class="comment">  这是Java虚拟机的局限。为了弥补这一点不足，scala提供了包对象的概念来解决这个问题。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.mxx &#123;</span><br><span class="line">    <span class="comment">//每个包都可以有一个包对象。你需要在父包(com.mxx)中定义它,且名称与子包一样。</span></span><br><span class="line">    <span class="keyword">package</span> <span class="class"><span class="keyword">object</span> <span class="title">scala</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> name = <span class="string">"jack"</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">sayOk</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">            println(<span class="string">"package object sayOk!"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">package</span> scala &#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">def</span> <span class="title">test</span></span>() : <span class="type">Unit</span> =&#123;</span><br><span class="line">                <span class="comment">//这里的name就是包对象scala中声明的name</span></span><br><span class="line">                println(name)</span><br><span class="line">                sayOk()<span class="comment">//这个sayOk 就是包对象scala中声明的sayOk</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="class"><span class="keyword">object</span> <span class="title">TestObj</span> </span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">                <span class="keyword">val</span> t  = <span class="keyword">new</span> <span class="type">Test</span>()</span><br><span class="line">                t.test()</span><br><span class="line">                <span class="comment">//因为TestObje和scala这个包对象在同一包，因此也可以使用</span></span><br><span class="line">                println(<span class="string">"name="</span> + name)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">包对象的底层实现机制分析</span></span><br><span class="line"><span class="comment">包的可见性</span></span><br><span class="line"><span class="comment">  默认为public访问权限</span></span><br><span class="line"><span class="comment">  在scala中没有public关键字,即不能用public显式的修饰属性和方法。</span></span><br><span class="line"><span class="comment">  scala设计者将访问的方式分成三大类(1) 处处可以访问public (2) 子类和伴生对象能访问protected (3) 本类和伴生对象访问 private</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></div>



<hr>
<p><strong>包的引入</strong></p>
<p>1、在Scala中，import语句可以出现在任何地方，并不仅限于文件顶部，import语句的作用一直延伸到包含该语句的块末尾。这种语法的好处是：在需要时在引入包，缩小import 包的作用范围，提高效率。<br>2、Java中如果想要导入包中所有的类，可以通过通配符*，Scala中采用下划线_<br>3、如果不想要某个包中全部的类，而是其中的几个类，可以采用选取器(大括号)</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scala.collection.mutable.&#123;<span class="type">HashMap</span>, <span class="type">HashSet</span>&#125;</span><br></pre></td></tr></table></figure></div>

<p>4、如果引入的多个包中含有相同的类，那么可以将类进行重命名进行区分，这个就是重命名。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.&#123; <span class="type">HashMap</span>=&gt;<span class="type">JavaHashMap</span>, <span class="type">List</span>&#125;</span><br><span class="line"><span class="keyword">import</span> scala.collection.mutable._</span><br><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> <span class="type">HashMap</span>()</span><br><span class="line"><span class="keyword">var</span> map1 = <span class="keyword">new</span> <span class="type">JavaHashMap</span>();</span><br></pre></td></tr></table></figure></div>

<p>5、如果某个冲突的类根本就不会用到，那么这个类可以直接隐藏掉。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.&#123; <span class="type">HashMap</span>=&gt;_, _&#125;</span><br><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> <span class="type">HashMap</span>()</span><br></pre></td></tr></table></figure></div>

<h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 1、Scala中为了简化代码的开发，当声明属性时，本身就自动提供了对应setter/getter方法，如果属性声明为private的，那么自动生成的setter/getter方法也是private的，如果属性省略访问权限修饰符，那么自动生成的setter/getter方法是public的</span></span><br><span class="line"><span class="comment"> 2、因此我们如果只是对一个属性进行简单的set和get ，只要声明一下该属性(属性使用默认访问修饰符) 不用写专门的getset，默认会创建，访问时，直接对象.变量。这样也是为了保持访问一致性</span></span><br><span class="line"><span class="comment"> 3、从形式上看 dog.food 直接访问属性，其实底层仍然是访问的方法,  看一下反编译的代码就明白</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>(<span class="params">inAge:<span class="type">Int</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> age: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span> = <span class="string">""</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> age2: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">val</span> name2: <span class="type">String</span> = <span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">C08</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">val</span> cat = <span class="keyword">new</span> <span class="type">Cat</span>(<span class="number">10</span>)</span><br><span class="line">        cat.name = <span class="string">"喵"</span></span><br><span class="line">        println(cat.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>1、基本语法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">studying</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">        println(<span class="keyword">this</span>.name + <span class="string">"学习 scala中...."</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>2、子类继承了所有的属性，只是私有的属性不能直接访问，需要通过从父类继承的公共的方法去访问</p>
<p>3、scala明确规定，重写一个非抽象方法需要用override关键字修饰，调用超类的方法使用super关键字</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Emp</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">printName</span></span>() &#123;</span><br><span class="line">        println(<span class="string">"Emp printName() "</span> + name)</span><br><span class="line">        <span class="keyword">super</span>.printName()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>4、类型检查和转换</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 要测试某个对象是否属于某个给定的类，可以用isInstanceOf方法。用asInstanceOf方法将引用转换为子类的引用。classOf获取对象的类名。</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">C10</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(classOf[<span class="type">String</span>])</span><br><span class="line">    <span class="keyword">val</span> s = <span class="string">"zhangsan"</span></span><br><span class="line">    println(s.getClass.getName) <span class="comment">//这种是Java中反射方式得到类型</span></span><br><span class="line">    println(s.isInstanceOf[<span class="type">String</span>])</span><br><span class="line">    println(s.asInstanceOf[<span class="type">String</span>]) <span class="comment">//将s 显示转换成String</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>5、超类的构造</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1）类有一个主构器和任意数量的辅助构造器，而每个辅助构造器都必须先调用主构造器(也可以是间接调用)</span></span><br><span class="line"><span class="comment">// 2）只有主构造器可以调用父类的构造器。辅助构造器不能直接调用父类的构造器。在Scala的构造器中，你不能调用super(params)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">name: <span class="type">String</span></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Emp</span> (<span class="params">name: <span class="type">String</span></span>) <span class="keyword">extends</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// super(name)</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span>  <span class="title">this</span></span>() &#123;</span><br><span class="line">    <span class="comment">//super("abc")</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>6、覆写字段</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">- 在Scala中，子类改写父类的字段，我们称为覆写/重写字段。覆写字段需使用 override修饰。</span></span><br><span class="line"><span class="comment">- 抽象属性：声明未初始化的变量就是抽象的属性,抽象属性在抽象类</span></span><br><span class="line"><span class="comment">- 如果是覆写一个父类的抽象属性，那么override 关键字可省略(本质上是实现)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  <span class="keyword">val</span> age : <span class="type">Int</span> = <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="keyword">val</span> age : <span class="type">Int</span> = <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">C10</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> obj1 : <span class="type">A</span> = <span class="keyword">new</span> <span class="type">B</span>()</span><br><span class="line">    <span class="keyword">val</span> obj2 : <span class="type">B</span> = <span class="keyword">new</span> <span class="type">B</span>()</span><br><span class="line"></span><br><span class="line">    println(obj1.age) <span class="comment">//20</span></span><br><span class="line">    println(obj2.age) <span class="comment">// 20</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>7、抽象类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> - 方法不用标记abstract，只要省掉方法体即可。</span></span><br><span class="line"><span class="comment"> - 抽象字段/属性就是没有初始值的字段</span></span><br><span class="line"><span class="comment"> - 抽象类的价值更多是在于设计，是设计者设计好后，让子类继抽象类。抽象类本质上就是一个模板设计</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name : <span class="type">String</span> <span class="comment">//抽象的属性</span></span><br><span class="line">  <span class="keyword">var</span> age : <span class="type">Int</span> <span class="comment">// 抽象的属性</span></span><br><span class="line">  <span class="keyword">var</span> color : <span class="type">String</span> = <span class="string">"black"</span>  <span class="comment">// 普通属性</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">cry</span></span>() <span class="comment">// 抽象方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>8、匿名子类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Monster</span></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name : <span class="type">String</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">cry</span></span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">C10</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">var</span> monster = <span class="keyword">new</span> <span class="type">Monster</span> &#123;</span><br><span class="line">      <span class="keyword">override</span> <span class="keyword">var</span> name: <span class="type">String</span> = <span class="string">"牛魔王"</span></span><br><span class="line">      <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">cry</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">        println(<span class="string">"牛魔王哼哼叫唤.."</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>9、继承层级</p>
<a href="/2020/01/18/20200118180040984/image-20200205171238470.png" data-fancybox="group" data-caption="image-20200205171238470" class="fancybox"><img alt="image-20200205171238470" style="zoom:80%;" title="image-20200205171238470" data-src="/2020/01/18/20200118180040984/image-20200205171238470.png" class="lazyload"></a>

<p>1、在scala中，所有其他类都是AnyRef的子类，类似Java的Object。<br>2、AnyVal和AnyRef都扩展自Any类。Any类是根节点/根类型<br>3、Any中定义了isInstanceOf、asInstanceOf方法，以及哈希方法等。<br>4、Null类型的唯一实例就是null对象。可以将null赋值给任何引用，但不能赋值给值类型的变量[案例演示]。<br>5、Nothing类型没有实例。它对于泛型结构是有用处的，举例：空列表Nil的类型是List[Nothing]，它是List[T]的子类型，T可以是任何类。</p>
<h2 id="静态属性和静态方法"><a href="#静态属性和静态方法" class="headerlink" title="静态属性和静态方法"></a>静态属性和静态方法</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Scala中静态的概念-伴生对象</span></span><br><span class="line"><span class="comment">  - Scala语言是完全面向对象，没有静态的概念，就产生了一种特殊的对象来模拟类对象，我们称之为类的伴生对象。这个类的所有静态内容都可以放置在它的伴生对象中声明和调用。</span></span><br><span class="line"><span class="comment">  - Scala中伴生对象采用object关键字声明，伴生对象中声明的全是 "静态"内容，可以通过伴生对象名称直接调用。</span></span><br><span class="line"><span class="comment">  - 伴生对象对应的类称之为伴生类，伴生对象的名称应该和伴生类名一致。</span></span><br><span class="line"><span class="comment">  - 伴生对象中的属性和方法都可以通过伴生对象名直接调用访问</span></span><br><span class="line"><span class="comment">  - 从语法角度来讲，所谓的伴生对象其实就是类的静态方法和静态变量的集合</span></span><br><span class="line"><span class="comment">  - 从技术角度来讲，scala还是没有生成静态的内容，只不过是将伴生对象生成了一个新的类，实现属性和方法的调用。</span></span><br><span class="line"><span class="comment">  - 如果 class A 独立存在，那么A就是一个类， 如果 object A 独立存在，那么A就是一个"静态"性质的对象[即类对象]</span></span><br><span class="line"><span class="comment">  - 伴生对象-apply方法</span></span><br><span class="line"><span class="comment">    在伴生对象中定义apply方法，可以实现： 类名(参数) 方式来创建对象实例.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// class ScalaPerson 是伴生类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScalaPerson</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name : <span class="type">String</span> = _</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// object ScalaPerson 是伴生对象</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaPerson</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> sex : <span class="type">Boolean</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(<span class="type">ScalaPerson</span>.sex)</span><br><span class="line">    <span class="comment">// println(ScalaPerson.name) 不行</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">采用类对象(即伴生对象)方式构建单例对象</span><br><span class="line">  - 懒汉式</span><br><span class="line">  - 饿汉式</span><br></pre></td></tr></table></figure></div>

<p>TODO</p>
<h2 id="接口-amp-特质-trait"><a href="#接口-amp-特质-trait" class="headerlink" title="接口 &amp; 特质(trait)"></a>接口 &amp; 特质(trait)</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">- 接口并不属于面向对象的范畴，Scala是纯面向对象的语言，在Scala中，没有接口, 也没有implements关键字</span></span><br><span class="line"><span class="comment">- Scala语言中，采用trait（特质，特征）来代替接口的概念</span></span><br><span class="line"><span class="comment">- 在scala中，java中的接口可以当做特质使用</span></span><br><span class="line"><span class="comment">- 使用</span></span><br><span class="line"><span class="comment">没有父类</span></span><br><span class="line"><span class="comment">class  类名   extends   特质1   with    特质2   with   特质3 ..</span></span><br><span class="line"><span class="comment">有父类</span></span><br><span class="line"><span class="comment">class  类名   extends   父类   with  特质1   with   特质2   with 特质3</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">- 特质可以同时拥有抽象方法和具体方法</span></span><br><span class="line"><span class="comment">- 和Java中的接口不太一样的是特质中的方法并不一定是抽象的，也可以有非抽象方法(即：实现了的方法)。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Trait1</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getConnect</span></span>(user: <span class="type">String</span>, pwd: <span class="type">String</span>): <span class="type">Unit</span> <span class="comment">//声明方法，抽象的.</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test</span></span>(n1:<span class="type">Int</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">A</span> <span class="keyword">with</span> <span class="title">Trait1</span> </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">getConnect</span></span>(user: <span class="type">String</span>, pwd: <span class="type">String</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(<span class="string">"c连接mysql"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span> <span class="keyword">extends</span> <span class="title">D</span> <span class="keyword">with</span> <span class="title">Trait1</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getConnect</span></span>(user: <span class="type">String</span>, pwd: <span class="type">String</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(<span class="string">"e连接oracle"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>TODO</p>
<h2 id="type关键字"><a href="#type关键字" class="headerlink" title="type关键字"></a>type关键字</h2><p>使用type关键字可以定义新的数据类型名称。本质上就是类型的一个别名</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">S</span> </span>= <span class="type">String</span></span><br><span class="line"><span class="keyword">var</span> v : <span class="type">S</span> = <span class="string">"abc"</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span></span>() : <span class="type">S</span> = <span class="string">"xyz"</span></span><br></pre></td></tr></table></figure></div>



<h2 id="嵌套类"><a href="#嵌套类" class="headerlink" title="嵌套类"></a>嵌套类</h2><p>在Scala中，你几乎可以在任何语法结构中内嵌任何语法结构。如在类中可以再定义一个类，这样的类是嵌套类，其他语法结构也是一样。</p>
<p>嵌套类类似于Java中的内部类。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScalaOuterClass</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">ScalaInnerClass</span> </span>&#123; <span class="comment">//成员内部类</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaOuterClass</span> </span>&#123;  <span class="comment">//伴生对象</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">ScalaStaticInnerClass</span> </span>&#123; <span class="comment">//静态内部类</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> outer1 : <span class="type">ScalaOuterClass</span> = <span class="keyword">new</span> <span class="type">ScalaOuterClass</span>();</span><br><span class="line"><span class="keyword">val</span> outer2 : <span class="type">ScalaOuterClass</span> = <span class="keyword">new</span> <span class="type">ScalaOuterClass</span>();</span><br><span class="line"><span class="comment">// Scala创建内部类的方式和Java不一样，将new关键字放置在前，使用  对象.内部类  的方式创建</span></span><br><span class="line"><span class="keyword">val</span> inner1 = <span class="keyword">new</span> outer1.<span class="type">ScalaInnerClass</span>()</span><br><span class="line"><span class="keyword">val</span> inner2 = <span class="keyword">new</span> outer2.<span class="type">ScalaInnerClass</span>()</span><br><span class="line"><span class="comment">//创建静态内部类对象</span></span><br><span class="line"><span class="keyword">val</span> staticInner = <span class="keyword">new</span> <span class="type">ScalaOuterClass</span>.<span class="type">ScalaStaticInnerClass</span>()</span><br><span class="line">println(staticInner)</span><br></pre></td></tr></table></figure></div>

<p>TODO</p>
<h1 id="隐式转换和隐式参数"><a href="#隐式转换和隐式参数" class="headerlink" title="隐式转换和隐式参数"></a>隐式转换和隐式参数</h1><p>todo</p>
<h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><h2 id="可变与不可变"><a href="#可变与不可变" class="headerlink" title="可变与不可变"></a>可变与不可变</h2><p>可变集合</p>
<p><a href="/2020/01/18/20200118180040984/collections-1581420684666.png" data-fancybox="group" data-caption="collections" class="fancybox"><img alt="collections" title="collections" data-src="/2020/01/18/20200118180040984/collections-1581420684666.png" class="lazyload"></a></p>
<p>不可变集合</p>
<p><a href="/2020/01/18/20200118180040984/collections.immutable.png" data-fancybox="group" data-caption="collections.immutable" class="fancybox"><img alt="collections.immutable" title="collections.immutable" data-src="/2020/01/18/20200118180040984/collections.immutable.png" class="lazyload"></a></p>
<p>String是一种集合类型</p>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>…</p>
<h2 id="元组-Tuple"><a href="#元组-Tuple" class="headerlink" title="元组 Tuple"></a>元组 Tuple</h2><p>可以存放各种相同或不同类型的数据 。</p>
<p>注意：元组中最大只能有 22 个元素  </p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建元组</span></span><br><span class="line"><span class="keyword">val</span> tuple = (<span class="number">1</span>, <span class="number">2</span>, <span class="string">"hello"</span>)</span><br><span class="line"><span class="comment">//访问元组</span></span><br><span class="line"><span class="comment">//1. 使用 _顺序号</span></span><br><span class="line">println(tuple._3) <span class="comment">// "hello"</span></span><br><span class="line"><span class="comment">//2. 使用</span></span><br><span class="line">println(tuple.productElement(<span class="number">2</span>)) <span class="comment">//下标是从 0 开始计算</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历元组[通过迭代器来遍历]</span></span><br><span class="line"><span class="keyword">for</span> (i &lt;- tuple.productIterator) &#123;</span><br><span class="line">	println(<span class="string">"i="</span> + i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="列表-List"><a href="#列表-List" class="headerlink" title="列表 List"></a>列表 List</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建</span></span><br><span class="line"><span class="comment">// 默认的scala.collection.immutable.List</span></span><br><span class="line"><span class="keyword">val</span> list01 = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) <span class="comment">//创建时，直接分配元素 apply</span></span><br><span class="line">println(list01)</span><br><span class="line"><span class="keyword">val</span> list02 = <span class="type">Nil</span> <span class="comment">//空集合</span></span><br><span class="line">println(list02)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问</span></span><br><span class="line"><span class="keyword">val</span> value1 = list1(<span class="number">1</span>) <span class="comment">// 1 是索引，表示取出第 2 个元素.</span></span><br><span class="line">println(value1)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 追加</span></span><br><span class="line"><span class="keyword">var</span> list1 = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">"abc"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// :+运算符表示在列表的最后增加数据</span></span><br><span class="line"><span class="comment">// 说明 1. :+ 符号 : 前是集合 + 后是元素</span></span><br><span class="line"><span class="keyword">val</span> list2 = list1 :+ <span class="number">4</span></span><br><span class="line">println(list1) <span class="comment">//list1 没有变化</span></span><br><span class="line">println(list2) <span class="comment">//新的列表结果是 [1, 2, 3, "abc", 4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//给 list 向前面追加</span></span><br><span class="line"><span class="comment">//说明 1. +: 符号 : 后是集合 + 前是元素</span></span><br><span class="line"><span class="keyword">val</span> list3 = <span class="number">100</span> +: list1</span><br><span class="line">println(<span class="string">"list3="</span> + list3)</span><br><span class="line"></span><br><span class="line"><span class="comment">// :: 使用</span></span><br><span class="line"><span class="comment">// 符号::表示向集合中 新建集合添加元素。</span></span><br><span class="line"><span class="comment">// 运算规则， 从右向左。</span></span><br><span class="line"><span class="keyword">val</span> list4 = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">"abc"</span>)</span><br><span class="line"><span class="comment">// 操作步骤</span></span><br><span class="line"><span class="comment">// 1. ()</span></span><br><span class="line"><span class="comment">// 2. (List(1, 2, 3, "abc"))</span></span><br><span class="line"><span class="comment">// 3. (6, List(1, 2, 3, "abc"))</span></span><br><span class="line"><span class="comment">// 4. (5, 6, List(1, 2, 3, "abc"))</span></span><br><span class="line"><span class="comment">// 5. (4, 5, 6, List(1, 2, 3, "abc"))</span></span><br><span class="line"><span class="keyword">val</span> list5 = <span class="number">4</span> :: <span class="number">5</span> :: <span class="number">6</span> :: list4 :: <span class="type">Nil</span></span><br><span class="line">println(<span class="string">"list5="</span> + list5)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ::: 的使用</span></span><br><span class="line"><span class="comment">// ::: 运算符是将集合中的每一个元素加入到空集合中去, ::: 左右两边需要时集合</span></span><br><span class="line"><span class="comment">//下面等价 4 :: 5 :: 6 :: list1</span></span><br><span class="line"><span class="keyword">var</span> list6 = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">"abc"</span>)</span><br><span class="line"><span class="comment">// 步骤</span></span><br><span class="line"><span class="comment">// 1. ()</span></span><br><span class="line"><span class="comment">// 2. (1, 2, 3, "abc")</span></span><br><span class="line"><span class="comment">// 3. (6, 1, 2, 3, "abc")</span></span><br><span class="line"><span class="comment">// 4. (5, 6, 1, 2, 3, "abc")</span></span><br><span class="line"><span class="comment">// 5. (4, 5, 6, 1, 2, 3, "abc")</span></span><br><span class="line"><span class="keyword">val</span> list7 = <span class="number">4</span> :: <span class="number">5</span> :: <span class="number">6</span> :: list6 ::: <span class="type">Nil</span></span><br><span class="line">println(<span class="string">"list7="</span> + list7)</span><br></pre></td></tr></table></figure></div>

<h2 id="列表-ListBuffer"><a href="#列表-ListBuffer" class="headerlink" title="列表 ListBuffer"></a>列表 ListBuffer</h2><h2 id="队列-Queue"><a href="#队列-Queue" class="headerlink" title="队列 Queue"></a>队列 Queue</h2><h2 id="映射-Map"><a href="#映射-Map" class="headerlink" title="映射 Map"></a>映射 Map</h2><p>Scala 中不可变的 Map 是有序的，可变的 Map 是无序的  </p>
<p>创建</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造不可变映射</span></span><br><span class="line"><span class="keyword">val</span> map1 = <span class="type">Map</span>(<span class="string">"Alice"</span> -&gt; <span class="number">10</span>, <span class="string">"Bob"</span> -&gt; <span class="number">20</span>, <span class="string">"Kotlin"</span> -&gt; <span class="string">"北京"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造可变映射</span></span><br><span class="line"><span class="keyword">val</span> map2 = scala.collection.mutable.<span class="type">Map</span>(<span class="string">"Alice"</span> -&gt; <span class="number">10</span>, <span class="string">"Bob"</span> -&gt; <span class="number">20</span>, <span class="string">"Kotlin"</span> -&gt; <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建空的映射</span></span><br><span class="line"><span class="keyword">val</span> map3 = <span class="keyword">new</span> scala.collection.mutable.<span class="type">HashMap</span>[<span class="type">String</span>, <span class="type">Int</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对偶元组</span></span><br><span class="line"><span class="comment">// 即创建包含键值对的二元组, 和第一种方式等价</span></span><br><span class="line"><span class="keyword">val</span> map4 = mutable.<span class="type">Map</span>( (<span class="string">"A"</span>, <span class="number">1</span>), (<span class="string">"B"</span>, <span class="number">2</span>), (<span class="string">"C"</span>, <span class="number">3</span>),(<span class="string">"D"</span>, <span class="number">30</span>) )</span><br></pre></td></tr></table></figure></div>

<p>取值</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 使用 map(key)</span></span><br><span class="line"><span class="comment">// 如果 key 不存在，则抛出异常[java.util.NoSuchElementException]</span></span><br><span class="line"><span class="keyword">val</span> value1 = map2(<span class="string">"Alice"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 使用 contains 方法检查是否存在 key,返回 Boolean</span></span><br><span class="line">map4.contains(<span class="string">"B"</span>)</span><br><span class="line"><span class="comment">// 使用 containts 先判断在取值，可以防止异常</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 使用 map.get(key).get 取值</span></span><br><span class="line"><span class="keyword">var</span> map4 = mutable.<span class="type">Map</span>( (<span class="string">"A"</span>, <span class="number">1</span>), (<span class="string">"B"</span>, <span class="string">"北京"</span>), (<span class="string">"C"</span>, <span class="number">3</span>) )</span><br><span class="line">println(map4.get(<span class="string">"A"</span>)) <span class="comment">//Some</span></span><br><span class="line">println(map4.get(<span class="string">"A"</span>).get) <span class="comment">//得到 Some 再取出</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 使用 map4.getOrElse()取值</span></span><br><span class="line"><span class="comment">// 如果 key 不存在，返回默认值。</span></span><br><span class="line"><span class="keyword">val</span> map4 = mutable.<span class="type">Map</span>( (<span class="string">"A"</span>, <span class="number">1</span>), (<span class="string">"B"</span>, <span class="string">"北京"</span>), (<span class="string">"C"</span>, <span class="number">3</span>) )</span><br><span class="line">println(map4.getOrElse(<span class="string">"A"</span>,<span class="string">"默认"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//如何选择取值方式建议</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. 如果我们确定 key 是存在的，应该使用 map("key") ,速度快.</span></span><br><span class="line"><span class="comment">2. 如果我们不确定 key 是否存在， 而且在不存在时，有业务逻辑处理就是用 map.contains() 配合 map("key")</span></span><br><span class="line"><span class="comment">3. 如果只是简单的希望返回一个值，就使用 getOrElse()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div>

<p>对 map 修改、添加和删除  </p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 更新 map 的元素</span></span><br><span class="line"><span class="comment">// map 是可变的，才能修改</span></span><br><span class="line"><span class="comment">// 如果 key 存在：则修改对应的值,key 不存在,等价于添加一个 key-val</span></span><br><span class="line"><span class="keyword">val</span> map4 = mutable.<span class="type">Map</span>( (<span class="string">"A"</span>, <span class="number">1</span>), (<span class="string">"B"</span>, <span class="string">"北京"</span>), (<span class="string">"C"</span>, <span class="number">3</span>) )</span><br><span class="line">map4(<span class="string">"A"</span>) = <span class="number">20</span> <span class="comment">//修改和增加</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加 map 元素</span></span><br><span class="line">map+=(<span class="string">"A"</span>-&gt;<span class="number">1</span>,<span class="string">"B"</span>-&gt;<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除 map 元素</span></span><br><span class="line">map-=(<span class="string">"A"</span>,<span class="string">"B"</span>)</span><br><span class="line">map4.remove(key)</span><br></pre></td></tr></table></figure></div>

<p>对 map 遍历 </p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> map1 = mutable.<span class="type">Map</span>( (<span class="string">"A"</span>, <span class="number">1</span>), (<span class="string">"B"</span>, <span class="string">"北京"</span>), (<span class="string">"C"</span>, <span class="number">3</span>) )</span><br><span class="line"><span class="keyword">for</span> ((k, v) &lt;- map1) println(k + <span class="string">" is mapped to "</span> + v)</span><br><span class="line"><span class="keyword">for</span> (v &lt;- map1.keys) println(v)</span><br><span class="line"><span class="keyword">for</span> (v &lt;- map1.values) println(v) </span><br><span class="line"><span class="keyword">for</span>(v &lt;- map1) println(v) <span class="comment">//v 是 Tuple2</span></span><br></pre></td></tr></table></figure></div>

<h2 id="集-Set"><a href="#集-Set" class="headerlink" title="集 Set"></a>集 Set</h2><p>…</p>
<h1 id="集合应用操作"><a href="#集合应用操作" class="headerlink" title="集合应用操作"></a>集合应用操作</h1><h2 id="map-映射操作"><a href="#map-映射操作" class="headerlink" title="map 映射操作"></a>map 映射操作</h2><p>集合(List,Array..) [数据] ==&gt; 过滤（函数） ==&gt; 操作(函数计算任务)[map] ==&gt; 得到新的集合  </p>
<p>案例：请将 List(3,5,7) 中的所有元素都 * 2 ，将其结果放到一个新的集合中返回  </p>
<p>在 Scala 中可以通过 map 映射操作来解决：将集合中的每一个元素通过指定功能（函数）映射（转换）成新的  </p>
<p>结果集合这里其实就是所谓的将函数作为参数传递给另外一个函数,这是函数式编程的特点  </p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> list = <span class="type">List</span>(<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">- 这个就是 map 映射函数，集合类型都有</span></span><br><span class="line"><span class="comment">- map 是一个高阶函数,接收的函数</span></span><br><span class="line"><span class="comment">- 这里我们传的是方法，但是会转成函数 val f2 = f1 _</span></span><br><span class="line"><span class="comment">- 通过 map 的操作，返回一个新的集合 list2</span></span><br><span class="line"><span class="comment">- 底层会遍历 list 的所有元素，并传递给 f1,将 f1 的结果封装成新的集合并返回</span></span><br><span class="line"><span class="comment">- list 没有变化</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">val</span> list2 = list.map(f1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//方法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span></span>(n:<span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">    println(<span class="string">"hello..."</span>)</span><br><span class="line">	n * <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以直接定义一个函数</span></span><br><span class="line"><span class="keyword">val</span> f3 = (n1: <span class="type">Int</span>,n2: <span class="type">Int</span>) =&gt; &#123;</span><br><span class="line">n1 + n2</span><br><span class="line">&#125;</span><br><span class="line">println(f3(<span class="number">1</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure></div>

<h2 id="flatmap-映射"><a href="#flatmap-映射" class="headerlink" title="flatmap 映射"></a>flatmap 映射</h2><p>flatmap： flat 即压扁，压平，扁平化，效果就是将集合中的每个元素的子元素映射到某个函数并返回新的集合。  </p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> names = <span class="type">List</span>(<span class="string">"Alice"</span>, <span class="string">"Bob"</span>, <span class="string">"Nick"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upper</span></span>( s : <span class="type">String</span> ) : <span class="type">String</span> = &#123;</span><br><span class="line">s. toUpperCase</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 每个字符串也是 char 集合</span></span><br><span class="line">println(names.flatMap(upper)) <span class="comment">// List(A, L, I, C, E, B, O, B, N, I, C, K)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// (hello world, hello scala) -&gt; hello,world,hello,scala</span></span><br><span class="line"><span class="keyword">val</span> res1 = list.flatMap(_.split(<span class="string">" "</span>))</span><br></pre></td></tr></table></figure></div>

<h2 id="过滤-filter"><a href="#过滤-filter" class="headerlink" title="过滤-filter"></a>过滤-filter</h2><h1 id="模式匹配"><a href="#模式匹配" class="headerlink" title="模式匹配"></a>模式匹配</h1><h1 id="函数式编程-高阶"><a href="#函数式编程-高阶" class="headerlink" title="函数式编程-高阶"></a>函数式编程-高阶</h1><h1 id="泛型-上下界-视图界定-上下文界定-协变逆变不变"><a href="#泛型-上下界-视图界定-上下文界定-协变逆变不变" class="headerlink" title="泛型 上下界 视图界定 上下文界定 协变逆变不变"></a>泛型 上下界 视图界定 上下文界定 协变逆变不变</h1><h1 id="AKKA"><a href="#AKKA" class="headerlink" title="AKKA"></a>AKKA</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">C10</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">val</span> sub = <span class="keyword">new</span> <span class="type">Sub</span>()</span><br><span class="line">        sub.sayOk()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> n1: <span class="type">Int</span> = <span class="number">1</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">var</span> n2: <span class="type">Int</span> = <span class="number">2</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">var</span> n3: <span class="type">Int</span> = <span class="number">3</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test100</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(<span class="string">"base 100"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">protected</span> <span class="function"><span class="keyword">def</span> <span class="title">test200</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(<span class="string">"base 200"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">test300</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(<span class="string">"base 300"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">sayOk</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">this</span>.n1 = <span class="number">20</span></span><br><span class="line">    <span class="keyword">this</span>.n2 = <span class="number">40</span></span><br><span class="line">    <span class="comment">// this.n3 访问不到</span></span><br><span class="line">    println(<span class="string">"范围"</span> + <span class="keyword">this</span>.n1 + <span class="keyword">this</span>.n2)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>大数据分布式</category>
        <category>Spark</category>
      </categories>
      <tags>
        <tag>Scala</tag>
      </tags>
  </entry>
  <entry>
    <title>Electron-跨平台桌面开发</title>
    <url>/2019/12/31/20191231112532671/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>引言：</p>
<ul>
<li>使用 JavaScript，HTML 和 CSS 构建跨平台的桌面应用程序</li>
<li>Electron 基于 Chromium 和 Node.js</li>
<li>Electron 兼容 Mac、Windows 和 Linux，可以构建出三个平台的应用程序。</li>
</ul>
<p>参考：</p>
<ul>
<li><a href="https://www.imooc.com/learn/1198" target="_blank" rel="noopener">https://www.imooc.com/learn/1198</a></li>
</ul>
</blockquote>
<h1 id="概述-amp-启动"><a href="#概述-amp-启动" class="headerlink" title="概述&amp;启动"></a>概述&amp;启动</h1><ul>
<li>使用html\css\js开发桌面跨平台应用(mac/linux/windows)</li>
<li>基于Chromium和Nodejs（就是把浏览器一起给打包进去）</li>
<li>国内案例：微信、迅雷桌面端</li>
<li>使用的技术：nodejs\npm\前端三套</li>
</ul>
<h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><p>node git npm</p>
<p>编辑器：微软的 <a href="https://code.visualstudio.com/" target="_blank" rel="noopener">Visual Studio Code</a></p>
<h2 id="官方快速启动"><a href="#官方快速启动" class="headerlink" title="官方快速启动"></a>官方快速启动</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 克隆示例项目的仓库</span><br><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;electron&#x2F;electron-quick-start</span><br><span class="line"></span><br><span class="line"># 进入这个仓库</span><br><span class="line">$ cd electron-quick-start</span><br><span class="line"></span><br><span class="line"># 安装依赖并运行</span><br><span class="line">$ npm install &amp;&amp; npm start</span><br></pre></td></tr></table></figure></div>



<p>效果：</p>
<a href="/2019/12/31/20191231112532671/image-20191231114712989.png" data-fancybox="group" data-caption="image-20191231114712989" class="fancybox"><img alt="image-20191231114712989" style="zoom:80%;" title="image-20191231114712989" data-src="/2019/12/31/20191231112532671/image-20191231114712989.png" class="lazyload"></a>





<h1 id="第一个Electron应用"><a href="#第一个Electron应用" class="headerlink" title="第一个Electron应用"></a>第一个Electron应用</h1><h2 id="主进程和渲染进程"><a href="#主进程和渲染进程" class="headerlink" title="主进程和渲染进程"></a>主进程和渲染进程</h2><p>由于 Electron 使用了 Chromium 来展示 web 页面，所以 Chromium 的多进程架构也被使用到。 每个 Electron 中的 web 页面运行在它自己的<strong>渲染进程</strong>中。</p>
<p>相当于浏览器窗口时主进程，每个tab是渲染进程。</p>
<p>主进程：</p>
<ul>
<li>使用和系统对接的Electron  API, 就是调用系统API; </li>
<li>创建渲染进程；</li>
<li>全面支持nodejs</li>
<li>只有一个，是程序的入口</li>
</ul>
<p>渲染进程：</p>
<ul>
<li>多个，单独</li>
<li>支持 nodejs\ dom api</li>
<li>使用部分Electron  API</li>
</ul>
<h2 id="BrowserWindow"><a href="#BrowserWindow" class="headerlink" title="BrowserWindow"></a>BrowserWindow</h2><p>程序入口：main.js</p>
<p><strong>监控main文件变化</strong></p>
<p>避免修改重启应用：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install nodemon --save-dev</span><br></pre></td></tr></table></figure></div>

<p>修改mian.js</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;start&quot;: &quot;electron .&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>改为：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;start&quot;: &quot;nodemon --watch main.js --exec electron .&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p>main.js</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 加载模块</span></span><br><span class="line"><span class="keyword">const</span> &#123; app, BrowserWindow &#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当app加载结束时，回调函数</span></span><br><span class="line">app.on(<span class="string">'ready'</span>, ()=&gt;&#123;</span><br><span class="line">  <span class="comment">// 创建主窗口</span></span><br><span class="line">  <span class="keyword">const</span> mainWindow = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">    width: <span class="number">800</span>,</span><br><span class="line">    height: <span class="number">600</span>,</span><br><span class="line">    webPreferences: &#123;</span><br><span class="line">      <span class="comment">// 允许使用nodejs的api</span></span><br><span class="line">      nodeIntegration: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 加载文件</span></span><br><span class="line">  mainWindow.loadFile(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建第二个窗口</span></span><br><span class="line">  <span class="keyword">const</span> secondWindow = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">    width: <span class="number">400</span>,</span><br><span class="line">    height: <span class="number">300</span>,</span><br><span class="line">    webPreferences: &#123;</span><br><span class="line">      nodeIntegration: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 父窗口关闭，子窗口也会关闭</span></span><br><span class="line">    parent: mainWindow</span><br><span class="line">  &#125;)</span><br><span class="line">  secondWindow.loadFile(<span class="string">'second.html'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<p>index.html</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World! 2333<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 使用node语法</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">require</span>(<span class="string">'./renderer.js'</span>)</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>renderer.js</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可使用node api 和 dom api</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// node api</span></span><br><span class="line">alert(process.versions.node)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// dom api</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, () =&gt; &#123;</span><br><span class="line">    alert(<span class="string">'dom加载完成'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>



<h2 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h2><ul>
<li>使用IPC 在进程间通信，Electron提供了接口</li>
</ul>
<a href="/2019/12/31/20191231112532671/image-20191231130105472.png" data-fancybox="group" data-caption="image-20191231130105472" class="fancybox"><img alt="image-20191231130105472" style="zoom:80%;" title="image-20191231130105472" data-src="/2019/12/31/20191231112532671/image-20191231130105472.png" class="lazyload"></a>

<p>renderer process 和 main proces 互发消息</p>
<p>renderer.js</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过 renderer process 向 main proces 发送消息</span></span><br><span class="line"><span class="keyword">const</span> &#123; ipcRenderer &#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="comment">// 发送</span></span><br><span class="line">    ipcRenderer.send(<span class="string">'message'</span>, <span class="string">'hello from renderer'</span>)</span><br><span class="line">    <span class="comment">// 接收</span></span><br><span class="line">    ipcRenderer.on(<span class="string">'reply'</span>, (event, arg) =&gt; &#123;</span><br><span class="line">        <span class="comment">// 打印到页面 </span></span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">'message'</span>).innerHTML = arg</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<p>main.js</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ipcMain</span></span><br><span class="line"><span class="keyword">const</span> &#123; app, BrowserWindow, ipcMain &#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line"></span><br><span class="line">app.on(<span class="string">'ready'</span>, ()=&gt;&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">    </span><br><span class="line">  ipcMain.on(<span class="string">'message'</span>, (event, arg) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 接受</span></span><br><span class="line">    <span class="built_in">console</span>.log(arg)</span><br><span class="line">    <span class="comment">// 回复</span></span><br><span class="line">    <span class="comment">// event.sender.send('reply', 'hello from main')</span></span><br><span class="line">    <span class="comment">// 等价上面语法</span></span><br><span class="line">    mainWindow.send(<span class="string">'reply'</span>, <span class="string">'hello from main'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>



<h1 id="案例：本地音乐播放器"><a href="#案例：本地音乐播放器" class="headerlink" title="案例：本地音乐播放器"></a>案例：本地音乐播放器</h1><h2 id="原型-amp-功能点"><a href="#原型-amp-功能点" class="headerlink" title="原型&amp;功能点"></a>原型&amp;功能点</h2><p>主页</p>
<p>1、添加歌曲到曲库 </p>
<p>2、播放暂停音乐</p>
<p>3、播放信息：歌名、时间、进度</p>
<p>4、删除歌曲</p>
<p>添加音乐页</p>
<p>1、选择音乐</p>
<p>2、列表展示</p>
<p>3、导入音乐：列表到主页</p>
<h2 id="功能流程-amp-文件结构"><a href="#功能流程-amp-文件结构" class="headerlink" title="功能流程&amp;文件结构"></a>功能流程&amp;文件结构</h2><a href="/2019/12/31/20191231112532671/image-20191231142422764.png" data-fancybox="group" data-caption="image-20191231142422764" class="fancybox"><img alt="image-20191231142422764" style="zoom:80%;" title="image-20191231142422764" data-src="/2019/12/31/20191231112532671/image-20191231142422764.png" class="lazyload"></a>



<p>css样式使用bootstrap</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install bootstrap --save</span><br></pre></td></tr></table></figure></div>

<p>文件结构</p>
<a href="/2019/12/31/20191231112532671/image-20191231143024376.png" data-fancybox="group" data-caption="image-20191231143024376" class="fancybox"><img alt="image-20191231143024376" style="zoom:80%;" title="image-20191231143024376" data-src="/2019/12/31/20191231112532671/image-20191231143024376.png" class="lazyload"></a>



<h2 id="功能-添加音乐窗口"><a href="#功能-添加音乐窗口" class="headerlink" title="功能-添加音乐窗口"></a>功能-添加音乐窗口</h2><h3 id="首页开始"><a href="#首页开始" class="headerlink" title="首页开始"></a>首页开始</h3><p>renderer/index.html</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 主页面 --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>本地播放器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入样式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"../node_modules/bootstrap/dist/css/bootstrap.min.css"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container mt-4"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我的播放器<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary btn-lg btn-block mt-4"</span>&gt;</span></span><br><span class="line">            添加歌曲到曲库</span><br><span class="line">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>效果：</p>
<a href="/2019/12/31/20191231112532671/image-20191231144659769.png" data-fancybox="group" data-caption="image-20191231144659769" class="fancybox"><img alt="image-20191231144659769" style="zoom:80%;" title="image-20191231144659769" data-src="/2019/12/31/20191231112532671/image-20191231144659769.png" class="lazyload"></a>

<h3 id="创建添加音乐窗口"><a href="#创建添加音乐窗口" class="headerlink" title="创建添加音乐窗口"></a>创建添加音乐窗口</h3><p> index.html</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">require</span>(<span class="string">'./index.js'</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>index.js</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 主窗口</span></span><br><span class="line"><span class="keyword">const</span> &#123;ipcRenderer&#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line"><span class="comment">// 只有main process可以添加窗口，所以需要通信</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'add-music-button'</span>).addEventListener(<span class="string">'click'</span>, () =&gt; &#123;</span><br><span class="line">    ipcRenderer.send(<span class="string">'add-music-window'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<p>main.js</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">    ipcMain.on(<span class="string">'add-music-window'</span>, () =&gt; &#123;</span><br><span class="line">    	<span class="comment">// 添加窗口</span></span><br><span class="line">        <span class="keyword">const</span> addWindow = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">            width: <span class="number">500</span>,</span><br><span class="line">            height: <span class="number">400</span>,</span><br><span class="line">            webPreferences: &#123;</span><br><span class="line">                nodeIntegration: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            parent: mainWindow</span><br><span class="line">        &#125;)</span><br><span class="line">        addWindow.loadFile(<span class="string">'./renderer/add.html'</span>)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure></div>

<p>效果：</p>
<a href="/2019/12/31/20191231112532671/image-20191231163804884.png" data-fancybox="group" data-caption="image-20191231163804884" class="fancybox"><img alt="image-20191231163804884" style="zoom:80%;" title="image-20191231163804884" data-src="/2019/12/31/20191231112532671/image-20191231163804884.png" class="lazyload"></a>

<h3 id="重构-封装创建窗口类"><a href="#重构-封装创建窗口类" class="headerlink" title="重构-封装创建窗口类"></a>重构-封装创建窗口类</h3><p>使用es6的class</p>
<p>main.js</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 封装创建窗口类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppWindow</span> <span class="keyword">extends</span> <span class="title">BrowserWindow</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(config, fileLocation) &#123;</span><br><span class="line">    <span class="keyword">const</span> basicConfig = &#123;</span><br><span class="line">      width: <span class="number">800</span>,</span><br><span class="line">      height: <span class="number">600</span>,</span><br><span class="line">      webPreferences: &#123;</span><br><span class="line">        nodeIntegration: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用config配置覆盖默认配置</span></span><br><span class="line">    <span class="comment">// const finalConfig = Object.assign(basicConfig, config)</span></span><br><span class="line">    <span class="comment">// 第二种写法</span></span><br><span class="line">    <span class="keyword">const</span> finalConfig = &#123;...basicConfig, ...config&#125;</span><br><span class="line">    <span class="keyword">super</span>(finalConfig)</span><br><span class="line">    <span class="keyword">this</span>.loadFile(fileLocation)</span><br><span class="line">    <span class="comment">// 优化：在加载页面时，渲染进程第一次完成绘制时，会发出 ready-to-show 事件 。 在此事件后显示窗口将没有视觉闪烁</span></span><br><span class="line">    <span class="keyword">this</span>.once(<span class="string">'ready-to-show'</span>, () =&gt; &#123;</span><br><span class="line">      <span class="keyword">this</span>.show()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重构代码</span></span><br><span class="line">app.on(<span class="string">'ready'</span>, ()=&gt;&#123;</span><br><span class="line">  <span class="keyword">const</span> mainWindow = <span class="keyword">new</span> AppWindow(&#123;&#125;,<span class="string">'./renderer/index.html'</span>)</span><br><span class="line">  </span><br><span class="line">  ipcMain.on(<span class="string">'add-music-window'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> addWindow = <span class="keyword">new</span> AppWindow(&#123;</span><br><span class="line">      width: <span class="number">500</span>,</span><br><span class="line">      height: <span class="number">400</span>,</span><br><span class="line">      parent: mainWindow</span><br><span class="line">    &#125;,<span class="string">'./renderer/add.html'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>



<h3 id="使用Dialog模块添加音乐文件"><a href="#使用Dialog模块添加音乐文件" class="headerlink" title="使用Dialog模块添加音乐文件"></a>使用Dialog模块添加音乐文件</h3><p>Dialog模块可以调用原生api，打开文件。</p>
<p>分装工具类helper.js</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 工具类</span></span><br><span class="line">exports.$ = <span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">document</span>.getElementById(id)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>add.html</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">require</span>(<span class="string">'./add.js'</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>add.js</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加音乐</span></span><br><span class="line"><span class="keyword">const</span> &#123;ipcRenderer&#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; $ &#125; = <span class="built_in">require</span>(<span class="string">'./helper'</span>)</span><br><span class="line"><span class="comment">// 重构</span></span><br><span class="line">$(<span class="string">'select-music-button'</span>).addEventListener(<span class="string">'click'</span>, () =&gt; &#123;</span><br><span class="line">    ipcRenderer.send(<span class="string">'open-music-file'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<p>main.js</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 选择音乐</span></span><br><span class="line">ipcMain.on(<span class="string">'open-music-file'</span>, () =&gt; &#123;</span><br><span class="line">    dialog.showOpenDialog(&#123;</span><br><span class="line">        properties: [<span class="string">'openFile'</span>, <span class="string">'multiSelections'</span>],</span><br><span class="line">        filters: [</span><br><span class="line">            &#123; <span class="attr">name</span>: <span class="string">'Music'</span>, <span class="attr">extensions</span>: [<span class="string">'mp3'</span>] &#125; </span><br><span class="line">        ]</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(result.filePaths)</span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<p>效果：</p>
<a href="/2019/12/31/20191231112532671/image-20191231163945891.png" data-fancybox="group" data-caption="image-20191231163945891" class="fancybox"><img alt="image-20191231163945891" style="zoom:80%;" title="image-20191231163945891" data-src="/2019/12/31/20191231112532671/image-20191231163945891.png" class="lazyload"></a>

<h3 id="展示添加的文件列表"><a href="#展示添加的文件列表" class="headerlink" title="展示添加的文件列表"></a>展示添加的文件列表</h3><p>main.js</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ipcMain.on(<span class="string">'open-music-file'</span>, (event) =&gt; &#123;</span><br><span class="line">    dialog.showOpenDialog(&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(result.filePaths)&#123;</span><br><span class="line">            <span class="comment">// 传递给add</span></span><br><span class="line">            event.sender.send(<span class="string">'selected-file'</span>, result.filePaths)</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<p>add.html</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"musicList"</span> <span class="attr">class</span>=<span class="string">"mb-2"</span>&gt;</span>您还未选择任何音乐文件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>add.js</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> renderListHTML = <span class="function">(<span class="params">pathes</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> musicList = $(<span class="string">'musicList'</span>)</span><br><span class="line">    <span class="keyword">const</span> musicItemsHTML = pathes.reduce(<span class="function">(<span class="params">html, music</span>) =&gt;</span> &#123;</span><br><span class="line">         html += <span class="string">`&lt;li class="list-group-item"&gt;<span class="subst">$&#123;path.basename(music)&#125;</span>&lt;/li&gt;`</span></span><br><span class="line">         <span class="keyword">return</span> html</span><br><span class="line">    &#125;, <span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">    musicList.innerHTML = <span class="string">`&lt;ul class="list-group"&gt;<span class="subst">$&#123;musicItemsHTML&#125;</span>&lt;/ul&gt;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ipcRenderer.on(<span class="string">'selected-file'</span>, (event, path) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Array</span>.isArray(path))&#123;</span><br><span class="line">        <span class="comment">// 渲染歌曲List</span></span><br><span class="line">        renderListHTML(path)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<p>效果：</p>
<a href="/2019/12/31/20191231112532671/image-20191231164011422.png" data-fancybox="group" data-caption="image-20191231164011422" class="fancybox"><img alt="image-20191231164011422" style="zoom:80%;" title="image-20191231164011422" data-src="/2019/12/31/20191231112532671/image-20191231164011422.png" class="lazyload"></a>

<h3 id="使用Electron-store持久化数据"><a href="#使用Electron-store持久化数据" class="headerlink" title="使用Electron store持久化数据"></a>使用Electron store持久化数据</h3><ul>
<li><p>数据库软件(太大)</p>
</li>
<li><p>HTML5的浏览器对象(缓存会过期)</p>
</li>
<li><p>本地文件</p>
<p>提供了api模块electron-store： <a href="https://github.com/sindresorhus/electron-store" target="_blank" rel="noopener">https://github.com/sindresorhus/electron-store</a></p>
</li>
</ul>
<p>安装</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install electron-store --save</span><br></pre></td></tr></table></figure></div>

<p>使用：</p>
<p>…</p>
<h3 id="封装-持久化存储类"><a href="#封装-持久化存储类" class="headerlink" title="封装-持久化存储类"></a>封装-持久化存储类</h3><p>安装uuid库</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install uuid --save</span><br></pre></td></tr></table></figure></div>

<p>MusicDataStore.js</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Store = <span class="built_in">require</span>(<span class="string">'electron-store'</span>)</span><br><span class="line"><span class="keyword">const</span> uuidv4 = <span class="built_in">require</span>(<span class="string">'uuid/v4'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataStore</span> <span class="keyword">extends</span> <span class="title">Store</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(settings) &#123;</span><br><span class="line">        <span class="keyword">super</span>(settings)</span><br><span class="line">        <span class="keyword">this</span>.tracks = <span class="keyword">this</span>.get(<span class="string">'tracks'</span>) || []</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存音乐文件</span></span><br><span class="line">    saveTracks() &#123;</span><br><span class="line">        <span class="keyword">this</span>.set(<span class="string">'tracks'</span>, <span class="keyword">this</span>.tracks)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取音乐信息</span></span><br><span class="line">    getTracks() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.get(<span class="string">'tracks'</span>) || []</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加音乐信息</span></span><br><span class="line">    addTracks(tracks) &#123;</span><br><span class="line">        <span class="comment">// id 文件路径 文件名称 去重</span></span><br><span class="line">        <span class="keyword">const</span> tracksWithProps = tracks.map(<span class="function"><span class="params">track</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                id: uuidv4(),</span><br><span class="line">                path: track,</span><br><span class="line">                fileName: path.basename(track)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).filter(<span class="function"><span class="params">track</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> currentTacksPath = <span class="keyword">this</span>.getTracks().map(<span class="function"><span class="params">track</span> =&gt;</span> track.path)</span><br><span class="line">            <span class="keyword">return</span> currentTacksPath.indexOf(track.path) &lt; <span class="number">0</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">this</span>.tracks = [...thid.tracks, ...tracksWithProps]</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.saveTracks();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = DataStore</span><br></pre></td></tr></table></figure></div>



<h3 id="使用存储类保存数据"><a href="#使用存储类保存数据" class="headerlink" title="使用存储类保存数据"></a>使用存储类保存数据</h3><p>查看数据库存储地址</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log(app.getPath(&#39;userData&#39;))</span><br><span class="line">&#x2F;&#x2F; C:\Users\Machine\AppData\Roaming\electron-quick-start</span><br></pre></td></tr></table></figure></div>

<p>add.js</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'add-music-button'</span>).addEventListener(<span class="string">'click'</span>, () =&gt; &#123;</span><br><span class="line">    ipcRenderer.send(<span class="string">'add-tracks'</span>,musicFilesPath)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<p>main.js</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 存储数据</span></span><br><span class="line">ipcMain.on(<span class="string">'add-tracks'</span>, (event,tracks) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> updatedTracks = myStore.addTracks(tracks).getTracks()</span><br><span class="line">    <span class="built_in">console</span>.log(updatedTracks)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<p>效果：<code>C:\Users\Machine\AppData\Roaming\electron-quick-start\Music Data.json</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">json</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">"tracks"</span>: [</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="attr">"id"</span>: <span class="string">"cc3a3aee-3533-492e-b3da-8cc524db7420"</span>,</span><br><span class="line">			<span class="attr">"path"</span>: <span class="string">"C:\\Users\\Machine\\Desktop\\mp3_test_music\\bad guy.mp3"</span>,</span><br><span class="line">			<span class="attr">"fileName"</span>: <span class="string">"bad guy.mp3"</span></span><br><span class="line">		&#125;,</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="attr">"id"</span>: <span class="string">"650f80d2-9717-45d2-91b7-d355de85d95a"</span>,</span><br><span class="line">			<span class="attr">"path"</span>: <span class="string">"C:\\Users\\Machine\\Desktop\\mp3_test_music\\Lemon.mp3"</span>,</span><br><span class="line">			<span class="attr">"fileName"</span>: <span class="string">"Lemon.mp3"</span></span><br><span class="line">		&#125;,</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="attr">"id"</span>: <span class="string">"94b211e2-6d55-4f97-b272-0e4b6e8286db"</span>,</span><br><span class="line">			<span class="attr">"path"</span>: <span class="string">"C:\\Users\\Machine\\Desktop\\mp3_test_music\\起风了.mp3"</span>,</span><br><span class="line">			<span class="attr">"fileName"</span>: <span class="string">"起风了.mp3"</span></span><br><span class="line">		&#125;</span><br><span class="line">	]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="功能-播放器窗口"><a href="#功能-播放器窗口" class="headerlink" title="功能-播放器窗口"></a>功能-播放器窗口</h2><p>TODO</p>
<h3 id="获取数据-渲染主窗口列表"><a href="#获取数据-渲染主窗口列表" class="headerlink" title="获取数据 渲染主窗口列表"></a>获取数据 渲染主窗口列表</h3><h3 id="主窗口播放音乐"><a href="#主窗口播放音乐" class="headerlink" title="主窗口播放音乐"></a>主窗口播放音乐</h3><h1 id="应用打包与分发"><a href="#应用打包与分发" class="headerlink" title="应用打包与分发"></a>应用打包与分发</h1><ul>
<li>Electron builder: <a href="https://github.com/electron-userland/electron-builder" target="_blank" rel="noopener">https://github.com/electron-userland/electron-builder</a></li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install electron-builder --save-dev</span><br></pre></td></tr></table></figure></div>

<p>配置参考：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.electron.build&#x2F;configuration&#x2F;win#WindowsConfiguration-target</span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;zulip&#x2F;zulip-electron&#x2F;blob&#x2F;master&#x2F;package.json</span><br></pre></td></tr></table></figure></div>



<p>package.json</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">json</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"dist"</span>: <span class="string">"electron-builder --win --x64"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"build"</span>: &#123;</span><br><span class="line">    <span class="attr">"appId"</span>: <span class="string">"com.xxx.app"</span>,</span><br><span class="line">    <span class="attr">"win"</span>: &#123;</span><br><span class="line">      <span class="attr">"target"</span>: [<span class="string">"nsis"</span>,<span class="string">"zip"</span>],</span><br><span class="line">      <span class="attr">"icon"</span>: <span class="string">"build/icon_256_multi.ico"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>ico制作需要俄罗斯套娃的ico格式，否则有些图标显示不出来，参考<a href="https://newsn.net/say/electron-ico.html" target="_blank" rel="noopener">如何制作俄罗斯套娃一般的 electron 专用 ico 图标</a></p>
<p>运行：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm run dist</span><br></pre></td></tr></table></figure></div>

<p>在dist目录下会生成安装包</p>
<h1 id="Electron-Vue"><a href="#Electron-Vue" class="headerlink" title="Electron+Vue"></a>Electron+Vue</h1><h2 id="electron-vue脚手架-elementUI"><a href="#electron-vue脚手架-elementUI" class="headerlink" title="electron-vue脚手架+elementUI"></a>electron-vue脚手架+elementUI</h2><p>参考：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.cnblogs.com&#x2F;adorkable&#x2F;p&#x2F;11069923.html</span><br><span class="line">https:&#x2F;&#x2F;simulatedgreg.gitbooks.io&#x2F;electron-vue&#x2F;content&#x2F;cn&#x2F;</span><br><span class="line">https:&#x2F;&#x2F;element.eleme.cn&#x2F;#&#x2F;zh-CN&#x2F;component&#x2F;installation</span><br></pre></td></tr></table></figure></div>

<p>electron本就是一个加强版的浏览器的外壳，所以结合前端框架是很当然的~</p>
<p>这里构建一个Electron+Vue+Element首页布局效果。</p>
<p>有人写了脚手架electron-vue，基于vue-cli的，所以直接用吧~</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 安装 vue-cli 和 脚手架样板代码</span><br><span class="line">npm install -g vue-cli</span><br><span class="line">vue init simulatedgreg&#x2F;electron-vue my-project</span><br><span class="line"></span><br><span class="line"># 安装依赖并运行你的程序</span><br><span class="line">cd my-project</span><br><span class="line">npm install</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure></div>

<p>报错了…process is not defined…</p>
<p>好像是node版本太高的问题，不想改node版本，所以找了解决方案如下：</p>
<p><a href="https://www.jianshu.com/p/bdf0a23e7257" target="_blank" rel="noopener">https://www.jianshu.com/p/bdf0a23e7257</a></p>
<p>解决bug后，跑起来能看到界面了</p>
<a href="/2019/12/31/20191231112532671/image-20200103133302022.png" data-fancybox="group" data-caption="image-20200103133302022" class="fancybox"><img alt="image-20200103133302022" style="zoom:80%;" title="image-20200103133302022" data-src="/2019/12/31/20191231112532671/image-20200103133302022.png" class="lazyload"></a>

<p>接下来就是加入element：参考<a href="https://element.eleme.cn/#/zh-CN/component/quickstart" target="_blank" rel="noopener">https://element.eleme.cn/#/zh-CN/component/quickstart</a></p>
<p>安装</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i element-ui -S</span><br></pre></td></tr></table></figure></div>

<p>完整引入：</p>
<p>src/renderer/main.js中增加</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import ElementUI from &#39;element-ui&#39;;</span><br><span class="line">import &#39;element-ui&#x2F;lib&#x2F;theme-chalk&#x2F;index.css&#39;;</span><br><span class="line">Vue.use(ElementUI);</span><br></pre></td></tr></table></figure></div>

<p>表格控件显示不正常的解决：element-ui需要加入到白名单里面</p>
<p>.electron-vue/webpack.renderer.config.js，改为</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let whiteListedModules &#x3D; [&#39;vue&#39;,&#39;element-ui&#39;]</span><br></pre></td></tr></table></figure></div>

<p>css初始化样式重置，使用normalize.css</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install normalize.css --save</span><br></pre></td></tr></table></figure></div>

<p>main.js</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#39;normalize.css&#x2F;normalize.css&#39;</span><br></pre></td></tr></table></figure></div>

<p>修改src/renderer/components/LandingPage.vue，就是修改主页了，使用ElementUI的元素。</p>
<p>效果：</p>
<a href="/2019/12/31/20191231112532671/image-20200103145743674.png" data-fancybox="group" data-caption="image-20200103145743674" class="fancybox"><img alt="image-20200103145743674" style="zoom:80%;" title="image-20200103145743674" data-src="/2019/12/31/20191231112532671/image-20200103145743674.png" class="lazyload"></a>

<h2 id="electron-vue-admin脚手架"><a href="#electron-vue-admin脚手架" class="headerlink" title="electron-vue-admin脚手架"></a><a href="https://github.com/PanJiaChen/electron-vue-admin" target="_blank" rel="noopener">electron-vue-admin</a>脚手架</h2><p>参考：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">文档：https:&#x2F;&#x2F;panjiachen.github.io&#x2F;vue-element-admin-site&#x2F;zh&#x2F;</span><br><span class="line">项目地址：https:&#x2F;&#x2F;github.com&#x2F;PanJiaChen&#x2F;electron-vue-admin</span><br></pre></td></tr></table></figure></div>

<p>这个脚手架是 electron+vue+ElementUI整合的后台模板。拥有菜单+导航的基本功能。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># install dependencies</span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line"># serve with hot reload at localhost:9080</span><br><span class="line">npm run dev</span><br><span class="line"></span><br><span class="line"># build electron app for production</span><br><span class="line">npm run build</span><br><span class="line"></span><br><span class="line"># lint all JS&#x2F;Vue component files in &#96;app&#x2F;src&#96;</span><br><span class="line">npm run lint</span><br><span class="line"></span><br><span class="line"># run webpack in production</span><br><span class="line">npm run pack</span><br></pre></td></tr></table></figure></div>

<p>效果：</p>
<a href="/2019/12/31/20191231112532671/image-20200103152029561.png" data-fancybox="group" data-caption="image-20200103152029561" class="fancybox"><img alt="image-20200103152029561" style="zoom:80%;" title="image-20200103152029561" data-src="/2019/12/31/20191231112532671/image-20200103152029561.png" class="lazyload"></a>

<p>进入：</p>
<a href="/2019/12/31/20191231112532671/image-20200103152246982.png" data-fancybox="group" data-caption="image-20200103152246982" class="fancybox"><img alt="image-20200103152246982" style="zoom:80%;" title="image-20200103152246982" data-src="/2019/12/31/20191231112532671/image-20200103152246982.png" class="lazyload"></a>]]></content>
      <categories>
        <category>Web前端</category>
        <category>Electron</category>
      </categories>
      <tags>
        <tag>Electron</tag>
      </tags>
  </entry>
  <entry>
    <title>ELK-搜索引擎</title>
    <url>/2019/12/26/20191226144408846/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>参考：<a href="http://blog.sina.com.cn/s/blog_c30a9e680102z42l.html" target="_blank" rel="noopener">http://blog.sina.com.cn/s/blog_c30a9e680102z42l.html</a></p>
</blockquote>
<p>[toc]</p>
<h1 id="ElasticSearch简介"><a href="#ElasticSearch简介" class="headerlink" title="ElasticSearch简介"></a>ElasticSearch简介</h1><h2 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h2><p>一个基于<a href="https://lucene.apache.org/core/" target="_blank" rel="noopener">Apache Lucene(TM)</a>的开源搜索引擎。</p>
<p>ES能做什么？</p>
<p>全文检索（全部字段）、模糊查询（搜索）、数据分析（提供分析语法，例如聚合）</p>
<h2 id="Elasticsearch使用案例"><a href="#Elasticsearch使用案例" class="headerlink" title="Elasticsearch使用案例"></a>Elasticsearch使用案例</h2><h2 id="同类产品"><a href="#同类产品" class="headerlink" title="同类产品"></a>同类产品</h2><p>Solr、ElasticSearch、Hermes（腾讯）（实时检索分析）</p>
<p>Lucene是一个开放源代码的全文检索引擎工具包，但它不是一个完整的全文检索引擎，而是一个全文检索引擎的架构，提供了完整的查询引擎和索引引擎，部分文本分析引擎</p>
<h1 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>安装Centos7、内存2G以上、java1.8、关闭防火墙</p>
<h2 id="ElasticSerach单机安装"><a href="#ElasticSerach单机安装" class="headerlink" title="ElasticSerach单机安装"></a>ElasticSerach单机安装</h2><p>只能写192.168那个地址，写hostname不行，原因未知。</p>
<h2 id="Elasticsearch的交互方式"><a href="#Elasticsearch的交互方式" class="headerlink" title="Elasticsearch的交互方式"></a>Elasticsearch的交互方式</h2><p>1、restfull</p>
<p>2、程序语言的客户端</p>
<h2 id="Elasticsearch操作工具"><a href="#Elasticsearch操作工具" class="headerlink" title="Elasticsearch操作工具"></a>Elasticsearch操作工具</h2><ul>
<li>REST访问ES方式<ul>
<li>postman\浏览器</li>
<li>Kibana的Dev Tools</li>
</ul>
</li>
</ul>
<h2 id="Elasticsearch数据存储"><a href="#Elasticsearch数据存储" class="headerlink" title="Elasticsearch数据存储"></a>Elasticsearch数据存储</h2><h3 id="存储方式"><a href="#存储方式" class="headerlink" title="存储方式"></a>存储方式</h3><p>（1）面向文档</p>
<p>这也是Elasticsearch能够执行复杂的全文搜索的原因之一。</p>
<p>（2）JSON</p>
<p>在Elasticsearch中将对象转化为JSON并做索引要比在表结构中做相同的事情简单的多。</p>
<h3 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h3><p>结构图：</p>
<a href="/2019/12/26/20191226144408846/image-20191226194415808.png" data-fancybox="group" data-caption="image-20191226194415808" class="fancybox"><img alt="image-20191226194415808" style="zoom:80%;" title="image-20191226194415808" data-src="/2019/12/26/20191226144408846/image-20191226194415808.png" class="lazyload"></a>

<p>比如创建文档语句：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT mxx&#x2F;doc&#x2F;1</span><br><span class="line">&#123;</span><br><span class="line">&quot;name&quot;:&quot;zhangsan&quot;,</span><br><span class="line">&quot;age&quot;:10</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>查询这条数据：<code>GET mxx/doc/1</code>,返回结果：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;_index&quot;: &quot;mxx&quot;,</span><br><span class="line">  &quot;_type&quot;: &quot;doc&quot;,</span><br><span class="line">  &quot;_id&quot;: &quot;1&quot;,</span><br><span class="line">  &quot;_version&quot;: 1,</span><br><span class="line">  &quot;found&quot;: true,</span><br><span class="line">  &quot;_source&quot;: &#123;</span><br><span class="line">    &quot;name&quot;: &quot;zhangsan&quot;,</span><br><span class="line">    &quot;age&quot;: 10</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>解释：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">_index:文档所在索引名称</span><br><span class="line">_type:文档所在类型名称</span><br><span class="line">_id:文档唯一id</span><br><span class="line">_uid:组合id，由_type和_id组成（6.x后，_type不再起作用，同_id）</span><br><span class="line">_source:文档的原始Json数据，包括每个字段的内容</span><br><span class="line">_all:将所有字段内容整合起来，默认禁用（用于对所有字段内容检索）</span><br><span class="line">_version：乐观锁，用于并发</span><br></pre></td></tr></table></figure></div>

<p>名词：</p>
<ul>
<li><p>索引 index（对应数据库）</p>
<p>一个索引就是一个拥有几分相似特征的文档的集合。比如说，你可以有一个客户数据的索引，另一个产品目录的索引，还有一个订单数据的索引。一个索引由一个名字来标识（必须全部是小写字母的），并且当我们要对对应于这个索引中的文档进行索引、搜索、更新和删除的时候，都要使用到这个名字。在一个集群中，可以定义任意多的索引。</p>
</li>
<li><p>类型 type（对应表）</p>
<p>Es6之后，一个index中只能有一个type</p>
</li>
<li><p>字段Field</p>
<p>相当于是数据表的字段，对文档数据根据不同属性进行的分类标识</p>
</li>
<li><p>document</p>
<p>一个文档是一个可被索引的基础信息单元。文档以JSON格式来表示。在一个index/type里面，你可以存储任意多的文档。</p>
</li>
</ul>
<h2 id="Elasticsearch检索"><a href="#Elasticsearch检索" class="headerlink" title="Elasticsearch检索"></a>Elasticsearch检索</h2><h3 id="检索文档"><a href="#检索文档" class="headerlink" title="检索文档"></a>检索文档</h3><p>Mysql : select * from user where id = 1</p>
<p>ES : GET /mxx/doc/1</p>
<p>我们通过HTTP方法GET来检索文档，同样的，我们可以使用DELETE方法删除文档，使用HEAD方法检查某文档是否存在。如果想更新已存在的文档，我们只需再PUT一次(_version字段+1)。</p>
<h3 id="简单检索"><a href="#简单检索" class="headerlink" title="简单检索"></a>简单检索</h3><p>Mysql : select * from user</p>
<p>ES : GET /mxx/doc/_search</p>
<p>返回：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">响应内容不仅会告诉我们哪些文档被匹配到，而且这些文档内容完整的被包含在其中—我们在给用户展示搜索结果时需要用到的所有信息都有了。</span><br></pre></td></tr></table></figure></div>



<h3 id="全文检索"><a href="#全文检索" class="headerlink" title="全文检索"></a>全文检索</h3><p>ES : GET /mxx/doc/_search?q=zhangsan</p>
<p>查询出所有文档字段值为haha的文档。（字段值需要完全匹配）</p>
<h3 id="搜索（模糊查询）"><a href="#搜索（模糊查询）" class="headerlink" title="搜索（模糊查询）"></a>搜索（模糊查询）</h3><p>GET /mxx/doc/_search?q=haha</p>
<p>查询出所有文档字段值分词后包含hello的文档</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT &#x2F;mxx&#x2F;doc&#x2F;1</span><br><span class="line">&#123;</span><br><span class="line">&quot;name&quot;:&quot;zhangsan haha&quot;,</span><br><span class="line">&quot;age&quot;:12</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT &#x2F;mxx&#x2F;doc&#x2F;2</span><br><span class="line">&#123;</span><br><span class="line">&quot;name&quot;:&quot;lisi haha&quot;,</span><br><span class="line">&quot;age&quot;:10</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;mxx&#x2F;doc&#x2F;_search?q&#x3D;haha</span><br></pre></td></tr></table></figure></div>



<h3 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h3><p>Group by</p>
<p>Elasticsearch有一个功能叫做聚合(aggregations)，它允许你在数据上生成复杂的分析统计。它很像SQL中的GROUP BY但是功能更强大。</p>
<p>比如，Group by一下age这个字段。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT &#x2F;mxx&#x2F;doc&#x2F;3</span><br><span class="line">&#123;</span><br><span class="line">&quot;name&quot;:&quot;wangwu&quot;,</span><br><span class="line">&quot;age&quot;:10</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;mxx&#x2F;doc&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;all_ages&quot;: &#123;</span><br><span class="line">      &quot;terms&quot;: &#123; &quot;field&quot;: &quot;age&quot; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>查询结果：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   ...</span><br><span class="line">   &quot;aggregations&quot;: &#123;</span><br><span class="line">    &quot;all_ages&quot;: &#123;</span><br><span class="line">      &quot;doc_count_error_upper_bound&quot;: 0,</span><br><span class="line">      &quot;sum_other_doc_count&quot;: 0,</span><br><span class="line">      &quot;buckets&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot;: 10,</span><br><span class="line">          &quot;doc_count&quot;: 2</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot;: 12,</span><br><span class="line">          &quot;doc_count&quot;: 1</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这些数据并没有被预先计算好，它们是实时的从匹配查询语句的文档中动态计算生成的。</p>
<p>还可以添加约束(所有姓”Smith”的人的共同兴趣爱好)：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;mxx&#x2F;doc&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;last_name&quot;: &quot;smith&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;all_interests&quot;: &#123;</span><br><span class="line">      &quot;terms&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;interests&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="Elasticsearch搜索原理"><a href="#Elasticsearch搜索原理" class="headerlink" title="Elasticsearch搜索原理"></a>Elasticsearch搜索原理</h2><h3 id="正排索引和倒排索引"><a href="#正排索引和倒排索引" class="headerlink" title="正排索引和倒排索引"></a>正排索引和倒排索引</h3><h3 id="分词"><a href="#分词" class="headerlink" title="分词"></a>分词</h3><ul>
<li><p>分词机制</p>
</li>
<li><p>分词API</p>
</li>
<li><p>Elasticsearch自带的分词器</p>
</li>
<li><p>中文分词</p>
</li>
<li><p>Character Filters</p>
<p>在进行Tokenizer之前对原始文本进行处理，如增加、删除或替换字符等</p>
</li>
<li><p>Token Filter</p>
<p>对输出的单词（term）进行增加、删除、修改等操作</p>
</li>
<li><p>自定义分词api</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT my_analyzer</span><br><span class="line">&#123;</span><br><span class="line">  &quot;settings&quot;: &#123;</span><br><span class="line">    &quot;analysis&quot;: &#123;</span><br><span class="line">      &quot;analyzer&quot;: &#123;</span><br><span class="line">        &quot;my&quot;:&#123;</span><br><span class="line">          &quot;tokenizer&quot;:&quot;punctuation&quot;,</span><br><span class="line">          &quot;type&quot;:&quot;custom&quot;,</span><br><span class="line">          &quot;char_filter&quot;:[&quot;emoticons&quot;],</span><br><span class="line">          &quot;filter&quot;:[&quot;lowercase&quot;,&quot;english_stop&quot;]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;tokenizer&quot;: &#123;</span><br><span class="line">        &quot;punctuation&quot;:&#123;</span><br><span class="line">          &quot;type&quot;:&quot;pattern&quot;,</span><br><span class="line">          &quot;pattern&quot;:&quot;[.,!?]&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;char_filter&quot;: &#123;</span><br><span class="line">        &quot;emoticons&quot;:&#123;</span><br><span class="line">          &quot;type&quot;:&quot;mapping&quot;,</span><br><span class="line">          &quot;mappings&quot;:[</span><br><span class="line">              &quot;:)&#x3D;&gt;_happy_&quot;,</span><br><span class="line">              &quot;:(&#x3D;&gt;_sad_&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;english_stop&quot;:&#123;</span><br><span class="line">          &quot;type&quot;:&quot;stop&quot;,</span><br><span class="line">          &quot;stopwords&quot;:&quot;_english_&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>测试：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST my_analyzer&#x2F;_analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;analyzer&quot;: &quot;my&quot;,</span><br><span class="line">  &quot;text&quot;:&quot;l&#39;m a :) person,and you?&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>结果：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;tokens&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot;: &quot;l&#39;m a _happy_ person&quot;,</span><br><span class="line">      &quot;start_offset&quot;: 0,</span><br><span class="line">      &quot;end_offset&quot;: 15,</span><br><span class="line">      &quot;type&quot;: &quot;word&quot;,</span><br><span class="line">      &quot;position&quot;: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot;: &quot;and you&quot;,</span><br><span class="line">      &quot;start_offset&quot;: 16,</span><br><span class="line">      &quot;end_offset&quot;: 23,</span><br><span class="line">      &quot;type&quot;: &quot;word&quot;,</span><br><span class="line">      &quot;position&quot;: 1</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



</li>
</ul>
<ul>
<li>分词使用场景</li>
</ul>
<h3 id="IK分词器"><a href="#IK分词器" class="headerlink" title="IK分词器"></a>IK分词器</h3><p>是一个中文分词器</p>
<ul>
<li><p>下载安装</p>
</li>
<li><p>测试</p>
<p>IK提供了两个分词算法ik_smart 和 ik_max_word，其中 ik_smart 为最少切分，ik_max_word为最细粒度划分</p>
</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST _analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;analyzer&quot;: &quot;ik_smart&quot;,</span><br><span class="line">  &quot;text&quot;:&quot;php是世界上最好的语言吗？&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; php 是 世界上 最好 的 语言 吗</span><br><span class="line"></span><br><span class="line">POST _analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;analyzer&quot;: &quot;ik_max_word&quot;,</span><br><span class="line">  &quot;text&quot;:&quot;php是世界上最好的语言吗？&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; php 是 世界上 世界 上 最好 的 语言 吗</span><br></pre></td></tr></table></figure></div>

<h2 id="Mapping"><a href="#Mapping" class="headerlink" title="Mapping"></a>Mapping</h2><p>定义数据库中的表的结构的定义，通过mapping来控制索引存储数据的设置</p>
<ul>
<li>获取索引mapping</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;atguigu&#x2F;_mapping</span><br></pre></td></tr></table></figure></div>

<p>响应：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">&quot;properties&quot;: &#123;								#字段属性</span><br><span class="line">          &quot;clazz&quot;: &#123;								</span><br><span class="line">            &quot;type&quot;: &quot;text&quot;,							#字段类型，字符串默认类型</span><br><span class="line">            &quot;fields&quot;: &#123;								#子字段属性设置</span><br><span class="line">              &quot;keyword&quot;: &#123;						#分词类型（不分词）</span><br><span class="line">                &quot;type&quot;: &quot;keyword&quot;,				</span><br><span class="line">                &quot;ignore_above&quot;: 256</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure></div>



<ul>
<li><p>自定义mapping</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT my_index								#索引名称</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;:&#123;</span><br><span class="line">    &quot;doc&quot;:&#123;								#类型名称</span><br><span class="line">      &quot;dynamic&quot;:false, 					</span><br><span class="line">      &quot;properties&quot;:&#123;		</span><br><span class="line">        &quot;title&quot;:&#123;</span><br><span class="line">          &quot;type&quot;:&quot;text&quot;					#字段类型</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;name&quot;:&#123;</span><br><span class="line">          &quot;type&quot;:&quot;keyword&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;age&quot;:&#123;</span><br><span class="line">          &quot;type&quot;:&quot;integer&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>dynamic设置</p>
</li>
</ul>
<p>​    true：允许自动新增字段（默认的配置）</p>
<p>​    False：不允许自动新增字段，但是文档可以正常写入，无法对字段进行查询操作</p>
<p>​    strict：文档不能写入（如果写入会报错）</p>
<ul>
<li><p>支持的类型</p>
<p>…</p>
</li>
</ul>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>…</p>
<h2 id="文档操作"><a href="#文档操作" class="headerlink" title="文档操作"></a>文档操作</h2><p>CRUD</p>
<ul>
<li><p>创建文档</p>
<p>1、索引一个文档</p>
<p>2、使用自己的ID</p>
<p>3、自增ID</p>
</li>
<li><p>获取文档</p>
<p>1、检索文档</p>
<p>2、pretty</p>
<p>3、检索文档的一部分</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;website&#x2F;blog&#x2F;123?_source&#x3D;title,text</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>更新</p>
</li>
<li><p>删除文档</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELETE &#x2F;website&#x2F;blog&#x2F;123</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>局部更新</p>
</li>
<li><p>批量插入</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST test_search_index&#x2F;doc&#x2F;_bulk</span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>检索多个文档</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;_mget</span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure></div>



</li>
</ul>
<h2 id="Search-API-URI"><a href="#Search-API-URI" class="headerlink" title="Search API(URI)"></a>Search API(URI)</h2><ul>
<li><p>查询案例</p>
<p>1、批量创建文档</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST test_search_index&#x2F;doc&#x2F;_bulk</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_id&quot;:1&#125;&#125;</span><br><span class="line">&#123;&quot;username&quot;:&quot;alfred way&quot;,&quot;job&quot;:&quot;java engineer&quot;,&quot;age&quot;:18,&quot;birth&quot;:&quot;1991-12-15&quot;,&quot;isMarried&quot;:false&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_id&quot;:2&#125;&#125;</span><br><span class="line">&#123;&quot;username&quot;:&quot;alfred&quot;,&quot;job&quot;:&quot;java senior engineer and java specialist&quot;,&quot;age&quot;:28, &quot;birth&quot;:&quot;1980-05-07&quot;, &quot;isMarried&quot;:true&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_id&quot;:3&#125;&#125;</span><br><span class="line">&#123;&quot;username&quot;:&quot;lee&quot;, &quot;job&quot;:&quot;java and ruby engineer&quot;,&quot;age&quot;:22,&quot;birth&quot;:&quot;1985-08-07&quot;,&quot;isMarried&quot;:false&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_id&quot;:4&#125;&#125;</span><br><span class="line">&#123; &quot;username&quot;:&quot;lee junior way&quot;, &quot;job&quot;:&quot;ruby engineer&quot;,&quot;age&quot;:23, &quot;birth&quot;:&quot;1986-08-07&quot;,&quot;isMarried&quot;:false&#125;</span><br></pre></td></tr></table></figure></div>

<p>2、泛查询</p>
<p>3、查询语句执行计划查看</p>
<p>4、term查询</p>
<p>5、phrase查询</p>
<p>6、group查询</p>
<p>7、布尔操作符</p>
</li>
</ul>
<h2 id="Search-API-Request-Body-Search"><a href="#Search-API-Request-Body-Search" class="headerlink" title="Search API(Request Body Search)"></a>Search API(Request Body Search)</h2><ul>
<li><p>Match Query</p>
<p>对字段作全文检索，最基本和常用的查询类型。通过operator参数可以控制单词间的匹配关系，可选项为or和and</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET test_search_index&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;:&#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;username&quot;: &#123;</span><br><span class="line">        &quot;query&quot;:&quot;alfred way&quot;,</span><br><span class="line">        &quot;operator&quot;:&quot;and&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



</li>
</ul>
<h1 id="Elasticsearch集群"><a href="#Elasticsearch集群" class="headerlink" title="Elasticsearch集群"></a>Elasticsearch集群</h1><h2 id="ElasticSerach集群安装"><a href="#ElasticSerach集群安装" class="headerlink" title="ElasticSerach集群安装"></a>ElasticSerach集群安装</h2><p>克隆虚拟机、改hostname、改ip地址、重启网络、修改配置文件。</p>
<p>注意：清空data和logs数据</p>
<h2 id="安装集群监控"><a href="#安装集群监控" class="headerlink" title="安装集群监控"></a>安装集群监控</h2><p>解压cerebro-0.8.1.tgz，运行bin/cerebro即可，访问elk111:9000</p>
<p>输入任意一个elk的地址：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.1.111:9200</span><br></pre></td></tr></table></figure></div>

<p>就可以进入集群监控页。</p>
<h2 id="集群简介"><a href="#集群简介" class="headerlink" title="集群简介"></a>集群简介</h2><h3 id="集群节点"><a href="#集群节点" class="headerlink" title="集群节点"></a>集群节点</h3><h3 id="集群健康"><a href="#集群健康" class="headerlink" title="集群健康"></a>集群健康</h3><table>
<thead>
<tr>
<th>颜色</th>
<th>意义</th>
</tr>
</thead>
<tbody><tr>
<td>green</td>
<td>所有主要分片和复制分片都可用</td>
</tr>
<tr>
<td>yellow</td>
<td>所有主要分片可用，但不是所有复制分片都可用</td>
</tr>
<tr>
<td>red</td>
<td>不是所有的主要分片都可用</td>
</tr>
</tbody></table>
<h3 id="集群分片"><a href="#集群分片" class="headerlink" title="集群分片"></a>集群分片</h3><p>主分片：负载</p>
<p>副本分片：高可用</p>
<h3 id="故障转移"><a href="#故障转移" class="headerlink" title="故障转移"></a>故障转移</h3><h2 id="集群操作原理"><a href="#集群操作原理" class="headerlink" title="集群操作原理"></a>集群操作原理</h2><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><h3 id="操作数据节点工作流程"><a href="#操作数据节点工作流程" class="headerlink" title="操作数据节点工作流程"></a>操作数据节点工作流程</h3><h3 id="检索流程"><a href="#检索流程" class="headerlink" title="检索流程"></a>检索流程</h3><h1 id="Logstash"><a href="#Logstash" class="headerlink" title="Logstash"></a>Logstash</h1><h2 id="logstsh架构"><a href="#logstsh架构" class="headerlink" title="logstsh架构"></a>logstsh架构</h2><h2 id="logstash安装"><a href="#logstash安装" class="headerlink" title="logstash安装"></a>logstash安装</h2><h2 id="logstsh-input插件"><a href="#logstsh-input插件" class="headerlink" title="logstsh input插件"></a>logstsh input插件</h2><ul>
<li><p>Stdin</p>
</li>
<li><p>file</p>
</li>
<li><p>Elasticsearch</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">    hosts &#x3D;&gt; &quot;192.168.1.111&quot;</span><br><span class="line">    index &#x3D;&gt; &quot;mxx&quot;</span><br><span class="line">    query &#x3D;&gt; &#39;&#123; &quot;query&quot;: &#123; &quot;match_all&quot;: &#123;&#125; &#125;&#125;&#39;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line"> stdout &#123;</span><br><span class="line">  codec &#x3D;&gt; &quot;rubydebug&quot;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



</li>
</ul>
<h2 id="logstsh-filter"><a href="#logstsh-filter" class="headerlink" title="logstsh filter"></a>logstsh filter</h2><p>Filter是logstsh功能强大的原因，它可以对数据进行丰富的处理，比如解析数据、删除字段、类型转换等</p>
<p>date：日期解析</p>
<p>grok：正则匹配解析</p>
<p>dissect：分割符解析</p>
<p>mutate：对字段作处理，比如重命名、删除、替换等</p>
<p>json：按照json解析字段内容到指定字段中</p>
<p>geoip：增加地理位置数据</p>
<p>ruby：利用ruby代码来动态修改logstsh Event</p>
<h1 id="Kibana"><a href="#Kibana" class="headerlink" title="Kibana"></a>Kibana</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim kibana.yml</span><br><span class="line"></span><br><span class="line">server.port: 5601</span><br><span class="line">server.host: &quot;192.168.1.111&quot;</span><br><span class="line">elasticsearch.url: &quot;http:&#x2F;&#x2F;192.168.1.111:9200&quot;</span><br><span class="line">kibana.index: &quot;.kibana&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 运行</span><br><span class="line">.&#x2F;kibana</span><br><span class="line"># 访问</span><br><span class="line">http:&#x2F;&#x2F;192.168.1.111:5601&#x2F;</span><br></pre></td></tr></table></figure></div>



<h1 id="综合应用：每日访问量统计"><a href="#综合应用：每日访问量统计" class="headerlink" title="综合应用：每日访问量统计"></a>综合应用：每日访问量统计</h1><p>logstash搜集nginx产生的日志，转化为json，存到es里了，最后使用kibana分析生成图表。</p>
<p>1、在elk111上装tomcat，放一个项目到webapps，测试能访问成功</p>
<p>2、安装nginx，修改配置文件，代理tomcat的项目，浏览器访问nginx代理，测试成功。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location &#x2F; &#123;</span><br><span class="line">            proxy_pass http:&#x2F;&#x2F;manager&#x2F;blog&#x2F;;</span><br><span class="line">            proxy_redirect off;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></div>

<p>3、刷新页面，用tail监控日志文件，发现日志数据一直在变化。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tail -f &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log</span><br></pre></td></tr></table></figure></div>

<p>4、编辑logstash脚本</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：监控nginx日志文件access.log</span><br><span class="line">过滤：正则匹配，一些参数...</span><br><span class="line">输出：控制台，es(使用时间做索引，每天生产一1个索引)</span><br></pre></td></tr></table></figure></div>

<p>日志数据格式：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">192.168.1.5 - - [27&#x2F;Dec&#x2F;2019:19:07:18 +0800] &quot;GET &#x2F;blog&#x2F;css&#x2F;main.css?v&#x3D;6.4.2 HTTP&#x2F;1.1&quot; 404 995 &quot;http:&#x2F;&#x2F;elk111&#x2F;&quot; &quot;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;78.0.3904.70 Safari&#x2F;537.36&quot;</span><br></pre></td></tr></table></figure></div>

<p>过滤正则：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;home&#x2F;machine&#x2F;logstash&#x2F;job&#x2F;patterns&#x2F;</span><br><span class="line">vim nginx</span><br><span class="line"></span><br><span class="line">NGINXACCESS %&#123;IPORHOST:clientip&#125; %&#123;HTTPDUSER:ident&#125; %&#123;USER:auth&#125; \[%&#123;HTTPDATE:timestamp&#125;\] &quot;(?:%&#123;WORD:verb&#125; %&#123;NOTSPACE:request&#125;(?: HTTP&#x2F;%&#123;NUMBER:httpversion&#125;)?|%&#123;DATA:rowrequest&#125;)&quot; %&#123;NUMBER:response&#125; (?:%&#123;NUMBER:bytes&#125;|-)</span><br><span class="line">NGINXACCESSLOG %&#123;COMMONAPACHELOG&#125; %&#123;QS:referrer&#125; %&#123;QS:agent&#125;</span><br></pre></td></tr></table></figure></div>

<p>logstash脚本</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;home&#x2F;machine&#x2F;logstash&#x2F;job</span><br><span class="line">vim nginx_logstash.conf</span><br></pre></td></tr></table></figure></div>

<p>nginx_logstash.conf</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">	file &#123;</span><br><span class="line">		path &#x3D;&gt; [&quot;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log&quot;]</span><br><span class="line">		type &#x3D;&gt; &quot;nginx_access&quot;</span><br><span class="line">		#start_position &#x3D;&gt; &quot;beginning&quot;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">filter &#123;</span><br><span class="line">	if [type] &#x3D;&#x3D; &quot;nginx_access&quot; &#123;</span><br><span class="line">		grok &#123;</span><br><span class="line">			patterns_dir &#x3D;&gt; &quot;&#x2F;home&#x2F;machine&#x2F;logstash&#x2F;job&#x2F;patterns&#x2F;&quot;</span><br><span class="line">			match &#x3D;&gt; &#123;</span><br><span class="line">				&quot;message&quot; &#x3D;&gt; &quot;%&#123;NGINXACCESS&#125;&quot;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		date &#123;</span><br><span class="line">			match &#x3D;&gt; [&quot;timestamp&quot;,&quot;dd&#x2F;MMM&#x2F;YYY:HH:mm:ss Z&quot;]</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		if [param] &#123;</span><br><span class="line">			ruby &#123;</span><br><span class="line">				init &#x3D;&gt; &quot;@kname &#x3D; [&#39;quote&#39;,&#39;url_args&#39;]&quot;</span><br><span class="line">				code &#x3D;&gt; &quot;</span><br><span class="line">					new_event &#x3D; </span><br><span class="line">					LogStash::Event.new(Hash[@kname.zip(event.get(&#39;param&#39;).split(&#39;?&#39;))])</span><br><span class="line">					new_event.remove(&#39;@timestamp&#39;)</span><br><span class="line">					event.append(new_event)</span><br><span class="line">				&quot;</span><br><span class="line">			&#125;			</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		if [url_args] &#123;</span><br><span class="line">			ruby &#123;</span><br><span class="line">				init &#x3D;&gt; &quot;@kname &#x3D; [&#39;key&#39;,&#39;value&#39;]&quot;</span><br><span class="line">				code &#x3D;&gt; &quot;event.set(&#39;nested_args&#39;,event.get(&#39;url_args&#39;).split(&#39;&amp;&#39;).cllect&#123;|i| Hash[@kname.zip(i.split(&#39;&#x3D;&#39;))]&#125;)&quot;</span><br><span class="line">				remove_field &#x3D;&gt; [&quot;url_args&quot;,&quot;param&quot;,&quot;quote&quot;]</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		mutate &#123;</span><br><span class="line">			convert &#x3D;&gt; [&quot;response&quot;,&quot;integer&quot;]</span><br><span class="line">			remove_field &#x3D;&gt; &quot;timestamp&quot;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">	stdout &#123;</span><br><span class="line">		codec &#x3D;&gt; rubydebug</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	elasticsearch &#123;</span><br><span class="line">		hosts &#x3D;&gt; [&quot;http:&#x2F;&#x2F;192.168.1.111:9200&quot;]</span><br><span class="line">		index &#x3D;&gt; &quot;logstash-%&#123;type&#125;-%&#123;+YYYY.MM.dd&#125;&quot;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>5、执行写好的logstash脚本，进行监控。刷新页面，看控制台效果</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bin&#x2F;logstash -f &#x2F;home&#x2F;machine&#x2F;logstash&#x2F;job&#x2F;nginx_logstash.conf</span><br></pre></td></tr></table></figure></div>

<p>6、使用Kibana在Management那创建一个 index pattern，名字：logstash*  （匹配所有的日志数据索引）</p>
<p>​    按时间戳进行匹配</p>
<p>7、查一下某个索引的数据是否存在，刷新页面，看是否实时增加了</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET logstash-nginx_access-2019.12.27&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>8、创建图表，选择logstash*的索引</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Y count</span><br><span class="line">X Date Histogram</span><br><span class="line">filed @timestamp</span><br></pre></td></tr></table></figure></div>

<p>9、生成图表，可以save保存图表。</p>
<a href="/2019/12/26/20191226144408846/image-20191227195133398.png" data-fancybox="group" data-caption="image-20191227195133398" class="fancybox"><img alt="image-20191227195133398" style="zoom:80%;" title="image-20191227195133398" data-src="/2019/12/26/20191226144408846/image-20191227195133398.png" class="lazyload"></a>





]]></content>
      <categories>
        <category>大数据分布式</category>
        <category>搜索引擎</category>
      </categories>
      <tags>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>数据仓库-业务数据仓库</title>
    <url>/2019/12/11/20191211154140441/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>参考：<a href="http://blog.sina.com.cn/s/blog_c30a9e680102z9ws.html" target="_blank" rel="noopener">http://blog.sina.com.cn/s/blog_c30a9e680102z9ws.html</a></p>
</blockquote>
<p>[toc]</p>
<h1 id="电商业务与数据结构简介"><a href="#电商业务与数据结构简介" class="headerlink" title="电商业务与数据结构简介"></a>电商业务与数据结构简介</h1><h1 id="数仓理论"><a href="#数仓理论" class="headerlink" title="数仓理论"></a>数仓理论</h1><h2 id="表的分类"><a href="#表的分类" class="headerlink" title="表的分类"></a>表的分类</h2><h3 id="实体表"><a href="#实体表" class="headerlink" title="实体表"></a>实体表</h3><h3 id="维度表"><a href="#维度表" class="headerlink" title="维度表"></a>维度表</h3><h3 id="事务型事实表"><a href="#事务型事实表" class="headerlink" title="事务型事实表"></a>事务型事实表</h3><h3 id="周期型事实表"><a href="#周期型事实表" class="headerlink" title="周期型事实表"></a>周期型事实表</h3><h2 id="同步策略"><a href="#同步策略" class="headerlink" title="同步策略"></a>同步策略</h2><h3 id="实体表同步策略"><a href="#实体表同步策略" class="headerlink" title="实体表同步策略"></a>实体表同步策略</h3><h3 id="维度表同步策略"><a href="#维度表同步策略" class="headerlink" title="维度表同步策略"></a>维度表同步策略</h3><h3 id="事务型事实表同步策略"><a href="#事务型事实表同步策略" class="headerlink" title="事务型事实表同步策略"></a>事务型事实表同步策略</h3><h3 id="周期型事实表同步策略"><a href="#周期型事实表同步策略" class="headerlink" title="周期型事实表同步策略"></a>周期型事实表同步策略</h3><h2 id="范式理论"><a href="#范式理论" class="headerlink" title="范式理论"></a>范式理论</h2><h2 id="关系建模与维度建模"><a href="#关系建模与维度建模" class="headerlink" title="关系建模与维度建模"></a>关系建模与维度建模</h2><h2 id="雪花模型、星型模型和星座模型"><a href="#雪花模型、星型模型和星座模型" class="headerlink" title="雪花模型、星型模型和星座模型"></a>雪花模型、星型模型和星座模型</h2><h1 id="数仓搭建"><a href="#数仓搭建" class="headerlink" title="数仓搭建"></a>数仓搭建</h1><h2 id="业务数据生成"><a href="#业务数据生成" class="headerlink" title="业务数据生成"></a>业务数据生成</h2><h2 id="业务数据导入数仓"><a href="#业务数据导入数仓" class="headerlink" title="业务数据导入数仓"></a>业务数据导入数仓</h2><h3 id="Sqoop安装"><a href="#Sqoop安装" class="headerlink" title="Sqoop安装"></a>Sqoop安装</h3><p>需要将json的jar包扔到lib下，不然会报错。</p>
<h3 id="Sqoop定时导入脚本"><a href="#Sqoop定时导入脚本" class="headerlink" title="Sqoop定时导入脚本"></a>Sqoop定时导入脚本</h3><h2 id="ODS层"><a href="#ODS层" class="headerlink" title="ODS层"></a>ODS层</h2><h3 id="创建ods层的表"><a href="#创建ods层的表" class="headerlink" title="创建ods层的表"></a>创建ods层的表</h3><h3 id="ODS层数据导入脚本"><a href="#ODS层数据导入脚本" class="headerlink" title="ODS层数据导入脚本"></a>ODS层数据导入脚本</h3><h2 id="DWD层"><a href="#DWD层" class="headerlink" title="DWD层"></a>DWD层</h2><p>积压ODS层对数据进行判空过滤。对商品分类表进行维度退化(降维)。</p>
<h2 id="DWS层之用户行为宽表"><a href="#DWS层之用户行为宽表" class="headerlink" title="DWS层之用户行为宽表"></a>DWS层之用户行为宽表</h2><h1 id="GMV成交总额"><a href="#GMV成交总额" class="headerlink" title="GMV成交总额"></a>GMV成交总额</h1><h2 id="ADS层"><a href="#ADS层" class="headerlink" title="ADS层"></a>ADS层</h2><h1 id="转化率"><a href="#转化率" class="headerlink" title="转化率"></a>转化率</h1><h2 id="ADS层之新增用户占日活跃用户比率"><a href="#ADS层之新增用户占日活跃用户比率" class="headerlink" title="ADS层之新增用户占日活跃用户比率"></a>ADS层之新增用户占日活跃用户比率</h2><h2 id="ADS层之用户行为漏斗分析"><a href="#ADS层之用户行为漏斗分析" class="headerlink" title="ADS层之用户行为漏斗分析"></a>ADS层之用户行为漏斗分析</h2><h1 id="品牌复购率"><a href="#品牌复购率" class="headerlink" title="品牌复购率"></a>品牌复购率</h1><h2 id="DWS层"><a href="#DWS层" class="headerlink" title="DWS层"></a>DWS层</h2><h3 id="用户购买商品明细表（宽表）"><a href="#用户购买商品明细表（宽表）" class="headerlink" title="用户购买商品明细表（宽表）"></a>用户购买商品明细表（宽表）</h3><h2 id="ADS层-1"><a href="#ADS层-1" class="headerlink" title="ADS层"></a>ADS层</h2><h2 id="品牌复购率结果输出到MySQL"><a href="#品牌复购率结果输出到MySQL" class="headerlink" title="品牌复购率结果输出到MySQL"></a>品牌复购率结果输出到MySQL</h2><h1 id="Azkaban调度器"><a href="#Azkaban调度器" class="headerlink" title="Azkaban调度器"></a>Azkaban调度器</h1><h2 id="Azkaban安装"><a href="#Azkaban安装" class="headerlink" title="Azkaban安装"></a>Azkaban安装</h2><h2 id="复购率指标的产生的全调度流程"><a href="#复购率指标的产生的全调度流程" class="headerlink" title="复购率指标的产生的全调度流程"></a>复购率指标的产生的全调度流程</h2><h1 id="订单表拉链表"><a href="#订单表拉链表" class="headerlink" title="订单表拉链表"></a>订单表拉链表</h1><h2 id="什么是拉链表"><a href="#什么是拉链表" class="headerlink" title="什么是拉链表"></a>什么是拉链表</h2><h2 id="为什么要做拉链表"><a href="#为什么要做拉链表" class="headerlink" title="为什么要做拉链表"></a>为什么要做拉链表</h2><h2 id="拉链表形成过程"><a href="#拉链表形成过程" class="headerlink" title="拉链表形成过程"></a>拉链表形成过程</h2><h2 id="拉链表制作过程图"><a href="#拉链表制作过程图" class="headerlink" title="拉链表制作过程图"></a>拉链表制作过程图</h2><h2 id="拉链表制作过程"><a href="#拉链表制作过程" class="headerlink" title="拉链表制作过程"></a>拉链表制作过程</h2><h1 id="OLAP分析工具之Presto"><a href="#OLAP分析工具之Presto" class="headerlink" title="OLAP分析工具之Presto"></a>OLAP分析工具之Presto</h1><h2 id="Presto-Server安装"><a href="#Presto-Server安装" class="headerlink" title="Presto Server安装"></a>Presto Server安装</h2><h2 id="Presto命令行Client安装"><a href="#Presto命令行Client安装" class="headerlink" title="Presto命令行Client安装"></a>Presto命令行Client安装</h2><h2 id="Presto可视化操作"><a href="#Presto可视化操作" class="headerlink" title="Presto可视化操作"></a>Presto可视化操作</h2><h1 id="项目总结"><a href="#项目总结" class="headerlink" title="项目总结"></a>项目总结</h1>]]></content>
      <categories>
        <category>大数据分布式</category>
        <category>项目</category>
      </categories>
      <tags>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>数据仓库-用户行为数据仓库</title>
    <url>/2019/12/04/20191204140743901/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>参考：<a href="http://blog.sina.com.cn/s/blog_c30a9e680102z9mp.html" target="_blank" rel="noopener">http://blog.sina.com.cn/s/blog_c30a9e680102z9mp.html</a></p>
</blockquote>
<p>[toc]</p>
<h1 id="数仓分层概念"><a href="#数仓分层概念" class="headerlink" title="数仓分层概念"></a>数仓分层概念</h1><h2 id="为什么要分层"><a href="#为什么要分层" class="headerlink" title="为什么要分层"></a>为什么要分层</h2><h2 id="分层结构图"><a href="#分层结构图" class="headerlink" title="分层结构图"></a>分层结构图</h2><p>原始数据层</p>
<p>明细数据层</p>
<p>服务数据层</p>
<p>数据应用层</p>
<h2 id="区分数据集市和数据仓库"><a href="#区分数据集市和数据仓库" class="headerlink" title="区分数据集市和数据仓库"></a>区分数据集市和数据仓库</h2><h1 id="数仓搭建环境准备"><a href="#数仓搭建环境准备" class="headerlink" title="数仓搭建环境准备"></a>数仓搭建环境准备</h1><h2 id="Hive-amp-MySQL安装"><a href="#Hive-amp-MySQL安装" class="headerlink" title="Hive&amp;MySQL安装"></a>Hive&amp;MySQL安装</h2><h2 id="Hive运行引擎Tez"><a href="#Hive运行引擎Tez" class="headerlink" title="Hive运行引擎Tez"></a>Hive运行引擎Tez</h2><p>cdh版本的hive需要下载Tez源码自己编译</p>
<p>编译参考：</p>
<p><a href="https://www.jianshu.com/p/8f487e20cf3e" target="_blank" rel="noopener">CDH 5.16.1 Hive 整合 Tez</a></p>
<p><a href="https://www.jianshu.com/p/45c95a51a8c2" target="_blank" rel="noopener">大数据之CDH5.16.1集成Tez0.9.2</a></p>
<p>然后将编译好的tez-0.9.2.tar.gz 进行与hive整合</p>
<p>运行hive时遇到报错：</p>
<p>IllegalArgumentException:  Illegal Capacity</p>
<p>解决办法：在hive-site.xml中添加 （参考 <a href="https://www.jianshu.com/p/3c9f1963ac02" target="_blank" rel="noopener">CDH环境下安装Tez(Hive on Tez )</a> ）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;hive.tez.container.size&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;value&gt;1024&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br></pre></td></tr></table></figure></div>

<p>问题解决！</p>
<h1 id="数仓搭建之ODS-amp-DWD"><a href="#数仓搭建之ODS-amp-DWD" class="headerlink" title="数仓搭建之ODS &amp; DWD"></a>数仓搭建之ODS &amp; DWD</h1><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><h2 id="ODS层"><a href="#ODS层" class="headerlink" title="ODS层"></a>ODS层</h2><p>为啥创建外部表？</p>
<p>如何分区？</p>
<h3 id="创建启动日志表ods-start-log"><a href="#创建启动日志表ods-start-log" class="headerlink" title="创建启动日志表ods_start_log"></a>创建启动日志表ods_start_log</h3><h3 id="创建事件日志表ods-event-log"><a href="#创建事件日志表ods-event-log" class="headerlink" title="创建事件日志表ods_event_log"></a>创建事件日志表ods_event_log</h3><h3 id="ODS层加载数据脚本"><a href="#ODS层加载数据脚本" class="headerlink" title="ODS层加载数据脚本"></a>ODS层加载数据脚本</h3><h2 id="DWD层数据解析"><a href="#DWD层数据解析" class="headerlink" title="DWD层数据解析"></a>DWD层数据解析</h2><p>只有最后一层不用压缩，中间过程都可以用压缩格式</p>
<p>parquet？ 列式存储</p>
<h3 id="创建基础明细表"><a href="#创建基础明细表" class="headerlink" title="创建基础明细表"></a>创建基础明细表</h3><h3 id="自定义UDF函数（解析公共字段）"><a href="#自定义UDF函数（解析公共字段）" class="headerlink" title="自定义UDF函数（解析公共字段）"></a>自定义UDF函数（解析公共字段）</h3><h3 id="自定义UDTF函数（解析具体事件字段）"><a href="#自定义UDTF函数（解析具体事件字段）" class="headerlink" title="自定义UDTF函数（解析具体事件字段）"></a>自定义UDTF函数（解析具体事件字段）</h3><h3 id="解析启动日志基础明细表"><a href="#解析启动日志基础明细表" class="headerlink" title="解析启动日志基础明细表"></a>解析启动日志基础明细表</h3><h3 id="解析事件日志基础明细表"><a href="#解析事件日志基础明细表" class="headerlink" title="解析事件日志基础明细表"></a>解析事件日志基础明细表</h3><h3 id="DWD层数据解析脚本"><a href="#DWD层数据解析脚本" class="headerlink" title="DWD层数据解析脚本"></a>DWD层数据解析脚本</h3><h2 id="DWD层"><a href="#DWD层" class="headerlink" title="DWD层"></a>DWD层</h2><h3 id="商品点击表"><a href="#商品点击表" class="headerlink" title="商品点击表"></a>商品点击表</h3><h3 id="商品详情页表"><a href="#商品详情页表" class="headerlink" title="商品详情页表"></a>商品详情页表</h3><h3 id="商品列表页表"><a href="#商品列表页表" class="headerlink" title="商品列表页表"></a>商品列表页表</h3><h3 id="…"><a href="#…" class="headerlink" title="…"></a>…</h3><h3 id="DWD层加载数据脚本"><a href="#DWD层加载数据脚本" class="headerlink" title="DWD层加载数据脚本"></a>DWD层加载数据脚本</h3><h1 id="业务知识准备"><a href="#业务知识准备" class="headerlink" title="业务知识准备"></a>业务知识准备</h1><h2 id="业务术语"><a href="#业务术语" class="headerlink" title="业务术语"></a>业务术语</h2><h2 id="系统函数"><a href="#系统函数" class="headerlink" title="系统函数"></a>系统函数</h2><h1 id="需求一：用户活跃主题"><a href="#需求一：用户活跃主题" class="headerlink" title="需求一：用户活跃主题"></a>需求一：用户活跃主题</h1><h1 id="需求二：用户新增主题"><a href="#需求二：用户新增主题" class="headerlink" title="需求二：用户新增主题"></a>需求二：用户新增主题</h1><h1 id="需求三：用户留存主题"><a href="#需求三：用户留存主题" class="headerlink" title="需求三：用户留存主题"></a>需求三：用户留存主题</h1>]]></content>
      <categories>
        <category>大数据分布式</category>
        <category>项目</category>
      </categories>
      <tags>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>数据仓库-用户行为数据采集</title>
    <url>/2019/11/21/20191121155413741/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>参考：<a href="http://blog.sina.com.cn/s/blog_c30a9e680102z9mp.html" target="_blank" rel="noopener">http://blog.sina.com.cn/s/blog_c30a9e680102z9mp.html</a></p>
</blockquote>
<p>[toc]</p>
<h1 id="数据仓库概念"><a href="#数据仓库概念" class="headerlink" title="数据仓库概念"></a>数据仓库概念</h1><a href="/2019/11/21/20191121155413741/屏幕快照 2019-11-21 下午4.17.30.png" data-fancybox="group" data-caption="屏幕快照 2019-11-21 下午4.17.30" class="fancybox"><img alt="屏幕快照 2019-11-21 下午4.17.30" style="zoom:50%;" title="屏幕快照 2019-11-21 下午4.17.30" data-src="/2019/11/21/20191121155413741/屏幕快照 2019-11-21 下午4.17.30.png" class="lazyload"></a>



<h1 id="项目需求"><a href="#项目需求" class="headerlink" title="项目需求"></a>项目需求</h1><h2 id="项目需求分析"><a href="#项目需求分析" class="headerlink" title="项目需求分析"></a>项目需求分析</h2><a href="/2019/11/21/20191121155413741/image-20191121162348270.png" data-fancybox="group" data-caption="image-20191121162348270" class="fancybox"><img alt="image-20191121162348270" style="zoom:30%;" title="image-20191121162348270" data-src="/2019/11/21/20191121155413741/image-20191121162348270.png" class="lazyload"></a> 



<p>例如：</p>
<p>采集：Flume</p>
<p>仓库：Hive</p>
<p>导入：Sqoop</p>
<p>定时：Azkaban</p>
<h2 id="项目框架"><a href="#项目框架" class="headerlink" title="项目框架"></a>项目框架</h2><h3 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h3><a href="/2019/11/21/20191121155413741/image-20191121164305873.png" data-fancybox="group" data-caption="image-20191121164305873" class="fancybox"><img alt="image-20191121164305873" style="zoom:50%;" title="image-20191121164305873" data-src="/2019/11/21/20191121155413741/image-20191121164305873.png" class="lazyload"></a> 

<p>行为数据：file\日志 –&gt; Flume, Kafka, Logtash</p>
<p>数据库(mysql, oracle, mongoDB)：DataX, Sqoop</p>
<p>Kafka: 缓冲</p>
<p>mongoDB+python爬虫</p>
<p>Flink: 比较火</p>
<p>市场下滑框架：</p>
<p>Hbase：查询能力也很一般，替代为ES了。</p>
<p>Storm：</p>
<h3 id="系统架构图设计"><a href="#系统架构图设计" class="headerlink" title="系统架构图设计"></a>系统架构图设计</h3><a href="/2019/11/21/20191121155413741/image-20191121171038281.png" data-fancybox="group" data-caption="image-20191121171038281" class="fancybox"><img alt="image-20191121171038281" style="zoom:50%;" title="image-20191121171038281" data-src="/2019/11/21/20191121155413741/image-20191121171038281.png" class="lazyload"></a>

<p>presto: apache</p>
<p>impala: cdh</p>
<h3 id="系统数据流程设计"><a href="#系统数据流程设计" class="headerlink" title="系统数据流程设计"></a>系统数据流程设计</h3><a href="/2019/11/21/20191121155413741/image-20191121174728983.png" data-fancybox="group" data-caption="image-20191121174728983" class="fancybox"><img alt="image-20191121174728983" style="zoom:60%;" title="image-20191121174728983" data-src="/2019/11/21/20191121155413741/image-20191121174728983.png" class="lazyload"></a>



<h3 id="框架版本选型"><a href="#框架版本选型" class="headerlink" title="框架版本选型"></a>框架版本选型</h3><table>
<thead>
<tr>
<th>产品</th>
<th>版本</th>
</tr>
</thead>
<tbody><tr>
<td>Hadoop</td>
<td>cdh15.16.1</td>
</tr>
<tr>
<td>Flume</td>
<td>cdh15.16.1</td>
</tr>
<tr>
<td>Kafka</td>
<td></td>
</tr>
<tr>
<td>Kafka Manager</td>
<td></td>
</tr>
<tr>
<td>Hive</td>
<td>cdh15.16.1</td>
</tr>
<tr>
<td>Sqoop</td>
<td>cdh15.16.1</td>
</tr>
<tr>
<td>Mysql</td>
<td>5.7.28</td>
</tr>
<tr>
<td>Azkaban</td>
<td>2.5.0</td>
</tr>
<tr>
<td>Java</td>
<td>1.8</td>
</tr>
<tr>
<td>Zookeeper</td>
<td>3.4.14</td>
</tr>
</tbody></table>
<p>注意事项：框架选型尽量不要选择最新的框架，选择最新框架半年前左右的稳定版。</p>
<h3 id="集群资源规划设计"><a href="#集群资源规划设计" class="headerlink" title="集群资源规划设计"></a>集群资源规划设计</h3><table>
<thead>
<tr>
<th></th>
<th>服务器1(hadoop101)</th>
<th>服务器2</th>
<th>服务器3</th>
</tr>
</thead>
<tbody><tr>
<td>HDFS</td>
<td>NameNode  DataNode</td>
<td>DataNode</td>
<td>DataNode</td>
</tr>
<tr>
<td>Yarn</td>
<td>NodeManager</td>
<td>Resourcemanager  NodeManager</td>
<td>NodeManager</td>
</tr>
<tr>
<td>Zookeeper</td>
<td>Zookeeper</td>
<td>Zookeeper</td>
<td>Zookeeper</td>
</tr>
<tr>
<td>Flume(采集日志)</td>
<td>Flume</td>
<td>Flume</td>
<td></td>
</tr>
<tr>
<td>Kafka</td>
<td>Kafka</td>
<td>Kafka</td>
<td>Kafka</td>
</tr>
<tr>
<td>Flume（消费Kafka）</td>
<td></td>
<td></td>
<td>Flume</td>
</tr>
<tr>
<td>Hive</td>
<td>Hive</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Mysql</td>
<td>Mysql</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>耗内存的别放一起：NameNode, Resourcemanager</p>
<p>Flume：两台采集、一台消费。</p>
<p>Spark：基于内存运算，尽量也避开。</p>
<h1 id="数据生成模块"><a href="#数据生成模块" class="headerlink" title="数据生成模块"></a>数据生成模块</h1><h2 id="埋点数据基本格式"><a href="#埋点数据基本格式" class="headerlink" title="埋点数据基本格式"></a>埋点数据基本格式</h2><p>。。。</p>
<h2 id="事件日志数据"><a href="#事件日志数据" class="headerlink" title="事件日志数据"></a>事件日志数据</h2><p>。。。</p>
<p>商品点击、商品详情、广告、评论、收藏、错误日志…</p>
<h2 id="启动日志数据"><a href="#启动日志数据" class="headerlink" title="启动日志数据"></a>启动日志数据</h2><p>。。。</p>
<h2 id="数据库生成脚本"><a href="#数据库生成脚本" class="headerlink" title="数据库生成脚本"></a>数据库生成脚本</h2><p>创建Maven工程 </p>
<p>1）创建log-collector</p>
<p>2）创建一个包名：com.mxx.appclient</p>
<p>模拟app客户端，直接生成logFile了，忽略SpringBoot那些过程</p>
<p>i/o流，log第三方框架</p>
<p>3）在com.mxx.appclient包下创建一个类，AppMain。</p>
<p>4）在pom.xml文件中添加如下内容</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<h2 id="Bean"><a href="#Bean" class="headerlink" title="Bean"></a>Bean</h2><p>各种Bean</p>
<p>com.mxx.bean</p>
<h2 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h2><a href="/2019/11/21/20191121155413741/image-20191122165806093.png" data-fancybox="group" data-caption="image-20191122165806093" class="fancybox"><img alt="image-20191122165806093" style="zoom:60%;" title="image-20191122165806093" data-src="/2019/11/21/20191121155413741/image-20191122165806093.png" class="lazyload"></a>

<h2 id="配置日志打印Logback"><a href="#配置日志打印Logback" class="headerlink" title="配置日志打印Logback"></a>配置日志打印Logback</h2><p>具体使用：</p>
<p>1）在resources文件夹下创建logback.xml文件。</p>
<p>2）在logback.xml文件中填写如下配置</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><p>package</p>
<p>现在需要搭建环境了，参考【环境搭建】</p>
<p>然后把jar包放到集群下</p>
<h2 id="日志生成集群启动脚本"><a href="#日志生成集群启动脚本" class="headerlink" title="日志生成集群启动脚本"></a>日志生成集群启动脚本</h2><h2 id="集群时间同步修改脚本"><a href="#集群时间同步修改脚本" class="headerlink" title="集群时间同步修改脚本"></a>集群时间同步修改脚本</h2><h2 id="集群所有进程查看脚本"><a href="#集群所有进程查看脚本" class="headerlink" title="集群所有进程查看脚本"></a>集群所有进程查看脚本</h2><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>准备3台基本的虚拟机</p>
<p>【参考linux文档】</p>
<ul>
<li><p>先弄一个基本的centos6.8的虚拟机。</p>
<p>CentOS-6.8-x86_64-bin-DVD1.iso</p>
<ul>
<li>VMTools安装  </li>
<li>查看网络IP和网关 </li>
<li>配置网络ip地址  </li>
<li>关闭防火墙</li>
<li>将普通用户加入sudo</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;sudoers</span><br><span class="line"></span><br><span class="line">root    ALL&#x3D;(ALL)       ALL</span><br><span class="line">machine ALL&#x3D;(ALL)       ALL</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>设置hosts</p>
<p>vim /etc/hosts  ，添加如下内容</p>
</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">192.168.1.101 hadoop101</span><br><span class="line">192.168.1.102 hadoop102</span><br><span class="line">192.168.1.103 hadoop103</span><br></pre></td></tr></table></figure></div>



</li>
</ul>
<ul>
<li><p>克隆3台虚拟机</p>
<p>一些操作，3台都要（修改mac, 修改ip, 修改hostname）</p>
</li>
</ul>
<p>保证3台机子互相能PING通、保证能连网、保证能连上本地主机</p>
<p>然后用xshell连接3台机子</p>
<h1 id="数据采集模块"><a href="#数据采集模块" class="headerlink" title="数据采集模块"></a>数据采集模块</h1><h2 id="Hadoop安装"><a href="#Hadoop安装" class="headerlink" title="Hadoop安装"></a>Hadoop安装</h2><ol>
<li>准备3台客户机（关闭防火墙、静态ip、主机名称）</li>
<li>安装JDK，配置环境变量</li>
<li>安装Hadoop，配置环境变量</li>
<li>编写集群分发脚本xsync  </li>
<li>配置集群</li>
<li>配置ssh</li>
<li>xsync分发安装包和配置</li>
<li>格式化集群，启动集群</li>
<li>添加LZO压缩支持。重启集群。</li>
</ol>
<h2 id="Zookeeper安装"><a href="#Zookeeper安装" class="headerlink" title="Zookeeper安装"></a>Zookeeper安装</h2><h3 id="搭建zookeeper集群"><a href="#搭建zookeeper集群" class="headerlink" title="搭建zookeeper集群"></a>搭建zookeeper集群</h3><h3 id="ZK集群启动停止脚本"><a href="#ZK集群启动停止脚本" class="headerlink" title="ZK集群启动停止脚本"></a>ZK集群启动停止脚本</h3><h2 id="Flume安装"><a href="#Flume安装" class="headerlink" title="Flume安装"></a>Flume安装</h2><h3 id="日志采集Flume安装"><a href="#日志采集Flume安装" class="headerlink" title="日志采集Flume安装"></a>日志采集Flume安装</h3><h3 id="日志采集Flume配置"><a href="#日志采集Flume配置" class="headerlink" title="日志采集Flume配置"></a>日志采集Flume配置</h3><p>1）Flume配置分析</p>
<a href="/2019/11/21/20191121155413741/image-20191202140810535.png" data-fancybox="group" data-caption="image-20191202141124093" class="fancybox"><img alt="image-20191202141124093" style="zoom:70%;" title="image-20191202141124093" data-src="/2019/11/21/20191121155413741/image-20191202140810535.png" class="lazyload"></a>

<p>ETL: MR\Flume拦截器\Kafka拦截器\Hive hq过滤</p>
<p>2）Flume的具体配置如下  </p>
<a href="/2019/11/21/20191121155413741/image-20191202144132445.png" data-fancybox="group" data-caption="image-20191202144132445" class="fancybox"><img alt="image-20191202144132445" style="zoom:80%;" title="image-20191202144132445" data-src="/2019/11/21/20191121155413741/image-20191202144132445.png" class="lazyload"></a>

<h3 id="Flume拦截器"><a href="#Flume拦截器" class="headerlink" title="Flume拦截器"></a>Flume拦截器</h3><p>本项目中自定义了两个拦截器，分别是：ETL拦截器、日志类型区分拦截器。</p>
<p>ETL拦截器主要用于，过滤时间戳不合法和json数据不完整的日志</p>
<p>日志类型区分拦截器主要用于，将错误日志、启动日志和事件日志区分开来，方便发往kafka的不同topic。</p>
<h3 id="日志采集Flume启动停止脚本"><a href="#日志采集Flume启动停止脚本" class="headerlink" title="日志采集Flume启动停止脚本"></a>日志采集Flume启动停止脚本</h3><h2 id="Kafka安装"><a href="#Kafka安装" class="headerlink" title="Kafka安装"></a>Kafka安装</h2><h3 id="kafka集群安装"><a href="#kafka集群安装" class="headerlink" title="kafka集群安装"></a>kafka集群安装</h3><h3 id="Kafka集群启动停止脚本"><a href="#Kafka集群启动停止脚本" class="headerlink" title="Kafka集群启动停止脚本"></a>Kafka集群启动停止脚本</h3><h3 id="查看所有Kafka-topic"><a href="#查看所有Kafka-topic" class="headerlink" title="查看所有Kafka topic"></a>查看所有Kafka topic</h3><h3 id="创建-Kafka-topic"><a href="#创建-Kafka-topic" class="headerlink" title="创建 Kafka topic"></a>创建 Kafka topic</h3><h3 id="消费消息"><a href="#消费消息" class="headerlink" title="消费消息"></a>消费消息</h3><h3 id="生产消息"><a href="#生产消息" class="headerlink" title="生产消息"></a>生产消息</h3><p>然后把f1.sh启动，运行lg.sh生产数据，查看消费者是否能成功消费数据。</p>
<p>到这里 logFile &gt;  flume &gt;  kafka就通了</p>
<h3 id="Kafka-Manager安装"><a href="#Kafka-Manager安装" class="headerlink" title="Kafka Manager安装"></a>Kafka Manager安装</h3><h3 id="Kafka-Manager启动停止脚本"><a href="#Kafka-Manager启动停止脚本" class="headerlink" title="Kafka Manager启动停止脚本"></a>Kafka Manager启动停止脚本</h3><h2 id="Flume消费Kafka数据写到HDFS"><a href="#Flume消费Kafka数据写到HDFS" class="headerlink" title="Flume消费Kafka数据写到HDFS"></a>Flume消费Kafka数据写到HDFS</h2><p>kafka &gt; flume消费 &gt; hdfs</p>
<h3 id="日志消费Flume配置"><a href="#日志消费Flume配置" class="headerlink" title="日志消费Flume配置"></a>日志消费Flume配置</h3><h3 id="日志消费Flume启动停止脚本"><a href="#日志消费Flume启动停止脚本" class="headerlink" title="日志消费Flume启动停止脚本"></a>日志消费Flume启动停止脚本</h3><h2 id="采集通道启动-停止脚本"><a href="#采集通道启动-停止脚本" class="headerlink" title="采集通道启动/停止脚本"></a>采集通道启动/停止脚本</h2><p>一个思考：</p>
<p>kafka在这里的作用？数据到kafka这里分叉，分为实时指标分析和HDFS离线。Kafka充当了路由和数据池的作用。</p>
<p>只做离线的话，直接从flume生产到hdfs消费就行了。</p>
]]></content>
      <categories>
        <category>大数据分布式</category>
        <category>项目</category>
      </categories>
      <tags>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>Ambari-Hadoop Web UI</title>
    <url>/2019/11/21/20191121140654751/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Ambari简述"><a href="#Ambari简述" class="headerlink" title="Ambari简述"></a>Ambari简述</h1><p>apache\CM\Ambari</p>
<p>Ambari和CM地位差不多，重点在集群管理，一键安装集群和启动。</p>
<p>hue的重点在使用界面操作大数据框架。</p>
<p><strong>什么是Ambari</strong>  </p>
<p>Apache Ambari项目旨在通过开发用于配置，管理和监控Apache Hadoop集群的软件来简化Hadoop管理。Ambari提供了一个直观，易用的Hadoop管理Web UI。</p>
<p><strong>Ambari的功能</strong></p>
<p>提供了跨任意数量的主机安装Hadoop服务的分步向导。</p>
<p>处理群集的Hadoop服务配置。</p>
<p>提供集中管理，用于在整个集群中启动，停止和重新配置Hadoop服务。</p>
<p>提供了一个仪表板，用于监控Hadoop集群的运行状况和状态。</p>
<p>利用Ambari指标系统进行指标收集。</p>
<p>利用Ambari Alert Framework进行系统警报，并在需要您注意时通知您（例如，节点出现故障，剩余磁盘空间不足等）。</p>
<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><h2 id="虚拟机准备"><a href="#虚拟机准备" class="headerlink" title="虚拟机准备"></a>虚拟机准备</h2><p>克隆三台虚拟机（hadoop102、hadoop103、hadoop104），配置好对应主机的网络IP、主机名称、关闭防火墙。</p>
<h2 id="关闭SELINUX"><a href="#关闭SELINUX" class="headerlink" title="关闭SELINUX"></a>关闭SELINUX</h2><h2 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h2><h2 id="SSH免密登录"><a href="#SSH免密登录" class="headerlink" title="SSH免密登录"></a>SSH免密登录</h2><h2 id="修改yum源为阿里云镜像"><a href="#修改yum源为阿里云镜像" class="headerlink" title="修改yum源为阿里云镜像"></a>修改yum源为阿里云镜像</h2><h2 id="安装ntp"><a href="#安装ntp" class="headerlink" title="安装ntp"></a>安装ntp</h2><p>为了同步集群时间</p>
<h2 id="关闭Linux的THP服务"><a href="#关闭Linux的THP服务" class="headerlink" title="关闭Linux的THP服务"></a>关闭Linux的THP服务</h2><p>如果不关闭transparent_hugepage，HDFS会因为这个性能严重受影响。</p>
<h2 id="配置UMASK"><a href="#配置UMASK" class="headerlink" title="配置UMASK"></a>配置UMASK</h2><p>设定用户所创建目录的初始权限</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">umask 0022</span><br></pre></td></tr></table></figure></div>



<h2 id="禁止离线更新"><a href="#禁止离线更新" class="headerlink" title="禁止离线更新"></a>禁止离线更新</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;yum&#x2F;pluginconf.d&#x2F;refresh-packagekit.conf</span><br><span class="line">修改：enabled&#x3D;0</span><br></pre></td></tr></table></figure></div>



<p>重启</p>
<h1 id="安装Ambari集群"><a href="#安装Ambari集群" class="headerlink" title="安装Ambari集群"></a>安装Ambari集群</h1><p>注意：以下操作主节点操作即可</p>
<h2 id="制作本地源"><a href="#制作本地源" class="headerlink" title="制作本地源"></a>制作本地源</h2><p>制作本地源是因为在线安装Ambari太慢。制作本地源只需在主节点上进行。</p>
<h3 id="配置HTTPD-服务"><a href="#配置HTTPD-服务" class="headerlink" title="配置HTTPD 服务"></a>配置HTTPD 服务</h3><p>配置HTTPD 服务到系统层使其随系统自动启动</p>
<h3 id="安装工具"><a href="#安装工具" class="headerlink" title="安装工具"></a>安装工具</h3><p>安装本地源制作相关工具</p>
<h3 id="将下载的3个tar包解压"><a href="#将下载的3个tar包解压" class="headerlink" title="将下载的3个tar包解压"></a>将下载的3个tar包解压</h3><h3 id="创建本地源"><a href="#创建本地源" class="headerlink" title="创建本地源"></a>创建本地源</h3><h3 id="修改配置文件，配置为本地源"><a href="#修改配置文件，配置为本地源" class="headerlink" title="修改配置文件，配置为本地源"></a>修改配置文件，配置为本地源</h3><p>…</p>
<p>查看Ambari 与 HDP 资源的资源库。</p>
<p>也可以打开浏览器查看一下：</p>
<p><a href="http://hadoop102/ambari/centos6/" target="_blank" rel="noopener">http://hadoop102/ambari/centos6/</a></p>
<p><a href="http://hadoop102/hdp/HDP/centos6/" target="_blank" rel="noopener">http://hadoop102/hdp/HDP/centos6/</a></p>
<p><a href="http://hadoop102/hdp/" target="_blank" rel="noopener">http://hadoop102/hdp/</a></p>
<h2 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h2><h2 id="安装Ambari"><a href="#安装Ambari" class="headerlink" title="安装Ambari"></a>安装Ambari</h2><p>1）安装ambari-server</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install ambari-server</span><br><span class="line"># 很快，因为使用的是本地源</span><br></pre></td></tr></table></figure></div>

<p>2） 拷贝mysql驱动</p>
<h2 id="在MySQL中创建数据库"><a href="#在MySQL中创建数据库" class="headerlink" title="在MySQL中创建数据库"></a>在MySQL中创建数据库</h2><p>1）创建ambari库</p>
<p>2）使用Ambari自带脚本创建表</p>
<p>3）赋予用户root权限：</p>
<p>4）刷新</p>
<h2 id="配置Ambari"><a href="#配置Ambari" class="headerlink" title="配置Ambari"></a>配置Ambari</h2><h2 id="启动Ambari"><a href="#启动Ambari" class="headerlink" title="启动Ambari"></a>启动Ambari</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">启动命令为：</span><br><span class="line">ambari-server start</span><br><span class="line">停止命令为：</span><br><span class="line">ambari-server stop</span><br></pre></td></tr></table></figure></div>



<h1 id="HDP集群部署"><a href="#HDP集群部署" class="headerlink" title="HDP集群部署"></a>HDP集群部署</h1><h2 id="集群搭建"><a href="#集群搭建" class="headerlink" title="集群搭建"></a>集群搭建</h2><p>和cm差不多</p>
<h2 id="安装Hive"><a href="#安装Hive" class="headerlink" title="安装Hive"></a>安装Hive</h2><h2 id="配置HDFS-HA"><a href="#配置HDFS-HA" class="headerlink" title="配置HDFS-HA"></a>配置HDFS-HA</h2>]]></content>
      <categories>
        <category>大数据分布式</category>
        <category>UI管理</category>
      </categories>
      <tags>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>Kettle-ETL工具&amp;数据抽取</title>
    <url>/2019/11/19/20191119151208934/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="kettle概述"><a href="#kettle概述" class="headerlink" title="kettle概述"></a>kettle概述</h1><p>Kettle是一款开源的ETL工具，纯java编写，可以在Window、Linux、Unix上运行，绿色无需安装，数据抽取高效稳定。</p>
<p>Kettle工程存储方式</p>
<p>1) 以XML形式存储</p>
<p>2) 以资源库方式存储(数据库资源库和文件资源库)</p>
<p>Kettle的两种设计  </p>
<a href="/2019/11/19/20191119151208934/屏幕快照 2019-11-20 下午2.06.53-4237982.png" data-fancybox="group" data-caption="屏幕快照 2019-11-20 下午2.06.53" class="fancybox"><img alt="屏幕快照 2019-11-20 下午2.06.53" style="zoom:50%;" title="屏幕快照 2019-11-20 下午2.06.53" data-src="/2019/11/19/20191119151208934/屏幕快照 2019-11-20 下午2.06.53-4237982.png" class="lazyload"></a>

<p>Kettle的组成</p>
<a href="/2019/11/19/20191119151208934/屏幕快照 2019-11-20 下午2.10.19-4238011.png" data-fancybox="group" data-caption="屏幕快照 2019-11-20 下午2.10.19" class="fancybox"><img alt="屏幕快照 2019-11-20 下午2.10.19" style="zoom:50%;" title="屏幕快照 2019-11-20 下午2.10.19" data-src="/2019/11/19/20191119151208934/屏幕快照 2019-11-20 下午2.10.19-4238011.png" class="lazyload"></a>



<h1 id="kettle安装部署和使用"><a href="#kettle安装部署和使用" class="headerlink" title="kettle安装部署和使用"></a>kettle安装部署和使用</h1><p>官网地址: <a href="https://community.hitachivantara.com/docs/DOC-1009855" target="_blank" rel="noopener">https://community.hitachivantara.com/docs/DOC-1009855</a></p>
<p>下载地址: <a href="https://sourceforge.net/projects/pentaho/files/Data%20Integration/" target="_blank" rel="noopener">https://sourceforge.net/projects/pentaho/files/Data%20Integration/</a></p>
<h2 id="mac-win下安装使用"><a href="#mac-win下安装使用" class="headerlink" title="mac/win下安装使用"></a>mac/win下安装使用</h2><p>在实际企业开发中，都是在本地环境下进行kettle的job和Transformation开发的，可以在本地运行，也可以连接远程机器运行</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>1) 安装jdk</p>
<p>2) 下载kettle压缩包，因kettle为绿色软件，解压缩到任意本地路径即可</p>
<p>3) 双击Spoon.bat/Spoon.bat(mac)，启动图形化界面工具，就可以直接使用了</p>
<p>把mysql的驱动扔到lib目录下</p>
<h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>1) 案例一 把stu1的数据按id同步到stu2，stu2有相同id则更新数据</p>
<p>2) 案例2：使用作业执行上述转换，并且额外在表student2中添加一条数据</p>
<p>3) 案例3：将hive表的数据输出到hdfs</p>
<p>4)案例4：读取hdfs文件并将sal大于1000的数据保存到hbase中</p>
<p>都是些界面操作，略了…</p>
<h2 id="创建资源库"><a href="#创建资源库" class="headerlink" title="创建资源库"></a>创建资源库</h2><h3 id="数据库资源库"><a href="#数据库资源库" class="headerlink" title="数据库资源库"></a>数据库资源库</h3><p>数据库资源库是将作业和转换相关的信息存储在数据库中，执行的时候直接去数据库读取信息，很容易跨平台使用</p>
<p>创建步骤略…</p>
<h3 id="文件资源库"><a href="#文件资源库" class="headerlink" title="文件资源库"></a>文件资源库</h3><p>将作业和转换相关的信息存储在指定的目录中，其实和XML的方式一样</p>
<p>创建方式跟创建数据库资源库步骤类似，只是不需要用户密码就可以访问，跨</p>
<p>平台使用比较麻烦</p>
<p>创建步骤略…</p>
<p>一般都是使用数据库资源库，在win/mac下使用界面工具创建任务，然后在linux上使用命令行执行的。</p>
<h2 id="Linux下安装使用"><a href="#Linux下安装使用" class="headerlink" title="Linux下安装使用"></a>Linux下安装使用</h2><h3 id="单机"><a href="#单机" class="headerlink" title="单机"></a>单机</h3><p>1)jdk安装</p>
<p>2)安装包上传到服务器，解压</p>
<p>注意：</p>
<ol>
<li><p>把mysql驱动拷贝到lib目录下</p>
</li>
<li><p>将本地用户家目录下的隐藏目录.kettle，整个上传到linux的家目录/home/xxx/下(里面有配置的数据库资源库信息)</p>
</li>
</ol>
<p>3) 运行数据库资源库中的转换  </p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;pan.sh -rep&#x3D;my_repo -user&#x3D;admin -pass&#x3D;admin -trans&#x3D;stu1tostu2 -dir&#x3D;&#x2F;</span><br><span class="line"></span><br><span class="line">参数说明：</span><br><span class="line">-rep         资源库名称</span><br><span class="line">-user        资源库用户名</span><br><span class="line">-pass        资源库密码</span><br><span class="line">-trans       要启动的转换名称</span><br><span class="line">-dir         目录(不要忘了前缀 &#x2F;)</span><br></pre></td></tr></table></figure></div>



<p>4)运行资源库里的作业</p>
<p>记得把作业里的转换变成资源库中的资源  </p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;kitchen.sh -rep&#x3D;repo1 -user&#x3D;admin -pass&#x3D;admin -job&#x3D;jobDemo1 -logfile&#x3D;.&#x2F;logs&#x2F;log.txt -dir&#x3D;&#x2F;</span><br><span class="line"></span><br><span class="line">参数说明：</span><br><span class="line">-rep - 资源库名</span><br><span class="line">-user - 资源库用户名</span><br><span class="line">-pass – 资源库密码</span><br><span class="line">-job – job名</span><br><span class="line">-dir – job路径</span><br><span class="line">-logfile – 日志目录</span><br></pre></td></tr></table></figure></div>



<h3 id="集群模式"><a href="#集群模式" class="headerlink" title="集群模式"></a>集群模式</h3><p>(了解)</p>
<p><strong>安装部署</strong></p>
<p>略</p>
<p>就是改 /data-integration/pwd    下的配置文件</p>
<p>访问web页面： <a href="http://XXX:8080" target="_blank" rel="noopener">http://XXX:8080</a></p>
<p>案例：读取hive中的emp表，根据id进行排序，并将结果输出到hdfs上</p>
<p>这个排序就是基于集群去排序的</p>
<h1 id="调优"><a href="#调优" class="headerlink" title="调优"></a>调优</h1><p>JVM、连接池啥的，用到再说吧…</p>
]]></content>
      <categories>
        <category>大数据分布式</category>
        <category>数据抽取</category>
      </categories>
      <tags>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>ClickHouse-列式数据库管理系统</title>
    <url>/2019/11/19/20191119120234997/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="ClickHouse概述"><a href="#ClickHouse概述" class="headerlink" title="ClickHouse概述"></a>ClickHouse概述</h1><p><strong>什么是ClickHouse</strong></p>
<p>ClickHouse 是俄罗斯的Yandex于2016年开源的列式存储数据库（DBMS），主要用于在线分析处理查询（OLAP），能够使用SQL查询实时生成分析数据报告。</p>
<p><strong>什么是列式存储</strong>  </p>
<p>以下面的表为例：</p>
<table>
<thead>
<tr>
<th>Id</th>
<th>Name</th>
<th>Age</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>张三</td>
<td>18</td>
</tr>
<tr>
<td>2</td>
<td>李四</td>
<td>22</td>
</tr>
<tr>
<td>3</td>
<td>王五</td>
<td>34</td>
</tr>
</tbody></table>
<p>采用行式存储时，数据在磁盘上的组织结构为：</p>
<table>
<thead>
<tr>
<th>1</th>
<th>张三</th>
<th>18</th>
<th>2</th>
<th>李四</th>
<th>22</th>
<th>3</th>
<th>王五</th>
<th>34</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>好处是想查某个人所有的属性时，可以通过一次磁盘查找加顺序读取就可以。但是当想查所有人的年龄时，需要不停的查找，或者全表扫描才行，遍历的很多数据都是不需要的。</p>
<p>而采用列式存储时，数据在磁盘上的组织结构为：</p>
<table>
<thead>
<tr>
<th>1</th>
<th>2</th>
<th>3</th>
<th>张三</th>
<th>李四</th>
<th>王五</th>
<th>18</th>
<th>22</th>
<th>34</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>这时想查所有人的年龄只需把年龄那一列拿出来就可以了</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>官网：<a href="https://clickhouse.yandex/" target="_blank" rel="noopener">https://clickhouse.yandex/</a></p>
<p>下载地址：<a href="http://repo.red-soft.biz/repos/clickhouse/stable/el7" target="_blank" rel="noopener">http://repo.red-soft.biz/repos/clickhouse/stable/el7</a></p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><h3 id="CentOS取消打开文件数限制"><a href="#CentOS取消打开文件数限制" class="headerlink" title="CentOS取消打开文件数限制"></a>CentOS取消打开文件数限制</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/security/limits.conf</span><br><span class="line">在文件末尾添加：</span><br><span class="line">* soft nofile 65536 </span><br><span class="line">* hard nofile 65536 </span><br><span class="line">* soft nproc 131072 </span><br><span class="line">* hard nproc 131072</span><br><span class="line"></span><br><span class="line">vi /etc/security/limits.d/20-nproc.conf</span><br><span class="line">在文件末尾添加：</span><br><span class="line">* soft nofile 65536 </span><br><span class="line">* hard nofile 65536 </span><br><span class="line">* soft nproc 131072 </span><br><span class="line">* hard nproc 131072</span><br></pre></td></tr></table></figure></div>

<h3 id="CentOS取消SELINUX"><a href="#CentOS取消SELINUX" class="headerlink" title="CentOS取消SELINUX"></a>CentOS取消SELINUX</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/selinux/config</span><br><span class="line">SELINUX=disabled</span><br></pre></td></tr></table></figure></div>

<h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y libtool</span><br><span class="line">yum install -y *unixODBC*</span><br></pre></td></tr></table></figure></div>

<h3 id="重启服务器"><a href="#重启服务器" class="headerlink" title="重启服务器"></a>重启服务器</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">重启之后生效，用ulimit -n 或者ulimit -a查看设置结果</span><br><span class="line">reboot</span><br><span class="line">ulimit -n</span><br><span class="line">65536</span><br></pre></td></tr></table></figure></div>

<h2 id="单机模式"><a href="#单机模式" class="headerlink" title="单机模式"></a>单机模式</h2><p>上传</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">clickhouse-client-1.1.54236-4.el7.x86_64.rpm</span><br><span class="line">clickhouse-compressor-1.1.54236-4.el7.x86_64.rpm</span><br><span class="line">clickhouse-debuginfo-1.1.54236-4.el7.x86_64.rpm</span><br><span class="line">clickhouse-server-1.1.54236-4.el7.x86_64.rpm</span><br><span class="line">clickhouse-server-common-1.1.54236-4.el7.x86_64.rpm</span><br></pre></td></tr></table></figure></div>

<p>  安装</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpm -ivh clickhouse-*.rpm</span><br></pre></td></tr></table></figure></div>

<p>启动ClickServer</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">前台启动：</span><br><span class="line">$ sudo clickhouse-server --config-file&#x3D;&#x2F;etc&#x2F;clickhouse-server&#x2F;config.xml</span><br><span class="line">后台启动：</span><br><span class="line">$ nohup clickhouse-server --config-file&#x3D;&#x2F;etc&#x2F;clickhouse-server&#x2F;config.xml  &gt;null 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line">[1] 2696</span><br></pre></td></tr></table></figure></div>

<p>使用client连接server</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ clickhouse-client </span><br><span class="line">ClickHouse client version 1.1.54236.</span><br><span class="line">Connecting to localhost:9000.</span><br><span class="line">Connected to ClickHouse server version 1.1.54236.</span><br><span class="line"></span><br><span class="line">:)</span><br></pre></td></tr></table></figure></div>

<p>用一下</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:) show databases;</span><br><span class="line"></span><br><span class="line">SHOW DATABASES</span><br><span class="line"></span><br><span class="line">┌─name────┐</span><br><span class="line">│ default │</span><br><span class="line">│ system  │</span><br><span class="line">└─────────┘</span><br><span class="line"></span><br><span class="line">2 rows in set. Elapsed: 0.003 sec.</span><br></pre></td></tr></table></figure></div>



<h2 id="分布式集群安装"><a href="#分布式集群安装" class="headerlink" title="分布式集群安装"></a>分布式集群安装</h2><p>（伪分布式）</p>
<p>其他机子执行上面所有步骤</p>
<p>修改三台机子的配置config.xml</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;clickhouse-server&#x2F;config.xml</span><br><span class="line"></span><br><span class="line">&lt;listen_host&gt;::&lt;&#x2F;listen_host&gt;</span><br><span class="line">&lt;!-- &lt;listen_host&gt;::1&lt;&#x2F;listen_host&gt; --&gt;</span><br><span class="line">&lt;!-- &lt;listen_host&gt;127.0.0.1&lt;&#x2F;listen_host&gt; --&gt;</span><br></pre></td></tr></table></figure></div>

<p>在三台机器的etc目录下新建metrika.xml文件</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"># vi /etc/metrika.xml</span><br><span class="line">添加如下内容：</span><br><span class="line"><span class="tag">&lt;<span class="name">yandex</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">clickhouse_remote_servers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">perftest_3shards_1replicas</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">shard</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">internal_replication</span>&gt;</span>true<span class="tag">&lt;/<span class="name">internal_replication</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">replica</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">host</span>&gt;</span>hadoop102<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">port</span>&gt;</span>9000<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">replica</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">shard</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">shard</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">replica</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">internal_replication</span>&gt;</span>true<span class="tag">&lt;/<span class="name">internal_replication</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">host</span>&gt;</span>hadoop103<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">port</span>&gt;</span>9000<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">replica</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">shard</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">shard</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">internal_replication</span>&gt;</span>true<span class="tag">&lt;/<span class="name">internal_replication</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">replica</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">host</span>&gt;</span>hadoop104<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">port</span>&gt;</span>9000<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">replica</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">shard</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">perftest_3shards_1replicas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">clickhouse_remote_servers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">zookeeper-servers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">node</span> <span class="attr">index</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">host</span>&gt;</span>hadoop102<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">port</span>&gt;</span>2181<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">node</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">node</span> <span class="attr">index</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">host</span>&gt;</span>hadoop103<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">port</span>&gt;</span>2181<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">node</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">node</span> <span class="attr">index</span>=<span class="string">"3"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">host</span>&gt;</span>hadoop104<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">port</span>&gt;</span>2181<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">node</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">zookeeper-servers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 需要根据机器不同去修改 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">macros</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">replica</span>&gt;</span>hadoop102<span class="tag">&lt;/<span class="name">replica</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">macros</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">networks</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">ip</span>&gt;</span>::/0<span class="tag">&lt;/<span class="name">ip</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">networks</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">clickhouse_compression</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">case</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">min_part_size</span>&gt;</span>10000000000<span class="tag">&lt;/<span class="name">min_part_size</span>&gt;</span></span><br><span class="line">                                             </span><br><span class="line">  <span class="tag">&lt;<span class="name">min_part_size_ratio</span>&gt;</span>0.01<span class="tag">&lt;/<span class="name">min_part_size_ratio</span>&gt;</span>                                                                                                                                       </span><br><span class="line">  <span class="tag">&lt;<span class="name">method</span>&gt;</span>lz4<span class="tag">&lt;/<span class="name">method</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">case</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">clickhouse_compression</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">yandex</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>三台机器启动ClickServer  </p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">首先在三台机器开启Zookeeper</span><br><span class="line"></span><br><span class="line">前台启动：</span><br><span class="line"># clickhouse-server --config-file&#x3D;&#x2F;etc&#x2F;clickhouse-server&#x2F;config.xml</span><br><span class="line">后台启动：</span><br><span class="line"># nohup clickhouse-server --config-file&#x3D;&#x2F;etc&#x2F;clickhouse-server&#x2F;config.xml  &gt;null 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line">[1] 2696</span><br></pre></td></tr></table></figure></div>



<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h2><p>固定长度的整型，包括有符号整型或无符号整型。</p>
<h2 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h2><p>Float32 - float</p>
<p>Float64 – double</p>
<p>建议尽可能以整数形式存储数据。例如，将固定精度的数字转换为整数值，如时间用毫秒为单位表示，因为浮点型进行计算时可能引起四舍五入的误差。</p>
<h2 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h2><p>没有单独的类型来存储布尔值。可以使用 UInt8 类型，取值限制为 0 或 1。</p>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p> <strong>1</strong>）String</p>
<p>字符串可以任意长度的。它可以包含任意的字节集，包含空字节。</p>
<p><strong>2</strong>）FixedString(N)</p>
<p>固定长度 N 的字符串，N 必须是严格的正自然数。</p>
<p>与String相比，极少会使用FixedString，因为使用起来不是很方便。</p>
<h2 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h2><p>包括 Enum8 和 Enum16 类型。Enum 保存 ‘string’= integer 的对应关系。</p>
<p>Enum8 用 ‘String’= Int8 对描述。</p>
<p>Enum16 用 ‘String’= Int16 对描述。</p>
<p>用法演示：<br>创建一个带有一个枚举 Enum8(‘hello’ = 1, ‘world’ = 2) 类型的列：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE t_enum</span><br><span class="line">(</span><br><span class="line">    x Enum8(&#39;hello&#39; &#x3D; 1, &#39;world&#39; &#x3D; 2)</span><br><span class="line">)</span><br><span class="line">ENGINE &#x3D; TinyLog</span><br></pre></td></tr></table></figure></div>

<p>这个 <code>x</code> 列只能存储类型定义中列出的值：<code>&#39;hello&#39;</code>或<code>&#39;world&#39;</code>。如果尝试保存任何其他值，ClickHouse 抛出异常。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:) INSERT INTO t_enum VALUES (&#39;hello&#39;), (&#39;world&#39;), (&#39;hello&#39;)</span><br></pre></td></tr></table></figure></div>

<p>从表中查询数据时，ClickHouse 从 Enum 中输出字符串值。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM t_enum</span><br><span class="line"></span><br><span class="line">┌─x─────┐</span><br><span class="line">│ hello │</span><br><span class="line">│ world │</span><br><span class="line">│ hello │</span><br><span class="line">└───────┘</span><br></pre></td></tr></table></figure></div>

<p>如果需要看到对应行的数值，则必须将 Enum 值转换为整数类型。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT CAST(x, &#39;Int8&#39;) FROM t_enum</span><br><span class="line"></span><br><span class="line">┌─CAST(x, &#39;Int8&#39;)─┐</span><br><span class="line">│               1 │</span><br><span class="line">│               2 │</span><br><span class="line">│               1 │</span><br><span class="line">└─────────────────┘</span><br></pre></td></tr></table></figure></div>



<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p><strong>Array(T)</strong>：由 T 类型元素组成的数组。</p>
<p>T 可以是任意类型，包含数组类型。 但不推荐使用多维数组，ClickHouse 对多维数组的支持有限。例如，不能在 MergeTree 表中存储多维数组。</p>
<p>创建数组案例(两种方式)：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:) SELECT array(1, 2) AS x, toTypeName(x)</span><br><span class="line"></span><br><span class="line">SELECT</span><br><span class="line">    [1, 2] AS x,</span><br><span class="line">    toTypeName(x)</span><br><span class="line"></span><br><span class="line">┌─x─────┬─toTypeName(array(1, 2))─┐</span><br><span class="line">│ [1,2] │ Array(UInt8)            │</span><br><span class="line">└───────┴─────────────────────────┘</span><br><span class="line"></span><br><span class="line">1 rows in set. Elapsed: 0.002 sec.</span><br><span class="line"></span><br><span class="line">:) SELECT [1, 2] AS x, toTypeName(x)</span><br><span class="line"></span><br><span class="line">SELECT</span><br><span class="line">    [1, 2] AS x,</span><br><span class="line">    toTypeName(x)</span><br><span class="line"></span><br><span class="line">┌─x─────┬─toTypeName([1, 2])─┐</span><br><span class="line">│ [1,2] │ Array(UInt8)       │</span><br><span class="line">└───────┴────────────────────┘</span><br><span class="line"></span><br><span class="line">1 rows in set. Elapsed: 0.002 sec.</span><br></pre></td></tr></table></figure></div>



<h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><p>Tuple(T1, T2, …)：元组，其中每个元素都有单独的类型。<br>创建元组的示例：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:) SELECT tuple(1,&#39;a&#39;) AS x, toTypeName(x)</span><br><span class="line"></span><br><span class="line">SELECT</span><br><span class="line">    (1, &#39;a&#39;) AS x,</span><br><span class="line">    toTypeName(x)</span><br><span class="line"></span><br><span class="line">┌─x───────┬─toTypeName(tuple(1, &#39;a&#39;))─┐</span><br><span class="line">│ (1,&#39;a&#39;) │ Tuple(UInt8, String)      │</span><br><span class="line">└─────────┴───────────────────────────┘</span><br><span class="line"></span><br><span class="line">1 rows in set. Elapsed: 0.021 sec.</span><br></pre></td></tr></table></figure></div>



<h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><p>日期类型，用两个字节存储，表示从 1970-01-01 (无符号) 到当前的日期值。</p>
<p>其他数据类型，官方文档：<a href="https://clickhouse.yandex/docs/zh/data_types/" target="_blank" rel="noopener">https://clickhouse.yandex/docs/zh/data_types/</a></p>
<h1 id="表引擎"><a href="#表引擎" class="headerlink" title="表引擎"></a>表引擎</h1><p>表引擎（即表的类型）决定了：</p>
<p>1）数据的存储方式和位置，写到哪里以及从哪里读取数据</p>
<p>2）支持哪些查询以及如何支持。</p>
<p>3）并发数据访问。</p>
<p>4）索引的使用（如果存在）。</p>
<p>5）是否可以执行多线程请求。</p>
<p>6）数据复制参数。</p>
<p>ClickHouse的表引擎有很多，官方文档：<a href="https://clickhouse.yandex/docs/zh/operations/table_engines/" target="_blank" rel="noopener">https://clickhouse.yandex/docs/zh/operations/table_engines/</a></p>
<h2 id="TinyLog"><a href="#TinyLog" class="headerlink" title="TinyLog"></a>TinyLog</h2><p>最简单的表引擎，用于将数据存储在磁盘上。每列都存储在单独的压缩文件中，写入时，数据将附加到文件末尾。<br>该引擎没有并发控制 </p>
<ul>
<li>如果同时从表中读取和写入数据，则读取操作将抛出异常；</li>
<li>如果同时写入多个查询中的表，则数据将被破坏。</li>
</ul>
<p>这种表引擎的典型用法是 write-once：首先只写入一次数据，然后根据需要多次读取。此引擎适用于相对较小的表（建议最多1,000,000行）。如果有许多小表，则使用此表引擎是适合的，因为它比需要打开的文件更少。当拥有大量小表时，可能会导致性能低下。 </p>
<p>不支持索引。</p>
<p>案例：创建一个TinyLog引擎的表并插入一条数据</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:)create table t (a UInt16, b String) ENGINE&#x3D;TinyLog;</span><br><span class="line">:)insert into t (a, b) values (1, &#39;abc&#39;);</span><br></pre></td></tr></table></figure></div>

<p>此时我们到保存数据的目录/var/lib/clickhouse/data/default/t中可以看到如下目录结构：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># ls</span><br><span class="line">a.bin  b.bin  sizes.json</span><br><span class="line">a.bin 和 b.bin 是压缩过的对应的列的数据，sizes.json 中记录了每个 *.bin 文件的大小：</span><br><span class="line"># cat sizes.json </span><br><span class="line">&#123;&quot;yandex&quot;:&#123;&quot;a%2Ebin&quot;:&#123;&quot;size&quot;:&quot;28&quot;&#125;,&quot;b%2Ebin&quot;:&#123;&quot;size&quot;:&quot;30&quot;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h2><p>内存引擎，数据以未压缩的原始形式直接保存在内存当中，服务器重启数据就会消失。读写操作不会相互阻塞，不支持索引。简单查询下有非常非常高的性能表现（超过10G/s）。</p>
<p>一般用到它的地方不多，除了用来测试，就是在需要非常高的性能，同时数据量又不太大（上限大概 1 亿行）的场景。</p>
<h2 id="Merge"><a href="#Merge" class="headerlink" title="Merge"></a>Merge</h2><p>Merge 引擎 (不要跟 MergeTree 引擎混淆) 本身不存储数据，但可用于同时从任意多个其他的表中读取数据。 读是自动并行的，不支持写入。读取时，那些被真正读取到数据的表的索引（如果有的话）会被使用。 </p>
<p>Merge 引擎的参数：一个数据库名和一个用于匹配表名的正则表达式。</p>
<p>案例：先建t1，t2，t3三个表，然后用 Merge 引擎的 t 表再把它们链接起来。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:)create table t1 (id UInt16, name String) ENGINE&#x3D;TinyLog;</span><br><span class="line">:)create table t2 (id UInt16, name String) ENGINE&#x3D;TinyLog;</span><br><span class="line">:)create table t3 (id UInt16, name String) ENGINE&#x3D;TinyLog;</span><br><span class="line"></span><br><span class="line">:)insert into t1(id, name) values (1, &#39;first&#39;);</span><br><span class="line">:)insert into t2(id, name) values (2, &#39;second&#39;);</span><br><span class="line">:)insert into t3(id, name) values (3, &#39;i am in t3&#39;);</span><br><span class="line"></span><br><span class="line">:)create table t (id UInt16, name String) ENGINE&#x3D;Merge(currentDatabase(), &#39;^t&#39;);</span><br><span class="line"></span><br><span class="line">:) select * from t;</span><br><span class="line">┌─id─┬─name─┐</span><br><span class="line">│  2 │ second │</span><br><span class="line">└────┴──────┘</span><br><span class="line">┌─id─┬─name──┐</span><br><span class="line">│  1 │ first │</span><br><span class="line">└────┴───────┘</span><br><span class="line">┌─id─┬─name───────┐</span><br><span class="line">│ 3	 │ i am in t3 │</span><br><span class="line">└────┴────────────┘</span><br></pre></td></tr></table></figure></div>



<h2 id="MergeTree"><a href="#MergeTree" class="headerlink" title="MergeTree"></a>MergeTree</h2><p>Clickhouse 中最强大的表引擎当属 MergeTree （合并树）引擎及该系列（*MergeTree）中的其他引擎。</p>
<p>MergeTree 引擎系列的基本理念如下。当你有巨量数据要插入到表中，你要高效地一批批写入数据片段，并希望这些数据片段在后台按照一定规则合并。相比在插入时不断修改（重写）数据进存储，这种策略会高效很多。</p>
<p>格式：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ENGINE [&#x3D;] MergeTree(date-column [, sampling_expression], (primary, key), index_granularity)</span><br></pre></td></tr></table></figure></div>

<p>参数解读：</p>
<p>date-column — 类型为 Date 的列名。ClickHouse 会自动依据这个列按月创建分区。分区名格式为 “YYYYMM” 。</p>
<p>sampling_expression — 采样表达式。</p>
<p>(primary, key) — 主键。类型为Tuple()，用于分区</p>
<p>index_granularity — 索引粒度。即索引中相邻”标记”间的数据行数。设为 8192 可以适用大部分场景。</p>
<p>案例：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table mt_table (date  Date, id UInt8, name String) ENGINE&#x3D;MergeTree(date, (id, name), 8192);</span><br><span class="line"></span><br><span class="line">insert into mt_table values (&#39;2019-05-01&#39;, 1, &#39;zhangsan&#39;);</span><br><span class="line">insert into mt_table values (&#39;2019-06-01&#39;, 2, &#39;lisi&#39;);</span><br><span class="line">insert into mt_table values (&#39;2019-05-03&#39;, 3, &#39;wangwu&#39;);</span><br></pre></td></tr></table></figure></div>

<p>在/var/lib/clickhouse/data/default/mt_tree下可以看到：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># ls</span><br><span class="line">20190501_20190501_2_2_0  20190503_20190503_6_6_0  20190601_20190601_4_4_0  detached</span><br><span class="line"></span><br><span class="line">随便进入一个目录：</span><br><span class="line"># ls</span><br><span class="line">checksums.txt  columns.txt  date.bin  date.mrk  id.bin  id.mrk  name.bin  name.mrk  primary.idx</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>*.bin是按列保存数据的文件</p>
</li>
<li><p>*.mrk保存块偏移量</p>
</li>
<li><p>primary.idx保存主键索引</p>
</li>
</ul>
<h2 id="ReplacingMergeTree"><a href="#ReplacingMergeTree" class="headerlink" title="ReplacingMergeTree"></a>ReplacingMergeTree</h2><p>这个引擎是在 MergeTree 的基础上，添加了“处理重复数据”的功能，该引擎和MergeTree的不同之处在于它会删除具有相同主键的重复项。数据的去重只会在合并的过程中出现。合并会在未知的时间在后台进行，所以你无法预先作出计划。有一些数据可能仍未被处理。因此，ReplacingMergeTree 适用于在后台清除重复的数据以节省空间，但是它不保证没有重复的数据出现。</p>
<p>格式：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ENGINE [&#x3D;] ReplacingMergeTree(date-column [, sampling_expression], (primary, key), index_granularity, [ver])</span><br></pre></td></tr></table></figure></div>

<p>可以看出他比MergeTree只多了一个ver，这个ver指代版本列，他和时间一起配置，区分哪条数据是最新的。</p>
<p>案例：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table rmt_table (date  Date, id UInt8, name String,point UInt8) ENGINE&#x3D; ReplacingMergeTree(date, (id, name), 8192,point);</span><br><span class="line"></span><br><span class="line">插入一些数据：</span><br><span class="line">insert into rmt_table values (&#39;2019-07-10&#39;, 1, &#39;a&#39;, 20);</span><br><span class="line">insert into rmt_table values (&#39;2019-07-10&#39;, 1, &#39;a&#39;, 30);</span><br><span class="line">insert into rmt_table values (&#39;2019-07-11&#39;, 1, &#39;a&#39;, 20);</span><br><span class="line">insert into rmt_table values (&#39;2019-07-11&#39;, 1, &#39;a&#39;, 30);</span><br><span class="line">insert into rmt_table values (&#39;2019-07-11&#39;, 1, &#39;a&#39;, 10);</span><br><span class="line"></span><br><span class="line">等待一段时间或optimize table rmt_table手动触发merge，后查询</span><br><span class="line">:) select * from rmt_table;</span><br><span class="line">┌───────date─┬─id─┬─name─┬─point─┐</span><br><span class="line">│ 2019-07-11 │  1 │ a    │    30 │</span><br><span class="line">└────────────┴────┴──────┴───────┘</span><br></pre></td></tr></table></figure></div>



<p>按时间+主键合并</p>
<h2 id="SummingMergeTree"><a href="#SummingMergeTree" class="headerlink" title="SummingMergeTree"></a>SummingMergeTree</h2><p>该引擎继承自 MergeTree。区别在于，当合并 SummingMergeTree 表的数据片段时，ClickHouse 会把所有具有相同主键的行合并为一行，该行包含了被合并的行中具有数值数据类型的列的汇总值。如果主键的组合方式使得单个键值对应于大量的行，则可以显著的减少存储空间并加快数据查询的速度，对于不可加的列，会取一个最先出现的值。</p>
<p>语法：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ENGINE [&#x3D;] SummingMergeTree(date-column [, sampling_expression], (primary, key), index_granularity, [columns])</span><br></pre></td></tr></table></figure></div>

<p>columns — 包含将要被汇总的列的列名的元组</p>
<p>案例：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table smt_table (date Date, name String, a UInt16, b UInt16) ENGINE&#x3D;SummingMergeTree(date, (date, name), 8192, (a))</span><br><span class="line">插入数据：</span><br><span class="line">insert into smt_table (date, name, a, b) values (&#39;2019-07-10&#39;, &#39;a&#39;, 1, 2);</span><br><span class="line">insert into smt_table (date, name, a, b) values (&#39;2019-07-10&#39;, &#39;b&#39;, 2, 1);</span><br><span class="line">insert into smt_table (date, name, a, b) values (&#39;2019-07-11&#39;, &#39;b&#39;, 3, 8);</span><br><span class="line">insert into smt_table (date, name, a, b) values (&#39;2019-07-11&#39;, &#39;b&#39;, 3, 8);</span><br><span class="line">insert into smt_table (date, name, a, b) values (&#39;2019-07-11&#39;, &#39;a&#39;, 3, 1);</span><br><span class="line">insert into smt_table (date, name, a, b) values (&#39;2019-07-12&#39;, &#39;c&#39;, 1, 3);</span><br><span class="line">等待一段时间或optimize table smt_table手动触发merge，后查询</span><br><span class="line">:) select * from smt_table </span><br><span class="line"></span><br><span class="line">┌───────date─┬─name─┬─a─┬─b─┐</span><br><span class="line">│ 2019-07-10 │ a    │ 1 │ 2 │</span><br><span class="line">│ 2019-07-10 │ b    │ 2 │ 1 │</span><br><span class="line">│ 2019-07-11 │ a    │ 3 │ 1 │</span><br><span class="line">│ 2019-07-11 │ b    │ 6 │ 8 │</span><br><span class="line">│ 2019-07-12 │ c    │ 1 │ 3 │</span><br><span class="line">└────────────┴──────┴───┴───┘</span><br></pre></td></tr></table></figure></div>

<p>发现2019-07-11，b的a列合并相加了，b列取了8（因为b列为8的数据最先插入）。</p>
<h2 id="Distributed"><a href="#Distributed" class="headerlink" title="Distributed"></a>Distributed</h2><p>分布式引擎，本身不存储数据, 但可以在多个服务器上进行分布式查询。 读是自动并行的。读取时，远程服务器表的索引（如果有的话）会被使用。  </p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Distributed(cluster_name, database, table [, sharding_key])</span><br></pre></td></tr></table></figure></div>

<p>参数解析：</p>
<p>cluster_name - 服务器配置文件中的集群名,在/etc/metrika.xml中配置的</p>
<p>database – 数据库名</p>
<p>table – 表名</p>
<p>sharding_key – 数据分片键</p>
<p>案例演示：</p>
<p>1）在hadoop102，hadoop103，hadoop104上分别创建一个表t</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:)create table t(id UInt16, name String) ENGINE&#x3D;TinyLog;</span><br></pre></td></tr></table></figure></div>

<p>2）在三台机器的t表中插入一些数据</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:)insert into t(id, name) values (1, &#39;zhangsan&#39;);</span><br><span class="line">:)insert into t(id, name) values (2, &#39;lisi&#39;);</span><br></pre></td></tr></table></figure></div>

<p>3）在hadoop102上创建分布式表</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:)create table dis_table(id UInt16, name String) ENGINE&#x3D;Distributed(perftest_3shards_1replicas, default, t, id);</span><br></pre></td></tr></table></figure></div>

<p>4）往dis_table中插入数据</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:) insert into dis_table select * from t</span><br></pre></td></tr></table></figure></div>

<p>5）查看数据量</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:) select count() from dis_table </span><br><span class="line">FROM dis_table </span><br><span class="line"></span><br><span class="line">┌─count()─┐</span><br><span class="line">│       8 │</span><br><span class="line">└─────────┘</span><br><span class="line">:) select count() from t</span><br><span class="line"></span><br><span class="line">SELECT count()</span><br><span class="line">FROM t </span><br><span class="line"></span><br><span class="line">┌─count()─┐</span><br><span class="line">│       3 │</span><br><span class="line">└─────────┘</span><br></pre></td></tr></table></figure></div>

<p>可以看到每个节点大约有1/3的数据</p>
<h1 id="SQL语法"><a href="#SQL语法" class="headerlink" title="SQL语法"></a>SQL语法</h1><p>和其他SQL没啥区别，要用的时候查文档吧…</p>
<h2 id="CREATE"><a href="#CREATE" class="headerlink" title="CREATE"></a>CREATE</h2><h3 id="CREATE-DATABASE"><a href="#CREATE-DATABASE" class="headerlink" title="CREATE DATABASE"></a>CREATE DATABASE</h3><h3 id="CREATE-TABLE"><a href="#CREATE-TABLE" class="headerlink" title="CREATE TABLE"></a>CREATE TABLE</h3><h2 id="INSERT-INTO"><a href="#INSERT-INTO" class="headerlink" title="INSERT INTO"></a>INSERT INTO</h2><h2 id="ALTER"><a href="#ALTER" class="headerlink" title="ALTER"></a>ALTER</h2><h2 id="DESCRIBE-TABLE"><a href="#DESCRIBE-TABLE" class="headerlink" title="DESCRIBE TABLE"></a>DESCRIBE TABLE</h2><h2 id="CHECK-TABLE"><a href="#CHECK-TABLE" class="headerlink" title="CHECK TABLE"></a>CHECK TABLE</h2>]]></content>
      <categories>
        <category>大数据分布式</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>Hue-Hadoop UI系统</title>
    <url>/2019/11/15/20191115135655400/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="HUE简介"><a href="#HUE简介" class="headerlink" title="HUE简介"></a>HUE简介</h1><p>HUE=Hadoop User Experience(Hadoop用户体验)，直白来说就一个开源的Apache Hadoop UI系统，由Cloudera Desktop演化而来，最后Cloudera公司将其贡献给Apache基金会的Hadoop社区，它是基于Python Web框架Django实现的。通过使用HUE我们可以在浏览器端的Web控制台上与Hadoop集群进行交互来分析处理数据。</p>
<p>官网网站：<a href="http://gethue.com/" target="_blank" rel="noopener">http://gethue.com/</a> </p>
<h1 id="HUE安装"><a href="#HUE安装" class="headerlink" title="HUE安装"></a>HUE安装</h1><p>文档：<a href="http://archive.cloudera.com/cdh5/cdh/5/hue-3.9.0-cdh5.16.1/" target="_blank" rel="noopener">http://archive.cloudera.com/cdh5/cdh/5/hue-3.9.0-cdh5.16.1/</a></p>
<h2 id="软件环境"><a href="#软件环境" class="headerlink" title="软件环境"></a>软件环境</h2><p>apache-maven-3.3.9-bin.tar.gz</p>
<p>apache-ant-1.8.1-bin.tar.gz</p>
<h2 id="安装Maven和Ant"><a href="#安装Maven和Ant" class="headerlink" title="安装Maven和Ant"></a>安装Maven和Ant</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 解压 maven 和 ant</span></span><br><span class="line">tar -zxvf /media/psf/centos_share/apache-maven-3.3.9-bin.tar.gz</span><br><span class="line">tar -zxvf /media/psf/centos_share/apache-ant-1.8.1-bin.tar.gz </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置环境变量</span></span><br><span class="line">export MAVEN_HOME=/home/machine/apps/maven-3.3.9</span><br><span class="line">export PATH=$MAVEN_HOME/bin:$PATH</span><br><span class="line"></span><br><span class="line">export ANT_HOME=/home/machine/apps/ant-1.8.1</span><br><span class="line">export PATH=$ANT_HOME/bin:$PATH</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 加载配置文件</span></span><br><span class="line">source ~/.bash_profile</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 最后检查安装执行</span></span><br><span class="line">mvn -version</span><br><span class="line">ant -v</span><br></pre></td></tr></table></figure></div>



<h2 id="安装HUE所需要的依赖包"><a href="#安装HUE所需要的依赖包" class="headerlink" title="安装HUE所需要的依赖包"></a>安装HUE所需要的依赖包</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install asciidoc cyrus-sasl-devel cyrus-sasl-gssapi cyrus-sasl-plain gcc gcc-c++ krb5-devel libffi-devel libtidy libxml2-devel libxslt-devel make mysql mysql-devel openldap-devel python-devel sqlite-devel openssl-devel gmp-devel -y</span><br><span class="line"></span><br><span class="line">安装mysql-devel出现冲突，可能和我之前安装mysql的过程有关系，于是按照提示卸载了如下</span><br><span class="line">sudo yum -y remove mysql-community-common-5.7.27-1.el7.x86_64</span><br><span class="line">sudo yum -y remove mysql-community-libs-5.7.27-1.el7.x86_64</span><br><span class="line"></span><br><span class="line">然后重新执行以上依赖安装，成功了</span><br></pre></td></tr></table></figure></div>



<h2 id="解压安装Hue的tar包-编译"><a href="#解压安装Hue的tar包-编译" class="headerlink" title="解压安装Hue的tar包,编译"></a>解压安装Hue的tar包,编译</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -xvf /media/psf/centos_share/hue-3.9.0-cdh5.16.1.tar.gz </span><br><span class="line">cd hue-3.9.0-cdh5.16.1</span><br><span class="line">make apps</span><br></pre></td></tr></table></figure></div>



<h2 id="修改编写配置Hue-ini文件"><a href="#修改编写配置Hue-ini文件" class="headerlink" title="修改编写配置Hue.ini文件"></a>修改编写配置Hue.ini文件</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> key是官网给的</span></span><br><span class="line">secret_key=jFE93j;2[290-eiw.KEiwN2s3['d;/.q[eIW^y#e=+Iei*@Mn&lt;qW5o			# 21行</span><br><span class="line">http_host=mxxcentos7		# 28行</span><br><span class="line">http_port=8888			# 29行</span><br><span class="line">time_zone=Asia/Shanghai  	# 45行</span><br></pre></td></tr></table></figure></div>

<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./build/env/bin/supervisor</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> http://mxxcentos7:8888/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> http://mxxcentos7:8888/about/ 整合页面报错，因为还没有集成其他框架</span></span><br><span class="line"></span><br><span class="line">账号：hadoop 123456</span><br></pre></td></tr></table></figure></div>

<p>关于</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hue安装好了，但是Mysql挂了，因为刚刚解决冲突的时候卸载了...</span><br><span class="line">我在docker里安了一个mysql...</span><br><span class="line"></span><br><span class="line">信息如下：</span><br><span class="line">mxxcentos7</span><br><span class="line">3306</span><br><span class="line">root</span><br><span class="line">123456</span><br><span class="line"></span><br><span class="line">docker安装mysql</span><br><span class="line">https:&#x2F;&#x2F;www.runoob.com&#x2F;docker&#x2F;docker-install-mysql.html</span><br><span class="line"></span><br><span class="line"># 运行容器 root 123456</span><br><span class="line">docker run -itd --name mysql-test -p 3306:3306 -e MYSQL_ROOT_PASSWORD&#x3D;123456 mysql</span><br><span class="line"></span><br><span class="line">docker查看所有容器（包括不运行的）</span><br><span class="line">docker ps -a</span><br><span class="line"></span><br><span class="line"># 停止容器</span><br><span class="line">docker stop mysql-test</span><br><span class="line"># 开启容器</span><br><span class="line">docker start mysql-test  （上次的数据还在的）</span><br><span class="line"># 删除容器</span><br><span class="line">docker rm mysql-test (彻底没了)</span><br></pre></td></tr></table></figure></div>



<h1 id="HUE与其他框架的集成"><a href="#HUE与其他框架的集成" class="headerlink" title="HUE与其他框架的集成"></a>HUE与其他框架的集成</h1><h2 id="HUE与Mysql"><a href="#HUE与Mysql" class="headerlink" title="HUE与Mysql"></a>HUE与Mysql</h2><p>配置hue.ini </p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[[[mysql]]]</span><br><span class="line">nice_name=db_mysql</span><br><span class="line">engine=mysql</span><br><span class="line">host=mxxcentos7</span><br><span class="line">port=3306</span><br><span class="line">user=root</span><br><span class="line">password=123456</span><br></pre></td></tr></table></figure></div>

<p>重启hue测试  </p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动后即可测试是否成功连接Mysql服务，并且测试是否可以看到数据</span></span><br><span class="line">./build/env/bin/supervisor</span><br><span class="line"></span><br><span class="line">还是遇到老问题：libmysqlclient.so.18</span><br><span class="line">Error loading MySQLdb module: libmysqlclient.so.18: cannot open shared object file: No such file or directory</span><br><span class="line">参考我的blog【CM的安装】测试hue报错解决办法</span><br><span class="line"></span><br><span class="line">cp /media/psf/dongzhi/Linux_Pack/mysql5.7/mysql_lib/* /usr/lib64/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 再试。就可以查到mysql数据了</span></span><br><span class="line">http://mxxcentos7:8888/hue/editor/?type=mysql</span><br></pre></td></tr></table></figure></div>

<p>所以hue就是个可视化的集成管理工具。</p>
<h2 id="HUE与HDFS"><a href="#HUE与HDFS" class="headerlink" title="HUE与HDFS"></a>HUE与HDFS</h2><h3 id="配置HDFS"><a href="#配置HDFS" class="headerlink" title="配置HDFS"></a>配置HDFS</h3><p>hdfs-site.xml</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 支持Hue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.webhdfs.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>core-site.xml</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 设置代理用户：允许被machine代理的ip和用户组 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.machine.hosts<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.machine.groups<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- hue代理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.hue.hosts<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.hue.groups<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- httpfs代理</span></span><br><span class="line"><span class="comment">      如果你的Hadoop配置了高可用，则必须通过httpfs来访问，需要添加如下属性，反则则不必须。（如果HUE服务与Hadoop服务不在同一节点，则必须配置）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.httpfs.hosts<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.httpfs.groups<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>httpfs-site.xml</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 主要用于HUE服务与Hadoop服务不在同一台节点上所必须的配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>httpfs.proxyuser.hue.hosts<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>httpfs.proxyuser.hue.groups<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="启动httpfs服务"><a href="#启动httpfs服务" class="headerlink" title="启动httpfs服务"></a>启动httpfs服务</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 先启动hdfs</span></span><br><span class="line">start-dfs.sh</span><br><span class="line"><span class="meta">#</span><span class="bash"> http要使用该协议访问HDFS(在namenide节点启动，不需要在所有hadoop集群)</span></span><br><span class="line">httpfs.sh start</span><br></pre></td></tr></table></figure></div>

<h3 id="配置hue-ini文件"><a href="#配置hue-ini文件" class="headerlink" title="配置hue.ini文件"></a>配置hue.ini文件</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang"></div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="section">[[hdfs_clusters]]</span></span><br><span class="line">    <span class="section">[[[default]]]</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">## HDFS服务器地址</span></span><br><span class="line">      fs_defaultfs=hdfs://mxxcentos7:9000</span><br><span class="line">      <span class="comment"># fs_defaultfs=hdfs://mycluster</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># NameNode logical name.</span></span><br><span class="line">      <span class="comment"># 如果开启了高可用，需要配置如下</span></span><br><span class="line">      <span class="comment">## logical_name=mycluster</span></span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">      <span class="comment"># Use WebHdfs/HttpFs as the communication mechanism.</span></span><br><span class="line">      <span class="comment"># Domain should be the NameNode or HttpFs host.</span></span><br><span class="line">      <span class="comment"># Default port is 14000 for HttpFs.</span></span><br><span class="line">      <span class="comment">## webhdfs_url=http://localhost:50070/webhdfs/v1</span></span><br><span class="line">      <span class="comment">##向HDFS发送命令的请求地址</span></span><br><span class="line">      webhdfs_url=http://mxxcentos7:14000/webhdfs/v1</span><br><span class="line">      <span class="comment"># Change this if your HDFS cluster is Kerberos-secured</span></span><br><span class="line">      <span class="comment">## security_enabled=false</span></span><br><span class="line">      <span class="comment"># Default umask for file and directory creation, specified in an octal value.</span></span><br><span class="line">      <span class="comment">## umask=022</span></span><br><span class="line">      <span class="comment"># Directory of the Hadoop configuration</span></span><br><span class="line">      <span class="comment">## hadoop_conf_dir=$HADOOP_CONF_DIR when set or '/etc/hadoop/conf'</span></span><br><span class="line">     </span><br><span class="line">      <span class="comment">#HADOOP的一些配置</span></span><br><span class="line">      hadoop_conf_dir=/home/machine/apps/hadoop-2.6.0-cdh5.16.1/etc/hadoop</span><br><span class="line">      hadoop_hdfs_home=/home/machine/apps/hadoop-2.6.0-cdh5.16.1</span><br><span class="line">      hadoop_bin=/home/machine/apps/hadoop-2.6.0-cdh5.16.1/bin</span><br></pre></td></tr></table></figure></div>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">build/env/bin/supervisor</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 然后也可以对HDFS进行界面操作了</span></span><br></pre></td></tr></table></figure></div>



<h2 id="HUE与YARN"><a href="#HUE与YARN" class="headerlink" title="HUE与YARN"></a>HUE与YARN</h2><p>配置hue.ini </p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang"></div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="section">[[yarn_clusters]]</span></span><br><span class="line">  <span class="section">[[[default]]]</span></span><br><span class="line">  <span class="comment">#yarn服务的配置</span></span><br><span class="line">        resourcemanager_host=mxxcentos7</span><br><span class="line">        resourcemanager_port=8032</span><br><span class="line">        <span class="comment">#是否将作业提交到此群集，并监控作业执行情况</span></span><br><span class="line">        submit_to=True</span><br><span class="line">        <span class="comment">#logical_name=cluster-yarn1(如果开高可用的话)</span></span><br><span class="line">        <span class="comment">#配置yarn资源管理的访问入口</span></span><br><span class="line">        resourcemanager_api_url=http://mxxcentos7:8088</span><br><span class="line">        proxy_api_url=http://mxxcentos7:8088</span><br><span class="line">        <span class="comment">#历史服务器管理的入口，查看作业的历史运行情况</span></span><br><span class="line">        history_server_api_url=http://mxxcentos7:19888</span><br></pre></td></tr></table></figure></div>

<p>测试</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">build/env/bin/supervisor</span><br><span class="line">http://mxxcentos7:8888/hue/jobbrowser/#!jobs</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测一下</span></span><br><span class="line">yarn jar $HADOOP_HOME/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.6.0-cdh5.16.1.jar wordcount /wordcount.txt /output_1115</span><br></pre></td></tr></table></figure></div>



<h2 id="HUE与Hive"><a href="#HUE与Hive" class="headerlink" title="HUE与Hive"></a>HUE与Hive</h2><p>TODO</p>
<h2 id="HUE与Zookeeper"><a href="#HUE与Zookeeper" class="headerlink" title="HUE与Zookeeper"></a>HUE与Zookeeper</h2><p>TODO</p>
<h2 id="HUE与HBase"><a href="#HUE与HBase" class="headerlink" title="HUE与HBase"></a>HUE与HBase</h2><p>TODO</p>
<h2 id="HUE与Oozie"><a href="#HUE与Oozie" class="headerlink" title="HUE与Oozie"></a>HUE与Oozie</h2><p>TODO</p>
]]></content>
      <categories>
        <category>大数据分布式</category>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>Kylin-分布式分析引擎</title>
    <url>/2019/11/11/20191111151342292/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>ref</p>
<ul>
<li><a href="http://kylin.apache.org/cn/" target="_blank" rel="noopener">http://kylin.apache.org/cn/</a></li>
</ul>
</blockquote>
<p>[toc]</p>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="Kylin定义"><a href="#Kylin定义" class="headerlink" title="Kylin定义"></a>Kylin定义</h2><p>Apache Kylin是一个开源的分布式分析引擎，提供Hadoop/Spark之上的SQL查询接口及多维分析（OLAP）能力以支持超大规模数据，最初由eBay开发并贡献至开源社区。它能在亚秒内查询巨大的Hive表。</p>
<p>空间换时间：数据都提前计算好了</p>
<h2 id="Kylin相关术语"><a href="#Kylin相关术语" class="headerlink" title="Kylin相关术语"></a>Kylin相关术语</h2><ul>
<li><p>Data Warehouse（数据仓库）</p>
<p>数据仓库是一个各种数据（包括历史数据和当前数据）的中心存储系统，是BI（ business intelligence ，商业智能）的核心部件。</p>
<p>这里所谈的数据包括来自企业业务系统的订单、库存、交易账目、客户和供应商等来自企业所处行业和竞争对手的数据以及来自企业所处的其他外部环境中的各种数据。</p>
</li>
<li><p>Business Intelligence（商业智能）</p>
<p>商业智能通常被理解为将企业中现有的数据转化为知识，帮助企业做出明智的业务经营决策的工具。</p>
<p>为了将数据转化为知识，需要利用数据仓库、联机分析处理（OLAP）工具和数据挖掘等技术。</p>
</li>
<li><p>OLAP（online analytical processing）</p>
<p>OLAP（online analytical processing）是一种软件技术，它使分析人员能够迅速、一致、交互地从各个方面观察信息，以达到深入理解数据的目的。从各方面观察信息，也就是从不同的维度分析数据，因此OLAP也成为多维分析。</p>
<a href="/2019/11/11/20191111151342292/屏幕快照 2019-11-11 下午3.33.23.png" data-fancybox="group" data-caption="屏幕快照 2019-11-11 下午3.33.23" class="fancybox"><img alt="屏幕快照 2019-11-11 下午3.33.23" style="zoom:40%;" title="屏幕快照 2019-11-11 下午3.33.23" data-src="/2019/11/11/20191111151342292/屏幕快照 2019-11-11 下午3.33.23.png" class="lazyload"></a>



</li>
</ul>
<p>  OLAP 类型</p>
  <a href="/2019/11/11/20191111151342292/屏幕快照 2019-11-11 下午3.35.06.png" data-fancybox="group" data-caption="屏幕快照 2019-11-11 下午3.35.06" class="fancybox"><img alt="屏幕快照 2019-11-11 下午3.35.06" style="zoom:40%;" title="屏幕快照 2019-11-11 下午3.35.06" data-src="/2019/11/11/20191111151342292/屏幕快照 2019-11-11 下午3.35.06.png" class="lazyload"></a>

<ul>
<li><p>OLAP Cube</p>
<p>MOLAP基于多维数据集，一个多维数据集称为一个OLAP Cube</p>
<a href="/2019/11/11/20191111151342292/屏幕快照 2019-11-11 下午3.36.20.png" data-fancybox="group" data-caption="屏幕快照 2019-11-11 下午3.36.20" class="fancybox"><img alt="屏幕快照 2019-11-11 下午3.36.20" style="zoom:40%;" title="屏幕快照 2019-11-11 下午3.36.20" data-src="/2019/11/11/20191111151342292/屏幕快照 2019-11-11 下午3.36.20.png" class="lazyload"></a>
</li>
<li><p>Cube &amp; Cuboid</p>
<p>按照不同角度分析</p>
<a href="/2019/11/11/20191111151342292/屏幕快照 2019-11-11 下午3.39.45.png" data-fancybox="group" data-caption="屏幕快照 2019-11-11 下午3.39.45" class="fancybox"><img alt="屏幕快照 2019-11-11 下午3.39.45" style="zoom:30%;" title="屏幕快照 2019-11-11 下午3.39.45" data-src="/2019/11/11/20191111151342292/屏幕快照 2019-11-11 下午3.39.45.png" class="lazyload"></a>



</li>
</ul>
<ul>
<li><p>Star Schema（星型模型）</p>
<a href="/2019/11/11/20191111151342292/屏幕快照 2019-11-11 下午3.45.03-3458320.png" data-fancybox="group" data-caption="屏幕快照 2019-11-11 下午3.45.03" class="fancybox"><img alt="屏幕快照 2019-11-11 下午3.45.03" style="zoom:40%;" title="屏幕快照 2019-11-11 下午3.45.03" data-src="/2019/11/11/20191111151342292/屏幕快照 2019-11-11 下午3.45.03-3458320.png" class="lazyload"></a>

<ul>
<li><p>Fact Table（事实表） &amp;  Dimension Table（维度表）</p>
<a href="/2019/11/11/20191111151342292/屏幕快照 2019-11-11 下午3.45.53.png" data-fancybox="group" data-caption="屏幕快照 2019-11-11 下午3.45.53" class="fancybox"><img alt="屏幕快照 2019-11-11 下午3.45.53" style="zoom:40%;" title="屏幕快照 2019-11-11 下午3.45.53" data-src="/2019/11/11/20191111151342292/屏幕快照 2019-11-11 下午3.45.53.png" class="lazyload"></a>
</li>
</ul>
</li>
<li><p>Dimension（维度） &amp; Measure（度量）</p>
<a href="/2019/11/11/20191111151342292/屏幕快照 2019-11-11 下午3.46.36.png" data-fancybox="group" data-caption="屏幕快照 2019-11-11 下午3.46.36" class="fancybox"><img alt="屏幕快照 2019-11-11 下午3.46.36" style="zoom:40%;" title="屏幕快照 2019-11-11 下午3.46.36" data-src="/2019/11/11/20191111151342292/屏幕快照 2019-11-11 下午3.46.36.png" class="lazyload"></a>



</li>
</ul>
<p>维度：分析数据的数据的角度</p>
<p>度量：被分析的指标</p>
<h2 id="Kylin架构"><a href="#Kylin架构" class="headerlink" title="Kylin架构"></a>Kylin架构</h2><p>将hive作为数据仓库，所有维度分析好后，存在Hbase里（数据存储），Kylin再提供SQL接口来查Hbase，底层自己做SQL转Hase查询，以屏蔽底层技术。这样开发人员只需掌握SQL。</p>
<a href="/2019/11/11/20191111151342292/屏幕快照 2019-11-11 下午3.59.48.png" data-fancybox="group" data-caption="屏幕快照 2019-11-11 下午3.59.48" class="fancybox"><img alt="屏幕快照 2019-11-11 下午3.59.48" style="zoom:40%;" title="屏幕快照 2019-11-11 下午3.59.48" data-src="/2019/11/11/20191111151342292/屏幕快照 2019-11-11 下午3.59.48.png" class="lazyload"></a>

<p>1）REST Server</p>
<p>REST Server是一套面向应用程序开发的入口点，旨在实现针对Kylin平台的应用开发工作。 此类应用程序可以提供查询、获取结果、触发cube构建任务、获取元数据以及获取用户权限等等。另外可以通过Restful接口实现SQL查询。</p>
<p>2）查询引擎（Query Engine）</p>
<p>当cube准备就绪后，查询引擎就能够获取并解析用户查询。它随后会与系统中的其它组件进行交互，从而向用户返回对应的结果。 </p>
<p>3）路由器（Routing）</p>
<p>在最初设计时曾考虑过将Kylin不能执行的查询引导去Hive中继续执行，但在实践后发现Hive与Kylin的速度差异过大，导致用户无法对查询的速度有一致的期望，很可能大多数查询几秒内就返回结果了，而有些查询则要等几分钟到几十分钟，因此体验非常糟糕。最后这个路由功能在发行版中默认关闭。</p>
<p>4）元数据管理工具（Metadata）</p>
<p>Kylin是一款元数据驱动型应用程序。元数据管理工具是一大关键性组件，用于对保存在Kylin当中的所有元数据进行管理，其中包括最为重要的cube元数据。其它全部组件的正常运作都需以元数据管理工具为基础。 Kylin的元数据存储在hbase中。 </p>
<p>5）任务引擎（Cube Build Engine）</p>
<p>这套引擎的设计目的在于处理所有离线任务，其中包括shell脚本、Java API以及Map Reduce任务等等。任务引擎对Kylin当中的全部任务加以管理与协调，从而确保每一项任务都能得到切实执行并解决其间出现的故障。</p>
<h2 id="Kylin特点"><a href="#Kylin特点" class="headerlink" title="Kylin特点"></a>Kylin特点</h2><p>Kylin的主要特点包括支持SQL接口、支持超大规模数据集、亚秒级响应、可伸缩性、高吞吐率、BI工具集成等。</p>
<p>1）标准SQL接口：Kylin是以标准的SQL作为对外服务的接口。</p>
<p>2）支持超大数据集：Kylin对于大数据的支撑能力可能是目前所有技术中最为领先的。早在2015年eBay的生产环境中就能支持百亿记录的秒级查询，之后在移动的应用场景中又有了千亿记录秒级查询的案例。</p>
<p>3）亚秒级响应：Kylin拥有优异的查询相应速度，这点得益于预计算，很多复杂的计算，比如连接、聚合，在离线的预计算过程中就已经完成，这大大降低了查询时刻所需的计算量，提高了响应速度。</p>
<p>4）可伸缩性和高吞吐率：单节点Kylin可实现每秒70个查询，还可以搭建Kylin的集群。</p>
<p>5）BI工具集成</p>
<p>Kylin可以与现有的BI工具集成，具体包括如下内容。</p>
<p>ODBC：与Tableau、Excel、PowerBI等工具集成</p>
<p>JDBC：与Saiku、BIRT等Java工具集成</p>
<p>RestAPI：与JavaScript、Web网页集成</p>
<p>Kylin开发团队还贡献了<strong>Zepplin</strong>的插件，也可以使用Zepplin来访问Kylin服务。</p>
<h1 id="Kylin环境搭建"><a href="#Kylin环境搭建" class="headerlink" title="Kylin环境搭建"></a>Kylin环境搭建</h1><p>解压apache-kylin-2.5.1-bin-cdh57.tar.gz</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ tar -zxvf apache-kylin-2.5.1-bin-cdh57.tar.gz -C apps&#x2F;</span><br></pre></td></tr></table></figure></div>

<p>需要在/etc/profile文件中配置HADOOP_HOME，HIVE_HOME，HBASE_HOME并source使其生效。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动Kylin之前要保证HDFS，YARN，JobHistoryServer ,ZK，HBASE相关进程是正常运行的。</span></span><br></pre></td></tr></table></figure></div>

<p>从2.6.1开始，不内置spark了</p>
<p>启动</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bin/kylin.sh start</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> http://mxxcentos7:7070/kylin</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 用户名为：ADMIN，密码为：KYLIN</span></span><br></pre></td></tr></table></figure></div>



<h1 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h1><h2 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h2><p>在Hive中创建数据，分别创建部门和员工外部表，并向表中导入数据。</p>
<p><strong>原始数据</strong></p>
<p>dept.txt</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10	ACCOUNTING	1700</span><br><span class="line">20	RESEARCH	1800</span><br><span class="line">30	SALES	1900</span><br><span class="line">40	OPERATIONS	1700</span><br></pre></td></tr></table></figure></div>

<p>emp.txt</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">7369	SMITH	CLERK	7902	1980-12-17	800.0	NULL	20</span><br><span class="line">7499	ALLEN	SALESMAN	7698	1981-2-20	1600.0	300.0	30</span><br><span class="line">7521	WARD	SALESMAN	7698	1981-2-22	1250.0	500.0	30</span><br><span class="line">7566	JONES	MANAGER	7839	1981-4-2	2975.0	NULL	20</span><br><span class="line">7654	MARTIN	SALESMAN	7698	1981-9-28	1250.0	1400.0	30</span><br><span class="line">7698	BLAKE	MANAGER	7839	1981-5-1	2850.0	NULL	30</span><br><span class="line">7782	CLARK	MANAGER	7839	1981-6-9	2450.0	NULL	10</span><br><span class="line">7788	SCOTT	ANALYST	7566	1987-4-19	3000.0	NULL	20</span><br><span class="line">7839	KING	PRESIDENT	NULL	1981-11-17	5000.0	NULL	10</span><br><span class="line">7844	TURNER	SALESMAN	7698	1981-9-8	1500.0	0.0	30</span><br><span class="line">7876	ADAMS	CLERK	7788	1987-5-23	1100.0	NULL	20</span><br><span class="line">7900	JAMES	CLERK	7698	1981-12-3	950.0	NULL	30</span><br><span class="line">7902	FORD	ANALYST	7566	1981-12-3	3000.0	NULL	20</span><br><span class="line">7934	MILLER	CLERK	7782	1982-1-23	1300.0	NULL	10</span><br></pre></td></tr></table></figure></div>



<p><strong>建表语句</strong>  </p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建部门表</span></span><br><span class="line">create external table if not exists default.dept(</span><br><span class="line">deptno int,</span><br><span class="line">dname string,</span><br><span class="line">loc int</span><br><span class="line">)</span><br><span class="line">row format delimited fields terminated by '\t';</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建员工表</span></span><br><span class="line">create external table if not exists default.emp(</span><br><span class="line">empno int,</span><br><span class="line">ename string,</span><br><span class="line">job string,</span><br><span class="line">mgr int,</span><br><span class="line">hiredate string, </span><br><span class="line">sal double, </span><br><span class="line">comm double,</span><br><span class="line">deptno int)</span><br><span class="line">row format delimited fields terminated by '\t';</span><br></pre></td></tr></table></figure></div>



<p><strong>向外部表中导入数据</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看创建的表</span></span><br><span class="line">show tables;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 导入数据</span></span><br><span class="line">load data local inpath '/media/psf/centos_share/dept.txt' into table default.dept;</span><br><span class="line">load data local inpath '/media/psf/centos_share/emp.txt' into table default.emp;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看结果</span></span><br><span class="line">select * from emp;</span><br><span class="line">select * from dept;</span><br></pre></td></tr></table></figure></div>





<h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>1、登录系统  </p>
<p>2、创建工程  </p>
<p>3、选择数据源 </p>
<p>都是界面操作：略</p>
<h2 id="创建Model"><a href="#创建Model" class="headerlink" title="创建Model"></a>创建Model</h2><p>1、回到Models页面  </p>
<p>2、点击New按钮后点击New Model  </p>
<p>3、填写Model名称及描述后Next  </p>
<p>4、选择事实表</p>
<p>5、添加维度表</p>
<p>6、选择添加的维度及join字段</p>
<p>7、选择维度信息</p>
<p>8、选择度量信息</p>
<p>9、添加分区信息及过滤条件之后“Save”  </p>
<p>10、创建Model完成</p>
<h2 id="创建Cube"><a href="#创建Cube" class="headerlink" title="创建Cube"></a>创建Cube</h2><p>1、点击New按钮然后选择New Cube</p>
<p>2、选择Model及填写Cube Name  </p>
<p>3、添加维度  </p>
<p>4、添加需要做预计算的内容  </p>
<p>6、动态更新相关（默认）</p>
<p>7、高阶模块（默认）</p>
<p>8、需要修改的配置</p>
<p>9、Cube信息展示</p>
<p>10、Cube配置完成</p>
<p>11、触发预计算  </p>
<p>12、查看Build进度</p>
<p>13、构建Cube完成</p>
<h2 id="Hive和Kylin性能对比"><a href="#Hive和Kylin性能对比" class="headerlink" title="Hive和Kylin性能对比"></a>Hive和Kylin性能对比</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">点击insite，写个SQL查一下</span><br><span class="line"></span><br><span class="line">select dept.dname, sum(emp.sal) from emp join dept on emp.deptno &#x3D; dept.deptno group by dept.dname;</span><br><span class="line"></span><br><span class="line">在虚拟机2核4G的配置里跑了6s出结果</span><br><span class="line">第二次查有缓存，0.01s</span><br><span class="line"></span><br><span class="line">和hive性能对比怎么样呢？</span><br><span class="line"></span><br><span class="line">hive&gt; select dept.dname, sum(emp.sal) from emp join dept on emp.deptno &#x3D; dept.deptno group by dept.dname;</span><br><span class="line"></span><br><span class="line">Time taken: 49.835 seconds, Fetched: 3 row(s)</span><br></pre></td></tr></table></figure></div>

<p>49s vs 6s 区别还是大的，kylin做了预计算然后存储，就是以空间换时间，而且查过的还能缓存，下次查就是0.0几秒出结果。</p>
<h1 id="Cube构建原理"><a href="#Cube构建原理" class="headerlink" title="Cube构建原理"></a>Cube构建原理</h1><h2 id="Cube构建流程"><a href="#Cube构建流程" class="headerlink" title="Cube构建流程"></a>Cube构建流程</h2><p>第一步：创建中建表</p>
<a href="/2019/11/11/20191111151342292/image-20191114131237790.png" data-fancybox="group" data-caption="image-20191114131237790" class="fancybox"><img alt="image-20191114131237790" style="zoom:70%;" title="image-20191114131237790" data-src="/2019/11/11/20191111151342292/image-20191114131237790.png" class="lazyload"></a>



<p>第二步：将中建表的数据均匀分配到不同的文件</p>
<a href="/2019/11/11/20191111151342292/image-20191114131610229.png" data-fancybox="group" data-caption="image-20191114131610229" class="fancybox"><img alt="image-20191114131610229" style="zoom:50%;" title="image-20191114131610229" data-src="/2019/11/11/20191111151342292/image-20191114131610229.png" class="lazyload"></a>



<p>reduce产生文件大小分区不均匀，分配均匀，减轻后面的数据倾斜</p>
<p>1、统计总行数<br>2、规定每个mapper的行数1000000（这个数据小于HDFS文件块大小，不会被分片，效果就是一个文件一个分片）<br>3、计算出一共要生成160个文件(DISTRIBUITE BY RAND() : 将指定的字段放在一个reducer里)<br>4、下一次mapper的个数就是160了</p>
<p>中建表的文件已经均匀分配了</p>
<p>第三步：创建维度字典表</p>
<a href="/2019/11/11/20191111151342292/pic1-3709273.png" data-fancybox="group" data-caption="image-20191114131610229" class="fancybox"><img alt="image-20191114131610229" style="zoom:60%;" title="image-20191114131610229" data-src="/2019/11/11/20191111151342292/pic1-3709273.png" class="lazyload"></a>

<p>存到Hbase里<br>用数字代替字段，中间要加字典表来映射，这样Hbase可以少存点数据</p>
<p>然后就开始跑MR: </p>
<ul>
<li>把字典表缓存到内存里，根据kv映射替换值</li>
</ul>
<p>第四步：构建Cube</p>
<a href="/2019/11/11/20191111151342292/pic.png" data-fancybox="group" data-caption="image-20191114131610229" class="fancybox"><img alt="image-20191114131610229" style="zoom:60%;" title="image-20191114131610229" data-src="/2019/11/11/20191111151342292/pic.png" class="lazyload"></a>



<p>相当于执行select语句，翻译成MR，每个维度都要</p>
<p>第五步：Hbase K-V</p>
<a href="/2019/11/11/20191111151342292/image-20191114133840833.png" data-fancybox="group" data-caption="image-20191114133840833" class="fancybox"><img alt="image-20191114133840833" style="zoom:80%;" title="image-20191114133840833" data-src="/2019/11/11/20191111151342292/image-20191114133840833.png" class="lazyload"></a>

<p>111 代表3个维度都有 000 代表三个维度的字典值</p>
<p>第六步：将cube data 转成Hfile格式并导入HBase</p>
<a href="/2019/11/11/20191111151342292/image-20191114134242710.png" data-fancybox="group" data-caption="image-20191114134242710" class="fancybox"><img alt="image-20191114134242710" style="zoom:50%;" title="image-20191114134242710" data-src="/2019/11/11/20191111151342292/image-20191114134242710.png" class="lazyload"></a>

<h2 id="Cube构建算法"><a href="#Cube构建算法" class="headerlink" title="Cube构建算法"></a>Cube构建算法</h2><h3 id="逐层构建算法（layer）"><a href="#逐层构建算法（layer）" class="headerlink" title="逐层构建算法（layer）"></a>逐层构建算法（layer）</h3><a href="/2019/11/11/20191111151342292/pic2.png" data-fancybox="group" data-caption="pic2.png" class="fancybox"><img alt="pic2.png" style="zoom:60%;" title="pic2.png" data-src="/2019/11/11/20191111151342292/pic2.png" class="lazyload"></a>  

<p>每个层级的计算（除了第一层，它是从原始数据聚合而来），是基于它上一层级的结果来计算的。</p>
<ul>
<li><p>为啥从高纬度开始构建？<br>因为低纬度可以从低纬度开出来</p>
</li>
<li><p>需要多少MR?<br>一层一个。把子cuboid送到reduce端，第一个mr结束了，hdfs上存的就是2个维度的cuboid，继续给mr2跑，得到的就是一个维度的cuboid了</p>
<p>每一轮的计算都是一个MapReduce任务，且串行执行；一个N维的Cube，至少需要N次MapReduce Job。</p>
</li>
</ul>
<a href="/2019/11/11/20191111151342292/image-20191114142703441.png" data-fancybox="group" data-caption="image-20191114142703441" class="fancybox"><img alt="image-20191114142703441" style="zoom:50%;" title="image-20191114142703441" data-src="/2019/11/11/20191111151342292/image-20191114142703441.png" class="lazyload"></a> 

<p>缺点：</p>
<ul>
<li>MR多</li>
<li>Shuffer工作量大</li>
<li>对HDFS的读写操作较多  </li>
</ul>
<h3 id="快速构建算法（inmem）"><a href="#快速构建算法（inmem）" class="headerlink" title="快速构建算法（inmem）"></a>快速构建算法（inmem）</h3><a href="/2019/11/11/20191111151342292/image-20191114142944437.png" data-fancybox="group" data-caption="image-20191114142944437" class="fancybox"><img alt="image-20191114142944437" style="zoom:80%;" title="image-20191114142944437" data-src="/2019/11/11/20191111151342292/image-20191114142944437.png" class="lazyload"></a> 



<p>只跑一个MR</p>
<ul>
<li><p>map端分split数据（160），map端把所有层都算出来，然后所有数据发到reduce去聚合。<br>所以在一个map做计算，相当于把一个128M全部加载到内存。比上个算法块30%</p>
</li>
<li><p>直接在内存里聚合（在map端聚合），然后把全部的维度输出到reducer聚合</p>
</li>
</ul>
<a href="/2019/11/11/20191111151342292/image-20191114143429137.png" data-fancybox="group" data-caption="image-20191114143429137" class="fancybox"><img alt="image-20191114143429137" style="zoom:50%;" title="image-20191114143429137" data-src="/2019/11/11/20191111151342292/image-20191114143429137.png" class="lazyload"></a> 

<p>特点：在map做预聚合</p>
<p>如何选择？</p>
<ul>
<li>集群资源可以的话，可以选第二个算法。</li>
<li>如果不了解集群资源，可以选auto选项，交给kylin自动判断和选择</li>
</ul>
<p>在页面Monitor可以看到具体算法</p>
<h1 id="Cube构建优化"><a href="#Cube构建优化" class="headerlink" title="Cube构建优化"></a>Cube构建优化</h1><p>如果有20个维度，就有2的20次方个cuboid，对存储引擎压力太大了。所以要想办法减少维度。<br>比如年月日三个维度。年和日的组合是没有意义的，所以可以删掉</p>
<p>剪枝优化（即减少Cuboid的生成）。  </p>
<h2 id="使用衍生维度（derived-dimension）"><a href="#使用衍生维度（derived-dimension）" class="headerlink" title="使用衍生维度（derived dimension）"></a>使用衍生维度（derived dimension）</h2><p>将维度表上的非主键维度排除掉，并使用维度表的主键（其实是事实表上相应的外键）来替代它们。Kylin会在底层记录维度表主键与维度表其他维度之间的映射关系，以便在查询时能够动态地将维度表的主键“翻译”成这些非主键维度，并进行实时聚合。</p>
<a href="/2019/11/11/20191111151342292/image-20191114144739184.png" data-fancybox="group" data-caption="image-20191114144739184" class="fancybox"><img alt="image-20191114144739184" style="zoom:50%;" title="image-20191114144739184" data-src="/2019/11/11/20191111151342292/image-20191114144739184.png" class="lazyload"></a> 

<p>解释：</p>
<p>nomal方式构建的话，需要7种</p>
<p>选用derive，将维度表上的非主键维度排除掉（就是排除E）, 并使用维度表的主键（其实是事实表上相应的外键）来替代它们(就是使用A替代E，因为A和E之间有映射关系，F(A)=E。从A–&gt;D—&gt;E)，这样构建的cuboid就很少</p>
<p>具体是怎么实施的？</p>
<a href="/2019/11/11/20191111151342292/image-20191114145303458.png" data-fancybox="group" data-caption="image-20191114145303458" class="fancybox"><img alt="image-20191114145303458" style="zoom:50%;" title="image-20191114145303458" data-src="/2019/11/11/20191111151342292/image-20191114145303458.png" class="lazyload"></a> 

<ul>
<li><p>用A去构建</p>
</li>
<li><p>查询时用E替换</p>
</li>
<li><p>查询Hbase结果是要做聚合计算的（又变慢了，就是拿一定的时间换空间了）</p>
</li>
</ul>
<p>虽然衍生维度具有非常大的吸引力，但这也并不是说所有维度表上的维度都得变成衍生维度，如果从维度表主键到某个维度表维度所需要的聚合工作量非常大，则不建议使用衍生维度。</p>
<p>例如，年构建derived，那365天要聚合，工作量巨大，每次查询都要重新做聚合计算</p>
<p>所以，对某些聚合工作量大的维度，可以选择不使用衍生维度吗？怎么做？</p>
<p>页面配置：每个维度都能单独选的</p>
<p> 实验：页面使用derive方式构建cube，看下空间和时间的变化。</p>
<h2 id="使用聚合组（Aggregation-group）"><a href="#使用聚合组（Aggregation-group）" class="headerlink" title="使用聚合组（Aggregation group）"></a>使用聚合组（Aggregation group）</h2><p>例子：年和日没必要组合。</p>
<p>对于每个分组内部的维度，用户可以使用如下三种可选的方式定义，它们之间的关系，具体如下。</p>
<h3 id="1、-强制维度（Mandatory）"><a href="#1、-强制维度（Mandatory）" class="headerlink" title="1、 强制维度（Mandatory）"></a>1、 强制维度（Mandatory）</h3><p>如果一个维度被定义为强制维度，那么这个分组产生的所有Cuboid中每一个Cuboid都会包含该维度。<br>只构建包含强制维度的cuboid，其他就不构建了。</p>
<p>原理</p>
<a href="/2019/11/11/20191111151342292/image-20191114151319747.png" data-fancybox="group" data-caption="image-20191114151319747" class="fancybox"><img alt="image-20191114151319747" style="zoom:50%;" title="image-20191114151319747" data-src="/2019/11/11/20191111151342292/image-20191114151319747.png" class="lazyload"></a>  



<h3 id="2、-层级维度（Hierarchy）"><a href="#2、-层级维度（Hierarchy）" class="headerlink" title="2、 层级维度（Hierarchy）"></a>2、 层级维度（Hierarchy）</h3><p>例如：省市区、年月日</p>
<a href="/2019/11/11/20191111151342292/image-20191114151833477.png" data-fancybox="group" data-caption="image-20191114151833477" class="fancybox"><img alt="image-20191114151833477" style="zoom:50%;" title="image-20191114151833477" data-src="/2019/11/11/20191111151342292/image-20191114151833477.png" class="lazyload"></a> 

<p>B必须依赖于A出现</p>
<h3 id="3、联合维度（Joint）"><a href="#3、联合维度（Joint）" class="headerlink" title="3、联合维度（Joint）"></a>3、联合维度（Joint）</h3><p>AB必须同时出现</p>
<a href="/2019/11/11/20191111151342292/image-20191114151945549.png" data-fancybox="group" data-caption="image-20191114151945549" class="fancybox"><img alt="image-20191114151945549" style="zoom:50%;" title="image-20191114151945549" data-src="/2019/11/11/20191111151342292/image-20191114151945549.png" class="lazyload"></a>  





<p>页面配置：</p>
<p>Cube Designer的Advanced Setting中  </p>
<p>可设置上面讲的3种维度</p>
<h2 id="Row-Key优化"><a href="#Row-Key优化" class="headerlink" title="Row Key优化"></a>Row Key优化</h2><p>Hbase的Row Key优化</p>
<p>Kylin会把所有的维度按照顺序组合成一个完整的Rowkey，并且按照这个Rowkey升序排列Cuboid中所有的行。</p>
<p>设计良好的Rowkey将更有效地完成数据的查询过滤和定位，减少IO次数，提高查询速度，维度在rowkey中的次序，对查询性能有显著的影响。</p>
<p>1、被用作where过滤的维度放在Row Key前边</p>
<a href="/2019/11/11/20191111151342292/image-20191114153453761.png" data-fancybox="group" data-caption="image-20191114153453761" class="fancybox"><img alt="image-20191114153453761" style="zoom:50%;" title="image-20191114153453761" data-src="/2019/11/11/20191111151342292/image-20191114153453761.png" class="lazyload"></a>

<p>这个表已经存在hbase了现在要查这个select，scan的时候会去3个地方。优化后，只需要查一个地方</p>
<p>怎么放？页面设置</p>
<p>2、基数大的维度放在基数小的维度前边</p>
<p>基数：月的基数是12，日是31，星期是7，也就是distinct那个字典值。</p>
<a href="/2019/11/11/20191111151342292/image-20191114154152314.png" data-fancybox="group" data-caption="image-20191114154152314" class="fancybox"><img alt="image-20191114154152314" style="zoom:50%;" title="image-20191114154152314" data-src="/2019/11/11/20191111151342292/image-20191114154152314.png" class="lazyload"></a>

<p>AB这个维度从哪来？<br>内部机制，选cuboid id小的</p>
<p>基数小，聚合工作量也小，所以要把基数大的放前面。</p>
<p>页面配置：</p>
<p>Cube Designer的Advanced Setting中  </p>
<p>可设置RowKey顺序</p>
<h2 id="并发粒度优化"><a href="#并发粒度优化" class="headerlink" title="并发粒度优化"></a>并发粒度优化</h2><p>从Hbase查时，读取并发度</p>
<p>一个表有多个region分区，目的是方便扩展，还有并发读取。</p>
<p>没有预分区，最开始是一个region的，然后到达数量后自动拆分。</p>
<p>1、kylin.hbase.region.cut</p>
<p>kylin的 “kylin.hbase.region.cut”  可设置拆分，默认值5GB。如果5G以内，我就想实现并发，就可以手动设置这个值</p>
<p>2、kylin.hbase.region.count.min（默认为1）   和  kylin.hbase.region.count.max  （默认为500）  </p>
<p>这个相当于在开始就进行预分区，这样也能保证并发度</p>
<p>一般就改kylin.hbase.region.cut和kylin.hbase.region.count.min</p>
<p>页面配置：</p>
<p>Cube Designer 的Configuration Overwrites  </p>
<p>配置覆写，比系统默认配置优先级高</p>
<h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><h2 id="增量构建Cube"><a href="#增量构建Cube" class="headerlink" title="增量构建Cube"></a>增量构建Cube</h2><p>相当于数据每天增量进来，cube也需要每天增量去构建</p>
<p>1、disable: Hbase那个表</p>
<p>2、编辑Model，在setting那</p>
<p>指定Model分区策略(必做)</p>
<p>1、选择要分区的表：订单表</p>
<p>2、选分区列：按时间分</p>
<p>3、选择时间格式</p>
<p>4、Has a sep</p>
<p>​    日期和时间如果是2个字段，上面就选日期，下面选时间</p>
<p>然后还要改Cube的设置（可选）</p>
<p>1、在refresh setting那</p>
<p>2、一天构建一个cube的话，多了会自动触发合并，这里就是改合并时间的策略。</p>
<a href="/2019/11/11/20191111151342292/image-20191114160741190.png" data-fancybox="group" data-caption="image-20191114160741190" class="fancybox"><img alt="image-20191114160741190" style="zoom:100%;" title="image-20191114160741190" data-src="/2019/11/11/20191111151342292/image-20191114160741190.png" class="lazyload"></a>

<p>比如到第7天：我就开始小合并，把7天的segment合并一下。</p>
<p>第8天，就等到第14天，又把7天的segment合并一下。</p>
<p>到了3个7天+7个一天的时候，直接合并成28天的。</p>
<p>3、partition start date </p>
<p>从哪一天开始合并</p>
<p>每天buid一次</p>
<h2 id="流式构建"><a href="#流式构建" class="headerlink" title="流式构建"></a>流式构建</h2><p>对接kafka要用的</p>
<p>TODO</p>
<h2 id="RestAPI"><a href="#RestAPI" class="headerlink" title="RestAPI"></a>RestAPI</h2><blockquote>
<p><a href="http://kylin.apache.org/cn/docs/howto/howto_use_restapi.html" target="_blank" rel="noopener">http://kylin.apache.org/cn/docs/howto/howto_use_restapi.html</a></p>
</blockquote>
<p>就是，在页面能做的，都能通过restAPI做</p>
<p>演示一个query的</p>
<p>Curl Example</p>
<p>在linux下查一下</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -X POST --user ADMIN:KYLIN -H &quot;Content-Type: application&#x2F;json&quot; -d &#39;&#123; &quot;sql&quot;:&quot;select dept.dname, sum(emp.sal) from emp join dept on emp.deptno &#x3D; dept.deptno group by dept.dname;&quot;, &quot;project&quot;:&quot;emp_project&quot; &#125;&#39; http:&#x2F;&#x2F;mxxcentos7:7070&#x2F;kylin&#x2F;api&#x2F;query</span><br></pre></td></tr></table></figure></div>



<h1 id="BI工具集成"><a href="#BI工具集成" class="headerlink" title="BI工具集成"></a>BI工具集成</h1><h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.kylin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kylin-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>demo</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> mxx.kylin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJDBC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">        String driverClass = <span class="string">"org.apache.kylin.jdbc.Driver"</span>;</span><br><span class="line"></span><br><span class="line">        String url = <span class="string">"jdbc:kylin://mxxcentos7:7070/emp_project"</span>;</span><br><span class="line"></span><br><span class="line">        String user = <span class="string">"ADMIN"</span>;</span><br><span class="line"></span><br><span class="line">        String password = <span class="string">"KYLIN"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1 加载驱动</span></span><br><span class="line">        Class.forName(driverClass);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2 获取连接</span></span><br><span class="line">        Connection connection = DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3 SQL</span></span><br><span class="line">        String sql = <span class="string">"select dept.dname, sum(emp.sal) from emp join dept on emp.deptno = dept.deptno group by dept.dname;"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4 预编译SQL</span></span><br><span class="line">        PreparedStatement ps = connection.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5 执行SQL</span></span><br><span class="line">        ResultSet resultSet = ps.executeQuery();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6 打印结果</span></span><br><span class="line">        <span class="keyword">while</span>(resultSet.next())&#123;</span><br><span class="line">            System.out.println(resultSet.getString(<span class="number">1</span>)+<span class="string">"\t"</span></span><br><span class="line">            + resultSet.getDouble(<span class="number">2</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 7 关闭</span></span><br><span class="line">        connection.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这个查的很快，相当于从数据仓库hive拿了数据，预处理后存在Hbase里，所以查的是Hbase。</p>
<p>所以可以整合前端，做实时查询的效果，hive那套就没法做实时的。</p>
<h2 id="Zepplin"><a href="#Zepplin" class="headerlink" title="Zepplin"></a>Zepplin</h2><h3 id="安装启动"><a href="#安装启动" class="headerlink" title="安装启动"></a>安装启动</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf /media/psf/centos_share/zeppelin-0.8.0-bin-all.tgz -C ~/apps/</span><br><span class="line"></span><br><span class="line">mv zeppelin-0.8.0-bin-all zeppelin-0.8.0</span><br><span class="line"></span><br><span class="line">./bin/zeppelin-daemon.sh start</span><br><span class="line"></span><br><span class="line">http://mxxcentos7:8080/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 完成...</span></span><br></pre></td></tr></table></figure></div>



<h3 id="Zepplin概念"><a href="#Zepplin概念" class="headerlink" title="Zepplin概念"></a>Zepplin概念</h3><p>共享笔记，查出来，自动生成报表，统计图啥的。</p>
<p>Zepplin能对接很多东西：Kylin、Spark、Hbase、python</p>
<p>类似于python的jupyter</p>
<p>就是个可视化报表的BI工具</p>
<h3 id="配置Zepplin支持Kylin"><a href="#配置Zepplin支持Kylin" class="headerlink" title="配置Zepplin支持Kylin"></a>配置Zepplin支持Kylin</h3><p>1、点击右上角anonymous选择Interpreter</p>
<p>2、搜索Kylin插件并修改相应的配置  </p>
<p>3、修改完成点击Save完成</p>
<p>界面操作：略</p>
<h3 id="案例实操"><a href="#案例实操" class="headerlink" title="案例实操"></a>案例实操</h3><p>1、点击Notebook创建新的note</p>
<p>2、填写Note Name点击Create  </p>
<p>3、执行查询  </p>
<p>4、结果展示  </p>
<p>5、其他图表格式</p>
]]></content>
      <categories>
        <category>大数据分布式</category>
        <category>分布式分析引擎</category>
      </categories>
      <tags>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>Impala-高性能SQL查询</title>
    <url>/2019/11/11/20191111111820425/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Impala的基本概念"><a href="#Impala的基本概念" class="headerlink" title="Impala的基本概念"></a>Impala的基本概念</h1><h2 id="什么是Impala"><a href="#什么是Impala" class="headerlink" title="什么是Impala"></a>什么是Impala</h2><ul>
<li><p>Cloudera公司推出，提供对HDFS、Hbase数据的高性能、低延迟的交互式SQL查询功能。</p>
</li>
<li><p>基于Hive，使用内存计算，兼顾数据仓库、具有实时、批处理、多并发等优点。</p>
</li>
<li><p>是CDH平台首选的PB级大数据实时查询分析引擎。</p>
</li>
</ul>
<h2 id="Impala的优缺点"><a href="#Impala的优缺点" class="headerlink" title="Impala的优缺点"></a>Impala的优缺点</h2><p><strong>优点</strong></p>
<ul>
<li>基于内存运算，不需要把中间结果写入磁盘，省掉了大量的I/O开销。</li>
<li>无需转换为Mapreduce，直接访问存储在HDFS，HBase中的数据进行作业调度，速度快。</li>
<li>使用了支持Data locality的I/O调度机制，尽可能地将数据和计算分配在同一台机器上进行，减少了网络开销。</li>
<li>支持各种文件格式，如TEXTFILE 、SEQUENCEFILE 、RCFile、Parquet。</li>
<li>可以访问hive的metastore，对hive数据直接做数据分析。</li>
</ul>
<p><strong>缺点</strong></p>
<ul>
<li>对内存的依赖大，且完全依赖于hive。</li>
<li>实践中，分区超过1万，性能严重下降。</li>
<li>只能读取文本文件，而不能直接读取自定义二进制文件。</li>
<li>每当新的记录/文件被添加到HDFS中的数据目录时，该表需要被刷新。</li>
</ul>
<h2 id="Impala的架构"><a href="#Impala的架构" class="headerlink" title="Impala的架构"></a>Impala的架构</h2><a href="/2019/11/11/20191111111820425/图片1.png" data-fancybox="group" data-caption="图片1" class="fancybox"><img alt="图片1" style="zoom:70%;" title="图片1" data-src="/2019/11/11/20191111111820425/图片1.png" class="lazyload"></a>

<p>从上图可以看出，Impala自身包含三个模块：Impalad、Statestore和Catalog，除此之外它还依赖Hive Metastore和HDFS。</p>
<p>1) Impalad：</p>
<p>接收client的请求、Query执行并返回给中心协调节点；</p>
<p>子节点上的守护进程，负责向statestore保持通信，汇报工作。</p>
<p>2) Catalog：</p>
<p>分发表的元数据信息到各个impalad中；</p>
<p>接收来自statestore的所有请求。</p>
<p>3) Statestore：</p>
<p>负责收集分布在集群中各个impalad进程的资源信息、各节点健康状况，同步节点信息；</p>
<p>负责query的协调调度</p>
<h1 id="Impala的安装-amp-启动-amp-使用"><a href="#Impala的安装-amp-启动-amp-使用" class="headerlink" title="Impala的安装&amp;启动&amp;使用"></a>Impala的安装&amp;启动&amp;使用</h1><p>使用CM，先启动HDFS、HIVE 、再启动Impala</p>
<p>Impala 的监护管理  </p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 查看StateStore</span><br><span class="line">http:&#x2F;&#x2F;hadoop103:25020&#x2F;</span><br><span class="line">- 查看Catalog</span><br><span class="line">http:&#x2F;&#x2F;hadoop103:25010&#x2F;</span><br></pre></td></tr></table></figure></div>

<p>启动</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">impala-shell</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> show databases;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 打开默认数据库</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> use default;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查的是hive</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> show tables;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建一张student表</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> create table student(id int, name string)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> row format delimited</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> fields terminated by <span class="string">'\t'</span>;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 向表中导入数据</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> load data inpath <span class="string">'/student.txt'</span> into table student;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意</span></span><br><span class="line">1)	关闭（修改hdfs的配置dfs.permissions为false）或修改hdfs的权限，否则impala没有写的权限</span><br><span class="line">hadoop fs -chmod -R 777 /</span><br><span class="line">2)	Impala不支持将本地文件导入到表中</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查询</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> select * from student;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 退出impala</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> quit;</span></span><br></pre></td></tr></table></figure></div>



<h1 id="Impala的操作命令"><a href="#Impala的操作命令" class="headerlink" title="Impala的操作命令"></a>Impala的操作命令</h1><h2 id="Impala的外部shell"><a href="#Impala的外部shell" class="headerlink" title="Impala的外部shell"></a>Impala的外部shell</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-q query, --query=query</span><br><span class="line">从命令行中传递一个shell 命令。执行完这一语句后 shell 会立即退出。</span><br><span class="line"></span><br><span class="line">-f query_file, --query_file= query_file</span><br><span class="line">传递一个文件中的 SQL 查询。文件内容必须以分号分隔</span><br><span class="line"></span><br><span class="line">-o filename or --output_file filename</span><br><span class="line">保存所有查询结果到指定的文件。通常用于保存在命令行使用 -q 选项执行单个查询时的查询结果。</span><br><span class="line"></span><br><span class="line">-r or --refresh_after_connect</span><br><span class="line">建立连接后刷新 Impala 元数据</span><br><span class="line"></span><br><span class="line">-p, --show_profiles</span><br><span class="line">对 shell 中执行的每一个查询，显示其查询执行计划 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用-q查询表中数据，并将数据写入文件中</span></span><br><span class="line">impala-shell -q 'select * from student' -o output.txt</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查询执行失败时继续执行</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim impala.sql</span></span><br><span class="line">select * from student;</span><br><span class="line">select * from stu;</span><br><span class="line">select * from student;</span><br><span class="line"><span class="meta">$</span><span class="bash"> impala-shell -f impala.sql;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> impala-shell -c -f impala.sql;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在hive中创建表后，使用-r刷新元数据</span></span><br><span class="line"><span class="meta">hive&gt;</span><span class="bash"> create table stu(id int, name string);</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> show tables;</span></span><br><span class="line">Query: show tables</span><br><span class="line">+---------+</span><br><span class="line">| name    |</span><br><span class="line">+---------+</span><br><span class="line">| student |</span><br><span class="line">+---------+</span><br><span class="line"><span class="meta">$</span><span class="bash"> impala-shell -r</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> show tables;</span></span><br><span class="line">Query: show tables</span><br><span class="line">+---------+</span><br><span class="line">| name    |</span><br><span class="line">+---------+</span><br><span class="line">| stu     |</span><br><span class="line">| student |</span><br><span class="line">+---------+</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示查询执行计划(做查询优化时使用)</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> impala-shell -p</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> select * from student</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 去格式化输出</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> impala-shell -q <span class="string">'select * from student'</span> -B --output_delimiter=<span class="string">"\t"</span> -o output.txt</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 没有那个方块了，便于导出到其他地方</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat output.txt </span></span><br><span class="line">1001    tignitgn</span><br><span class="line">1002    yuanyuan</span><br><span class="line">1003    haohao</span><br><span class="line">1004    yunyun</span><br></pre></td></tr></table></figure></div>



<h2 id="Impala的内部shell"><a href="#Impala的内部shell" class="headerlink" title="Impala的内部shell"></a>Impala的内部shell</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">explain &lt;sql&gt;</span><br><span class="line">显示执行计划</span><br><span class="line"></span><br><span class="line">profile</span><br><span class="line">(查询完成后执行） 查询最近一次查询的底层信息</span><br><span class="line"></span><br><span class="line">shell &lt;shell&gt;</span><br><span class="line">不退出impala-shell执行shell命令</span><br><span class="line"></span><br><span class="line">refresh &lt;tablename&gt;</span><br><span class="line">增量刷新元数据库</span><br><span class="line"></span><br><span class="line">invalidate metadata</span><br><span class="line">全量刷新元数据库（慎用）（同于 impala-shell -r）</span><br><span class="line"></span><br><span class="line">history</span><br><span class="line">历史命令</span><br></pre></td></tr></table></figure></div>

<p>使用</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1.	查看执行计划</span><br><span class="line">explain select * from student;</span><br><span class="line">2.	查询最近一次查询的底层信息</span><br><span class="line">[hadoop103:21000] &gt; select count(*) from student;</span><br><span class="line">[hadoop103:21000] &gt; profile;</span><br><span class="line">3.	查看hdfs及linux文件系统</span><br><span class="line">[hadoop103:21000] &gt; shell hadoop fs -ls /;</span><br><span class="line">[hadoop103:21000] &gt; shell ls -al ./;</span><br><span class="line">4.	刷新指定表的元数据</span><br><span class="line"><span class="meta">hive&gt;</span><span class="bash"> load data <span class="built_in">local</span> inpath <span class="string">'/opt/module/datas/student.txt'</span> into table student;</span></span><br><span class="line">[hadoop103:21000] &gt; select * from student;</span><br><span class="line">[hadoop103:21000] &gt; refresh student;</span><br><span class="line">[hadoop103:21000] &gt; select * from student;</span><br><span class="line">5.	查看历史命令</span><br><span class="line">[hadoop103:21000] &gt; history；</span><br></pre></td></tr></table></figure></div>



<h1 id="Impala的数据类型"><a href="#Impala的数据类型" class="headerlink" title="Impala的数据类型"></a>Impala的数据类型</h1><table>
<thead>
<tr>
<th>Hive数据类型</th>
<th>Impala数据类型</th>
<th>长度</th>
</tr>
</thead>
<tbody><tr>
<td>TINYINT</td>
<td>TINYINT</td>
<td>1byte有符号整数</td>
</tr>
<tr>
<td>SMALINT</td>
<td>SMALINT</td>
<td>2byte有符号整数</td>
</tr>
<tr>
<td>INT</td>
<td>INT</td>
<td>4byte有符号整数</td>
</tr>
<tr>
<td>BIGINT</td>
<td>BIGINT</td>
<td>8byte有符号整数</td>
</tr>
<tr>
<td>BOOLEAN</td>
<td>BOOLEAN</td>
<td>布尔类型，true或者false</td>
</tr>
<tr>
<td>FLOAT</td>
<td>FLOAT</td>
<td>单精度浮点数</td>
</tr>
<tr>
<td>DOUBLE</td>
<td>DOUBLE</td>
<td>双精度浮点数</td>
</tr>
<tr>
<td>STRING</td>
<td>STRING</td>
<td>字符系列。可以指定字符集。可以使用单引号或者双引号。</td>
</tr>
<tr>
<td>TIMESTAMP</td>
<td>TIMESTAMP</td>
<td>时间类型</td>
</tr>
<tr>
<td>BINARY</td>
<td>不支持</td>
<td>字节数组</td>
</tr>
</tbody></table>
<p>注意：Impala虽然支持array，map，struct复杂数据类型，但是支持并不完全，一般处理方法，将复杂类型转化为基本类型，通过hive创建表。</p>
<h1 id="DDL数据定义"><a href="#DDL数据定义" class="headerlink" title="DDL数据定义"></a>DDL数据定义</h1><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE [IF NOT EXISTS] database_name</span><br><span class="line">  [COMMENT database_comment]</span><br><span class="line">  [LOCATION hdfs_path];</span><br></pre></td></tr></table></figure></div>

<p>注：Impala不支持WITH DBPROPERTIE…语法</p>
<h2 id="查询-amp-删除数据库"><a href="#查询-amp-删除数据库" class="headerlink" title="查询&amp;删除数据库"></a>查询&amp;删除数据库</h2><p>查询</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> show databases;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> show databases like <span class="string">'hive*'</span>;</span></span><br><span class="line">Query: show databases like 'hive*'</span><br><span class="line">+---------+---------+</span><br><span class="line">| name    | comment |</span><br><span class="line">+---------+---------+</span><br><span class="line">| hive_db |         |</span><br><span class="line">+---------+---------+</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> desc database hive_db;</span></span><br><span class="line">Query: describe database hive_db</span><br><span class="line">+---------+----------+---------+</span><br><span class="line">| name    | location | comment |</span><br><span class="line">+---------+----------+---------+</span><br><span class="line">| hive_db |          |         |</span><br><span class="line">+---------+----------+---------+</span><br></pre></td></tr></table></figure></div>

<p>删除</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> drop atabase hive_db;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> drop database hive_db cascade;</span></span><br></pre></td></tr></table></figure></div>

<p>注：</p>
<p>Impala不支持alter database语法</p>
<p>当数据库被 USE 语句选中时，无法删除</p>
<h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><p>管理表</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[hadoop103:21000] &gt; create table if not exists student2(</span><br><span class="line">                  &gt; id int, name string</span><br><span class="line">                  &gt; )</span><br><span class="line">                  &gt; row format delimited fields terminated by '\t'</span><br><span class="line">                  &gt; stored as textfile</span><br><span class="line">                  &gt; location '/user/hive/warehouse/student2';</span><br><span class="line">[hadoop103:21000] &gt; desc formatted student2;</span><br></pre></td></tr></table></figure></div>

<p>外部表</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> create external table stu_external(</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> id int, </span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> name string) </span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> row format delimited fields terminated by <span class="string">'\t'</span> ;</span></span><br></pre></td></tr></table></figure></div>



<h2 id="分区表"><a href="#分区表" class="headerlink" title="分区表"></a>分区表</h2><p>创建分区表</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> create table stu_par(id int, name string)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> partitioned by (month string)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> row format delimited </span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> fields terminated by <span class="string">'\t'</span>;</span></span><br></pre></td></tr></table></figure></div>

<p>向表中导入数据</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[hadoop103:21000] &gt; alter table stu_par add partition (month='201810');</span><br><span class="line">[hadoop103:21000] &gt; load data inpath '/student.txt' into table stu_par partition(month='201810');</span><br><span class="line">[hadoop103:21000] &gt; insert into table stu_par partition (month = '201811')</span><br><span class="line">                  &gt; select * from student;</span><br></pre></td></tr></table></figure></div>

<p>注意：</p>
<p>如果分区没有，load data导入数据时，不能自动创建分区。</p>
<p>查询分区表中的数据</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; select * from stu_par where month &#x3D; &#39;201811&#39;;</span><br></pre></td></tr></table></figure></div>

<p>增加多个分区</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; alter table stu_par add partition (month&#x3D;&#39;201812&#39;) partition (month&#x3D;&#39;201813&#39;);</span><br></pre></td></tr></table></figure></div>

<p>删除分区</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;  alter table stu_par drop partition (month&#x3D;&#39;201812&#39;);</span><br></pre></td></tr></table></figure></div>

<p>查看分区</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; show partitions stu_par;</span><br></pre></td></tr></table></figure></div>



<h1 id="DML数据操作"><a href="#DML数据操作" class="headerlink" title="DML数据操作"></a>DML数据操作</h1><h2 id="数据导入（基本同hive类似）"><a href="#数据导入（基本同hive类似）" class="headerlink" title="数据导入（基本同hive类似）"></a>数据导入（基本同hive类似）</h2><p>注意：impala不支持load data local inpath…</p>
<h2 id="数据的导出"><a href="#数据的导出" class="headerlink" title="数据的导出"></a>数据的导出</h2><ol>
<li><p>impala不支持insert overwrite…语法导出数据</p>
</li>
<li><p>impala 数据导出一般使用 impala -o</p>
</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@hadoop103 ~]# impala-shell -q &#39;select * from student&#39; -B --output_delimiter&#x3D;&quot;\t&quot; -o output.txt</span><br><span class="line">[root@hadoop103 ~]# cat output.txt </span><br><span class="line">1001    tignitgn</span><br><span class="line">1002    yuanyuan</span><br><span class="line">1003    haohao</span><br><span class="line">1004    yunyun</span><br></pre></td></tr></table></figure></div>

<p>Impala 不支持export和import命令</p>
<h1 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h1><ol>
<li><p>基本的语法跟hive的查询语句大体一样</p>
</li>
<li><p>Impala不支持CLUSTER BY, DISTRIBUTE BY, SORT BY</p>
</li>
<li><p>Impala中不支持分桶表</p>
</li>
<li><p>Impala不支持COLLECT_SET(col)和explode（col）函数</p>
</li>
<li><p>Impala支持开窗函数  </p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[hadoop103:21000] &gt; select name,orderdate,cost,sum(cost) over(partition by month(orderdate)) from business;</span><br></pre></td></tr></table></figure></div>





</li>
</ol>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h2><p>导入依赖</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hive<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hive-exec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>创建一个类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mxx.hive;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hive.ql.exec.UDF;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lower</span> <span class="keyword">extends</span> <span class="title">UDF</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">evaluate</span> <span class="params">(<span class="keyword">final</span> String s)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span> (s == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> s.toLowerCase();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>打成jar包上传到服务器，将jar包上传到hdfs的指定目录</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hadoop fs -put hive_udf-0.0.1-SNAPSHOT.jar &#x2F;</span><br></pre></td></tr></table></figure></div>

<p>创建函数</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[hadoop103:21000] &gt; create function mylower(string) returns string location &#39;&#x2F;hive_udf-0.0.1-SNAPSHOT.jar&#39; symbol&#x3D;&#39;com.mxx.hive.Lower&#39;;</span><br></pre></td></tr></table></figure></div>

<p>使用自定义函数</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; select ename, mylower(ename) from emp;</span><br></pre></td></tr></table></figure></div>

<p>通过show functions查看自定义的函数</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; show functions;</span><br><span class="line">Query: show functions</span><br><span class="line">+-------------+-----------------+-------------+---------------+</span><br><span class="line">| return type | signature       | binary type | is persistent |</span><br><span class="line">+-------------+-----------------+-------------+---------------+</span><br><span class="line">| STRING      | mylower(STRING) | JAVA        | false         |</span><br><span class="line">+-------------+-----------------+-------------+---------------+</span><br></pre></td></tr></table></figure></div>



<h1 id="存储和压缩"><a href="#存储和压缩" class="headerlink" title="存储和压缩"></a>存储和压缩</h1><p>略</p>
<h1 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h1><p>略</p>
]]></content>
      <categories>
        <category>大数据分布式</category>
        <category>SQL查询</category>
      </categories>
      <tags>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7下的基本环境安装记录</title>
    <url>/2019/11/04/20191104211645836/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>CentOS-7-x86_64-Minimal-1810.iso</p>
<h1 id="修改HostName"><a href="#修改HostName" class="headerlink" title="修改HostName"></a>修改HostName</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 临时</span></span><br><span class="line">hostname hadoop104</span><br><span class="line"><span class="meta">#</span><span class="bash"> 永久</span></span><br><span class="line">hostnamectl set-hostname hadoop104</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> vi /etc/hosts</span></span><br><span class="line">127.0.0.1   hadoop104</span><br><span class="line">::1         hadoop104   </span><br><span class="line"><span class="meta">#</span><span class="bash"> 和hostname保持一致</span></span><br><span class="line"></span><br><span class="line">reboot</span><br></pre></td></tr></table></figure></div>



<h1 id="修改IP地址"><a href="#修改IP地址" class="headerlink" title="修改IP地址"></a>修改IP地址</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33</span><br><span class="line">BOOTPROTO&#x3D;static</span><br><span class="line">ONBOOT&#x3D;yes</span><br><span class="line"></span><br><span class="line">IPADDR&#x3D;192.168.1.112</span><br><span class="line">GATEWAY&#x3D;192.168.1.2</span><br><span class="line">DNS1&#x3D;192.168.1.2</span><br></pre></td></tr></table></figure></div>

<p>重启网络</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></table></figure></div>



<h1 id="设置ssh本机免密"><a href="#设置ssh本机免密" class="headerlink" title="设置ssh本机免密"></a>设置ssh本机免密</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd home/machine</span><br><span class="line">su machine</span><br><span class="line">ssh-keygen -t rsa</span><br><span class="line"><span class="meta">#</span><span class="bash"> 一路回车</span></span><br><span class="line">ssh-copy-id localhost</span><br></pre></td></tr></table></figure></div>



<p>创建基本目录</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;opt</span><br><span class="line">sudo mkdir software</span><br><span class="line">sudo chown machine.machine -R software&#x2F;</span><br><span class="line"></span><br><span class="line">sudo mkdir module&#x2F;</span><br><span class="line">sudo chown machine.machine -R module&#x2F;</span><br></pre></td></tr></table></figure></div>



<h1 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h1><p>jdk-8u221-linux-x64.tar.gz</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxf jdk-8u221-linux-x64.tar.gz -C /opt/module/</span><br><span class="line"></span><br><span class="line">vi /etc/profile</span><br><span class="line"><span class="meta">#</span><span class="bash"> 写在最后</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">JAVA_HOME</span></span><br><span class="line">export JAVA_HOME=/opt/module/jdk1.8.0_221</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line"></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></div>



<h1 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 停止+禁用</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line">sudo systemctl disable firewalld.service</span><br></pre></td></tr></table></figure></div>

<h1 id="关闭SELINUX"><a href="#关闭SELINUX" class="headerlink" title="关闭SELINUX"></a>关闭SELINUX</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1、临时关闭： </span></span><br><span class="line">sudo setenforce 0</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2、修改配置文件/etc/selinux/config（重启生效）</span></span><br><span class="line">将SELINUX=enforcing 改为SELINUX=disabled</span><br></pre></td></tr></table></figure></div>





<h1 id="CentOS7安装MySQL"><a href="#CentOS7安装MySQL" class="headerlink" title="CentOS7安装MySQL"></a>CentOS7安装MySQL</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">参考：https://blog.csdn.net/qq_37798548/article/details/82733575</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> centos7彻底卸载mysql(刚装的centos7不用做这个)</span></span><br><span class="line">https://blog.csdn.net/bubbleyang/article/details/91364180</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 卸载冲突的RPM组件</span></span><br><span class="line">rpm -qa | grep postfix</span><br><span class="line">rpm -qa|grep mariadb</span><br><span class="line">rpm -e --nodeps XXX</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查mysql是否存在</span></span><br><span class="line">rpm -qa | grep mysql</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装相应的依赖</span></span><br><span class="line">yum -y install libaio</span><br><span class="line">yum -y install net-tools</span><br><span class="line">yum -y install perl</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装mysql组件</span></span><br><span class="line">tar -xvf mysql-5.7.28-1.el7.x86_64.rpm-bundle.tar -C ./mysql_rpm</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 只需要安装以下四个组件</span></span><br><span class="line">rpm -ivh mysql-community-common-5.7.28-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-libs-5.7.28-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-client-5.7.28-1.el7.x86_64.rpm </span><br><span class="line">rpm -ivh mysql-community-server-5.7.28-1.el7.x86_64.rpm</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 默认数据存储路径/var/lib/mysql , 配置文件路径/etc/my.cnf</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 先启动数据库</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看mysql是否启动：</span></span><br><span class="line">service mysqld status</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动mysql：</span></span><br><span class="line">service mysqld start</span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止mysql：service mysqld stop</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启mysql：service mysqld restart</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改MySQL密码</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看临时密码</span></span><br><span class="line">grep password /var/log/mysqld.log</span><br><span class="line"><span class="meta">#</span><span class="bash"> 登录mysql（命令：mysql -p），输入临时密码</span></span><br><span class="line">mysql -p</span><br><span class="line"><span class="meta">#</span><span class="bash"> （可选）降低密码验证强度，否则不能设置简单密码</span></span><br><span class="line">set global validate_password_policy=LOW; </span><br><span class="line">set global validate_password_length=6;</span><br><span class="line">set password = password("123456");</span><br><span class="line">quit;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 允许远程连接</span></span><br><span class="line">mysql -u root -p</span><br><span class="line">use mysql;</span><br><span class="line">update user set host = '%' where user = 'root';</span><br><span class="line">flush privileges;</span><br><span class="line">quit;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 远程连一下检测</span></span><br></pre></td></tr></table></figure></div>



]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>CM的安装</title>
    <url>/2019/10/31/20191031102729863/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="linux基础环境搭建"><a href="#linux基础环境搭建" class="headerlink" title="linux基础环境搭建"></a>linux基础环境搭建</h1><p>虚拟机带不动，租了个云服务器。配置：Centos7.6，2核4G</p>
<p>参考我的blog 【Centos7下的基本环境安装记录】</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">修改HostName</span><br><span class="line">设置ssh本机免密</span><br><span class="line">安装JDK</span><br><span class="line">关闭防火墙</span><br><span class="line">关闭SELINUX  </span><br><span class="line">安装MySQL</span><br></pre></td></tr></table></figure></div>



<p>修改host</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">172.16.0.4  hadoop103</span><br><span class="line"><span class="meta">#</span><span class="bash">其他的不能留，不然后面会报错</span></span><br></pre></td></tr></table></figure></div>



<h1 id="CM安装"><a href="#CM安装" class="headerlink" title="CM安装"></a>CM安装</h1><h2 id="下载第三方依赖"><a href="#下载第三方依赖" class="headerlink" title="下载第三方依赖"></a>下载第三方依赖</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum -y install chkconfig python bind-utils psmisc libxslt zlib sqlite cyrus-sasl-plain cyrus-sasl-gssapi fuse fuse-libs redhat-lsb httpd mod_ssl</span><br></pre></td></tr></table></figure></div>



<h2 id="解压cloudera-manager"><a href="#解压cloudera-manager" class="headerlink" title="解压cloudera-manager"></a>解压cloudera-manager</h2><p>注：以下所有操作均使用root用户</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxf /mnt/hgfs/Linux_Pack/cloudera-manager-centos7-cm5.16.1_x86_64.tar.gz -C /opt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 离线安装</span></span><br><span class="line">cp CDH-5.16.1-1.cdh5.16.1.p0.3-el7.parcel /opt/cloudera/parcel-repo/</span><br><span class="line">cp CDH-5.16.1-1.cdh5.16.1.p0.3-el7.parcel.sha1 /opt/cloudera/parcel-repo/</span><br><span class="line">cp manifest.json /opt/cloudera/parcel-repo/</span><br><span class="line"></span><br><span class="line">cd /opt/cloudera/parcel-repo/</span><br><span class="line">mv CDH-5.16.1-1.cdh5.16.1.p0.3-el7.parcel.sha1 CDH-5.16.1-1.cdh5.16.1.p0.3-el7.parcel.sha</span><br></pre></td></tr></table></figure></div>

<h2 id="创建用户cloudera-scm"><a href="#创建用户cloudera-scm" class="headerlink" title="创建用户cloudera-scm"></a>创建用户cloudera-scm</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 如果是集群，要给所有节点都</span></span><br><span class="line">useradd --system --home=/opt/cm-5.16.1/run/cloudera-scm-server --no-create-home --shell=/bin/false --comment "Cloudera SCM User" cloudera-scm</span><br><span class="line">chown -R cloudera-scm:cloudera-scm c*</span><br></pre></td></tr></table></figure></div>



<h2 id="配置CM-Agent"><a href="#配置CM-Agent" class="headerlink" title="配置CM Agent"></a>配置CM Agent</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /opt/cm-5.16.1/etc/cloudera-scm-agent/config.ini</span><br><span class="line"></span><br><span class="line">server_host=hadoop102</span><br></pre></td></tr></table></figure></div>

<h2 id="创建CM用的数据库"><a href="#创建CM用的数据库" class="headerlink" title="创建CM用的数据库"></a>创建CM用的数据库</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create database cm_amon DEFAULT CHARSET utf8 COLLATE utf8_general_ci;</span><br><span class="line">create database cm_hive DEFAULT CHARSET utf8 COLLATE utf8_general_ci;</span><br><span class="line">create database cm_oozie DEFAULT CHARSET utf8 COLLATE utf8_general_ci;</span><br><span class="line">create database cm_hue DEFAULT CHARSET utf8 COLLATE utf8_general_ci;</span><br><span class="line"></span><br><span class="line">create database cm DEFAULT CHARSET utf8 COLLATE utf8_general_ci;</span><br></pre></td></tr></table></figure></div>



<h2 id="配置CM的数据库"><a href="#配置CM的数据库" class="headerlink" title="配置CM的数据库"></a>配置CM的数据库</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 以后所有找驱动的程序都会直接找这</span></span><br><span class="line">mkdir /usr/share/java/</span><br><span class="line">cp mysql-connector-java-5.1.27-bin.jar /usr/share/java/mysql-connector-java.jar</span><br><span class="line"></span><br><span class="line">cd /opt/cm-5.16.1/share/cmf/schema</span><br><span class="line"><span class="meta">#</span><span class="bash"> ./scm_prepare_database.sh mysql -h127.0.0.1 -uroot -p<span class="string">'123456'</span> --scm-host hadoop101 cm root 123456</span></span><br><span class="line">./scm_prepare_database.sh mysql cm root 123456	# 数据库，MySQL用户，密码</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> mysql里有了一个cm了</span></span><br></pre></td></tr></table></figure></div>

<h2 id="启动和关闭CM-Server-amp-Agent-服务"><a href="#启动和关闭CM-Server-amp-Agent-服务" class="headerlink" title="启动和关闭CM Server&amp;Agent 服务"></a>启动和关闭CM Server&amp;Agent 服务</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install psmisc</span><br><span class="line">./cm-5.16.1/etc/init.d/cloudera-scm-server start</span><br><span class="line">./cm-5.16.1/etc/init.d/cloudera-scm-agent start</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> cloudera-scm-server 已死，但 pid 文件存在</span></span><br><span class="line">rm -rf cm-5.16.1/run/cloudera-scm-server.pid</span><br><span class="line"></span><br><span class="line">netstat -lntp</span><br><span class="line"><span class="meta">#</span><span class="bash"> 出现7180就成功</span></span><br><span class="line">访问 haoop102:7180</span><br><span class="line">admin/ admin</span><br><span class="line"></span><br><span class="line">为cdh集群指定主机 &gt; 当前管理的主机 &gt; 全部钩上 &gt; 继续</span><br><span class="line"></span><br><span class="line">选CDH-5.16.1-1.cdh5.16.1.p0.3(这是已经下载过的离线包)</span><br><span class="line">等着...</span><br><span class="line">选择含 Impala 的内核</span><br><span class="line"></span><br><span class="line">自定义角色分配</span><br><span class="line">分配一下各个主机的任务（一键搭集群...）</span><br><span class="line"></span><br><span class="line">数据库设置</span><br><span class="line">如果是集群还有Active Monitor</span><br><span class="line"></span><br><span class="line">然后自动安装集群，等着</span><br></pre></td></tr></table></figure></div>

<h2 id="集群状况监控"><a href="#集群状况监控" class="headerlink" title="集群状况监控"></a>集群状况监控</h2><p>安好后发现好多全是红的<br>真实集群水平：64G\128G</p>
<p>本云服务器：2核4G</p>
<p>可以看到内存完全不够</p>
<a href="/2019/10/31/20191031102729863/屏幕快照 2019-11-05 上午12.17.55.png" data-fancybox="group" data-caption="屏幕快照 2019-11-05 上午12.17.55" class="fancybox"><img alt="屏幕快照 2019-11-05 上午12.17.55" style="zoom:50%;" title="屏幕快照 2019-11-05 上午12.17.55" data-src="/2019/10/31/20191031102729863/屏幕快照 2019-11-05 上午12.17.55.png" class="lazyload"></a>

<p>策略：</p>
<ul>
<li>虚拟机的话至少12G</li>
<li>集群角色分配均匀</li>
</ul>
<h2 id="集群使用"><a href="#集群使用" class="headerlink" title="集群使用"></a>集群使用</h2><p>各种常用操作</p>
<h1 id="BUG调试"><a href="#BUG调试" class="headerlink" title="BUG调试"></a>BUG调试</h1><h2 id="测试hue报错了"><a href="#测试hue报错了" class="headerlink" title="测试hue报错了"></a>测试hue报错了</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> -------------测试hue报错了-------------------------------</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看server日志：</span></span><br><span class="line">django.core.exceptions.ImproperlyConfigured: Error loading MySQLdb module: libmysqlclient.so.18: cannot open shared object file: No such file or directory</span><br><span class="line"><span class="meta">#</span><span class="bash"> 找一下。发现什么都没找到</span></span><br><span class="line">find / -name libmysqlclient.so.18</span><br><span class="line"><span class="meta">#</span><span class="bash"> 装mysql前先彻底卸载过，这个时候可能把该文件删掉了</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重新下一个libmysqlclient.so.18</span></span><br><span class="line">wget https://downloads.mysql.com/archives/get/file/mysql-community-libs-compat-5.7.22-1.el7.x86_64.rpm</span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压rpm</span></span><br><span class="line">rpm2cpio mysql-community-libs-compat-5.7.22-1.el7.x86_64.rpm | cpio -div</span><br><span class="line"><span class="meta">#</span><span class="bash"> 取出libmysqlclient.so.18放在/usr/lib64/mysql/下</span></span><br><span class="line">cp usr/lib64/mysql/libmysqlclient* /usr/lib64/mysql/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 然后再放在/usr/lib64/下边</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 再测试页面：成功</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ---------------------------------------------</span></span><br></pre></td></tr></table></figure></div>



<h2 id="虚拟机配置太小跑不起来"><a href="#虚拟机配置太小跑不起来" class="headerlink" title="虚拟机配置太小跑不起来"></a>虚拟机配置太小跑不起来</h2><p>…</p>
<p>虚拟机配置：cpu 2核、内存 5.5G</p>
<p>放弃…</p>
<h2 id="使用云服务器"><a href="#使用云服务器" class="headerlink" title="使用云服务器"></a>使用云服务器</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">学生服务器：https:&#x2F;&#x2F;cloud.baidu.com&#x2F;campaign&#x2F;campus-2018&#x2F;index.html?track&#x3D;cp:nsem|pf:pc|pp:nsem-huodong-qihangxiaoyuan|pu:qihangxiaoyuan-jingpinci|ci:qhxuesheng|kw:2111931</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;cloud.baidu.com&#x2F;campaign&#x2F;campus-2018&#x2F;index.html?track&#x3D;cp:nsem|pf:pc|pp:nsem-huodong-qihangxiaoyuan|pu:qihangxiaoyuan-jingpinci|ci:qhxuesheng|kw:2111931</span><br></pre></td></tr></table></figure></div>

<h2 id="安装python2-6"><a href="#安装python2-6" class="headerlink" title="安装python2.6"></a>安装python2.6</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装python2.6</span></span><br><span class="line">https://www.cnblogs.com/MWCloud/p/11354591.html</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改默认python版本</span></span><br><span class="line">https://www.cnblogs.com/kjsd/p/9016044.html</span><br></pre></td></tr></table></figure></div>

<h2 id="IP配置有问题"><a href="#IP配置有问题" class="headerlink" title="IP配置有问题"></a>IP配置有问题</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ERROR ScmActive-0:com.cloudera.server.cmf.components.ScmActive: ScmActive: Unable to retrieve non-local non-loopback IP address. Seeing address: hadoop103/127.0.0.1. </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改前</span></span><br><span class="line">127.0.0.1   hadoop103</span><br><span class="line">::1         hadoop103</span><br><span class="line">172.16.0.4  instance-tlxt6vjp instance-tlxt6vjp.novalocal</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改后</span></span><br><span class="line">172.16.0.4  hadoop103</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>大数据分布式</category>
        <category>CM</category>
      </categories>
      <tags>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>Azkaban-任务调度</title>
    <url>/2019/10/25/20191025135544362/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[TOC]</p>
<blockquote>
<p>参考：</p>
<ul>
<li><p><a href="https://www.bilibili.com/video/av65539983" target="_blank" rel="noopener">https://www.bilibili.com/video/av65539983</a></p>
</li>
<li><p>官方文档：<a href="https://azkaban.github.io/azkaban/docs/2.5/" target="_blank" rel="noopener">https://azkaban.github.io/azkaban/docs/2.5/</a></p>
</li>
</ul>
</blockquote>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="什么是azkaban"><a href="#什么是azkaban" class="headerlink" title="什么是azkaban"></a>什么是azkaban</h2><p>批量工作流任务调度器，</p>
<h2 id="Azkaban特点"><a href="#Azkaban特点" class="headerlink" title="Azkaban特点"></a>Azkaban特点</h2><p>1)       兼容任何版本的hadoop（oozie需要版本兼容）</p>
<p>2)       易于使用的Web用户界面（可操作、可修改）</p>
<p>3)       简单的工作流的上传</p>
<p>4)       方便设置任务之间的关系</p>
<p>5)       调度工作流</p>
<p>6)       模块化和可插拔的插件机制</p>
<p>7)       认证/授权(权限的工作)</p>
<p>8)       能够杀死并重新启动工作流（可以直接在页面kill重启）</p>
<p>9)       有关失败和成功的电子邮件提醒</p>
<p>总结：我比oozie优秀（- - ||）</p>
<h2 id="Azkaban的架构"><a href="#Azkaban的架构" class="headerlink" title="Azkaban的架构"></a>Azkaban的架构</h2><p>三个关键组件：</p>
<a href="/2019/10/25/20191025135544362/图片 1.png" data-fancybox="group" data-caption="图片 1" class="fancybox"><img alt="图片 1" style="zoom:70%;" title="图片 1" data-src="/2019/10/25/20191025135544362/图片 1.png" class="lazyload"></a>

<p>1)       AzkabanWebServer：AzkabanWebServer是整个Azkaban工作流系统的主要管理者：用户登录认证、负责project管理、定时执行工作流、跟踪工作流执行进度等一系列任务。</p>
<p>2)       AzkabanExecutorServer：负责具体的工作流的提交、执行，它们通过mysql数据库来协调任务的执行。</p>
<p>3）    关系型数据库（MySQL）：存储大部分执行流状态，AzkabanWebServer和AzkabanExecutorServer都需要访问数据库。</p>
<p>流程：</p>
<a href="/2019/10/25/20191025135544362/屏幕快照 2019-10-28 下午5.44.22.png" data-fancybox="group" data-caption="屏幕快照 2019-10-28 下午5.44.22" class="fancybox"><img alt="屏幕快照 2019-10-28 下午5.44.22" style="zoom:30%;" title="屏幕快照 2019-10-28 下午5.44.22" data-src="/2019/10/25/20191025135544362/屏幕快照 2019-10-28 下午5.44.22.png" class="lazyload"></a>



<h1 id="Azkaban安装部署"><a href="#Azkaban安装部署" class="headerlink" title="Azkaban安装部署"></a>Azkaban安装部署</h1><h2 id="安装Azkaban"><a href="#安装Azkaban" class="headerlink" title="安装Azkaban"></a>安装Azkaban</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载地址</span></span><br><span class="line">http://azkaban.github.io/downloads.html</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 需要的包</span></span><br><span class="line">azkaban-web-server-2.5.0.tar.gz</span><br><span class="line">azkaban-executor-server-2.5.0.tar.gz</span><br><span class="line">azkaban-sql-script-2.5.0.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 建目录</span></span><br><span class="line">mkdir azkaban-2.5.0</span><br><span class="line">cd azkaban-2.5.0/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压</span></span><br><span class="line">tar -zxvf /media/psf/centos_share/azkaban-executor-server-2.5.0.tar.gz -C /home/machine/apps/azkaban-2.5.0/</span><br><span class="line">tar -zxvf /media/psf/centos_share/azkaban-web-server-2.5.0.tar.gz -C /home/machine/apps/azkaban-2.5.0/</span><br><span class="line">tar -zxvf /media/psf/centos_share/azkaban-sql-script-2.5.0.tar.gz -C /home/machine/apps/azkaban-2.5.0/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 该名</span></span><br><span class="line">mv azkaban-executor-2.5.0/ executor</span><br><span class="line">mv azkaban-web-2.5.0/ server</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> azkaban脚本导入(在azkaban-sql-script-2.5.0.tar.gz里有个create-all-sql-2.5.0.sql)</span></span><br><span class="line">create database azkaban;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换数据库，执行脚本create-all-sql-2.5.0.sql</span></span><br></pre></td></tr></table></figure></div>

<h2 id="生成密钥对和证书"><a href="#生成密钥对和证书" class="headerlink" title="生成密钥对和证书"></a>生成密钥对和证书</h2><p><strong>HTTPS和证书说明</strong></p>
<p>主要是azkaban使用的是https协议，我虚拟机里的linux需要一些额外操作来支持https才行</p>
<p>HTTPS= HTTP+SSL/TLS</p>
<p>客户端请求服务器时，服务器会发个证书过来，如果证书安全，则认为服务器是安全的。</p>
<p>（ps: 自己生成的证书也是不安全的，安全的证书是需要走认证流程的…）</p>
<hr>
<p>使用java的keytool工具来做</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd server</span><br><span class="line">keytool -keystore keystore -alias jetty -genkey -keyalg RSA</span><br><span class="line"><span class="meta">#</span><span class="bash"> 密码写123456，然后一路回车，按y</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> server下生成了一个 keystore</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看一下</span></span><br><span class="line">keytool -keystore keystore --list</span><br></pre></td></tr></table></figure></div>



<h2 id="时间同步配置"><a href="#时间同步配置" class="headerlink" title="时间同步配置"></a>时间同步配置</h2><p>和oozie那一样的，把机子修改到+0800</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看机子的时区</span></span><br><span class="line">date -R</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改</span></span><br><span class="line">cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改时区（立即生效）</span></span><br><span class="line">timedatectl set-timezone Asia/Shanghai</span><br></pre></td></tr></table></figure></div>



<h2 id="Web服务器配置"><a href="#Web服务器配置" class="headerlink" title="Web服务器配置"></a>Web服务器配置</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd conf/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改azkaban.properties</span></span><br><span class="line">web.resource.dir=/home/machine/apps/azkaban-2.5.0/server/web</span><br><span class="line">default.timezone.id=Asia/Shanghai</span><br><span class="line">user.manager.xml.file=/home/machine/apps/azkaban-2.5.0/server/conf/azkaban-users.xml</span><br><span class="line">executor.global.properties=/home/machine/apps/azkaban-2.5.0/executor/conf/global.properties</span><br><span class="line"><span class="meta">#</span><span class="bash">mysql相关</span></span><br><span class="line">mysql.host=mxxcentos7</span><br><span class="line">mysql.user=root</span><br><span class="line">mysql.password=123456</span><br><span class="line"><span class="meta">#</span><span class="bash">使用的是jetty服务器</span></span><br><span class="line">jetty.keystore=/home/machine/apps/azkaban-2.5.0/server/keystore</span><br><span class="line">jetty.password=123456</span><br><span class="line">jetty.keypassword=123456</span><br><span class="line">jetty.truststore=/home/machine/apps/azkaban-2.5.0/server/keystore</span><br><span class="line">jetty.trustpassword=123456</span><br><span class="line"><span class="meta">#</span><span class="bash">邮件通知（可以不配，国内支持163）</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改azkaban-users.xml</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加一个</span></span><br><span class="line">&lt;user username="admin" password="admin" roles="admin"/&gt;</span><br></pre></td></tr></table></figure></div>



<h2 id="Executor服务器配置"><a href="#Executor服务器配置" class="headerlink" title="Executor服务器配置"></a>Executor服务器配置</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd executor/conf/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改azkaban.properties</span></span><br><span class="line">default.timezone.id=Asia/Shanghai</span><br><span class="line">executor.global.properties=/home/machine/apps/azkaban-2.5.0/executor/conf/global.properties</span><br><span class="line"><span class="meta">#</span><span class="bash"> mysql</span></span><br><span class="line">mysql.host=mxxcentos7</span><br><span class="line">mysql.database=azkaban</span><br><span class="line">mysql.user=root</span><br><span class="line">mysql.password=123456</span><br></pre></td></tr></table></figure></div>



<h2 id="启动executor-amp-server服务器"><a href="#启动executor-amp-server服务器" class="headerlink" title="启动executor &amp; server服务器"></a>启动executor &amp; server服务器</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./executor/bin/azkaban-executor-start.sh</span><br><span class="line"><span class="meta">#</span><span class="bash"> 回车一下</span></span><br><span class="line">./server/bin/azkaban-web-start.sh</span><br><span class="line"><span class="meta">#</span><span class="bash"> 回车一下</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 访问：https://mxxcentos7:8443</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意：是https，有个不安全提醒，goole浏览器下点击高级-继续前往就行了</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 登录输入admin就进入界面了</span></span><br></pre></td></tr></table></figure></div>

<p>ps :  哇对比一下oozie那个简陋的反人类页面</p>
<h1 id="常用案例"><a href="#常用案例" class="headerlink" title="常用案例"></a>常用案例</h1><p>Azkaba内置的任务类型支持command、java</p>
<p>ps: hdfs、mapreduce、hive都可以写成command呀，和oozie不同，oozie是要整合大数据框架的，Azkaba只是单纯的调度</p>
<p>一个job是一个工作节点，多个job之间需要一个配置来形成工作流。这里只是一个单一job执行</p>
<p>注意：这个配置是用web上传的，所以下面的操作在本机上（不是linux服务器上）完成的</p>
<h2 id="案例：单一job"><a href="#案例：单一job" class="headerlink" title="案例：单一job"></a>案例：单一job</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建job描述文件 first.job（后缀必须.job）</span></span><br><span class="line"><span class="meta">#</span><span class="bash">first.job</span></span><br><span class="line">type=command</span><br><span class="line">command=echo 'this is my first job'</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将job资源文件打包成zip文件（只支持zip不要打其他的）</span></span><br><span class="line">first.zip</span><br></pre></td></tr></table></figure></div>

<p>接下来就是页面操作了</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">点击Create Project</span><br><span class="line">填一下 first&#x2F;first</span><br><span class="line"></span><br><span class="line">点upload，选刚才打包的first.zip，上传</span><br><span class="line">上传好后，对应mysql里的project_files表已经有内容了</span><br><span class="line"></span><br><span class="line">点Excute Flow</span><br><span class="line">可以选（Schedule: 定时跑		Excute：立即执行）</span><br><span class="line"></span><br><span class="line">绿了就成功了</span><br><span class="line">Job List可以查日志</span><br></pre></td></tr></table></figure></div>

<p>修改工作流程也可以页面操作</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Projects &gt; first &gt; 下拉点击first &gt; Edit</span><br><span class="line"></span><br><span class="line">改一下：</span><br><span class="line">echo $&#123;param&#125;</span><br><span class="line">提交</span><br><span class="line"></span><br><span class="line">再执行一次，点Excute Flow</span><br><span class="line"></span><br><span class="line">（Notification可以配置邮件发送）</span><br><span class="line"></span><br><span class="line">点Flow Parameters</span><br><span class="line">加一个 param &#x2F; this is my azkaban，执行看看</span><br></pre></td></tr></table></figure></div>

<h2 id="案例：邮件通知配置"><a href="#案例：邮件通知配置" class="headerlink" title="案例：邮件通知配置"></a>案例：邮件通知配置</h2><p>目前国内邮箱只推荐使用163</p>
<p>修改server/conf/azkaban.properties</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 先关掉</span></span><br><span class="line">./server/bin/azkaban-web-shutdown.sh </span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> azkaban.properties</span></span><br><span class="line">mail.sender=hhdwwt@163.com</span><br><span class="line">mail.host=smtp.163.com</span><br><span class="line">mail.user=hhdwwt@163.com</span><br><span class="line"><span class="meta">#</span><span class="bash"> ！！这里写的不是密码，是你的163邮箱第三方客户端授权码！！</span></span><br><span class="line">mail.password=XXXXX</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启</span></span><br></pre></td></tr></table></figure></div>

<p>配置job成功和失败的发送邮箱：</p>
<a href="/2019/10/25/20191025135544362/屏幕快照 2019-10-30 下午1.06.22.png" data-fancybox="group" data-caption="屏幕快照 2019-10-30 下午1.06.22" class="fancybox"><img alt="屏幕快照 2019-10-30 下午1.06.22" style="zoom:40%;" title="屏幕快照 2019-10-30 下午1.06.22" data-src="/2019/10/25/20191025135544362/屏幕快照 2019-10-30 下午1.06.22.png" class="lazyload"></a>



<h2 id="案例：多job工作流"><a href="#案例：多job工作流" class="headerlink" title="案例：多job工作流"></a>案例：多job工作流</h2><p>创建4个job，并说明依赖关系</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">properties</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># first.job</span></span><br><span class="line"><span class="attr">type</span>=<span class="string">command</span></span><br><span class="line"><span class="attr">command</span>=<span class="string">echo 'first'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># second.job</span></span><br><span class="line"><span class="attr">type</span>=<span class="string">command</span></span><br><span class="line"><span class="attr">command</span>=<span class="string">echo 'second'</span></span><br><span class="line"><span class="attr">dependencies</span>=<span class="string">first</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># third.job</span></span><br><span class="line"><span class="attr">type</span>=<span class="string">command</span></span><br><span class="line"><span class="attr">command</span>=<span class="string">echo 'third'</span></span><br><span class="line"><span class="attr">dependencies</span>=<span class="string">first</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># forth.job</span></span><br><span class="line"><span class="attr">type</span>=<span class="string">command</span></span><br><span class="line"><span class="attr">command</span>=<span class="string">echo 'forth' </span></span><br><span class="line"><span class="attr">dependencies</span>=<span class="string">second,third</span></span><br></pre></td></tr></table></figure></div>

<p>然后把这四个job打包jobs.zip，上传执行看看。</p>
<p>流程：</p>
<a href="/2019/10/25/20191025135544362/屏幕快照 2019-10-29 下午6.48.01.png" data-fancybox="group" data-caption="屏幕快照 2019-10-29 下午6.48.01" class="fancybox"><img alt="屏幕快照 2019-10-29 下午6.48.01" style="zoom:50%;" title="屏幕快照 2019-10-29 下午6.48.01" data-src="/2019/10/25/20191025135544362/屏幕快照 2019-10-29 下午6.48.01.png" class="lazyload"></a>

<p>执行情况</p>
<a href="/2019/10/25/20191025135544362/屏幕快照 2019-10-29 下午6.48.22.png" data-fancybox="group" data-caption="屏幕快照 2019-10-29 下午6.48.22" class="fancybox"><img alt="屏幕快照 2019-10-29 下午6.48.22" style="zoom:40%;" title="屏幕快照 2019-10-29 下午6.48.22" data-src="/2019/10/25/20191025135544362/屏幕快照 2019-10-29 下午6.48.22.png" class="lazyload"></a>

<p>可以看到2、3是并行执行的。</p>
<p>看linux里边生成了2个东西：</p>
<p>executions：日志</p>
<p>projects：job文件</p>
<h2 id="案例：java任务"><a href="#案例：java任务" class="headerlink" title="案例：java任务"></a>案例：java任务</h2><p>写个类打成jar包</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> mxx.azkaban;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AzkabanTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"/home/machine/apps/azkaban-2.5.0/output.txt"</span>);</span><br><span class="line">        fos.write(<span class="string">"this is a java progress"</span>.getBytes());</span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        AzkabanTest azkabanTest = <span class="keyword">new</span> AzkabanTest();</span><br><span class="line">        azkabanTest.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>写job文件java.job</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">properties</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">type</span>=<span class="string">javaprocess</span></span><br><span class="line"><span class="meta">java.class</span>=<span class="string">mxx.azkaban.AzkabanTest</span></span><br><span class="line"><span class="attr">classpath</span>=<span class="string">./azkaban-demo.jar</span></span><br></pre></td></tr></table></figure></div>

<p>将  java.job 和 azkaban-demo.jar 打个 java.zip</p>
<p>界面上传一下，执行。</p>
<p>然后linux下output.txt已经生成了</p>
<h2 id="案例：hdfs-amp-mr-amp-hive任务"><a href="#案例：hdfs-amp-mr-amp-hive任务" class="headerlink" title="案例：hdfs &amp; mr &amp; hive任务"></a>案例：hdfs &amp; mr &amp; hive任务</h2><p>这个就是个普通的command</p>
<p><strong>1、运行mapreduce的wordcount</strong></p>
<p>写mr.job</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">properties</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">type</span>=<span class="string">command</span></span><br><span class="line"><span class="attr">command</span>=<span class="string">/home/machine/apps/hadoop-2.6.0-cdh5.16.1/bin/hadoop jar /home/machine/apps/hadoop-2.6.0-cdh5.16.1/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.6.0-cdh5.16.1.jar wordcount /wordcount.txt /output_1029_1</span></span><br></pre></td></tr></table></figure></div>

<p>打包界面上传，执行</p>
<p>为什么azkaban日志有error，但还是成功执行了mr？</p>
<p>可能是个bug…但是不影响使用</p>
<p>…其他都是一样的，略</p>
]]></content>
      <categories>
        <category>大数据分布式</category>
        <category>任务管理</category>
      </categories>
      <tags>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>Oozie-任务调度</title>
    <url>/2019/10/11/20191011151653804/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Oozie简介"><a href="#Oozie简介" class="headerlink" title="Oozie简介"></a>Oozie简介</h1><p>​    一个基于工作流引擎的开源框架，由 Cloudera 公司贡献给 Apache，提供对 Hadoop MapReduce、Pig Jobs 的任务调度与协调。Oozie 需要部署到 Java Servlet 容器中运行。主要用于定时调度任务，多任务可以按照执行的逻辑顺序调度。 </p>
<h1 id="Oozie-的功能模块介绍"><a href="#Oozie-的功能模块介绍" class="headerlink" title="Oozie 的功能模块介绍"></a>Oozie 的功能模块介绍</h1><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p>1) Workflow </p>
<p>顺序执行流程节点，支持 fork(分支多个节点)，join(合并多个节点为一个) </p>
<p>2) Coordinator</p>
<p>定时触发 workflow</p>
<p>3) Bundle Job </p>
<p>绑定多个 Coordinator </p>
<h2 id="常用节点"><a href="#常用节点" class="headerlink" title="常用节点"></a>常用节点</h2><p>1) 控制流节点(Control Flow Nodes) </p>
<p>控制流节点一般都是定义在工作流开始或者结束的位置，比如 start,end,kill 等。以及提供工 作流的执行路径机制，如 decision，fork，join 等。</p>
<p>2) 动作节点(Action Nodes)</p>
<p>负责执行具体动作的节点，比如:拷贝文件，执行某个 Shell 脚本等等。 </p>
<h1 id="Oozie的部署"><a href="#Oozie的部署" class="headerlink" title="Oozie的部署"></a>Oozie的部署</h1><h2 id="修改-Hadoop-配置"><a href="#修改-Hadoop-配置" class="headerlink" title="修改 Hadoop 配置"></a>修改 Hadoop 配置</h2><p>core-site.xml</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Oozie Server 的 Hostname --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.machine.hosts<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 允许被 Oozie 代理的用户组 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.machine.groups<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>mapred-site.xml</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 历史服务器--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置 MapReduce JobHistory Server 地址 ，默认端口 10020 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>mxxcentos7:10020<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置 MapReduce JobHistory Server web ui 地址， 默认端口 19888 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>mxxcentos7:19888<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>yarn-site.xml</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 日志聚集功能 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log-aggregation-enable<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 日志保留时间7天 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log-aggregation.retain-seconds<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>604800<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 任务历史服务 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log.server.url<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>http://mxxcentos7:19888/jobhistory/logs/<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></div>



<p>启动</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;start-dfs.sh</span><br><span class="line">.&#x2F;start-yarn.sh</span><br><span class="line">.&#x2F;mr-jobhistory-daemon.sh start historyserver</span><br></pre></td></tr></table></figure></div>



<h2 id="部署-Oozie"><a href="#部署-Oozie" class="headerlink" title="部署 Oozie"></a>部署 Oozie</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 解压 Oozie</span></span><br><span class="line">tar -zxvf /media/psf/centos_share/oozie-4.1.0-cdh5.16.1.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 在 oozie 根目录下解压 oozie-hadooplibs</span></span><br><span class="line">tar -zxvf oozie-hadooplibs-4.1.0-cdh5.16.1.tar.gz -C ../</span><br><span class="line"><span class="meta">#</span><span class="bash"> 在 Oozie 目录下创建 libext 目录</span></span><br><span class="line">mkdir libext/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将 hadooplibs 里面的 jar 包，拷贝到 libext 目录下:</span></span><br><span class="line">cp hadooplibs/hadooplib-2.6.0-cdh5.16.1.oozie-4.1.0-cdh5.16.1/* ./libext/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 拷贝 Mysql 驱动包到 libext 目录下(Oozie元数据信息用mysql保存):</span></span><br><span class="line">cp /media/psf/centos_share/mysql-connector-java-5.1.39-bin.jar ./libext/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将 ext-2.2.zip 拷贝到 libext/目录下(ext 是一个 js 框架，用于展示 oozie 前端页面:)</span></span><br><span class="line">cp /media/psf/centos_share/ext-2.2.zip ./libext/</span><br></pre></td></tr></table></figure></div>

<p>修改Oozie配置</p>
<p>oozie-site.xml 复制oozie-default.xml，加入以下字段</p>
<p>（不复制也行？oozie-default.xml就是默认值？）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- jdbc的配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>oozie.service.JPAService.jdbc.driver<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>oozie.service.JPAService.jdbc.url<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>jdbc:mysql://mxxcentos7:3306/oozie<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>oozie.service.JPAService.jdbc.username<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>oozie.service.JPAService.jdbc.password<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- hadoop的配置 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>oozie.service.HadoopAccessorService.hadoop.configurations<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>*=/home/machine/apps/hadoop-2.6.0-cdh5.16.1/etc/hadoop<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>在 Mysql 中创建 Oozie 的数据库</p>
<h2 id="初始化-Oozie"><a href="#初始化-Oozie" class="headerlink" title="初始化 Oozie"></a>初始化 Oozie</h2><p>cdh5.16.1貌似有很多很多问题….</p>
<p>上传 Oozie 目录下的 yarn.tar.gz 文件到 HDFS</p>
<p>(yarn.tar.gz 文件会自行解压)</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> </span></span><br><span class="line">bin/oozie-setup.sh sharelib create -fs hdfs://mxxcentos7:9000 -locallib oozie-sharelib-4.1.0-cdh5.16.1.tar.gz </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 找不到或无法加载主类 org.apache.oozie.tools.OozieSharelibCLI</span></span><br><span class="line">oozie-tools-4.1.0.jar扔到libext下</span><br><span class="line"><span class="meta">#</span><span class="bash"> java.lang.ClassNotFoundException: org.apache.oozie.cli.CLIParser</span></span><br><span class="line">cp ./lib/oozie-client-4.1.0-cdh5.16.1.jar ./libext/</span><br><span class="line"><span class="meta">#</span><span class="bash"> Caused by: java.lang.ClassNotFoundException: org.apache.oozie.service.Services</span></span><br><span class="line">cp ./oozie-core/oozie-core-4.1.0-cdh5.16.1.jar ./libext/</span><br><span class="line"><span class="meta">#</span><span class="bash"> java.lang.ClassNotFoundException: org.apache.log4j.rolling.RollingFileAppender</span></span><br><span class="line">cp /media/psf/centos_share/apache-log4j-extras-1.2.17.jar ./libext/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 再次运行</span></span><br><span class="line">bin/oozie-setup.sh sharelib create -fs hdfs://mxxcentos7:9000 -locallib oozie-sharelib-4.1.0-cdh5.16.1.tar.gz </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 终于成功了！！！</span></span><br></pre></td></tr></table></figure></div>

<p>创建 oozie.sql 文件</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sh</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># </span></span><br><span class="line">bin/ooziedb.sh create -sqlfile oozie.sql -run</span><br><span class="line"><span class="comment"># Caused by: java.lang.ClassNotFoundException: org.apache.openjpa.jdbc.meta.MappingTool</span></span><br><span class="line">cp /media/psf/centos_share/openjpa-jdbc-3.0.0.jar ./libext/</span><br><span class="line"><span class="comment"># Caused by: java.lang.ClassNotFoundException: org.apache.openjpa.meta.MetaDataModes</span></span><br><span class="line">cp /media/psf/centos_share/openjpa-3.0.0.jar ./libext/</span><br><span class="line"><span class="comment"># Caused by: java.lang.ClassNotFoundException: javax.transaction.Synchronization</span></span><br><span class="line">cp /media/psf/centos_share/geronimo-jta_1.1_spec-1.1.1.jar ./libext/</span><br><span class="line"><span class="comment"># java.lang.NoClassDefFoundError: javax/persistence/spi/PersistenceUnitInfo</span></span><br><span class="line">cp /media/psf/centos_share/geronimo-jpa_2.1_spec-1.0-alpha-1.jar ./libext/</span><br><span class="line"><span class="comment"># Caused by: java.lang.ClassNotFoundException: serp.bytecode.BCClassLoader</span></span><br><span class="line">cp /media/psf/centos_share/serp-1.15.1.jar ./libext/</span><br><span class="line"><span class="comment"># Caused by: java.lang.ClassNotFoundException: org.json.simple.JSONObject</span></span><br><span class="line">cp /media/psf/centos_share/json-simple-1.1.jar ./libext/</span><br><span class="line"><span class="comment"># Caused by: java.lang.ClassNotFoundException: org.jdom.Content</span></span><br><span class="line">cp /media/psf/centos_share/jdom-1.1.3.jar ./libext/</span><br></pre></td></tr></table></figure></div>

<p>打包项目，生成 war 包</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bin/oozie-setup.sh prepare-war</span><br><span class="line"><span class="meta">#</span><span class="bash"> unzip: 未找到命令</span></span><br><span class="line">sudo yum install unzip</span><br><span class="line"><span class="meta">#</span><span class="bash"> File/Dir does no exist: /home/machine/apps/oozie-4.1.0-cdh5.16.1/oozie-server/conf/ssl/server.xml</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载了其他版本里的 oozie-server...</span></span><br><span class="line">cp -r /media/psf/centos_share/oozie-server/ ./</span><br><span class="line"><span class="meta">#</span><span class="bash"> zip: 未找到命令</span></span><br><span class="line">sudo yum install zip</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 成功！！！</span></span><br></pre></td></tr></table></figure></div>



<h2 id="启动与关闭"><a href="#启动与关闭" class="headerlink" title="启动与关闭"></a>启动与关闭</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bin/oozied.sh start</span><br><span class="line"><span class="meta">#</span><span class="bash"> jps ,出现一个“Bootstrap”。这是oozie的进程</span></span><br><span class="line">http://mxxcentos7:11000</span><br><span class="line"></span><br><span class="line">bin/oozied.sh stop</span><br></pre></td></tr></table></figure></div>



<h1 id="Oozie的使用"><a href="#Oozie的使用" class="headerlink" title="Oozie的使用"></a>Oozie的使用</h1><h2 id="案例一-Oozie-调度-shell-脚本"><a href="#案例一-Oozie-调度-shell-脚本" class="headerlink" title="案例一: Oozie 调度 shell 脚本"></a>案例一: Oozie 调度 shell 脚本</h2><p>目标:使用 Oozie 调度 Shell 脚本</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 解压官方案例模板</span></span><br><span class="line">tar -zxvf oozie-examples.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建工作目录</span></span><br><span class="line">mkdir oozie-apps/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 拷贝任务模板到 oozie-apps/目录</span></span><br><span class="line">cp -r examples/apps/shell/ oozie-apps</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 编写脚本 p1.sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">/sbin/date &gt; /home/machine/p1.log</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改 job.properties 和 workflow.xml 文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> job.properties</span></span><br><span class="line">nameNode=hdfs://mxxcentos7:9000</span><br><span class="line">jobTracker=mxxcentos7:8032</span><br><span class="line">queueName=default</span><br><span class="line">examplesRoot=oozie-apps</span><br><span class="line"></span><br><span class="line">oozie.wf.application.path=$&#123;nameNode&#125;/user/$&#123;user.name&#125;/$&#123;examplesRoot&#125;/shell</span><br><span class="line">EXEC=p1.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> workflow.xml</span></span><br><span class="line">&lt;exec&gt;$&#123;EXEC&#125;&lt;/exec&gt;</span><br><span class="line">&lt;!-- &lt;argument&gt;my_output=Hello Oozie&lt;/argument&gt; --&gt; </span><br><span class="line">&lt;file&gt;/user/machine/oozie-apps/shell/$&#123;EXEC&#125;#$&#123;EXEC&#125;&lt;/file&gt;</span><br><span class="line">&lt;capture-output/&gt;</span><br><span class="line"></span><br><span class="line">&lt;ok to="end"/&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删掉check-output节点</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 上传任务配置</span></span><br><span class="line">hadoop fs -put oozie-apps/ /user/machine</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行任务</span></span><br><span class="line">bin/oozie job -oozie http://mxxcentos7:11000/oozie -config oozie-apps/shell/job.properties -run</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 再次刷新11000页面，发现有一个任务正在执行，过了一会儿执行失败了</span></span><br><span class="line">点开查看失败原因：</span><br><span class="line"><span class="meta">#</span><span class="bash"> UnsupportedOperationException: Accessing <span class="built_in">local</span> file system is not allowed</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> https://stackoverflow.com/questions/54945345/oozie-s3-as-job-folder</span></span><br><span class="line">rm org/apache/hadoop/fs/RawLocalFileSystem.class</span><br><span class="line"><span class="meta">#</span><span class="bash"> I solved this by deleting RawLocalFilesystem.class from oozie WEB-INF/classes and restarted oozie. </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解决！</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Main class [org.apache.oozie.action.hadoop.ShellMain], <span class="built_in">exit</span> code [1]</span></span><br><span class="line">查看yarn-ui, 看到historyserver的日志，报错如下：</span><br><span class="line"><span class="meta">#</span><span class="bash"> ./p1.sh:行2: /sbin/date: 没有那个文件或目录</span></span><br><span class="line">原因是p1.sh写错了，将/sbin/date 改为 date</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">date &gt; /home/machine/p1.log</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重新上传一下</span></span><br><span class="line">hadoop fs -rm -r /user/machine/oozie-apps/shell/p1.sh</span><br><span class="line">hadoop fs -put ./oozie-apps/shell/p1.sh /user/machine/oozie-apps/shell/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重新提交任务</span></span><br><span class="line">bin/oozie job -oozie http://mxxcentos7:11000/oozie -config oozie-apps/shell/job.properties -run</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Oozie查看，成功执行！！</span></span><br><span class="line">cat /home/machine/p1.log </span><br><span class="line"><span class="meta">#</span><span class="bash"> 2019年 10月 16日 星期三 15:14:10 CST</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 总结</span></span><br><span class="line">整个任务调度是yarn, 他会随机选一个NM执行任务(可以在yarn-ui上找到)，然后在该NM上输出p1.log</span><br><span class="line">能指定p1.log输出的节点吗？修改p1.sh脚本，直接登录到那个节点去执行</span><br><span class="line">yarn historyserver可以查错</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 杀死某个任务</span></span><br><span class="line">bin/oozie job -oozie http://hadoop101:11000/oozie -kill 0000004-170425105153692-oozie-z-W</span><br></pre></td></tr></table></figure></div>



<h2 id="案例二-Oozie-逻辑调度执行多个-Job"><a href="#案例二-Oozie-逻辑调度执行多个-Job" class="headerlink" title="案例二: Oozie 逻辑调度执行多个 Job"></a>案例二: Oozie 逻辑调度执行多个 Job</h2><p>目标:使用 Oozie 执行多个 Job 调度，先执行p1.sh，成功后再执行p2.sh</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 编写脚本p2.sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">date &gt; /home/machine/p2.log</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改job.properties</span></span><br><span class="line">EXEC1=p1.sh</span><br><span class="line">EXEC2=p2.sh</span><br></pre></td></tr></table></figure></div>

<p>修改workflow.xml</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"shell-node1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">shell</span> <span class="attr">xmlns</span>=<span class="string">"uri:oozie:shell-action:0.2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">job-tracker</span>&gt;</span>$&#123;jobTracker&#125;<span class="tag">&lt;/<span class="name">job-tracker</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name-node</span>&gt;</span>$&#123;nameNode&#125;<span class="tag">&lt;/<span class="name">name-node</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapred.job.queue.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;queueName&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">exec</span>&gt;</span>$&#123;EXEC1&#125;<span class="tag">&lt;/<span class="name">exec</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;argument&gt;my_output=Hello Oozie&lt;/argument&gt; --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">file</span>&gt;</span>/user/machine/oozie-apps/shell/$&#123;EXEC1&#125;#$&#123;EXEC1&#125;<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">capture-output</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">shell</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ok</span> <span class="attr">to</span>=<span class="string">"shell-node2"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">error</span> <span class="attr">to</span>=<span class="string">"fail"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"shell-node2"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">shell</span> <span class="attr">xmlns</span>=<span class="string">"uri:oozie:shell-action:0.2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">job-tracker</span>&gt;</span>$&#123;jobTracker&#125;<span class="tag">&lt;/<span class="name">job-tracker</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name-node</span>&gt;</span>$&#123;nameNode&#125;<span class="tag">&lt;/<span class="name">name-node</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapred.job.queue.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;queueName&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">exec</span>&gt;</span>$&#123;EXEC2&#125;<span class="tag">&lt;/<span class="name">exec</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;argument&gt;my_output=Hello Oozie&lt;/argument&gt; --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">file</span>&gt;</span>/user/machine/oozie-apps/shell/$&#123;EXEC2&#125;#$&#123;EXEC2&#125;<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">capture-output</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">shell</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ok</span> <span class="attr">to</span>=<span class="string">"end"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">error</span> <span class="attr">to</span>=<span class="string">"fail"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>重新上传，执行</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop fs -rm -r /user/machine/oozie-apps/shell/*</span><br><span class="line">hadoop fs -put ./oozie-apps/shell/* /user/machine/oozie-apps/shell/</span><br><span class="line">bin/oozie job -oozie http://mxxcentos7:11000/oozie -config oozie-apps/shell/job.properties -run</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> job dag可以看到流程图</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> yarn-ui上提交了两个任务</span></span><br><span class="line">cat /home/machine/p1.log </span><br><span class="line">2019年 10月 16日 星期三 16:11:07 CST</span><br><span class="line">cat /home/machine/p2.log </span><br><span class="line">2019年 10月 16日 星期三 16:11:28 CST</span><br></pre></td></tr></table></figure></div>



<h2 id="案例三-Oozie-调度-MapReduce-任务"><a href="#案例三-Oozie-调度-MapReduce-任务" class="headerlink" title="案例三: Oozie 调度 MapReduce 任务"></a>案例三: Oozie 调度 MapReduce 任务</h2><p>1)找到一个可以运行的 mapreduce 任务的 jar 包(可以用官方的，也可以是自己写的)<br>2)拷贝官方模板到 oozie-apps</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 测试一下 wordcount 在 yarn 中的运行</span></span><br><span class="line">touch wordcount.txt</span><br><span class="line">hadoop oozie spark</span><br><span class="line">hive hbase </span><br><span class="line"></span><br><span class="line">hadoop fs -put wordcount.txt /</span><br><span class="line">yarn jar $HADOOP_HOME/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.6.0-cdh5.16.1.jar wordcount /wordcount.txt /out</span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">history</span>-Configuration能查到当前jar包所有配置</span></span><br><span class="line">mapred.mapper.new-api	true</span><br><span class="line">mapreduce.job.map.class	org.apache.hadoop.examples.WordCount$TokenizerMapper</span><br><span class="line"><span class="meta">#</span><span class="bash"> 以上配置对应workflow.xml的配置</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 拷贝官方模板到 oozie-apps</span></span><br><span class="line">cp -r ./examples/apps/map-reduce/ ./oozie-apps/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改job.properties</span></span><br><span class="line">nameNode=hdfs://mxxcentos7:9000</span><br><span class="line">jobTracker=mxxcentos7:8032</span><br><span class="line">queueName=default</span><br><span class="line">examplesRoot=oozie-apps</span><br><span class="line"></span><br><span class="line">oozie.wf.application.path=$&#123;nameNode&#125;/user/$&#123;user.name&#125;/$&#123;examplesRoot&#125;/map-reduce/workflow.xml</span><br><span class="line">outputDir=map-reduce</span><br></pre></td></tr></table></figure></div>

<p>修改workflow.xml (修改configuration节点里的内容)</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">workflow-app</span> <span class="attr">xmlns</span>=<span class="string">"uri:oozie:workflow:0.2"</span> <span class="attr">name</span>=<span class="string">"map-reduce-wf"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">start</span> <span class="attr">to</span>=<span class="string">"mr-node"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"mr-node"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map-reduce</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">job-tracker</span>&gt;</span>$&#123;jobTracker&#125;<span class="tag">&lt;/<span class="name">job-tracker</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name-node</span>&gt;</span>$&#123;nameNode&#125;<span class="tag">&lt;/<span class="name">name-node</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prepare</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 是否提前删除输出路径 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">delete</span> <span class="attr">path</span>=<span class="string">"$&#123;nameNode&#125;/user/$&#123;wf:user()&#125;/$&#123;examplesRoot&#125;/output-data/$&#123;outputDir&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">prepare</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapred.job.queue.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;queueName&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 调度mr任务时，使用新的api --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapred.mapper.new-api<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapred.reducer.new-api<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 指定job的key/value输出类型 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.job.output.key.class<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.hadoop.io.Text<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.job.output.value.class<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.hadoop.io.IntWritable<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 指定输入/输出路径 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapred.input.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/wordcount.txt<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapred.output.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/output/<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 指定Map类/Reduce类 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.job.map.class<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.hadoop.examples.WordCount$TokenizerMapper<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.job.reduce.class<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.hadoop.examples.WordCount$IntSumReducer<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapred.map.tasks<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                </span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map-reduce</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ok</span> <span class="attr">to</span>=<span class="string">"end"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">error</span> <span class="attr">to</span>=<span class="string">"fail"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">kill</span> <span class="attr">name</span>=<span class="string">"fail"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">message</span>&gt;</span>Map/Reduce failed, error message[$&#123;wf:errorMessage(wf:lastErrorNode())&#125;]<span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">kill</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">end</span> <span class="attr">name</span>=<span class="string">"end"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">workflow-app</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>继续</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 拷贝待执行的 jar 包到 map-reduce 的 lib 目录下</span></span><br><span class="line">rm -rf ./oozie-apps/map-reduce/lib/*</span><br><span class="line">cp $HADOOP_HOME/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.6.0-cdh5.16.1.jar ./oozie-apps/map-reduce/lib/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 上传配置好的 app 文件夹到 HDFS</span></span><br><span class="line">hadoop fs -put ./oozie-apps/map-reduce/ /user/machine/oozie-apps/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行任务</span></span><br><span class="line">bin/oozie job -oozie http://mxxcentos7:11000/oozie -config oozie-apps/map-reduce/job.properties -run</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 成功！！</span></span><br><span class="line"></span><br><span class="line">核心：要拿到workflow.xml的配置属性</span><br></pre></td></tr></table></figure></div>



<h2 id="案例四-Oozie-定时任务-循环任务"><a href="#案例四-Oozie-定时任务-循环任务" class="headerlink" title="案例四: Oozie 定时任务/循环任务"></a>案例四: Oozie 定时任务/循环任务</h2><p>目标:Coordinator 周期性调度任务</p>
<p>每5分钟进行p3.sh</p>
<p>修改时区</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 保证时区是+0800</span></span><br><span class="line">date -R</span><br><span class="line">Wed, 16 Oct 2019 17:21:08 +0800</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置 oozie-site.xml 文件</span></span><br><span class="line">&lt;!-- 修改时区 --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">	&lt;name&gt;oozie.processing.timezone&lt;/name&gt;</span><br><span class="line">	&lt;value&gt;GMT+0800&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改 js 框架中的关于时间设置的代码</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> /oozie-server/webapps/oozie/oozie-console.js</span></span><br><span class="line">function getTimeZone() &#123;</span><br><span class="line">    Ext.state.Manager.setProvider(new Ext.state.CookieProvider());</span><br><span class="line">    return Ext.state.Manager.get("TimezoneId","GMT+0800");</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启 oozie 服务，并重启浏览器(一定要注意清除缓存)</span></span><br><span class="line">bin/oozied.sh stop</span><br><span class="line">bin/oozied.sh start</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 成功！！</span></span><br></pre></td></tr></table></figure></div>

<p>拷贝官方模板配置定时任务</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp -r examples&#x2F;apps&#x2F;cron&#x2F; .&#x2F;oozie-apps&#x2F;</span><br></pre></td></tr></table></figure></div>

<p>修改模板 job.properties 和 coordinator.xml 以及 workflow.xml</p>
<p>job.properties</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">properties</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">nameNode</span>=<span class="string">hdfs://mxxcentos7:9000</span></span><br><span class="line"><span class="attr">jobTracker</span>=<span class="string">mxxcentos7:8032</span></span><br><span class="line"><span class="attr">queueName</span>=<span class="string">default</span></span><br><span class="line"><span class="attr">examplesRoot</span>=<span class="string">oozie-apps</span></span><br><span class="line"></span><br><span class="line"><span class="meta">oozie.coord.application.path</span>=<span class="string">$&#123;nameNode&#125;/user/$&#123;user.name&#125;/$&#123;examplesRoot&#125;/cron</span></span><br><span class="line"><span class="comment"># start:必须设置为未来时间，否则任务失败</span></span><br><span class="line"><span class="attr">start</span>=<span class="string">2019-10-16T18:20Z</span></span><br><span class="line"><span class="attr">end</span>=<span class="string">2019-10-16T18:50Z</span></span><br><span class="line"><span class="attr">workflowAppUri</span>=<span class="string">$&#123;nameNode&#125;/user/$&#123;user.name&#125;/$&#123;examplesRoot&#125;/cron</span></span><br><span class="line"></span><br><span class="line"><span class="attr">EXEC3</span>=<span class="string">p3.sh</span></span><br></pre></td></tr></table></figure></div>

<p>coordinator.xml</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	修改的地方：</span></span><br><span class="line"><span class="comment">	timezone="GMT+0800"</span></span><br><span class="line"><span class="comment">	frequency="$&#123;coord:minutes(5)&#125;"	最少就是5min</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure></div>

<p>workflow.xml</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">workflow-app</span> <span class="attr">xmlns</span>=<span class="string">"uri:oozie:workflow:0.5"</span> <span class="attr">name</span>=<span class="string">"one-op-wf"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">start</span> <span class="attr">to</span>=<span class="string">"p3-shell-node"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"p3-shell-node"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">shell</span> <span class="attr">xmlns</span>=<span class="string">"uri:oozie:shell-action:0.2"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">job-tracker</span>&gt;</span>$&#123;jobTracker&#125;<span class="tag">&lt;/<span class="name">job-tracker</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name-node</span>&gt;</span>$&#123;nameNode&#125;<span class="tag">&lt;/<span class="name">name-node</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapred.job.queue.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;queueName&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exec</span>&gt;</span>$&#123;EXEC3&#125;<span class="tag">&lt;/<span class="name">exec</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>/user/machine/oozie-apps/cron/$&#123;EXEC3&#125;#$&#123;EXEC3&#125;<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;argument&gt;my_output=Hello Oozie&lt;/argument&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">capture-output</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">shell</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ok</span> <span class="attr">to</span>=<span class="string">"end"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">error</span> <span class="attr">to</span>=<span class="string">"fail"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">kill</span> <span class="attr">name</span>=<span class="string">"fail"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">message</span>&gt;</span>Shell action failed, errormessage[$&#123;wf:errorMessage(wf:lastErrorNode())&#125;]<span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">kill</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">kill</span> <span class="attr">name</span>=<span class="string">"fail-output"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">message</span>&gt;</span>Incorrect output, expected [Hello Oozie] but was [$&#123;wf:actionData('shell-node')['my_output']&#125;]<span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">kill</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">end</span> <span class="attr">name</span>=<span class="string">"end"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">workflow-app</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>p3.sh</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi ./oozie-apps/cron/p3.sh</span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">date &gt; /home/machine/p3.log</span><br></pre></td></tr></table></figure></div>

<p>上传/执行</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hadoop fs -put .&#x2F;oozie-apps&#x2F;cron&#x2F; &#x2F;user&#x2F;machine&#x2F;oozie-apps&#x2F;</span><br><span class="line">bin&#x2F;oozie job -oozie http:&#x2F;&#x2F;mxxcentos7:11000&#x2F;oozie -config oozie-apps&#x2F;cron&#x2F;job.properties -run</span><br></pre></td></tr></table></figure></div>



<h1 id="常见问题总结"><a href="#常见问题总结" class="headerlink" title="常见问题总结"></a>常见问题总结</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果 bin&#x2F;oozied.sh stop 无法关闭，则可以使用 kill -9 [pid]，之后 oozie-server&#x2F;temp&#x2F;xxx.pid 文 件一定要删除。</span><br><span class="line"></span><br><span class="line">Oozie 重新打包时，一定要注意先关闭进程，删除对应文件夹下面的 pid 文件。</span><br><span class="line"></span><br><span class="line">JobHistoryServer 必须开启</span><br><span class="line"></span><br><span class="line">在本地修改完成的 job 配置，必须重新上传到 HDFS。</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>大数据分布式</category>
        <category>任务管理</category>
      </categories>
      <tags>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>Hbase-案例</title>
    <url>/2019/10/08/20191008134811972/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>参考：<a href="https://www.bilibili.com/video/av65548392" target="_blank" rel="noopener">https://www.bilibili.com/video/av65548392</a></p>
</blockquote>
<p>[TOC]</p>
<h1 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h1><p>表结构分析</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">微博内容表</span><br><span class="line">人+当前时间戳</span><br><span class="line"></span><br><span class="line">关注表</span><br><span class="line">粉丝，普通人按列存就行了。如果是流量号，几十万，可以采用其他存储方式。</span><br><span class="line"></span><br><span class="line">初始化页面表</span><br><span class="line">存储A的最近关注B,C,D,E，和对应关注人的最近几条微博</span><br></pre></td></tr></table></figure></div>

<p>表结构</p>
<a href="/2019/10/08/20191008134811972/屏幕快照 2019-10-08 下午3.19.44.png" data-fancybox="group" data-caption="屏幕快照 2019-10-08 下午3.19.44" class="fancybox"><img alt="屏幕快照 2019-10-08 下午3.19.44" style="zoom:70%;" title="屏幕快照 2019-10-08 下午3.19.44" data-src="/2019/10/08/20191008134811972/屏幕快照 2019-10-08 下午3.19.44.png" class="lazyload"></a>



<p>业务：增/删微博、关注/取关用户、查看微博详情…</p>
<h1 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h1><h2 id="项目架构"><a href="#项目架构" class="headerlink" title="项目架构"></a>项目架构</h2><p>…</p>
<h2 id="HBaseUtil"><a href="#HBaseUtil" class="headerlink" title="HBaseUtil"></a>HBaseUtil</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> mxx.demoWeibo.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> mxx.demoWeibo.constants.Constans;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.Admin;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.Connection;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HBaseUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 工具类不要单例对象</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建命名空间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createNameSpace</span><span class="params">(String nameSpace)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取connet对象--常量类</span></span><br><span class="line">        Connection connection = ConnectionFactory.createConnection(Constans.CONFIGURATION);</span><br><span class="line">        Admin admin = connection.getAdmin();</span><br><span class="line"></span><br><span class="line">        NamespaceDescriptor namespaceDescriptor = NamespaceDescriptor.create(nameSpace).build();</span><br><span class="line">        admin.createNamespace(namespaceDescriptor);</span><br><span class="line"></span><br><span class="line">        admin.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断表是否存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isTableExist</span><span class="params">(String tableName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Connection connection = ConnectionFactory.createConnection(Constans.CONFIGURATION);</span><br><span class="line">        Admin admin = connection.getAdmin();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> exists = admin.tableExists(TableName.valueOf(tableName));</span><br><span class="line"></span><br><span class="line">        admin.close();</span><br><span class="line">        connection.close();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> exists;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">creteTable</span><span class="params">(String tableName,<span class="keyword">int</span> versions, String... cfs)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(cfs.length&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">            log.error(<span class="string">"请设置列蔟信息！！！"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(isTableExist(tableName))&#123;</span><br><span class="line">            log.error(<span class="string">"&#123;&#125;表已存在"</span>,tableName);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Connection connection = ConnectionFactory.createConnection(Constans.CONFIGURATION);</span><br><span class="line">        Admin admin = connection.getAdmin();</span><br><span class="line"></span><br><span class="line">        HTableDescriptor hTableDescriptor = <span class="keyword">new</span> HTableDescriptor(TableName.valueOf(tableName));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String cf : cfs) &#123;</span><br><span class="line">            HColumnDescriptor hColumnDescriptor = <span class="keyword">new</span> HColumnDescriptor(cf);</span><br><span class="line">            hColumnDescriptor.setMaxVersions(versions);</span><br><span class="line">            hTableDescriptor.addFamily(hColumnDescriptor);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        admin.createTable(hTableDescriptor);</span><br><span class="line"></span><br><span class="line">        admin.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>测试…</p>
<h2 id="定义常量"><a href="#定义常量" class="headerlink" title="定义常量"></a>定义常量</h2><p>表、命名空间、列蔟</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> mxx.demoWeibo.constants;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.HBaseConfiguration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Constans</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// HBase配置信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Configuration CONFIGURATION = HBaseConfiguration.create();</span><br><span class="line">    <span class="comment">// 命名空间</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String NAMESPACE = <span class="string">"weibo"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 内容表</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String CONTENT_TABLE = <span class="string">"weibo:content"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String CONTENT_TABLE_CF = <span class="string">"info"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> CONTENT_TABLE_VERSIONS = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关系表</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String RELATION_TABLE = <span class="string">"weibo:relation"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String RELATION_TABLE_CF1 = <span class="string">"attends"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String RELATION_TABLE_CF2 = <span class="string">"fans"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> RELATION_TABLE_VERSIONS = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 收件箱表</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String INBOX_TABLE = <span class="string">"weibo:inbox"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String INBOX_TABLE_CF = <span class="string">"info"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> INBOX_TABLE_VERSIONS = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="发布微博"><a href="#发布微博" class="headerlink" title="发布微博"></a>发布微博</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发布微博</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">publishWeiBo</span><span class="params">(String uid, String content)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ----------修改内容表--------------</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 生产环境可以用连接池</span></span><br><span class="line">  Connection connection = ConnectionFactory.createConnection(Constans.CONFIGURATION);</span><br><span class="line">  <span class="comment">// 操作内容表</span></span><br><span class="line">  Table contentTable = connection.getTable(TableName.valueOf(Constans.CONTENT_TABLE));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">long</span> ts = System.currentTimeMillis();</span><br><span class="line">  String rowKey = uid +<span class="string">"_"</span>+ ts;</span><br><span class="line"></span><br><span class="line">  Put contentPut = <span class="keyword">new</span> Put(Bytes.toBytes(rowKey));</span><br><span class="line">  contentPut.addColumn(Bytes.toBytes(Constans.CONTENT_TABLE_CF),Bytes.toBytes(<span class="string">"content"</span>),Bytes.toBytes(content));</span><br><span class="line">  contentTable.put(contentPut);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// -----------操作收件箱表-------------</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">            修改初始页面表（遍历每一个关注了A的用户，修改其页面表）</span></span><br><span class="line"><span class="comment">            先从关系表得到A的所有粉丝id，再遍历收件箱表里的id, 修改info里的内容，将新发布加入列表（使用list批量提交）</span></span><br><span class="line"><span class="comment">            有可能没粉丝，就不用改表，这里要判断</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取当前发布人的fans列蔟数据</span></span><br><span class="line">  Table relationTable = connection.getTable(TableName.valueOf(Constans.RELATION_TABLE));</span><br><span class="line">  Get relationGet = <span class="keyword">new</span> Get(Bytes.toBytes(uid));</span><br><span class="line">  relationGet.addFamily(Bytes.toBytes(Constans.RELATION_TABLE_CF2));</span><br><span class="line">  Result relationResult = relationTable.get(relationGet);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建集合，存放put对象。</span></span><br><span class="line">  List&lt;Put&gt; inboxPuts = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">  <span class="keyword">for</span> (Cell relationCell : relationResult.rawCells()) &#123;</span><br><span class="line">    <span class="comment">// 构建收件箱的put对象</span></span><br><span class="line">    Put inboxPut = <span class="keyword">new</span> Put(CellUtil.cloneQualifier(relationCell));</span><br><span class="line">    <span class="comment">// 更新最新发布</span></span><br><span class="line">    inboxPut.addColumn(Bytes.toBytes(Constans.INBOX_TABLE_CF),</span><br><span class="line">                       Bytes.toBytes(uid),</span><br><span class="line">                       Bytes.toBytes(rowKey));</span><br><span class="line">    inboxPuts.add(inboxPut);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断是否有粉丝</span></span><br><span class="line">  <span class="keyword">if</span>(inboxPuts.size()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="comment">// 获取收件箱对象</span></span><br><span class="line">    Table inboxTable = connection.getTable(TableName.valueOf(Constans.INBOX_TABLE));</span><br><span class="line">    inboxTable.put(inboxPuts);</span><br><span class="line"></span><br><span class="line">    inboxTable.close();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// close</span></span><br><span class="line">  relationTable.close();</span><br><span class="line">  contentTable.close();</span><br><span class="line">  connection.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="关注用户"><a href="#关注用户" class="headerlink" title="关注用户"></a>关注用户</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addAttends</span><span class="params">(String uid, String... attends)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        批量/单个 关注</span></span><br><span class="line"><span class="comment">        1、关系表。a-attends-bcd,  轮询b,c,d,fans add a</span></span><br><span class="line"><span class="comment">        2、首页表。a-add-b, add b的最近微博rowkey</span></span><br><span class="line"><span class="comment">        3、内容表。b的最近微博从content表拿到的</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 校验</span></span><br><span class="line">    <span class="keyword">if</span>(attends.length&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">        log.error(<span class="string">"请选择待关注的人！！！"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ------------关系表----------------</span></span><br><span class="line">    Connection connection = ConnectionFactory.createConnection(Constans.CONFIGURATION);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建connect table</span></span><br><span class="line">    Table relationTable = connection.getTable(TableName.valueOf(Constans.RELATION_TABLE));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建list&lt;put&gt;</span></span><br><span class="line">    List&lt;Put&gt; relationPuts = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建操作者的 put</span></span><br><span class="line">    Put uidPut = <span class="keyword">new</span> Put(Bytes.toBytes(uid));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环创建被关注者的 put</span></span><br><span class="line">    <span class="keyword">for</span> (String attend : attends) &#123;</span><br><span class="line">        <span class="comment">// 给操作者的 put赋值</span></span><br><span class="line">        uidPut.addColumn(Bytes.toBytes(Constans.RELATION_TABLE_CF1),</span><br><span class="line">                Bytes.toBytes(attend),</span><br><span class="line">                Bytes.toBytes(attend));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建被关注者的put</span></span><br><span class="line">        Put attendPut = <span class="keyword">new</span> Put(Bytes.toBytes(attend));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 给被关注者的put赋值</span></span><br><span class="line">        attendPut.addColumn(Bytes.toBytes(Constans.RELATION_TABLE_CF2),</span><br><span class="line">                Bytes.toBytes(uid),</span><br><span class="line">                Bytes.toBytes(uid));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将被关注者put放入集合</span></span><br><span class="line">        relationPuts.add(attendPut);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将操作者put对象添加到集合</span></span><br><span class="line">    relationPuts.add(uidPut);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行用户关系表插入数据</span></span><br><span class="line">    relationTable.put(relationPuts);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ------------首页表----------------</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        bcd都没有发布过wb</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取wb内容表对象</span></span><br><span class="line">    Table contentTable = connection.getTable(TableName.valueOf(Constans.CONTENT_TABLE));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建inbox的put对象</span></span><br><span class="line">    Put inboxPut = <span class="keyword">new</span> Put(Bytes.toBytes(uid));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环attends,获取每个被关注者近期发布的微博</span></span><br><span class="line">    <span class="keyword">for</span> (String attend : attends) &#123;</span><br><span class="line">        <span class="comment">// 获取当前被关注者近期发布的微博</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 先获取当前被关注者所有发布的微博(是否可优化)</span></span><br><span class="line">        <span class="comment">// scan start: uid_     stop: uid|</span></span><br><span class="line">        Scan attendScan = <span class="keyword">new</span> Scan(Bytes.toBytes(attend + <span class="string">"_"</span>), Bytes.toBytes(attend + <span class="string">"|"</span>));</span><br><span class="line">        ResultScanner contentResultScanner = contentTable.getScanner(attendScan);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对获取的集合遍历</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            取某个被专注者最新3条wb的逻辑：</span></span><br><span class="line"><span class="comment">                contentResultScanner集合 = 某个被关注者所有的wb</span></span><br><span class="line"><span class="comment">                现在只需取最近3条</span></span><br><span class="line"><span class="comment">                contentResultScanner是按照rowKey排序的，这里的rowKey设计是 uid_time</span></span><br><span class="line"><span class="comment">                所以这里把所有的contentResult都放入inboxPut，</span></span><br><span class="line"><span class="comment">                而inboxTable设计的version=3, 所以最后取出来刚好是3个最新微博id</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            TODO 优化: 某人发布wb过多，就有很多无效插入，如何优化？</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                uid_time, 让time修改成，发布越晚，时间戳越小。999（13个9）- 时间戳</span></span><br><span class="line"><span class="comment">                这样，新发布的就排在扫描Scanner集合的前面了，</span></span><br><span class="line"><span class="comment">                这样就只需要for前3条数据</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            BUG(已解决): inboxPut时间戳是系统服务端传的(inboxPut.addColumn循环完后是在server上统一提交的)，</span></span><br><span class="line"><span class="comment">                造成的效果就是时间戳都一样，这样取出来数据只有1条，而不是3条</span></span><br><span class="line"><span class="comment">                修改：for里面手动传时间戳</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义时间戳</span></span><br><span class="line">        <span class="keyword">long</span> ts = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Result contentResult : contentResultScanner) &#123;</span><br><span class="line">            <span class="comment">// 拿contentResult对应的rowKey</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 给inbox的put赋值</span></span><br><span class="line">            inboxPut.addColumn(Bytes.toBytes(Constans.INBOX_TABLE_CF),</span><br><span class="line">                    Bytes.toBytes(attend),</span><br><span class="line">                    ts++,</span><br><span class="line">                    contentResult.getRow());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断当前的put对象是否null</span></span><br><span class="line">    <span class="keyword">if</span> (!inboxPut.isEmpty())&#123;</span><br><span class="line">        <span class="comment">// 获取inbox对象，插入数据</span></span><br><span class="line">        Table inboxTable = connection.getTable(TableName.valueOf(Constans.INBOX_TABLE));</span><br><span class="line">        inboxTable.put(inboxPut);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭</span></span><br><span class="line">        inboxTable.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// close resource</span></span><br><span class="line">    relationTable.close();</span><br><span class="line">    contentTable.close();</span><br><span class="line">    connection.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="取关用户"><a href="#取关用户" class="headerlink" title="取关用户"></a>取关用户</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deleteAttends</span><span class="params">(String uid, String... dels)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ------------connect表----------------</span></span><br><span class="line"></span><br><span class="line">    Connection connection = ConnectionFactory.createConnection(Constans.CONFIGURATION);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建connect table</span></span><br><span class="line">    Table relationTable = connection.getTable(TableName.valueOf(Constans.RELATION_TABLE));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建集合，存放delete对象</span></span><br><span class="line">    List&lt;Delete&gt; relationDelete = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建操作者的delete对象</span></span><br><span class="line">    Delete uidDelete = <span class="keyword">new</span> Delete(Bytes.toBytes(uid));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环创建被取关者的delete对象</span></span><br><span class="line">    <span class="keyword">for</span> (String del : dels) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 给操作者的delete赋值</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            addColumn有什么问题：A连续关注2次，就只能删除一个版本。</span></span><br><span class="line"><span class="comment">            addColumns能删除所有版本。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        uidDelete.addColumns(Bytes.toBytes(Constans.RELATION_TABLE_CF1),</span><br><span class="line">                Bytes.toBytes(del));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建被取关者的delete</span></span><br><span class="line">        Delete delDelete = <span class="keyword">new</span> Delete(Bytes.toBytes(del));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 给被取关这者delete赋值</span></span><br><span class="line">        delDelete.addColumns(Bytes.toBytes(Constans.RELATION_TABLE_CF2),</span><br><span class="line">                Bytes.toBytes(uid));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将被取关这者delete添加到集合</span></span><br><span class="line">        relationDelete.add(delDelete);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将操作者的delete对象加入集合</span></span><br><span class="line">    relationDelete.add(uidDelete);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行connect表的删除</span></span><br><span class="line">    relationTable.delete(relationDelete);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ------------inbox表----------------</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取inbox对象</span></span><br><span class="line">    Table inboxTable = connection.getTable(TableName.valueOf(Constans.INBOX_TABLE));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建操作者delete</span></span><br><span class="line">    Delete inboxDelete = <span class="keyword">new</span> Delete(Bytes.toBytes(uid));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 给操作者delete循环赋值</span></span><br><span class="line">    <span class="keyword">for</span> (String del : dels) &#123;</span><br><span class="line">        inboxDelete.addColumns(Bytes.toBytes(Constans.INBOX_TABLE_CF),</span><br><span class="line">                Bytes.toBytes(del));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行inbox删除</span></span><br><span class="line">    inboxTable.delete(inboxDelete);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭资源</span></span><br><span class="line">    relationTable.close();</span><br><span class="line">    inboxTable.close();</span><br><span class="line">    connection.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="获取初始化页面数据"><a href="#获取初始化页面数据" class="headerlink" title="获取初始化页面数据"></a>获取初始化页面数据</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getInit</span><span class="params">(String uid)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取connet对象</span></span><br><span class="line">    Connection connection = ConnectionFactory.createConnection(Constans.CONFIGURATION);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取inbox对象</span></span><br><span class="line">    Table inboxTable = connection.getTable(TableName.valueOf(Constans.INBOX_TABLE));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取content对象</span></span><br><span class="line">    Table contentTable = connection.getTable(TableName.valueOf(Constans.CONTENT_TABLE));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建inbox get, 获取数据（设置最大版本）</span></span><br><span class="line">    Get inboxGet = <span class="keyword">new</span> Get(Bytes.toBytes(uid));</span><br><span class="line">    inboxGet.setMaxVersions();</span><br><span class="line">    Result inboxResult = inboxTable.get(inboxGet);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历获取的数据</span></span><br><span class="line">    <span class="keyword">for</span> (Cell inboxCell : inboxResult.rawCells()) &#123;</span><br><span class="line">        <span class="comment">// 构建content get</span></span><br><span class="line">        Get contentGet = <span class="keyword">new</span> Get(CellUtil.cloneValue(inboxCell));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取get 内容</span></span><br><span class="line">        Result contentResult = contentTable.get(contentGet);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解析内容，打印</span></span><br><span class="line">        <span class="keyword">for</span> (Cell contentCell : contentResult.rawCells()) &#123;</span><br><span class="line">            System.out.println(<span class="string">"RK:"</span>+Bytes.toString(CellUtil.cloneRow(contentCell))+</span><br><span class="line">                    <span class="string">",CF:"</span>+Bytes.toString(CellUtil.cloneFamily(contentCell))+</span><br><span class="line">                    <span class="string">",CN:"</span>+Bytes.toString(CellUtil.cloneQualifier(contentCell))+</span><br><span class="line">                    <span class="string">",Value:"</span>+Bytes.toString(CellUtil.cloneValue(contentCell)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭资源</span></span><br><span class="line">    inboxTable.close();</span><br><span class="line">    contentTable.close();</span><br><span class="line">    connection.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="获取某用户所有微博详情"><a href="#获取某用户所有微博详情" class="headerlink" title="获取某用户所有微博详情"></a>获取某用户所有微博详情</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getWeiBo</span><span class="params">(String uid)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 获取connet对象</span></span><br><span class="line">    Connection connection = ConnectionFactory.createConnection(Constans.CONFIGURATION);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取content对象</span></span><br><span class="line">    Table contentTable = connection.getTable(TableName.valueOf(Constans.CONTENT_TABLE));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构建scan对象</span></span><br><span class="line">    Scan contentScan = <span class="keyword">new</span> Scan();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构建过滤器</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        也可以用FilterList(交、并)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RowFilter rowFilter = <span class="keyword">new</span> RowFilter(CompareFilter.CompareOp.EQUAL, <span class="keyword">new</span> SubstringComparator(uid + <span class="string">"_"</span>));</span><br><span class="line">    contentScan.setFilter(rowFilter);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取数据</span></span><br><span class="line">    ResultScanner contentResultScanner = contentTable.getScanner(contentScan);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析打印</span></span><br><span class="line">    <span class="keyword">for</span> (Result contentResult : contentResultScanner) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Cell contentCell : contentResult.rawCells()) &#123;</span><br><span class="line">            System.out.println(<span class="string">"RK:"</span>+Bytes.toString(CellUtil.cloneRow(contentCell))+</span><br><span class="line">                    <span class="string">",CF:"</span>+Bytes.toString(CellUtil.cloneFamily(contentCell))+</span><br><span class="line">                    <span class="string">",CN:"</span>+Bytes.toString(CellUtil.cloneQualifier(contentCell))+</span><br><span class="line">                    <span class="string">",Value:"</span>+Bytes.toString(CellUtil.cloneValue(contentCell)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭资源</span></span><br><span class="line">    contentTable.close();</span><br><span class="line">    connection.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> mxx.demoWeibo.constants.Constans;</span><br><span class="line"><span class="keyword">import</span> mxx.demoWeibo.dao.HBaseDao;</span><br><span class="line"><span class="keyword">import</span> mxx.demoWeibo.utils.HBaseUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestWeibo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建命名空间</span></span><br><span class="line">            HBaseUtil.createNameSpace(Constans.NAMESPACE);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建content表</span></span><br><span class="line">            HBaseUtil.creteTable(Constans.CONTENT_TABLE,</span><br><span class="line">                    Constans.CONTENT_TABLE_VERSIONS,</span><br><span class="line">                    Constans.CONTENT_TABLE_CF);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建relation表</span></span><br><span class="line">            HBaseUtil.creteTable(Constans.RELATION_TABLE,</span><br><span class="line">                    Constans.RELATION_TABLE_VERSIONS,</span><br><span class="line">                    Constans.RELATION_TABLE_CF1,</span><br><span class="line">                    Constans.RELATION_TABLE_CF2);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建inbox表</span></span><br><span class="line">            HBaseUtil.creteTable(Constans.INBOX_TABLE,</span><br><span class="line">                    Constans.INBOX_TABLE_VERSIONS,</span><br><span class="line">                    Constans.INBOX_TABLE_CF);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化</span></span><br><span class="line">        init();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1001发微博</span></span><br><span class="line">        HBaseDao.publishWeiBo(<span class="string">"1001"</span>,<span class="string">"你好，0"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1002关注1001和1003</span></span><br><span class="line">        HBaseDao.addAttends(<span class="string">"1002"</span>, <span class="string">"1001"</span>, <span class="string">"1003"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取1002初始化页面</span></span><br><span class="line">        HBaseDao.getInit(<span class="string">"1002"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"*******111*******"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1003发布3条微博，1001发布2条</span></span><br><span class="line">        HBaseDao.publishWeiBo(<span class="string">"1003"</span>,<span class="string">"你好，1"</span>);</span><br><span class="line">        Thread.sleep(<span class="number">10</span>);</span><br><span class="line">        HBaseDao.publishWeiBo(<span class="string">"1001"</span>,<span class="string">"你好，2"</span>);</span><br><span class="line">        Thread.sleep(<span class="number">10</span>);</span><br><span class="line">        HBaseDao.publishWeiBo(<span class="string">"1003"</span>,<span class="string">"你好，3"</span>);</span><br><span class="line">        Thread.sleep(<span class="number">10</span>);</span><br><span class="line">        HBaseDao.publishWeiBo(<span class="string">"1001"</span>,<span class="string">"你好，4"</span>);</span><br><span class="line">        Thread.sleep(<span class="number">10</span>);</span><br><span class="line">        HBaseDao.publishWeiBo(<span class="string">"1003"</span>,<span class="string">"你好，5"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取1002初始化页面</span></span><br><span class="line">        HBaseDao.getInit(<span class="string">"1002"</span>);</span><br><span class="line">        System.out.println(<span class="string">"*******222*******"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1002取关1003</span></span><br><span class="line">        HBaseDao.deleteAttends(<span class="string">"1002"</span>,<span class="string">"1003"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取1002初始化页面</span></span><br><span class="line">        HBaseDao.getInit(<span class="string">"1002"</span>);</span><br><span class="line">        System.out.println(<span class="string">"*******333*******"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1002再次关注1003</span></span><br><span class="line">        HBaseDao.addAttends(<span class="string">"1002"</span>, <span class="string">"1003"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取1002初始化页面</span></span><br><span class="line">        HBaseDao.getInit(<span class="string">"1002"</span>);</span><br><span class="line">        System.out.println(<span class="string">"*******444*******"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取1001微博详情</span></span><br><span class="line">        HBaseDao.getWeiBo(<span class="string">"1001"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p>查看relation表..</p>
<p>打印结果：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RK:1001_1570766541084,CF:info,CN:content,Value:你好，0</span><br><span class="line">*******111*******</span><br><span class="line">RK:1001_1570766541864,CF:info,CN:content,Value:你好，4</span><br><span class="line">RK:1001_1570766541705,CF:info,CN:content,Value:你好，2</span><br><span class="line">RK:1003_1570766541932,CF:info,CN:content,Value:你好，5</span><br><span class="line">RK:1003_1570766541774,CF:info,CN:content,Value:你好，3</span><br><span class="line">*******222*******</span><br><span class="line">RK:1001_1570766541864,CF:info,CN:content,Value:你好，4</span><br><span class="line">RK:1001_1570766541705,CF:info,CN:content,Value:你好，2</span><br><span class="line">*******333*******</span><br><span class="line">RK:1001_1570766541864,CF:info,CN:content,Value:你好，4</span><br><span class="line">RK:1001_1570766541705,CF:info,CN:content,Value:你好，2</span><br><span class="line">RK:1003_1570766541932,CF:info,CN:content,Value:你好，5</span><br><span class="line">RK:1003_1570766541774,CF:info,CN:content,Value:你好，3</span><br><span class="line">*******444*******</span><br><span class="line">RK:1001_1570766541084,CF:info,CN:content,Value:你好，0</span><br><span class="line">RK:1001_1570766541705,CF:info,CN:content,Value:你好，2</span><br><span class="line">RK:1001_1570766541864,CF:info,CN:content,Value:你好，4</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>大数据分布式</category>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>Hbase-进阶</title>
    <url>/2019/09/17/20190917204715525/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>参考：<a href="https://www.bilibili.com/video/av65548392" target="_blank" rel="noopener">https://www.bilibili.com/video/av65548392</a></p>
</blockquote>
<p>[TOC]</p>
<h1 id="Hbase数据模型"><a href="#Hbase数据模型" class="headerlink" title="Hbase数据模型"></a>Hbase数据模型</h1><h2 id="Hbase逻辑结构"><a href="#Hbase逻辑结构" class="headerlink" title="Hbase逻辑结构"></a>Hbase逻辑结构</h2><p>逻辑上，Hbase看起来像关系型数据库，存在一个表中。</p>
<p>但Hbase底层是k-v形式的，非关系型的。（列蔟）</p>
<h2 id="Hbase物理存储结构"><a href="#Hbase物理存储结构" class="headerlink" title="Hbase物理存储结构"></a>Hbase物理存储结构</h2><a href="/2019/09/17/20190917204715525/屏幕快照 2019-09-18 下午11.01.06.png" data-fancybox="group" data-caption="屏幕快照 2019-09-18 下午11.01.06" class="fancybox"><img alt="屏幕快照 2019-09-18 下午11.01.06" style="zoom:50%;" title="屏幕快照 2019-09-18 下午11.01.06" data-src="/2019/09/17/20190917204715525/屏幕快照 2019-09-18 下午11.01.06.png" class="lazyload"></a>



<p>一个Store是一个列蔟，不同的Store放在不同的文件夹里（类似Hive分区）。</p>
<p>memstore刷写一次，就形成一个文件StoreFile;</p>
<h2 id="HBase数据结构"><a href="#HBase数据结构" class="headerlink" title="HBase数据结构"></a>HBase数据结构</h2><h3 id="RowKey"><a href="#RowKey" class="headerlink" title="RowKey"></a>RowKey</h3><p>与 nosql 数据库们一样,RowKey 是用来检索记录的主键。访问 HBASE table 中的行，只 有三种方式: </p>
<p>1.通过单个 RowKey 访问</p>
<p>2.通过 RowKey 的 range(正则) </p>
<p>3.全表扫描</p>
<p>在 HBASE 内部，RowKey 保存为字节数组。存储时，数据按照 RowKey 的字典序(byte order)排序存储。设计RowKey 时，要充分排序存储这个特性，将经常一起读取的行存储放到一起。(位置相关性) </p>
<h3 id="Column-Family"><a href="#Column-Family" class="headerlink" title="Column Family"></a>Column Family</h3><p>列族是表的 schema 的一部 分(而列不是)，必须在使用表之前定义。</p>
<p>列名都以列族作为前缀。例如 courses:history，courses:math都属于 courses 这个列族。</p>
<h3 id="Cell"><a href="#Cell" class="headerlink" title="Cell"></a>Cell</h3><p>由{rowkey, column Family:columu, version} 唯一确定的单元。cell 中的数据是没有类型的，全部是字节码形式存储。</p>
<h3 id="Time-Stamp"><a href="#Time-Stamp" class="headerlink" title="Time Stamp"></a>Time Stamp</h3><p>版本通过时间戳来索引。</p>
<p>赋值：时间戳可以由 HBASE(在数据写入时自动 )赋值，此时时间戳是精确到毫秒 的当前系统时间。时间戳<br>也可以由客户显式赋值。</p>
<p>唯一性：如果应用程序要避免数据版 本冲突，就必须自己生成具有唯一性的时间戳。每个 cell 中，不同版本的数据按照时间倒序排序，即最新的数据排在最前面。</p>
<p>版本回收：为了避免数据存在过多版本造成的的管理 (包括存贮和索引)负担，HBASE 提供 了两<br>种数据版本回收方式。一是保存数据的最后 n 个版本，二是保存最近一段 时间内的版本(比<br>如最近七天)。用户可以针对每个列族进行设置。</p>
<h3 id="Name-Space"><a href="#Name-Space" class="headerlink" title="Name Space"></a>Name Space</h3><p>命名空间的结构:</p>
<a href="/2019/09/17/20190917204715525/屏幕快照 2019-09-17 下午8.59.23.png" data-fancybox="group" data-caption="屏幕快照 2019-09-17 下午8.59.23" class="fancybox"><img alt="屏幕快照 2019-09-17 下午8.59.23" style="zoom:50%;" title="屏幕快照 2019-09-17 下午8.59.23" data-src="/2019/09/17/20190917204715525/屏幕快照 2019-09-17 下午8.59.23.png" class="lazyload"></a>

<p>1) Table:表，所有的表都是命名空间的成员，即表必属于某个命名空间，如果没有指定， 则在 default 默认的命名空间中。</p>
<p>2) RegionServer group:一个命名空间包含了默认的 RegionServer Group。</p>
<p>3) Permission:权限，命名空间能够让我们来定义访问控制列表 ACL(Access Control List)。 例如，创建表，读取表，删除，更新等等操作。 </p>
<p>4) Quota:限额，可以强制一个命名空间可包含的 region 的数量。 </p>
<h1 id="HBase原理"><a href="#HBase原理" class="headerlink" title="HBase原理"></a>HBase原理</h1><h2 id="写流程"><a href="#写流程" class="headerlink" title="写流程"></a>写流程</h2><p>Hbase读比写慢。</p>
<a href="/2019/09/17/20190917204715525/屏幕快照 2019-09-18 下午11.29.15.png" data-fancybox="group" data-caption="屏幕快照 2019-09-18 下午11.29.15" class="fancybox"><img alt="屏幕快照 2019-09-18 下午11.29.15" style="zoom:60%;" title="屏幕快照 2019-09-18 下午11.29.15" data-src="/2019/09/17/20190917204715525/屏幕快照 2019-09-18 下午11.29.15.png" class="lazyload"></a>

<p>table表位置信息存在meta表里，所以先找meta表，通过meta表找table表的位置信息。</p>
<p>然后开始写入：</p>
<p>1)Client 向 HregionServer 发送写请求; </p>
<p>HBase 写数据流程 </p>
<p>2)HregionServer 将数据写到 HLog(write ahead log)。为了数据的持久化和恢复; 3)HregionServer 将数据写到内存(MemStore);<br> 4)反馈 Client 写成功。 </p>
<p>看一下如何从zk找到meta位置信息的</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zkCli.sh</span><br><span class="line">ls /hbase</span><br><span class="line">get /hbase/meta-region-server</span><br><span class="line"><span class="meta">#</span><span class="bash"> 看出meta表在hadoop104里。接下来就是请求104去读meta表。</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> scan <span class="string">"hbase:meta"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 发现stu表由102维护的</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 然后客户端去连接102，真正开始写数据（wal-mem）</span></span><br></pre></td></tr></table></figure></div>

<p>写数据流程：源码流程</p>
<p>…</p>
<h2 id="MemStore-Flush"><a href="#MemStore-Flush" class="headerlink" title="MemStore Flush"></a>MemStore Flush</h2><p>文件刷写，从内存到hdfs</p>
<p>刷写时机，可配置，hbase-default.xml</p>
<p>1)当 MemStore 数据达到阈值(默认是 128M，老版本是 64M)，将数据刷到硬盘，将内存<br>中的数据删除，同时删除 HLog 中的历史数据;<br>2)并将数据存储到 HDFS 中;<br>3)在 HLog 中做标记点。</p>
<h2 id="读流程"><a href="#读流程" class="headerlink" title="读流程"></a>读流程</h2><a href="/2019/09/17/20190917204715525/屏幕快照 2019-09-19 下午3.58.01.png" data-fancybox="group" data-caption="屏幕快照 2019-09-19 下午3.58.01" class="fancybox"><img alt="屏幕快照 2019-09-19 下午3.58.01" style="zoom:50%;" title="屏幕快照 2019-09-19 下午3.58.01" data-src="/2019/09/17/20190917204715525/屏幕快照 2019-09-19 下午3.58.01.png" class="lazyload"></a>



<p>一个理解误区：先读内存，内存有就直接返回，不读磁盘了。内存没有才读磁盘，然后写入BlockCache，再返回。</p>
<p>–这个理解是错的。</p>
<p>BlockCache：LRU，存储最近经常读的数据。</p>
<p>案例：在A时间点put/1001/info:name/张三，一个小时后，该数据就已经刷写到磁盘了。这时再put/1001/info:name/李四，但时间戳B是我自己传入的，且B&lt;A。</p>
<p>那我查数据的时候，合理情况下应该查到张三（时间最近的一条数据），但基于这个错误读的理解，返回的肯定是B(还在内存里)。</p>
<hr>
<p>那怎么才能正确返回A呢？</p>
<p>需要把内存和磁盘都读出来做比较。</p>
<p>写代码做实验：略</p>
<p>合理解释：不是先读内存，再读磁盘。而是BlockCache与MemStore一起读的。如果BlockCache有数据，就两个一起做wage合并，比较时间戳，返回时间戳大的那一个。如果BlockCache没数据，就去磁盘读，磁盘读到的数据，放入BlockCache里，再wage，返回时间戳大的。</p>
<p>base读比写慢。因为读也是要等磁盘时间的，而且步骤很多。</p>
<h2 id="StoreFile-Compaction"><a href="#StoreFile-Compaction" class="headerlink" title="StoreFile Compaction"></a>StoreFile Compaction</h2><p>问题引入：如果到了一定时间段，memStore存储还没有满上限，这个时候，也会刷数据到磁盘，每刷一次就是个新文件。所以在写频率小的情况下，会出现很多小文件。因此要做定期合并节约空间。</p>
<a href="/2019/09/17/20190917204715525/屏幕快照 2019-09-19 下午4.13.08.png" data-fancybox="group" data-caption="屏幕快照 2019-09-19 下午4.13.08" class="fancybox"><img alt="屏幕快照 2019-09-19 下午4.13.08" style="zoom:50%;" title="屏幕快照 2019-09-19 下午4.13.08" data-src="/2019/09/17/20190917204715525/屏幕快照 2019-09-19 下午4.13.08.png" class="lazyload"></a>

<p>小合并会把多种时间戳版本都保留，大合并开始删除（覆盖）时间戳小的。</p>
<p>hbase-default.xml。默认7天自动触发大合并，官方建议在生产环境关掉（设置为0），应该在空间时间触发，因为很耗时。</p>
<h2 id="读写扩展"><a href="#读写扩展" class="headerlink" title="读写扩展"></a>读写扩展</h2><p>读写数据可以不要HMaster，但是创建表(元数据操作)必须要HMaster参与。但是客户端就算找master也是通过z k去找的，所以实际上客户端直接打交道的是zk不是Master，因为Master高可用可能会变地址。</p>
<p>所以写客户端代码时，完全不需要HMaster的地址，只需要一个zk地址。</p>
<p>但是没有HMaster工作也不能正常执行：假如region到达一定大小被切分了，切分出来也不会调度到其他节点了。因为切分就是新生成一个Region，需要Master去改元数据，还要master把元数据调度到其他节点。</p>
<p>一个机子，放一个region?</p>
<h2 id="数据真正删除的时间"><a href="#数据真正删除的时间" class="headerlink" title="数据真正删除的时间"></a>数据真正删除的时间</h2><p>大合并的时候会删数据；</p>
<p>flush会删数据；</p>
<p>flush测试：</p>
<p>put 2个版本的数据库后，scan默认只能看到一条，要加VERSIONS查所有数据。</p>
<a href="/2019/09/17/20190917204715525/屏幕快照 2019-09-19 下午4.32.32.png" data-fancybox="group" data-caption="屏幕快照 2019-09-19 下午4.32.32" class="fancybox"><img alt="屏幕快照 2019-09-19 下午4.32.32" style="zoom:40%;" title="屏幕快照 2019-09-19 下午4.32.32" data-src="/2019/09/17/20190917204715525/屏幕快照 2019-09-19 下午4.32.32.png" class="lazyload"></a>

<p>flush 后，再查所有数据，就只剩下一条了。</p>
<a href="/2019/09/17/20190917204715525/屏幕快照 2019-09-19 下午4.34.19.png" data-fancybox="group" data-caption="屏幕快照 2019-09-19 下午4.34.19" class="fancybox"><img alt="屏幕快照 2019-09-19 下午4.34.19" style="zoom:40%;" title="屏幕快照 2019-09-19 下午4.34.19" data-src="/2019/09/17/20190917204715525/屏幕快照 2019-09-19 下午4.34.19.png" class="lazyload"></a>

<p>这时，flush只是把最大的版本刷到磁盘了，其他的版本都删除了。</p>
<hr>
<p>有的时候，flush也删不了：就是flush刷下去一条数据，然后flush又刷下去另一条数据，这时，两条数据不在同一个文件里，所以flush管不了。</p>
<p>总结：flush只管在MemCache里面的合并工作，磁盘的事它管不了。磁盘的合并只有交给major Compaction做。</p>
<p>大合并：</p>
<a href="/2019/09/17/20190917204715525/屏幕快照 2019-09-19 下午4.41.42.png" data-fancybox="group" data-caption="屏幕快照 2019-09-19 下午4.41.42" class="fancybox"><img alt="屏幕快照 2019-09-19 下午4.41.42" style="zoom:50%;" title="屏幕快照 2019-09-19 下午4.41.42" data-src="/2019/09/17/20190917204715525/屏幕快照 2019-09-19 下午4.41.42.png" class="lazyload"></a>



<p>delete后，会什么时候删除标记呢？</p>
<a href="/2019/09/17/20190917204715525/屏幕快照 2019-09-19 下午4.45.54-8882771.png" data-fancybox="group" data-caption="屏幕快照 2019-09-19 下午4.45.54" class="fancybox"><img alt="屏幕快照 2019-09-19 下午4.45.54" style="zoom:40%;" title="屏幕快照 2019-09-19 下午4.45.54" data-src="/2019/09/17/20190917204715525/屏幕快照 2019-09-19 下午4.45.54-8882771.png" class="lazyload"></a>

<p>标记还在。</p>
<a href="/2019/09/17/20190917204715525/屏幕快照 2019-09-19 下午4.46.58.png" data-fancybox="group" data-caption="屏幕快照 2019-09-19 下午4.46.58" class="fancybox"><img alt="屏幕快照 2019-09-19 下午4.46.58" style="zoom:40%;" title="屏幕快照 2019-09-19 下午4.46.58" data-src="/2019/09/17/20190917204715525/屏幕快照 2019-09-19 下午4.46.58.png" class="lazyload"></a>

<p>标记什么时候被删？</p>
<a href="/2019/09/17/20190917204715525/屏幕快照 2019-09-19 下午4.48.13.png" data-fancybox="group" data-caption="屏幕快照 2019-09-19 下午4.48.13" class="fancybox"><img alt="屏幕快照 2019-09-19 下午4.48.13" style="zoom:40%;" title="屏幕快照 2019-09-19 下午4.48.13" data-src="/2019/09/17/20190917204715525/屏幕快照 2019-09-19 下午4.48.13.png" class="lazyload"></a>

<p>说明标记是在major compact时候删的，flush时候不删。为什么？因为flush能管到删除内存的数据，但此时磁盘文件里可能还有历史数据，所以delete要保留标记，再大合并的时候再删。</p>
<h2 id="Region-Split"><a href="#Region-Split" class="headerlink" title="Region Split"></a>Region Split</h2><p>数据合并越来越大，就得做切分。切分也有时机。</p>
<p>一个region最大file大小：10G，如果有列蔟超过这个大小，就切分。</p>
<p>当合并的数据超过时进行拆分，将拆分后的 Region 分配给不同的 HregionServer 管理;<br> 3)当 HregionServer 宕机后，将 HregionServer 上的 hlog 拆分，然后分配给不同的 HregionServer 加载，修改.META.; </p>
<p>4)注意:HLog 会同步到 HDFS。</p>
<p>在生产环境做预分区：建表的时候就规划好分区 （row key:  1-10000，10001-20000）。当数据到达指定大小就按用户自定义去切。</p>
<p>/stu/region1</p>
<p>/stu/region2</p>
<h1 id="HBase-API-操作"><a href="#HBase-API-操作" class="headerlink" title="HBase API 操作"></a>HBase API 操作</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hbase<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hbase-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--很少用，一般client就够了--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hbase<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hbase-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="DDL-DML"><a href="#DDL-DML" class="headerlink" title="DDL/DML"></a>DDL/DML</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> mxx.hbaseDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.util.Bytes;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * DDL:</span></span><br><span class="line"><span class="comment"> * 1.判断表是否存在</span></span><br><span class="line"><span class="comment"> * 2.创建表</span></span><br><span class="line"><span class="comment"> * 3.创建命名空间</span></span><br><span class="line"><span class="comment"> * 4.删除表</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * DML</span></span><br><span class="line"><span class="comment"> * 5.插入数据</span></span><br><span class="line"><span class="comment"> * 6.查数据（get）</span></span><br><span class="line"><span class="comment"> * 7.查数据（scan）</span></span><br><span class="line"><span class="comment"> * 8.删除数据</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * HDFS yarn zookeeper ==&gt; hbase</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAPI</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Admin admin = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Connection connection = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            Configuration configuration = HBaseConfiguration.create();</span><br><span class="line">            configuration.set(<span class="string">"hbase.zookeeper.quorum"</span>,<span class="string">"mxxcentos7"</span>);</span><br><span class="line"></span><br><span class="line">            connection = ConnectionFactory.createConnection(configuration);</span><br><span class="line">            admin = connection.getAdmin();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(admin!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                admin.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(connection!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isTableExist</span><span class="params">(String tableName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> exists = admin.tableExists(TableName.valueOf(tableName));</span><br><span class="line">        <span class="keyword">return</span> exists;<span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createTable</span><span class="params">(String tableName, String... columnFamilys)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(isTableExist(tableName))&#123;</span><br><span class="line">            log.error(tableName+<span class="string">"表已经存在！"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(columnFamilys.length &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">            log.error(<span class="string">"请设置列蔟信息！"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        HTableDescriptor hTableDescriptor = <span class="keyword">new</span> HTableDescriptor(TableName.valueOf(tableName));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String columnFamily : columnFamilys) &#123;</span><br><span class="line">            HColumnDescriptor hColumnDescriptor = <span class="keyword">new</span> HColumnDescriptor(columnFamily);</span><br><span class="line">            hTableDescriptor.addFamily(hColumnDescriptor);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        admin.createTable(hTableDescriptor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dropTable</span><span class="params">(String tableName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!isTableExist(tableName))&#123;</span><br><span class="line">            log.error(<span class="string">"&#123;&#125;表不存在！"</span>, tableName);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        admin.disableTable(TableName.valueOf(tableName));</span><br><span class="line">        admin.deleteTable(TableName.valueOf(tableName));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createNameSpace</span><span class="params">(String nsName)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        NamespaceDescriptor namespaceDescriptor = NamespaceDescriptor.create(nsName).build();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            admin.createNamespace(namespaceDescriptor);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NamespaceExistException e)&#123;</span><br><span class="line">            log.warn(<span class="string">"&#123;&#125;命名空间已存在"</span>,nsName);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">putData</span><span class="params">(String tableName, String rowKey, String cf, String cn, String value)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Table table = connection.getTable(TableName.valueOf(tableName));</span><br><span class="line"></span><br><span class="line">        Put put = <span class="keyword">new</span> Put(Bytes.toBytes(rowKey));</span><br><span class="line">        put.addColumn(Bytes.toBytes(cf), Bytes.toBytes(cn), Bytes.toBytes(value));</span><br><span class="line"></span><br><span class="line">        table.put(put);</span><br><span class="line">        table.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getData</span><span class="params">(String tableName, String rowKey, String cf, String cn)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Table table = connection.getTable(TableName.valueOf(tableName));</span><br><span class="line">        Get get = <span class="keyword">new</span> Get(Bytes.toBytes(rowKey));</span><br><span class="line">        get.addColumn(Bytes.toBytes(cf), Bytes.toBytes(cn));</span><br><span class="line">        <span class="comment">// 获取多个版本数据</span></span><br><span class="line">        get.setMaxVersions(<span class="number">5</span>);</span><br><span class="line">        Result result = table.get(get);</span><br><span class="line">        Cell[] cells = result.rawCells();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Cell cell : cells) &#123;</span><br><span class="line">            String CF = Bytes.toString(CellUtil.cloneFamily(cell));</span><br><span class="line">            String CN = Bytes.toString(CellUtil.cloneQualifier(cell));</span><br><span class="line">            String Value = Bytes.toString(CellUtil.cloneValue(cell));</span><br><span class="line">            System.out.println(<span class="string">"CF: "</span> + CF + <span class="string">","</span> +</span><br><span class="line">                    <span class="string">"CN: "</span> + CN + <span class="string">","</span> +</span><br><span class="line">                    <span class="string">"Value: "</span> + Value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        table.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">scanTable</span><span class="params">(String tableName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Table table = connection.getTable(TableName.valueOf(tableName));</span><br><span class="line">        <span class="comment">// 空参，扫描全表</span></span><br><span class="line">        Scan scan = <span class="keyword">new</span> Scan();</span><br><span class="line">        ResultScanner resultScanner = table.getScanner(scan);</span><br><span class="line">        <span class="keyword">for</span> (Result result : resultScanner) &#123;</span><br><span class="line">            Cell[] cells = result.rawCells();</span><br><span class="line">            <span class="keyword">for</span> (Cell cell : cells) &#123;</span><br><span class="line">                String CF = Bytes.toString(CellUtil.cloneFamily(cell));</span><br><span class="line">                String CN = Bytes.toString(CellUtil.cloneQualifier(cell));</span><br><span class="line">                String Value = Bytes.toString(CellUtil.cloneValue(cell));</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">"CF: "</span> + CF + <span class="string">","</span> +</span><br><span class="line">                        <span class="string">"CN: "</span> + CN + <span class="string">","</span> +</span><br><span class="line">                        <span class="string">"Value: "</span> + Value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        table.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除列、列蔟、row key</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        删除总结：</span></span><br><span class="line"><span class="comment">        rowKey                  deleteFamily    所有版本</span></span><br><span class="line"><span class="comment">        rowKey+cf               deleteFamily    所有版本(传时间戳就是&lt;=t的全部删掉)</span></span><br><span class="line"><span class="comment">        rowKey+cf+cn+addColumns deleteColumn    所有版本(传时间戳就是&lt;=t的全部删掉)</span></span><br><span class="line"><span class="comment">        rowKey+cf+cn+addColumn  delete          删除单个版本(传时间戳就是只是删除该时间戳，不传就是删最新的) 慎用</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        建表的时候尽量用一个版本</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        delete也是一个put操作，put了一个删除标记</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deleteData</span><span class="params">(String tableName,String rowKey, String cf, String cn)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Table table = connection.getTable(TableName.valueOf(tableName));</span><br><span class="line"></span><br><span class="line">        Delete delete = <span class="keyword">new</span> Delete(Bytes.toBytes(rowKey));</span><br><span class="line"><span class="comment">//        delete.addFamily(Bytes.toBytes(cf));    // 删除列蔟</span></span><br><span class="line"><span class="comment">//        delete.addColumn(Bytes.toBytes(cf), Bytes.toBytes(cn));    // 删除单个版本，生产环境慎用</span></span><br><span class="line">        delete.addColumns(Bytes.toBytes(cf), Bytes.toBytes(cn));     <span class="comment">// 删除全部版本</span></span><br><span class="line">        table.delete(delete);</span><br><span class="line">        table.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1</span></span><br><span class="line"><span class="comment">//        System.out.println(isTableExist("stu"));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2</span></span><br><span class="line"><span class="comment">//        createTable("stu2","info1","info2");</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3</span></span><br><span class="line"><span class="comment">//        dropTable("stu2");</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4</span></span><br><span class="line"><span class="comment">//        createNameSpace("mxx");</span></span><br><span class="line"><span class="comment">//        createTable("mxx:stu3","info1","info2");</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5</span></span><br><span class="line"><span class="comment">//        putData("stu2","1001","info2","name","heihei");</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6</span></span><br><span class="line"><span class="comment">//        getData("stu","1002","info","name");</span></span><br><span class="line"><span class="comment">//        System.out.println(isTableExist("stu2"));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 批量添加多个列 | 批量添加多个rowKey</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 7</span></span><br><span class="line"><span class="comment">//        scanTable("stu");</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 8</span></span><br><span class="line">        deleteData(<span class="string">"stu2"</span>, <span class="string">"1001"</span>, <span class="string">"info1"</span>, <span class="string">"name"</span>);</span><br><span class="line">        close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h1 id="与MapReduce交互"><a href="#与MapReduce交互" class="headerlink" title="与MapReduce交互"></a>与MapReduce交互</h1><p>可以实现伴随 HBase 操作的 MapReduce 过程，比如使用MapReduce 将数据从本地文件系统导入到 HBase 的表中，比如从 HBase 中读取一些原始数据后使用 MapReduce 做数据分析。</p>
<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">~/.bash_profile</span><br><span class="line">export HBASE_HOME</span><br><span class="line">export HADOOP_HOME</span><br><span class="line"></span><br><span class="line">hadoop-env.sh 中配置:(注意:在 for 循环之后配)</span><br><span class="line">export HADOOP_CLASSPATH=$HADOOP_CLASSPATH:/home/machine/apps/hbase-1.2.0-cdh5.16.1/lib/*</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启</span></span><br><span class="line">stop-hbase.sh</span><br><span class="line">cd $HADOOP_HOME/sbin </span><br><span class="line">./stop-all.sh</span><br><span class="line">./start-dfs.sh</span><br><span class="line">./start-yarn.sh</span><br><span class="line">hadoop dfsadmin -safemode leave</span><br><span class="line">start-hbase.sh</span><br></pre></td></tr></table></figure></div>



<h2 id="官方案例"><a href="#官方案例" class="headerlink" title="官方案例"></a>官方案例</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd $HBASE_HOME</span><br><span class="line"><span class="meta">#</span><span class="bash"> 1、统计stu表的行数</span></span><br><span class="line">yarn jar lib/hbase-server-1.2.0-cdh5.16.1.jar rowcounter stu</span><br><span class="line"><span class="meta">#</span><span class="bash"> 打印结果</span></span><br><span class="line">org.apache.hadoop.hbase.mapreduce.RowCounter$RowCounterMapper$Counters</span><br><span class="line">		ROWS=2</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 2、使用 MapReduce 将本地数据导入到 HBase</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建fruit.tsv 上传到hdfs</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 建表</span></span><br><span class="line">create "fruit","info"</span><br><span class="line"><span class="meta">#</span><span class="bash"> 导入</span></span><br><span class="line">yarn jar lib/hbase-server-1.3.1.jar</span><br><span class="line">importtsv \</span><br><span class="line">-Dimporttsv.columns=HBASE_ROW_KEY,info:name,info:color fruit \ hdfs://mxxcentos7:9000/user/mxx/fruit/fruit.csv</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看</span></span><br><span class="line">scan "fruit"</span><br></pre></td></tr></table></figure></div>



<h2 id="自定义-MR1"><a href="#自定义-MR1" class="headerlink" title="自定义-MR1"></a>自定义-MR1</h2><p>读取hdfs数据到hive表</p>
<p>demo:</p>
<p>FruitMapper</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> mxx.hbaseDemo.mr1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FruitMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>,<span class="title">LongWritable</span>, <span class="title">Text</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        context.write(key, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>FruitReducer</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> mxx.hbaseDemo.mr1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.Put;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.mapreduce.TableReducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.util.Bytes;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.NullWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    TableReducer&lt;KEYIN, VALUEIN, KEYOUT&gt; extends Reducer&lt;KEYIN, VALUEIN, KEYOUT, Mutation&gt;</span></span><br><span class="line"><span class="comment">    Mutation: put delete increment append</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FruitReducer</span> <span class="keyword">extends</span> <span class="title">TableReducer</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">NullWritable</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*    private String cf1;</span></span><br><span class="line"><span class="comment">    @Override</span></span><br><span class="line"><span class="comment">    protected void setup(Context context) throws IOException, InterruptedException &#123;</span></span><br><span class="line"><span class="comment">        Configuration configuration = context.getConfiguration();</span></span><br><span class="line"><span class="comment">        cf1 = configuration.get("cf1");</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(LongWritable key, Iterable&lt;Text&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Text value : values) &#123;</span><br><span class="line">            String[] fields = value.toString().split(<span class="string">"\t"</span>);</span><br><span class="line">            Put put = <span class="keyword">new</span> Put(Bytes.toBytes(fields[<span class="number">0</span>]));</span><br><span class="line"></span><br><span class="line">            put.addColumn(Bytes.toBytes(<span class="string">"info"</span>), Bytes.toBytes(<span class="string">"name"</span>), Bytes.toBytes(fields[<span class="number">1</span>]));</span><br><span class="line">            put.addColumn(Bytes.toBytes(<span class="string">"info"</span>), Bytes.toBytes(<span class="string">"color"</span>), Bytes.toBytes(fields[<span class="number">2</span>]));</span><br><span class="line"></span><br><span class="line">            context.write(NullWritable.get(), put);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>FruitDriver</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> mxx.hbaseDemo.mr1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.mapreduce.TableMapReduceUtil;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.util.Tool;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.util.ToolRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FruitDriver</span> <span class="keyword">implements</span> <span class="title">Tool</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Configuration configuration = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">run</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Job job = Job.getInstance(configuration);</span><br><span class="line"></span><br><span class="line">        job.setJarByClass(FruitDriver<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        job.setMapperClass(FruitMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        job.setMapOutputKeyClass(LongWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        job.setMapOutputValueClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        TableMapReduceUtil.initTableReducerJob(args[<span class="number">1</span>], FruitReducer<span class="class">.<span class="keyword">class</span>, <span class="title">job</span>)</span>;</span><br><span class="line"></span><br><span class="line">        FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> result = job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConf</span><span class="params">(Configuration conf)</span> </span>&#123;</span><br><span class="line">        configuration = conf;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Configuration <span class="title">getConf</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> configuration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Configuration configuration = <span class="keyword">new</span> Configuration();</span><br><span class="line">            <span class="keyword">int</span> run = ToolRunner.run(configuration, <span class="keyword">new</span> FruitDriver(), args);</span><br><span class="line">            System.exit(run);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p>打包扔服务器</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yarn jar /media/psf/centos_share/note-hadoop-1.0-SNAPSHOT.jar mxx.hbaseDemo.mr1.FruitDriver /user/mxx/fruit/fruit.tsv fruit1</span><br><span class="line"></span><br><span class="line">scan "fruit1"</span><br></pre></td></tr></table></figure></div>



<h2 id="自定义-MR2"><a href="#自定义-MR2" class="headerlink" title="自定义-MR2"></a>自定义-MR2</h2><p>Hbase互相写数据。需求：将fruit1的name全部读到fruit2</p>
<p>Fruit2Mapper</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> mxx.hbaseDemo.mr2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.Cell;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.CellUtil;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.Put;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.Result;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.io.ImmutableBytesWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.mapreduce.TableMapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.util.Bytes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fruit2Mapper</span> <span class="keyword">extends</span> <span class="title">TableMapper</span>&lt;<span class="title">ImmutableBytesWritable</span>, <span class="title">Put</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(ImmutableBytesWritable key, Result value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Put put = <span class="keyword">new</span> Put(key.get());</span><br><span class="line">        <span class="keyword">for</span> (Cell cell : value.rawCells()) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">"name"</span>.equals(Bytes.toString(CellUtil.cloneQualifier(cell))))&#123;</span><br><span class="line">                put.add(cell);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        context.write(key, put);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p>Fruit2Reducer</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> mxx.hbaseDemo.mr2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.Put;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.io.ImmutableBytesWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.mapreduce.TableReducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.NullWritable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fruit2Reducer</span> <span class="keyword">extends</span> <span class="title">TableReducer</span>&lt;<span class="title">ImmutableBytesWritable</span>, <span class="title">Put</span>, <span class="title">NullWritable</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(ImmutableBytesWritable key, Iterable&lt;Put&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Put put : values) &#123;</span><br><span class="line">            context.write(NullWritable.get(), put);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p>Fruit2Driver</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> mxx.hbaseDemo.mr2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.HBaseConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.Put;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.Scan;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.io.ImmutableBytesWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.mapreduce.TableMapReduceUtil;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.util.Tool;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.util.ToolRunner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 本地连接到Hbase运行：指定HBase环境</span></span><br><span class="line"><span class="comment"> * cat conf/hbase-site.xml 复制到项目中</span></span><br><span class="line"><span class="comment"> * resources/hbase-site.xml</span></span><br><span class="line"><span class="comment"> * 并且删除hbase.tmp.dir配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 这种模式就是本地运行，没有使用Hadoop Yarn框架。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fruit2Driver</span> <span class="keyword">implements</span> <span class="title">Tool</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Configuration configuration = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">run</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Job job = Job.getInstance(configuration);</span><br><span class="line"></span><br><span class="line">        job.setJarByClass(Fruit2Driver<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        TableMapReduceUtil.initTableMapperJob(<span class="string">"fruit1"</span>,</span><br><span class="line">                <span class="keyword">new</span> Scan(),</span><br><span class="line">                Fruit2Mapper<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">                <span class="title">ImmutableBytesWritable</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">                <span class="title">Put</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">                <span class="title">job</span></span></span><br><span class="line"><span class="class">        )</span>;</span><br><span class="line"></span><br><span class="line">        TableMapReduceUtil.initTableReducerJob(<span class="string">"fruit2"</span>,</span><br><span class="line">                Fruit2Reducer<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">                <span class="title">job</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> result = job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConf</span><span class="params">(Configuration conf)</span> </span>&#123;</span><br><span class="line">        configuration = conf;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Configuration <span class="title">getConf</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> configuration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//            Configuration configuration = new Configuration();</span></span><br><span class="line">            Configuration configuration = HBaseConfiguration.create();</span><br><span class="line">            configuration.addResource(<span class="string">"hbase-site.xml"</span>);</span><br><span class="line">            <span class="keyword">int</span> run = ToolRunner.run(configuration, <span class="keyword">new</span> Fruit2Driver(), args);</span><br><span class="line">            System.exit(run);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h1 id="与Hive集成"><a href="#与Hive集成" class="headerlink" title="与Hive集成"></a>与Hive集成</h1><h2 id="HBase-与-Hive-的对比"><a href="#HBase-与-Hive-的对比" class="headerlink" title="HBase 与 Hive 的对比"></a>HBase 与 Hive 的对比</h2><p>Hive</p>
<p>(1) 数据仓库<br>Hive 的本质其实就相当于将 HDFS 中已经存储的文件在 Mysql 中做了一个双射关系，以方便使用 HQL 去管理查询。</p>
<p>(2) 用于数据分析、清洗<br>Hive 适用于离线的数据分析和清洗，延迟较高。</p>
<p>(3) 基于 HDFS、MapReduce<br>Hive 存储的数据依旧在 DataNode 上，编写的 HQL 语句终将是转换为 MapReduce 代码执行。</p>
<p>HBase</p>
<p>(1) 数据库<br>是一种面向列存储的非关系型数据库。</p>
<p>(2) 用于存储结构化和非结构化的数据<br>适用于单表非关系型数据的存储，不适合做关联查询，类似 JOIN 等操作。</p>
<p>(3) 基于 HDFS<br>数据持久化存储的体现形式是 Hfile，存放于 DataNode 中，被 ResionServer 以 region 的形<br>式进行管理。</p>
<p>(4) 延迟较低，接入在线业务使用<br>面对大量的企业数据，HBase 可以直线单表大量数据的存储，同时提供了高效的数据访问<br>速度。</p>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>Hive操作Hbase，类似于MapReduce操作Hbase。Hive需要持有Hbase的相关jar包。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export HBASE_HOME=/opt/module/hbase </span><br><span class="line">export HIVE_HOME=/opt/module/hive</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 软连接</span></span><br><span class="line">ln -s $HBASE_HOME/lib/hbase-common-1.2.0-cdh5.16.1.jar $HIVE_HOME/lib/hbase-common-1.2.0-cdh5.16.1.jar</span><br><span class="line">ln -s $HBASE_HOME/lib/hbase-server-1.2.0-cdh5.16.1.jar $HIVE_HOME/lib/hbase-server-1.2.0-cdh5.16.1.jar</span><br><span class="line">ln -s $HBASE_HOME/lib/hbase-client-1.2.0-cdh5.16.1.jar $HIVE_HOME/lib/hbase-client-1.2.0-cdh5.16.1.jar</span><br><span class="line">ln -s $HBASE_HOME/lib/hbase-protocol-1.2.0-cdh5.16.1.jar $HIVE_HOME/lib/hbase-protocol-1.2.0-cdh5.16.1.jar</span><br><span class="line">ln -s $HBASE_HOME/lib/hbase-it-1.2.0-cdh5.16.1.jar $HIVE_HOME/lib/hbase-it-1.2.0-cdh5.16.1.jar</span><br><span class="line">ln -s $HBASE_HOME/lib/htrace-core-3.2.0-incubating.jar $HIVE_HOME/lib/htrace-core-3.2.0-incubating.jar</span><br><span class="line">ln -s $HBASE_HOME/lib/hbase-hadoop2-compat-1.2.0-cdh5.16.1.jar $HIVE_HOME/lib/hbase-hadoop2-compat-1.2.0-cdh5.16.1.jar</span><br><span class="line">ln -s $HBASE_HOME/lib/hbase-hadoop-compat-1.2.0-cdh5.16.1.jar $HIVE_HOME/lib/hbase-hadoop-compat-1.2.0-cdh5.16.1.jar</span><br></pre></td></tr></table></figure></div>

<p>在 hive-site.xml 中修改 zookeeper 的属性，如下:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.zookeeper.quorum<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>mxxcentos7<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.zookeeper.client.port<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>2181<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></div>



<h2 id="案例一"><a href="#案例一" class="headerlink" title="案例一"></a>案例一</h2><p>建立 Hive 表，关联 HBase 表，插入数据到 Hive 表的同时能够影响 HBase 表。</p>
<p>在 Hive 中创建表同时关联 HBase</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- ./bin/hive</span></span><br><span class="line"><span class="comment">-- cdh避免了兼容问题，若遇到不兼容，需要自己编译对应的-src.jar源码包。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> hive_hbase_emp_table( </span><br><span class="line">  empno <span class="built_in">int</span>,</span><br><span class="line">  ename <span class="keyword">string</span>,</span><br><span class="line">  job <span class="keyword">string</span>,</span><br><span class="line">  mgr <span class="built_in">int</span>,</span><br><span class="line">  hiredate <span class="keyword">string</span>,</span><br><span class="line">  sal <span class="keyword">double</span>,</span><br><span class="line">  comm <span class="keyword">double</span>,</span><br><span class="line">  deptno <span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">STORED</span> <span class="keyword">BY</span> <span class="string">'org.apache.hadoop.hive.hbase.HBaseStorageHandler'</span></span><br><span class="line"><span class="keyword">WITH</span> SERDEPROPERTIES (<span class="string">"hbase.columns.mapping"</span> = <span class="string">":key,info:ename,info:job,info:mgr,info:hiredate,info:sal,info:co mm,info:deptno"</span>)</span><br><span class="line">TBLPROPERTIES (<span class="string">"hbase.table.name"</span> = <span class="string">"hbase_emp_table"</span>);</span><br></pre></td></tr></table></figure></div>

<p>完成之后，可以分别进入 Hive 和 HBase 查看，都生成了对应的表</p>
<p>接下来是导数据（数据是放在Hbase里的，不能直接用load语句，load是放在hdfs txt文件里的）</p>
<p>1、在 Hive 中创建临时中间表，用于 load 文件中的数据</p>
<p>2、Hive 中间表中 load 数据</p>
<p>3、通过 insert 命令将中间表中的数据导入到 Hive 关联 HBase 的那张表中</p>
<p>4、查看 Hive 以及关联的 HBase 表中是否已经成功的同步插入了数据</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建临时中间表</span></span><br><span class="line">CREATE TABLE emp(</span><br><span class="line">  empno int,</span><br><span class="line">  ename string,</span><br><span class="line">  job string,</span><br><span class="line">  mgr int,</span><br><span class="line">  hiredate string,</span><br><span class="line">  sal double,</span><br><span class="line">  comm double,</span><br><span class="line">  deptno int)</span><br><span class="line">row format delimited fields terminated by '\t';</span><br><span class="line"><span class="meta">#</span><span class="bash"> load数据到中间表</span></span><br><span class="line"><span class="meta">hive&gt;</span><span class="bash"> load data <span class="built_in">local</span> inpath <span class="string">'/media/psf/centos_share/emp.txt'</span> into table emp;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> insert将中间表数据导入到 Hive 关联 HBase 的那张表中</span></span><br><span class="line"><span class="meta">hive&gt;</span><span class="bash"> insert into table hive_hbase_emp_table select * from emp;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看 Hive 以及关联的 HBase 表中是否已经成功的同步插入了数据</span></span><br><span class="line"><span class="meta">hive&gt;</span><span class="bash"> select * from hive_hbase_emp_table;</span></span><br><span class="line"><span class="meta">hbase&gt;</span><span class="bash"> scan ‘hbase_emp_table’</span></span><br><span class="line"></span><br><span class="line">如果mr任务卡了，尝试：</span><br><span class="line">mapreduce测试：</span><br><span class="line">1、yarn jar $HADOOP_HOME/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.6.0-cdh5.16.1.jar wordcount /test/test.txt /test/out6</span><br><span class="line">2、给虚拟机分配更大的内存</span><br></pre></td></tr></table></figure></div>



<h2 id="案例二"><a href="#案例二" class="headerlink" title="案例二"></a>案例二</h2><p>在 HBase 中已经存储了某一张表 hbase_emp_table，然后在 Hive 中创建一个外部表来关联 HBase 中的 hbase_emp_table 这张表，使之可以借助 Hive 来分析 HBase 这张表中的数据。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> hive</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建外部表关联已经存在的hbase表</span></span><br><span class="line">CREATE EXTERNAL TABLE relevance_hbase_emp( </span><br><span class="line">  empno int,</span><br><span class="line">  ename string,</span><br><span class="line">  job string,</span><br><span class="line">  mgr int,</span><br><span class="line">  hiredate string,</span><br><span class="line">  sal double,</span><br><span class="line">  comm double,</span><br><span class="line">  deptno int)</span><br><span class="line">STORED BY 'org.apache.hadoop.hive.hbase.HBaseStorageHandler'</span><br><span class="line">WITH SERDEPROPERTIES ("hbase.columns.mapping" = ":key,info:ename,info:job,info:mgr,info:hiredate,info:sal,info:co mm,info:deptno")</span><br><span class="line">TBLPROPERTIES ("hbase.table.name" = "hbase_emp_table");</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 关联后就可以使用 Hive 函数进行一些分析操作了</span></span><br><span class="line">hive &gt; select * from relevance_hbase_emp;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 从hbase put 数据，hive能同步到吗？ 能</span></span><br><span class="line">hive &gt; put 'hbase_emp_table','7935','info:ename','zhangsan'</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> hbase</span></span><br><span class="line">7935	zhangsan	NULL	NULL	NULL	NULL	NULL	NULL</span><br></pre></td></tr></table></figure></div>



<h1 id="HBase优化"><a href="#HBase优化" class="headerlink" title="HBase优化"></a>HBase优化</h1><h2 id="高可用"><a href="#高可用" class="headerlink" title="高可用"></a>高可用</h2><p>在 HBase 中 Hmaster 负责监控 RegionServer 的生命周期，均衡 RegionServer 的负载，如果 Hmaster 挂掉了，那么整个 HBase 集群将陷入不健康的状态，并且此时的工作状态并不会维持太久。所以 HBase 支持对 Hmaster 的高可用配置。</p>
<p>高可用配置节点配置（备用Master）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动2个backup Master, 主 master挂了之后，就会自动上backup Master</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在 conf 目录下创建 backup-masters 文件 </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> touch conf/backup-masters</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在 backup-masters 文件中配置高可用 HMaster 节点</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> hadoop103 &gt; conf/backup-masters</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将整个 conf 目录 scp 到其他节点</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> scp -r conf/ hadoop103:/opt/module/hbase/</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">#</span><span class="bash"> 打开页面测试查看</span></span><br><span class="line">http://hadooo102:16010</span><br></pre></td></tr></table></figure></div>



<h2 id="预分区"><a href="#预分区" class="headerlink" title="预分区"></a>预分区</h2><p>每一个 region 维护着 startRow 与 endRowKey，如果加入的数据符合某个 region 维护的rowKey 范围，则该数据交给这个 region 维护。那么依照这个原则，我们可以将数据所要投放的分区提前大致的规划好，以提高 HBase 性能。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1、手动设定预分区 2.生成 16 进制序列预分区</span></span><br><span class="line"><span class="meta">hbase&gt;</span><span class="bash"> create <span class="string">'staff1'</span>,<span class="string">'info'</span>,<span class="string">'partition1'</span>,SPLITS =&gt; [<span class="string">'1000'</span>,<span class="string">'2000'</span>,<span class="string">'3000'</span>,<span class="string">'4000'</span>]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意：400会落在第4个分区，而4000会落在第5分区</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2、生成 16 进制序列预分区</span></span><br><span class="line">hbase &gt; create 'staff2','info','partition2',&#123;NUMREGIONS =&gt; 15, SPLITALGO =&gt; 'HexStringSplit'&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3.按照文件中设置的规则预分区 创建 splits.txt 文件内容如下:</span></span><br><span class="line">splits.txt：</span><br><span class="line">aaaa</span><br><span class="line">bbbb</span><br><span class="line">cccc</span><br><span class="line">dddd</span><br><span class="line"><span class="meta">#</span><span class="bash"> 内部按字母排序？</span></span><br><span class="line">hbase &gt; create 'staff3','partition3',SPLITS_FILE =&gt; 'splits.txt'</span><br><span class="line"><span class="meta">#</span><span class="bash"> 4.使用 JavaAPI 创建预分区</span></span><br><span class="line">//自定义算法，产生一系列 Hash 散列值存储在二维数组中 </span><br><span class="line">byte[][] splitKeys = 某个散列值函数</span><br><span class="line">//创建 HBaseAdmin 实例</span><br><span class="line">HBaseAdmin hAdmin = new HBaseAdmin(HBaseConfiguration.create()); </span><br><span class="line">//创建 HTableDescriptor 实例</span><br><span class="line">HTableDescriptor tableDesc = new HTableDescriptor(tableName);</span><br><span class="line">//通过 HTableDescriptor 实例和散列值二维数组创建带有预分区的 HBase 表 </span><br><span class="line">hAdmin.createTable(tableDesc, splitKeys);</span><br></pre></td></tr></table></figure></div>

<p>分区规划和什么有关？</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">未来数据量、机器规模</span><br><span class="line">每台机器放2-3个region</span><br></pre></td></tr></table></figure></div>



<h2 id="RowKey设计"><a href="#RowKey设计" class="headerlink" title="RowKey设计"></a>RowKey设计</h2><p>一条数据的唯一标识就是 rowkey，那么这条数据存储于哪个分区，取决于 rowkey 处于哪个一个预分区的区间内，设计rowkey的主要目的 ，就是让数据<strong>均匀的分布</strong>于所有的region中，在一定程度上防止数据倾斜。接下来我们就谈一谈 rowkey 常用的设计方案。</p>
<p>1.生成随机数、hash、散列值</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">比如:</span><br><span class="line">原 本 rowKey 为 1001 的 ， SHA1 dd01903921ea24941c26a48f2cec24e0bb0e8cc7</span><br><span class="line">原 本 rowKey 为 3001 的 ， SHA1 49042c54de64a1e9bf0b33e00245660ef92dc7bd</span><br><span class="line">原 本 rowKey 为 5001 的 ， SHA1 7b61dec07e02c188790670af43e717f0f46e8913 </span><br><span class="line">在做此操作之前，一般我们会选择从数据集中抽取样本，来决定什么样的 rowKey 来 Hash 后作为每个分区的临界值。</span><br></pre></td></tr></table></figure></div>

<p>2.字符串反转</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">20170524000001 转成 10000042507102</span><br><span class="line">20170524000002 转成 20000042507102</span><br><span class="line">这样也可以在一定程度上散列逐步 put 进来的数据</span><br></pre></td></tr></table></figure></div>

<p>3.字符串拼接</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">20170524000001_a12e</span><br><span class="line">20170524000001_93i7</span><br></pre></td></tr></table></figure></div>



<p><strong>rowkey情景设计</strong></p>
<p>考虑散列性和集中性    </p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">分300个区</span><br><span class="line">000</span><br><span class="line">001</span><br><span class="line">002</span><br><span class="line">...</span><br><span class="line">298</span><br><span class="line"></span><br><span class="line">rowkey设计：</span><br><span class="line">000_</span><br><span class="line">001_</span><br><span class="line">002_</span><br><span class="line">...</span><br><span class="line">298_</span><br><span class="line"></span><br><span class="line">比如要拿一个人的通话详情，最好把手机号相同的放在一个分区，便于查找。</span><br><span class="line"></span><br><span class="line">如何将如手机号转换为rowkey？</span><br><span class="line">同一个手机号要得到同一个前缀</span><br><span class="line">策略：	手机号%299 &#x3D; 分区号</span><br><span class="line">分区号_xxx，后面跟手机号，便于连续读</span><br><span class="line">001_13199999999_xxx</span><br><span class="line"></span><br><span class="line">如何把一个人的通话记录按时间放在不同分区里？</span><br><span class="line">按年_月分区</span><br><span class="line">[(13199999999+201909).hash] % 299 &#x3D; 分区号</span><br><span class="line">001_13199999999_20191212 12:12:12</span><br><span class="line">这样，同一个人，同一个月肯定在同一个分区，而且数据集中在一块</span><br><span class="line"></span><br><span class="line">如何读取某个人2019-12的通话记录？</span><br><span class="line">start &#x3D; 001_13199999999_2019-12</span><br><span class="line">end &#x3D; 001_13199999999_2019-13</span><br></pre></td></tr></table></figure></div>



<h2 id="内存-amp-其他"><a href="#内存-amp-其他" class="headerlink" title="内存&amp;其他"></a>内存&amp;其他</h2><pre><code>HBase 操作过程中需要大量的内存开销，毕竟 Table 是可以缓存在内存中的，一般会分配整个可用内存的 70%给 HBase 的 Java 堆。但是不建议分配非常大的堆内存，因为 GC 过程持续太久会导致 RegionServer 处于长期不可用状态，一般 16~48G 内存就可以了，如果因为框架占用内存过高导致系统内存不足，框架一样会被系统服务拖死。</code></pre><hr>
<p><strong>基础优化</strong></p>
<p>略</p>
]]></content>
      <categories>
        <category>大数据分布式</category>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>Hbase-入门</title>
    <url>/2019/09/16/20190916095939630/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>参考：</p>
<ul>
<li><p><a href="https://www.imooc.com/learn/881" target="_blank" rel="noopener">https://www.imooc.com/learn/881</a></p>
</li>
<li><p><a href="https://www.bilibili.com/video/av65548392" target="_blank" rel="noopener">https://www.bilibili.com/video/av65548392</a></p>
</li>
</ul>
</blockquote>
<p>[TOC]</p>
<p>与mysql类似，是为业务数据做存储的。</p>
<h1 id="Hbase的应用场景及特点"><a href="#Hbase的应用场景及特点" class="headerlink" title="Hbase的应用场景及特点"></a>Hbase的应用场景及特点</h1><p>HBase在实际业务场景中的应用，也就是在学习HBase之前，首页要搞清楚为什么要学习Hbase，学习HBase能在实际业务中解决什么样的问题</p>
<h2 id="Hbase能做什么"><a href="#Hbase能做什么" class="headerlink" title="Hbase能做什么"></a>Hbase能做什么</h2><ul>
<li>海量数据存储<ul>
<li>上百亿行 * 上百万列</li>
<li>百万行数据没必要放Hbase，因为没有优势，放mysql就行了</li>
</ul>
</li>
<li>准实时查询<ul>
<li>百毫秒</li>
</ul>
</li>
</ul>
<h2 id="Hbase在实际业务场景中的应用"><a href="#Hbase在实际业务场景中的应用" class="headerlink" title="Hbase在实际业务场景中的应用"></a>Hbase在实际业务场景中的应用</h2><ul>
<li><p>交通</p>
<ul>
<li>船舶GPS信息（全长江段GPS信息每天产生1000w左右），用作数据分析，如长江哪一段流量最大。</li>
</ul>
</li>
<li><p>道路摄像头</p>
</li>
<li><p>金融数据</p>
</li>
<li><p>电商数据（用户行为、交易、物流）</p>
</li>
<li><p>移动（通信记录…）</p>
</li>
</ul>
<h2 id="Hbase的特点"><a href="#Hbase的特点" class="headerlink" title="Hbase的特点"></a>Hbase的特点</h2><ul>
<li><p>容量大：</p>
<ul>
<li>Hbase单表可以有百亿行、百万列，数据矩阵横向和纵向两个维度所支持的数据量级都非常具有弹性。</li>
<li>在传统关系型数据库中，单表一般不超过500w，否则就要考虑分表分库，列不超过30列。</li>
<li>Hbase 适合存储 PB 级别的海量数据，在 PB 级别的数据以及采用廉价 PC 存储的情况下，<br>能在几十到百毫秒内返回数据。</li>
</ul>
</li>
<li><p>面向列：</p>
<ul>
<li>Hbase是面向列的存储和权限控制，并支持独立检索。列式存储，其数据在表中是按照某列存储的，这样在查询只需要少数几个字断的时候，能大大减少读取的数据量。</li>
<li>关系型的列是定义的时候固定的，Hbase是可以动态增加的。 </li>
</ul>
</li>
<li><p>多版本</p>
<ul>
<li>Hbase每个列的数据库存储有多个Version<ul>
<li>个人信息，如家庭住址，会搬家形成历史住址，这些信息也想存在数据库里，这时可以利用Hbase的version。</li>
</ul>
</li>
</ul>
</li>
<li><p>稀疏性</p>
<ul>
<li>为null的列并不占有存储空间，表可以设计的非常稀疏。</li>
<li>以数据为基准动态增加列，但关系型需要以null,空字符串去填充。</li>
</ul>
</li>
<li><p>扩展性</p>
<ul>
<li>底层依赖HDFS</li>
<li>如果磁盘空间不够了，只需要动态增加DataNode节点服务即可。不需要像关系型一样做数据迁移，机器扩展…等等麻烦的操作</li>
<li>通过横向添加 RegionSever 的机器，进行水平扩展，提升 Hbase 上层的处理能力，提升 Hbsae<br>服务更多 Region 的能力。</li>
</ul>
</li>
<li><p>高可靠性</p>
<ul>
<li>WAL机制保证数据写入时不会因集群异常而导致写入数据丢失：Replication机制保证了在集群出现严重问题时，数据不会发生丢失或损坏。而且Hbase底层使用HDFS。</li>
</ul>
</li>
<li><p>高并发</p>
<ul>
<li>由于目前大部分使用 Hbase 的架构，都是采用的廉价 PC，因此单个 IO 的延迟其实并不 </li>
</ul>
<p>小，一般在几十到上百 ms 之间。这里说的高并发，主要是在并发的情况下，Hbase 的单个 </p>
<p>IO 延迟下降并不多。能获得高并发、低延迟的服务。 </p>
</li>
<li><p>高性能</p>
<ul>
<li><a href="/2019/09/16/20190916095939630/屏幕快照 2019-09-16 上午10.31.11.png" data-fancybox="group" data-caption="屏幕快照 2019-09-16 上午10.31.11" class="fancybox"><img alt="屏幕快照 2019-09-16 上午10.31.11" style="zoom:50%;" title="屏幕快照 2019-09-16 上午10.31.11" data-src="/2019/09/16/20190916095939630/屏幕快照 2019-09-16 上午10.31.11.png" class="lazyload"></a>





</li>
</ul>
</li>
</ul>
<h1 id="Hbase的概念与定位"><a href="#Hbase的概念与定位" class="headerlink" title="Hbase的概念与定位"></a>Hbase的概念与定位</h1><p>基于官网对HBase概念的描述，介绍HBase版本的发展及在hadoop2.x生态系统中的定位。</p>
<h2 id="深刻了解Hbase的概念"><a href="#深刻了解Hbase的概念" class="headerlink" title="深刻了解Hbase的概念"></a>深刻了解Hbase的概念</h2><p>读官网介绍</p>
<h2 id="选择合适Hbase的版本"><a href="#选择合适Hbase的版本" class="headerlink" title="选择合适Hbase的版本"></a>选择合适Hbase的版本</h2><p>企业不会选最新版本，一般选稳定版本</p>
<p>官方版本：选择一直在更新的版本号（说明在不停优化）</p>
<p>CDH版本：对大数据各种架构做了整个集成，稳定性兼容性很好，一般商用会选CDH</p>
<h2 id="认识Hbase在Hadoop2-x生态系统中的定位"><a href="#认识Hbase在Hadoop2-x生态系统中的定位" class="headerlink" title="认识Hbase在Hadoop2.x生态系统中的定位"></a>认识Hbase在Hadoop2.x生态系统中的定位</h2><p><a href="/2019/09/16/20190916095939630/timg.jpeg" data-fancybox="group" data-caption="timg" class="fancybox"><img alt="timg" title="timg" data-src="/2019/09/16/20190916095939630/timg.jpeg" class="lazyload"></a></p>
<h1 id="Hbase架构体系与设计模型"><a href="#Hbase架构体系与设计模型" class="headerlink" title="Hbase架构体系与设计模型"></a>Hbase架构体系与设计模型</h1><p>介绍HBase的整体架构体系与设计模型，了解HBase的表设计和数据模型与以往的关系数据库有什么不同。</p>
<h2 id="Hbase架构体系"><a href="#Hbase架构体系" class="headerlink" title="Hbase架构体系"></a>Hbase架构体系</h2><p>Hbase两个重要进程：RegionServer、Master。</p>
<p>2个依赖：HDFS(存储底层)、Zookeeper(分布式协调)</p>
<p>RegionServer：管理Hbase表数据。</p>
<p>当Hbase一个表很大的时候，可以对表分区，一个分区就是一个Region，对应一个RegionServer</p>
<p>Master：RegionServer需要实时报告Master(状态信息等)，Master是一个全集管理者，掌握RegionServer集群。</p>
<p>Zookeeper：也会得到RegionServer信息，像Master一样。所以Master可以直接向Zookeeper获取信息。</p>
<a href="/2019/09/16/20190916095939630/屏幕快照 2019-09-16 上午10.52.38.png" data-fancybox="group" data-caption="屏幕快照 2019-09-16 上午10.52.38" class="fancybox"><img alt="屏幕快照 2019-09-16 上午10.52.38" style="zoom:30%;" title="屏幕快照 2019-09-16 上午10.52.38" data-src="/2019/09/16/20190916095939630/屏幕快照 2019-09-16 上午10.52.38.png" class="lazyload"></a>



<hr>
<p>下面是个更详细的版本</p>
<p>Hbase 架构如图：</p>
<p>![屏幕快照 2019-09-17 下午8.03.29](20190916095939630/屏幕快照 2019-09-17 下午8.03.29.png)</p>
<ul>
<li><p>Client </p>
<p>Client 包含了访问 Hbase 的接口，另外 Client 还维护了对应的 cache 来加速 Hbase 的访问，比如 cache 的.META.元数据的信息。 </p>
</li>
<li><p>Zookeeper </p>
<p>HBase 通过 Zookeeper 来做 master 的高可用、RegionServer 的监控、元数据的入口以及 集群配置的维护等工作。具体工作如下: </p>
<p>通过 Zoopkeeper 来保证集群中只有 1 个 master 在运行，如果 master 异常，会通过竞争 机制产生新的 master 提供服务 </p>
<p>通过 Zoopkeeper 来监控 RegionServer 的状态，当 RegionSevrer 有异常的时候，通过回 调的形式通知 Master RegionServer 上下线的信息 </p>
<p>通过 Zoopkeeper 存储元数据的统一入口地址 </p>
</li>
<li><p>Hmaster </p>
<p>master 节点的主要职责如下:<br>为 RegionServer 分配 Region<br>维护整个集群的负载均衡<br>维护集群的元数据信息<br>？？发现失效的 Region，并将失效的 Region 分配到正常的 RegionServer 上 </p>
<p>当 RegionSever 失效的时候，协调对应 Hlog 的拆分</p>
</li>
<li><p>HregionServer</p>
<p>HregionServer 直接对接用户的读写请求，是真正的“干活”的节点。它的功能概括如下: </p>
<p>管理 master 为其分配的 Region 处理来自客户端的读写请求</p>
<p>负责和底层 HDFS 的交互，存储数据到 HDFS 负责 Region 变大以后的拆分 </p>
<p>负责 Storefile 的合并工作</p>
</li>
<li><p>HDFS<br>HDFS 为 Hbase 提供最终的底层数据存储服务，同时为 HBase 提供高可用(Hlog 存储在 HDFS)的支持，具体功能概括如下: 提供元数据和表数据的底层分布式存储服务</p>
<p>数据多副本，保证的高可靠和高可用性</p>
</li>
<li><p>Region<br>Hbase 表的分片，HBase 表会根据 RowKey 值被切分成不同的 region 存储在 RegionServer 中，在一个 RegionServer 中可以有多个不同的 region。 </p>
</li>
<li><p>Store </p>
<p>HFile 存储在 Store 中，一个 Store 对应 HBase 表中的一个列族。 不同的Store放在不同的文件夹里（类似Hive分区）。</p>
<p>memstore刷写一次，就形成一个文件StoreFile;</p>
</li>
<li><p>Write-Ahead logs </p>
<p>HBase 的修改记录，当对 HBase 读写数据的时候，数据不是直接写进磁盘，它会在内 存中保留一段时间(时间以及数据量阈值可以设定)。但把数据保存在内存中可能有更高的 概率引起数据丢失，为了解决这个问题，数据会先写在一个叫做 Write-Ahead logfile 的文件 中，然后再写入内存中。所以在系统出现故障的时候，数据可以通过这个日志文件重建。 </p>
</li>
<li><p>MemStore </p>
<p>顾名思义，就是内存存储，位于内存中，用来保存当前的数据操作，所以当数据保存在 WAL 中之后，RegsionServer 会在内存中存储键值对。</p>
</li>
<li><p>HFile<br>这是在磁盘上保存原始数据的实际的物理文件，是实际的存储文件。StoreFile 是以 Hfile 的形式存储在 HDFS 的。  </p>
</li>
</ul>
<h2 id="Hbase表结构模型"><a href="#Hbase表结构模型" class="headerlink" title="Hbase表结构模型"></a>Hbase表结构模型</h2><p>在创建表的时候不需要指定列，只需要指定列蔟（Hbase是面向“列蔟”的数据库）</p>
<a href="/2019/09/16/20190916095939630/屏幕快照 2019-09-16 上午10.57.41.png" data-fancybox="group" data-caption="屏幕快照 2019-09-16 上午10.57.41" class="fancybox"><img alt="屏幕快照 2019-09-16 上午10.57.41" style="zoom:50%;" title="屏幕快照 2019-09-16 上午10.57.41" data-src="/2019/09/16/20190916095939630/屏幕快照 2019-09-16 上午10.57.41.png" class="lazyload"></a>

<p>举例：具体的列可以动态增加，对于每条数据，它的列可能与其他条数据是不同的。</p>
<a href="/2019/09/16/20190916095939630/屏幕快照 2019-09-16 上午10.58.43.png" data-fancybox="group" data-caption="屏幕快照 2019-09-16 上午10.58.43" class="fancybox"><img alt="屏幕快照 2019-09-16 上午10.58.43" style="zoom:50%;" title="屏幕快照 2019-09-16 上午10.58.43" data-src="/2019/09/16/20190916095939630/屏幕快照 2019-09-16 上午10.58.43.png" class="lazyload"></a>



<h2 id="Hbase数据模型"><a href="#Hbase数据模型" class="headerlink" title="Hbase数据模型"></a>Hbase数据模型</h2><p>row key：主键</p>
<p>下图说明了面向列的数据库存储方式</p>
<a href="/2019/09/16/20190916095939630/屏幕快照 2019-09-16 上午11.04.13.png" data-fancybox="group" data-caption="屏幕快照 2019-09-16 上午11.04.13" class="fancybox"><img alt="屏幕快照 2019-09-16 上午11.04.13" style="zoom:50%;" title="屏幕快照 2019-09-16 上午11.04.13" data-src="/2019/09/16/20190916095939630/屏幕快照 2019-09-16 上午11.04.13.png" class="lazyload"></a>

<p>举例：</p>
<a href="/2019/09/16/20190916095939630/屏幕快照 2019-09-16 上午11.05.26.png" data-fancybox="group" data-caption="屏幕快照 2019-09-16 上午11.05.26" class="fancybox"><img alt="屏幕快照 2019-09-16 上午11.05.26" style="zoom:50%;" title="屏幕快照 2019-09-16 上午11.05.26" data-src="/2019/09/16/20190916095939630/屏幕快照 2019-09-16 上午11.05.26.png" class="lazyload"></a>



<p>关于列蔟：</p>
<a href="/2019/09/16/20190916095939630/屏幕快照 2019-09-16 上午11.07.03.png" data-fancybox="group" data-caption="屏幕快照 2019-09-16 上午11.07.03" class="fancybox"><img alt="屏幕快照 2019-09-16 上午11.07.03" style="zoom:40%;" title="屏幕快照 2019-09-16 上午11.07.03" data-src="/2019/09/16/20190916095939630/屏幕快照 2019-09-16 上午11.07.03.png" class="lazyload"></a>



<p>Region服务在表大的时候会自动切分，也可以人工干预划分。</p>
<p>Hbase与关系型的对比</p>
<a href="/2019/09/16/20190916095939630/屏幕快照 2019-09-16 上午11.12.07.png" data-fancybox="group" data-caption="屏幕快照 2019-09-16 上午11.12.07" class="fancybox"><img alt="屏幕快照 2019-09-16 上午11.12.07" style="zoom:40%;" title="屏幕快照 2019-09-16 上午11.12.07" data-src="/2019/09/16/20190916095939630/屏幕快照 2019-09-16 上午11.12.07.png" class="lazyload"></a>

<p>列动态增加：查询写入高性能</p>
<p>Hbase不支持条件查询，只支持row key匹配</p>
<h1 id="Hbase的安装部署"><a href="#Hbase的安装部署" class="headerlink" title="Hbase的安装部署"></a>Hbase的安装部署</h1><p>非常全面的介绍HBase分布式的安装，一步一步讲解，从HDFS、Zookeeper到HBase，全流程实操演示。</p>
<p>先把zookeeper和Hadoop安装好</p>
<p><a href="http://archive.cloudera.com/cdh5/cdh/5/hbase-1.2.0-cdh5.16.1.tar.gz" target="_blank" rel="noopener">hbase-1.2.0-cdh5.16.1.tar.gz</a></p>
<p>安装配置</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conf/hbase-env.sh</span><br><span class="line">export JAVA_HOME=/home/machine/apps/jdk1.8.0_221</span><br><span class="line"><span class="meta">#</span><span class="bash"> 默认为<span class="literal">true</span>，表示使用自己自带的zookeeper</span></span><br><span class="line">export HBASE_MANAGES_ZK=false</span><br><span class="line"></span><br><span class="line">hbase-site.xml</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;hbase.rootdir&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;hdfs://localhost:9000/hbase&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;hbase.cluster.distributed&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;true&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;hbase.zookeeper.quorum&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;localhost&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;hbase.tmp.dir&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;/home/machine/apps/hbase-1.2.0-cdh5.16.1/data/tmp&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line"></span><br><span class="line">regionservers</span><br><span class="line">localhost</span><br></pre></td></tr></table></figure></div>



<p>启动</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd bin</span><br><span class="line">./start-hbase.sh</span><br><span class="line"></span><br><span class="line">jps</span><br><span class="line">16642 HMaster</span><br><span class="line">16775 HRegionServer</span><br><span class="line"></span><br><span class="line">监控web页面：60010</span><br></pre></td></tr></table></figure></div>



<h1 id="Hbase-shell的使用"><a href="#Hbase-shell的使用" class="headerlink" title="Hbase shell的使用"></a>Hbase shell的使用</h1><p>通过shell命令介绍HBse表的操作和表数据的操作</p>
<h2 id="Hbase表操作命令"><a href="#Hbase表操作命令" class="headerlink" title="Hbase表操作命令"></a>Hbase表操作命令</h2><a href="/2019/09/16/20190916095939630/屏幕快照 2019-09-16 下午12.11.55.png" data-fancybox="group" data-caption="屏幕快照 2019-09-16 下午12.11.55" class="fancybox"><img alt="屏幕快照 2019-09-16 下午12.11.55" style="zoom:40%;" title="屏幕快照 2019-09-16 下午12.11.55" data-src="/2019/09/16/20190916095939630/屏幕快照 2019-09-16 下午12.11.55.png" class="lazyload"></a>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入shell </span></span><br><span class="line">bin/hbase shell</span><br><span class="line"><span class="meta">#</span><span class="bash"> 表名，列蔟名</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> create <span class="string">"t_test"</span>,<span class="string">"info"</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> list</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看表数据</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> scan <span class="string">"t_test"</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> scan <span class="string">'student'</span>,&#123;STARTROW =&gt; <span class="string">'1001'</span>, STOPROW =&gt; <span class="string">'1001'</span>&#125;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 放数据 0001是rowkey, info:username 列蔟：列名</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> put <span class="string">"t_test"</span>,<span class="string">"0001"</span>,<span class="string">"info:username"</span>,<span class="string">"mxx"</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> scan <span class="string">"t_test"</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> put <span class="string">"t_test"</span>,<span class="string">"0001"</span>,<span class="string">"info:age"</span>,<span class="string">"20"</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> scan <span class="string">"t_test"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看表信息</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> describe <span class="string">"t_test"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除表：先禁用</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="built_in">disable</span> <span class="string">"t_test"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 表是否可用</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> is_enabled <span class="string">"t_test"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 再删除</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> drop <span class="string">"t_test"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新指定字段的数据</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> put <span class="string">'student'</span>,<span class="string">'1001'</span>,<span class="string">'info:name'</span>,<span class="string">'Nick'</span> hbase(main):013:0</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> put <span class="string">'student'</span>,<span class="string">'1001'</span>,<span class="string">'info:age'</span>,<span class="string">'100'</span></span></span><br></pre></td></tr></table></figure></div>



<h2 id="Hbase表数据操作命令"><a href="#Hbase表数据操作命令" class="headerlink" title="Hbase表数据操作命令"></a>Hbase表数据操作命令</h2><a href="/2019/09/16/20190916095939630/屏幕快照 2019-09-16 下午2.07.12.png" data-fancybox="group" data-caption="屏幕快照 2019-09-16 下午2.07.12" class="fancybox"><img alt="屏幕快照 2019-09-16 下午2.07.12" style="zoom:40%;" title="屏幕快照 2019-09-16 下午2.07.12" data-src="/2019/09/16/20190916095939630/屏幕快照 2019-09-16 下午2.07.12.png" class="lazyload"></a>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 对行数求和</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> count <span class="string">"t_test"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 取出某一列</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> get <span class="string">"t_test"</span>,<span class="string">"0001"</span>,<span class="string">"info:username"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除一列</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> delete <span class="string">"t_test"</span>,<span class="string">"0001"</span>,<span class="string">"info:age"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> truncate: 常用于表的初始化，清空表数据。</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> truncate <span class="string">"t_test"</span></span></span><br><span class="line">Truncating 't_test' table (it may take a while):</span><br><span class="line"> - Disabling table...</span><br><span class="line"> - Truncating table...</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 变更表信息</span></span><br><span class="line">将 info 列族中的数据存放 3 个版本:</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> alter <span class="string">'student'</span>,&#123;NAME=&gt;<span class="string">'info'</span>,VERSIONS=&gt;3&#125;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> get <span class="string">'student'</span>,<span class="string">'1001'</span>,&#123;COLUMN=&gt;<span class="string">'info:name'</span>,VERSIONS=&gt;3&#125;</span></span><br></pre></td></tr></table></figure></div>



<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>TODO </p>
<p>元数据</p>
]]></content>
      <categories>
        <category>大数据分布式</category>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>Hive-进阶</title>
    <url>/2019/09/12/20190912171151144/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>参考：<a href="https://www.bilibili.com/video/av65556024/?p=12" target="_blank" rel="noopener">https://www.bilibili.com/video/av65556024/?p=12</a></p>
</blockquote>
<h1 id="Hive常用交互命令"><a href="#Hive常用交互命令" class="headerlink" title="Hive常用交互命令"></a>Hive常用交互命令</h1><p>什么时候跑hive？</p>
<p>hive作为离线系统》每天凌晨跑</p>
<p>怎么跑？用定时脚本跑</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">- e 执行sql语句</span><br><span class="line">hive -e "select * from xxx"</span><br><span class="line"></span><br><span class="line">- f 执行sql脚本</span><br><span class="line">vi hive.hql</span><br><span class="line"></span><br><span class="line">show databases;</span><br><span class="line"></span><br><span class="line">bin/hive -f ./hive.hql</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 生产环境就是用个调度器定时去执行脚本</span></span><br></pre></td></tr></table></figure></div>



<h1 id="Hive-和数据库比较"><a href="#Hive-和数据库比较" class="headerlink" title="Hive 和数据库比较"></a>Hive 和数据库比较</h1><p>数据库可以用在 Online 的应用中，但是 Hive 是为数据仓库而设计的。</p>
<ul>
<li><p>数据存储位置</p>
<p>Hive 是建立在 Hadoop 之上的，所有 Hive 的数据都是存储在 HDFS 中的。</p>
</li>
<li><p>数据更新</p>
<p>由于 Hive 是针对数据仓库应用设计的，而数据仓库的内容是读多写少的。因此，Hive<br>中不建议对数据的改写，所有的数据都是在加载的时候确定好的。</p>
</li>
<li><p>执行</p>
<p>Hive 中大多数查询的执行是通过 Hadoop 提供的 MapReduce 来实现的。</p>
</li>
<li><p>执行延迟</p>
<p>Hive 在查询数据的时候，由于没有索引，需要扫描整个表，因此延迟较高。另外一个导<br>致 Hive 执行延迟高的因素是 MapReduce 框架。由于 MapReduce 本身具有较高的延迟，因此在利用 MapReduce 执行 Hive 查询时，也会有较高的延迟。</p>
<p>相对的，数据库的执行延迟较低。当然，这个低是有条件的，即数据规模较小，当数据规模大到超过数据库的处理能力的时候，Hive 的并行计算显然能体现出优势。</p>
</li>
<li><p>数据规模</p>
<p>由于 Hive 建立在集群上并可以利用 MapReduce 进行并行计算，因此可以支持很大规模的数据;</p>
</li>
</ul>
]]></content>
      <categories>
        <category>大数据分布式</category>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>Azkaban</title>
    <url>/2019/09/12/20190912163521905/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>参考：</p>
<ul>
<li><a href="https://www.bilibili.com/video/av65539983" target="_blank" rel="noopener">https://www.bilibili.com/video/av65539983</a></li>
<li></li>
</ul>
</blockquote>
<h1 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h1>]]></content>
      <categories>
        <category>大数据分布式</category>
        <category>任务管理</category>
      </categories>
      <tags>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>Flume-入门</title>
    <url>/2019/09/11/20190911160645622/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[TOC]</p>
<blockquote>
<p>参考：</p>
<ul>
<li><a href="http://www.atguigu.com/jsfx/3415.html" target="_blank" rel="noopener">http://www.atguigu.com/jsfx/3415.html</a></li>
<li><a href="https://www.bilibili.com/video/av65541678/?p=3" target="_blank" rel="noopener">https://www.bilibili.com/video/av65541678/?p=3</a></li>
</ul>
</blockquote>
<h1 id="Flume概述"><a href="#Flume概述" class="headerlink" title="Flume概述"></a>Flume概述</h1><h2 id="问题引入"><a href="#问题引入" class="headerlink" title="问题引入"></a>问题引入</h2><p>数据如何从java后台服务器(业务系统如springboot) 到 大数据集群(Hadooop生态圈)？</p>
<p>一般这两套不会使用一台服务器</p>
<p>后台跟页面交互，必须要保证实时性，反应要快。而大数据集群，跟多时候可以离线处理数据，实时要求不高。</p>
<p>数据来源：</p>
<p>业务数据：订单、支付 ===》Mysql</p>
<p>访问日志：访问、点击、搜索===&gt;磁盘文本，日志</p>
<p>这个数据采集的工具：Flume。</p>
<p>日志采集系统方案：Flume+Kafka+HDFS</p>
<p><a href="https://blog.csdn.net/weixin_38750084/article/details/82861555" target="_blank" rel="noopener">https://blog.csdn.net/weixin_38750084/article/details/82861555</a></p>
<p><a href="https://www.cnblogs.com/zyfd/p/9578252.html" target="_blank" rel="noopener">https://www.cnblogs.com/zyfd/p/9578252.html</a></p>
<h2 id="Flume定义"><a href="#Flume定义" class="headerlink" title="Flume定义"></a>Flume定义</h2><p>文档：<a href="http://flume.apache.org/" target="_blank" rel="noopener">http://flume.apache.org/</a></p>
<p>Java后台日志每时每刻产生数据，怎么存到HDFS里去？</p>
<ul>
<li>一：实时存到HDFS？每产生一个用户行为就写一个HDFS put？ ===》不可能，效率太低。</li>
<li>二：每天产生的日志写成一个XXX.log文件，然后调用定时任务每天凌晨写一次HDFS put？<ul>
<li>数据量大？不是问题，HDFS本来就擅长处理大数据。</li>
<li>实时性？一天的数据，只能当天凌晨做导入，还需要分析计算。造成的效果是，我当天浏览了商品，到了第二天才去给我相关推送。而我们现在的效果是，刚浏览了商品，立马就能得到推荐。怎么做？需要一个中间软件实时上传数据到HDFS===》Flume</li>
</ul>
</li>
</ul>
<p><strong>定义</strong></p>
<p>Flume是Cloudera提供的一个高可用的，高可靠的，分布式的海量日志采集、聚合和传输的系统。Flume基于流式架构，灵活简单。</p>
<p><a href="/2019/09/11/20190911160645622/%E5%9B%BE%E7%89%871.png" data-fancybox="group" data-caption="图片1" class="fancybox"><img alt="图片1" title="图片1" data-src="/2019/09/11/20190911160645622/%E5%9B%BE%E7%89%871.png" class="lazyload"></a></p>
<p>kafka: 流式的，对应实时系统</p>
<p>flume：对应离线系统</p>
<h2 id="Flume基础架构"><a href="#Flume基础架构" class="headerlink" title="Flume基础架构"></a>Flume基础架构</h2><p><a href="/2019/09/11/20190911160645622/%E5%9B%BE%E7%89%872.png" data-fancybox="group" data-caption="图片2" class="fancybox"><img alt="图片2" title="图片2" data-src="/2019/09/11/20190911160645622/%E5%9B%BE%E7%89%872.png" class="lazyload"></a></p>
<p><strong>Agent</strong></p>
<p>Agent是一个JVM进程，它以事件的形式将数据从源头送至目的，是Flume数据传输的基本单元。</p>
<p>Agent主要有3个部分组成，Source、Channel、Sink。</p>
<p><strong>Source</strong></p>
<p>Source是负责接收数据到Flume Agent的组件。Source组件可以处理各种类型、各种格式的日志数据，包括avro、thrift、exec、jms、spooling directory、netcat、sequence generator、syslog、http、legacy。</p>
<p><strong>Channel</strong></p>
<p>Channel是位于Source和Sink之间的缓冲区。因此，Channel允许Source和Sink运作在不同的速率上。Channel是线程安全的，可以同时处理几个Source的写入操作和几个Sink的读取操作。</p>
<p>Flume自带两种Channel：Memory Channel和File Channel。</p>
<p>Memory Channel是内存中的队列。Memory Channel在不需要关心数据丢失的情景下适用。如果需要关心数据丢失，那么Memory Channel就不应该使用，因为程序死亡、机器宕机或者重启都会导致数据丢失。</p>
<p>File Channel将所有事件写到磁盘。因此在程序关闭或机器宕机的情况下不会丢失数据。</p>
<p> <strong>Sink</strong></p>
<p>Sink不断地轮询Channel中的事件且批量地移除它们，并将这些事件批量写入到存储或索引系统、或者被发送到另一个Flume Agent。</p>
<p>Sink是完全事务性的。在从Channel批量删除数据之前，每个Sink用Channel启动一个事务。批量事件一旦成功写出到存储系统或下一个Flume Agent，Sink就利用Channel提交事务。事务一旦被提交，该Channel从自己的内部缓冲区删除事件。</p>
<p>Sink组件目的地包括hdfs、logger、avro、thrift、ipc、file、null、HBase、solr、自定义。</p>
<p><strong>Event</strong></p>
<p>传输单元，Flume数据传输的基本单元，以事件的形式将数据从源头送至目的地。</p>
<h1 id="Flume快速入门"><a href="#Flume快速入门" class="headerlink" title="Flume快速入门"></a>Flume快速入门</h1><h2 id="Flume安装"><a href="#Flume安装" class="headerlink" title="Flume安装"></a>Flume安装</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.6.0-cdh5.16.1.tar.gz</span><br><span class="line"></span><br><span class="line">Flume运行在JVM之上</span><br><span class="line"></span><br><span class="line">进入conf</span><br><span class="line">vi flume-env.sh</span><br><span class="line">修改JAVA_HOME就行</span><br></pre></td></tr></table></figure></div>



<h2 id="官方案例–监控端口数据"><a href="#官方案例–监控端口数据" class="headerlink" title="官方案例–监控端口数据"></a>官方案例–监控端口数据</h2><p>案例需求：首先，Flume监控本机44444端口，然后通过telnet工具向本机44444端口发送消息，最后Flume将监听的数据实时显示在控制台。</p>
<p>分析：</p>
<p>NetCatSource    LoggerSink</p>
<p>![屏幕快照 2019-09-12 上午10.58.06](20190911160645622/屏幕快照 2019-09-12 上午10.58.06.png)</p>
<p>配置</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install -y nc</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入flume home</span></span><br><span class="line">mkdir job</span><br><span class="line">cd job/</span><br><span class="line">touch netcat-flume-logger.conf</span><br><span class="line"></span><br><span class="line">文件来自：</span><br><span class="line">http://archive.cloudera.com/cdh5/cdh/5/flume-ng-1.6.0-cdh5.16.1/FlumeUserGuide.html</span><br><span class="line">1000个事件，一次事务传输100个事件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> example.conf: A single-node Flume configuration</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Name the components on this agent</span></span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Describe/configure the <span class="built_in">source</span></span></span><br><span class="line">a1.sources.r1.type = netcat</span><br><span class="line">a1.sources.r1.bind = localhost</span><br><span class="line">a1.sources.r1.port = 44444</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Describe the sink</span></span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Use a channel <span class="built_in">which</span> buffers events <span class="keyword">in</span> memory</span></span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Bind the <span class="built_in">source</span> and sink to the channel</span></span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure></div>

<p>启动</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> bin/flume-ng agent --conf conf/ --conf-file job/netcat-flume-logger.conf --name a1 -Dflume.root.logger=INFO,console</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 此时本机作为nc服务端启动了，它监听的是localhost:44444端口</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在mac上开一个客户端去连</span></span><br><span class="line">nc -u 10.211.55.14 44444</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 服务端会显示：</span></span><br><span class="line">Event: &#123; headers:&#123;&#125; body: 68 65 6C 6C 6F                                  hello &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> bin/flume-ng agent -c conf/ -f job/netcat-flume-logger.conf -n a1 -Dflume.root.logger=INFO,console</span></span><br></pre></td></tr></table></figure></div>



<h2 id="案例–实时监控单个追加文件"><a href="#案例–实时监控单个追加文件" class="headerlink" title="案例–实时监控单个追加文件"></a>案例–实时监控单个追加文件</h2><p>案例需求：实时监控Hive日志，并上传到HDFS中</p>
<p>![屏幕快照 2019-09-12 下午1.36.43](20190911160645622/屏幕快照 2019-09-12 下午1.36.43.png)</p>
<p>先做输出到logger的案例</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exec 监控本地文件</span><br><span class="line">tail -f 可以监控文件变化</span><br><span class="line"></span><br><span class="line">Hive 设置日志存储目录: https://blog.csdn.net/qq_35495339/article/details/95105779</span><br><span class="line"></span><br><span class="line">touch file-flume-logger.conf</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Name the components on this agent</span></span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Describe/configure the <span class="built_in">source</span></span></span><br><span class="line">a1.sources.r1.type = exec</span><br><span class="line">a1.sources.r1.command = tail -f /home/machine/apps/hive-1.1.0-cdh5.16.1/logs/hive.log</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Describe the sink</span></span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Use a channel <span class="built_in">which</span> buffers events <span class="keyword">in</span> memory</span></span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Bind the <span class="built_in">source</span> and sink to the channel</span></span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bin/flume-ng agent -c conf/ -f job/file-flume-logger.conf -n a1 -Dflume.root.logger=INFO,console</span><br><span class="line"><span class="meta">#</span><span class="bash"> 这时默认会先打印10条数据：Event</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动hive，写show databases; 触发hive.log日志改变，这时，flume logger控制台会实时打印变化的日志。</span></span><br></pre></td></tr></table></figure></div>



<p>现在做输出到HDFS的案例：HDFS sink</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Flume要想将数据输出到HDFS，必须持有Hadoop相关jar包</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 生产环境下以下配置很重要</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 滚动文件</span></span><br><span class="line">hdfs.rollInterval</span><br><span class="line">hdfs.rollSize</span><br><span class="line">hdfs.rollCount</span><br><span class="line"></span><br><span class="line">hdfs.batchSize</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 滚动文件夹（Hive也按天分区）</span></span><br><span class="line">hdfs.round</span><br><span class="line">hdfs.roundValue</span><br><span class="line">hdfs.roundUnit</span><br><span class="line"></span><br><span class="line">hdfs.useLocalTimeStamp = true</span><br><span class="line"></span><br><span class="line">以下是生产环境常用：</span><br><span class="line">file-flume-hdfs.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> =============================</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Name the components on this agent</span></span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Describe/configure the <span class="built_in">source</span></span></span><br><span class="line">a1.sources.r1.type = exec</span><br><span class="line">a1.sources.r1.command = tail -F /home/machine/apps/hive-1.1.0-cdh5.16.1/logs/hive.log</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Describe the sink</span></span><br><span class="line">a1.sinks.k1.type = hdfs</span><br><span class="line">a1.sinks.k1.hdfs.path = hdfs://localhost:9000/flume/%Y%m%d/%H</span><br><span class="line"><span class="meta">#</span><span class="bash">上传文件的前缀</span></span><br><span class="line">a1.sinks.k1.hdfs.filePrefix = logs-</span><br><span class="line"><span class="meta">#</span><span class="bash">是否按照时间滚动文件夹</span></span><br><span class="line">a1.sinks.k1.hdfs.round = true</span><br><span class="line"><span class="meta">#</span><span class="bash">多少时间单位创建一个新的文件夹</span></span><br><span class="line">a1.sinks.k1.hdfs.roundValue = 1</span><br><span class="line"><span class="meta">#</span><span class="bash">重新定义时间单位</span></span><br><span class="line">a1.sinks.k1.hdfs.roundUnit = hour</span><br><span class="line"><span class="meta">#</span><span class="bash">是否使用本地时间戳</span></span><br><span class="line">a1.sinks.k1.hdfs.useLocalTimeStamp = true</span><br><span class="line"><span class="meta">#</span><span class="bash">积攒多少个Event才flush到HDFS一次</span></span><br><span class="line">a1.sinks.k1.hdfs.batchSize = 1000</span><br><span class="line"><span class="meta">#</span><span class="bash">设置文件类型，可支持压缩</span></span><br><span class="line">a1.sinks.k1.hdfs.fileType = DataStream</span><br><span class="line"><span class="meta">#</span><span class="bash">多久生成一个新的文件，生产环境不要设置30s，太快了</span></span><br><span class="line">a1.sinks.k1.hdfs.rollInterval = 30</span><br><span class="line"><span class="meta">#</span><span class="bash">设置每个文件的滚动大小，不超过128m，即hdfs块大小</span></span><br><span class="line">a1.sinks.k1.hdfs.rollSize = 134217700</span><br><span class="line"><span class="meta">#</span><span class="bash">文件的滚动与Event数量无关</span></span><br><span class="line">a1.sinks.k1.hdfs.rollCount = 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Use a channel <span class="built_in">which</span> buffers events <span class="keyword">in</span> memory</span></span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Bind the <span class="built_in">source</span> and sink to the channel</span></span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bin/flume-ng agent -c conf/ -f job/file-flume-hdfs.conf -n a1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 会自动在hdfs上创建flume文件夹</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 每30s会滚动一个文件，但前提是这30s内有新数据进来</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 去hive里做一个触发，过30s会滚动一个新文件，	logs-.1568271636815</span></span><br></pre></td></tr></table></figure></div>



<h2 id="案例–实时监控目录下多个新文件"><a href="#案例–实时监控目录下多个新文件" class="headerlink" title="案例–实时监控目录下多个新文件"></a>案例–实时监控目录下多个新文件</h2><p>tail -f 是一行一行读的，现在有个目录，不停的放新文件，且文件放好后，不再修改。</p>
<p>spooldir source</p>
<p>只要目录有新文件就上传，不是说文件有新内容</p>
<p>![屏幕快照 2019-09-12 下午3.12.03](20190911160645622/屏幕快照 2019-09-12 下午3.12.03.png)</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">touch dir-flume-hdfs.conf</span><br><span class="line">复制file-flume-hdfs.conf</span><br><span class="line"></span><br><span class="line">fileSuffix: 默认.COMPLETED 。 通过文件后缀过滤掉已添加的文件</span><br><span class="line"><span class="meta">#</span><span class="bash"> 要上传/不上传 的文件</span></span><br><span class="line">includePattern</span><br><span class="line">ignorePattern</span><br><span class="line">修改以下内容：</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Describe/configure the <span class="built_in">source</span></span></span><br><span class="line">a1.sources.r1.type = spooldir</span><br><span class="line">a1.sources.r1.spoolDir = /home/machine/apps/flume-1.6.0-cdh5.16.1/upload</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 准备txt文件</span></span><br><span class="line">bin/flume-ng agent -c conf/ -f job/dir-flume-hdfs.conf -n a1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 向upload写一个文件</span></span><br><span class="line">cp 1.txt upload/</span><br><span class="line">ll upload/</span><br><span class="line">1.txt.COMPLETED</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 不可能监控动态变化的数据，不要创建文件后再修改文件，不要取同名文件，不要取名后缀为.COMPLETED的文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 被监控文件夹每500ms扫描一次文件变动</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">忽略所有以.tmp结尾的文件，不上传</span></span><br><span class="line">a3.sources.r3.ignorePattern = ([^ ]*\.tmp)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 适合场景：.tmp表示数据正在实时追加，追加完后才去掉tmp后缀，这时，上传改文件，并加上.COMPLETED后缀</span></span><br></pre></td></tr></table></figure></div>

<p>产生日志策略：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在生产一个文件的数据时（追加数据是一个过程），以XXX.tmp命令，这样可以让spooldir忽略监控。</span><br><span class="line">当文件生产完毕，不再修改时，修改其命名，去掉tmp后缀，这时spooldir会立马监控到该文件并且上传，然后加上.COMPLETED</span><br></pre></td></tr></table></figure></div>



<h2 id="案例–实时监控目录下多个追加文件"><a href="#案例–实时监控目录下多个追加文件" class="headerlink" title="案例–实时监控目录下多个追加文件"></a>案例–实时监控目录下多个追加文件</h2><p>目录下的多个新文件，都能被监控</p>
<p>souce对比：</p>
<p>exec: 监控实时追加的文件，不保证数据不丢失。</p>
<p>spooldir：监控目录下产生的新文件，但不监控文件内容变化，延迟高，不实时。</p>
<p>taildir : 支持断点续传，数据不丢失，且实时监控<strong>多个文件夹的多个文件</strong>。</p>
<p>需求：监控一个文件夹的 新文件和旧文件追加，并上传至HDFS</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">被监控目录：flume&#x2F;files</span><br></pre></td></tr></table></figure></div>



<p>先做taildir — logger</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd job</span><br><span class="line">touch files-flume-logger.conf</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建files目录</span></span><br><span class="line">mkdir files</span><br><span class="line">cd files/</span><br><span class="line">touch file1.txt</span><br><span class="line">touch file2.txt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 写files-flume-logger.conf</span></span><br></pre></td></tr></table></figure></div>

<p>files-flume-logger.conf</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> example.conf: A single-node Flume configuration</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Name the components on this agent</span></span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Describe/configure the <span class="built_in">source</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> positionFile: 断点续传的记录文件</span></span><br><span class="line">a1.sources.r1.type = TAILDIR</span><br><span class="line">a1.sources.r1.filegroups = f1 f2</span><br><span class="line">a1.sources.r1.filegroups.f1 = /home/machine/apps/flume-1.6.0-cdh5.16.1/files/file1.txt</span><br><span class="line">a1.sources.r1.filegroups.f2 = /home/machine/apps/flume-1.6.0-cdh5.16.1/files/file2.txt</span><br><span class="line">a1.sources.r1.positionFile = /home/machine/apps/flume-1.6.0-cdh5.16.1/position/position.json</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Describe the sink</span></span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Use a channel <span class="built_in">which</span> buffers events <span class="keyword">in</span> memory</span></span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Bind the <span class="built_in">source</span> and sink to the channel</span></span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure></div>

<p>运行</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bin/flume-ng agent --conf conf/ --conf-file job/files-flume-logger.conf --name a1 -Dflume.root.logger=INFO,console</span><br><span class="line"></span><br><span class="line">echo hello &gt;&gt; file1.txt</span><br><span class="line">echo flume &gt;&gt; file2.txt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在控制台看到了变化</span></span><br></pre></td></tr></table></figure></div>

<p>测试断点续传</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">把flume监控手动挂掉。然后生产数据</span><br><span class="line"></span><br><span class="line">echo hahah &gt;&gt; file2.txt</span><br><span class="line"></span><br><span class="line">重启后，可以断点续传</span><br></pre></td></tr></table></figure></div>

<p>测试是否可以在一个组直接放2个文件</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">a1.sources.r1.filegroups = f1</span><br><span class="line">a1.sources.r1.filegroups.f1 = /home/machine/apps/flume-1.6.0-cdh5.16.1/files/file1.txt</span><br><span class="line">a1.sources.r1.filegroups.f1 = /home/machine/apps/flume-1.6.0-cdh5.16.1/files/file2.txt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 结论是这种写法不行，一个组只能配一个文件，否则会被后者覆盖</span></span><br></pre></td></tr></table></figure></div>



<h1 id="Flume进阶"><a href="#Flume进阶" class="headerlink" title="Flume进阶"></a>Flume进阶</h1><h2 id="案例：flume消费kafka数据到hdfs"><a href="#案例：flume消费kafka数据到hdfs" class="headerlink" title="案例：flume消费kafka数据到hdfs"></a>案例：flume消费kafka数据到hdfs</h2><p>需求</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kafka &gt;  kafka source  &gt;  flume channal  &gt;  hdfs sink  &gt;  hdfs</span><br><span class="line"></span><br><span class="line">Source组件实时去消费Kafka业务Topic获取数据，将消费后的数据通过Flume Sink组件发送到HDFS进行存储。</span><br></pre></td></tr></table></figure></div>

<p>环境</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Kafka、Flume、Hadoop（HDFS可用）</span><br></pre></td></tr></table></figure></div>

<p>启动kafka简单生产者</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动zk</span></span><br><span class="line"><span class="meta">$</span><span class="bash">ZOOKEEPER_HOME/bin/zkServer.sh start</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动kafka</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动阻塞进程</span></span><br><span class="line">bin/kafka-server-start.sh config/server.properties</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动守护进行</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> bin/kafka-server-start.sh -daemon config/server.propertie</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建2个topic</span></span><br><span class="line">./kafka-topics.sh --create --zookeeper mxxcentos7:2181 --replication-factor 1 --partitions 3 --topic my-kafka-topic</span><br><span class="line">./kafka-topics.sh --create --zookeeper mxxcentos7:2181 --replication-factor 1 --partitions 3 --topic my-kafka-topic2</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看Topic：</span></span><br><span class="line">./kafka-topics.sh --list --zookeeper mxxcentos7:2181</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动生产者：</span></span><br><span class="line">./kafka-console-producer.sh --broker-list mxxcentos7:9092 --topic my-kafka-topic</span><br><span class="line">./kafka-console-producer.sh --broker-list mxxcentos7:9092 --topic my-kafka-topic2</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动消费者：./kafka-console-consumer.sh --bootstrap-server mxxcentos7:9092 --topic my-kafka-topic --from-beginning</span></span><br></pre></td></tr></table></figure></div>



<h3 id="kafka-flume-logger测试"><a href="#kafka-flume-logger测试" class="headerlink" title="kafka - flume - logger测试"></a>kafka - flume - logger测试</h3><p>先做一个sink为logger的测试一下</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd apps/flume-1.6.0-cdh5.16.1/job/</span><br><span class="line">touch kafka-flume-logger.conf</span><br></pre></td></tr></table></figure></div>

<p>kafka-flume-logger.conf</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 给agent组件命名</span></span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置 kafka <span class="built_in">source</span></span></span><br><span class="line">a1.sources.r1.type = org.apache.flume.source.kafka.KafkaSource</span><br><span class="line"><span class="meta">#</span><span class="bash"> List of brokers <span class="keyword">in</span> the Kafka cluster used by the <span class="built_in">source</span> （以逗号分隔）</span></span><br><span class="line">a1.sources.r1.kafka.bootstrap.servers = mxxcentos7:9092</span><br><span class="line"><span class="meta">#</span><span class="bash"> Comma-separated（以逗号分隔） list of topics the kafka consumer will <span class="built_in">read</span> messages from.</span></span><br><span class="line">a1.sources.r1.kafka.topics = my-kafka-topic,my-kafka-topic2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 其他可选项</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Maximum number of messages written to Channel <span class="keyword">in</span> one batch (default 1000)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> a1.sources.r1.batchSize = 5000</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Maximum time (<span class="keyword">in</span> ms) before a batch will be written to Channel The batch will be written whenever the first of size and time will be reached. (default 1000)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> a1.sources.r1.batchDurationMillis = = 2000</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Regex that defines <span class="built_in">set</span> of topics the <span class="built_in">source</span> is subscribed on. This property has higher priority than kafka.topics and overrides kafka.topics <span class="keyword">if</span> exists.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> a1.sources.r1.kafka.topics.regex</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Unique identified of consumer group. Setting the same id <span class="keyword">in</span> multiple sources or agents indicates that they are part of the same consumer group</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> a1.sources.r1.kafka.consumer.group.id = custom.g.id</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置 sink</span></span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置channels：mem类型，1000个事件，每次传10个</span></span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将sources和sinks绑定到channels</span></span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure></div>

<p>启动</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bin/flume-ng agent --conf conf/ --conf-file job/kafka-flume-logger.conf --name a1 -Dflume.root.logger=INFO,console</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在kafka生产者里生产数据，看logger sink 的接受效果，如下</span></span><br><span class="line">2019-11-05 14:24:50,615 (SinkRunner-PollingRunner-DefaultSinkProcessor) [INFO - org.apache.flume.sink.LoggerSink.process(LoggerSink.java:95)] Event: &#123; headers:&#123;topic=my-kafka-topic, partition=0, timestamp=1572935089618&#125; body: 78 69 78 69 78 69                               xixixi &#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="kafka-flume-hdfs测试"><a href="#kafka-flume-hdfs测试" class="headerlink" title="kafka - flume - hdfs测试"></a>kafka - flume - hdfs测试</h3><p>将上面案例的sink改成hdfs sink</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 开启hdfs</span></span><br><span class="line">start-dfs.sh</span><br><span class="line"><span class="meta">#</span><span class="bash"> mxxcentos7:50070</span></span><br><span class="line"></span><br><span class="line">cd job/</span><br><span class="line">touch kafka-flume-hdfs.conf</span><br></pre></td></tr></table></figure></div>

<p>kafka-flume-hdfs.conf</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 给agent组件命名</span></span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置 kafka <span class="built_in">source</span></span></span><br><span class="line">a1.sources.r1.type = org.apache.flume.source.kafka.KafkaSource</span><br><span class="line"><span class="meta">#</span><span class="bash"> List of brokers <span class="keyword">in</span> the Kafka cluster used by the <span class="built_in">source</span> （以逗号分隔）</span></span><br><span class="line">a1.sources.r1.kafka.bootstrap.servers = mxxcentos7:9092</span><br><span class="line"><span class="meta">#</span><span class="bash"> Comma-separated（以逗号分隔） list of topics the kafka consumer will <span class="built_in">read</span> messages from.</span></span><br><span class="line">a1.sources.r1.kafka.topics = my-kafka-topic,my-kafka-topic2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> --------修改的部分 start-------------------</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置 sink</span></span><br><span class="line">a1.sinks.k1.type = hdfs</span><br><span class="line"><span class="meta">#</span><span class="bash"> 按小时分目录（也可以按天）</span></span><br><span class="line">a1.sinks.k1.hdfs.path = hdfs://mxxcentos7:9000/report-form-data/flume/%&#123;topic&#125;/%Y%m%d/%H</span><br><span class="line"><span class="meta">#</span><span class="bash"> 上传文件的前缀</span></span><br><span class="line">a1.sinks.k1.hdfs.filePrefix = logs-</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置滚动文件夹规则</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 是否按照时间滚动文件夹（没达到hdfs.batchSize但是达到了指定时间，也要产生滚动）</span></span><br><span class="line">a1.sinks.k1.hdfs.round = true</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重新定义时间单位</span></span><br><span class="line">a1.sinks.k1.hdfs.roundUnit = hour</span><br><span class="line"><span class="meta">#</span><span class="bash"> 多少时间单位创建一个新的文件夹（与hdfs.roundUnit，hdfs.path配合）</span></span><br><span class="line">a1.sinks.k1.hdfs.roundValue = 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 是否使用本地时间戳</span></span><br><span class="line">a1.sinks.k1.hdfs.useLocalTimeStamp = true</span><br><span class="line"><span class="meta">#</span><span class="bash"> 积攒多少个Event才flush到HDFS一次</span></span><br><span class="line">a1.sinks.k1.hdfs.batchSize = 1000</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置文件类型，可支持压缩</span></span><br><span class="line">a1.sinks.k1.hdfs.fileType = DataStream</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置滚动文件规则</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 多久生成一个新的文件，生产环境不要设置30s，太快了</span></span><br><span class="line">a1.sinks.k1.hdfs.rollInterval = 30</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置每个文件的滚动大小，不超过128m，即hdfs块大小</span></span><br><span class="line">a1.sinks.k1.hdfs.rollSize = 134217700</span><br><span class="line"><span class="meta">#</span><span class="bash"> 文件的滚动与Event数量无关</span></span><br><span class="line">a1.sinks.k1.hdfs.rollCount = 0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> --------修改的部分 end -------------------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置channels：mem类型，1000个事件，每次传10个</span></span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将sources和sinks绑定到channels</span></span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure></div>



<p>启动</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Flume要想将数据输出到HDFS，必须持有Hadoop相关jar包(chd版本的已经集成过了，不用管)</span></span><br><span class="line"></span><br><span class="line">bin/flume-ng agent -c conf/ -f job/kafka-flume-hdfs.conf -n a1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 会自动在hdfs上创建文件夹</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 每30s会滚动一个文件，但前提是这30s内有新数据进来</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 去kafka生产者生产点数据，测试一下30s文件滚动的效果</span></span><br></pre></td></tr></table></figure></div>

<p>hdfs上的数据效果：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 文件目录(自动生成)</span></span><br><span class="line">/report-form-data/flume/my-kafka-topic/20191105/16</span><br><span class="line">/report-form-data/flume/my-kafka-topic2/20191105/16</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 目录下的文件</span></span><br><span class="line">logs-.1572937573119</span><br><span class="line">logs-.1572937799038</span><br><span class="line">logs-.1572937910088</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 数据样式</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> logs-.1572937799038</span></span><br><span class="line">444ddd</span><br><span class="line">aaa111</span><br><span class="line">bbb222</span><br><span class="line">ccc333</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> logs-.1572937910088</span></span><br><span class="line">ddd444</span><br></pre></td></tr></table></figure></div>



<h3 id="解析：hdfs配置中roll-和-round-的解释"><a href="#解析：hdfs配置中roll-和-round-的解释" class="headerlink" title="解析：hdfs配置中roll 和 round 的解释"></a>解析：hdfs配置中roll 和 round 的解释</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 生产环境下以下配置很重要</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 滚动文件</span></span><br><span class="line">hdfs.rollInterval</span><br><span class="line">hdfs.rollSize</span><br><span class="line">hdfs.rollCount</span><br><span class="line"></span><br><span class="line">hdfs.batchSize</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 滚动文件夹（Hive也按天分区）</span></span><br><span class="line">hdfs.round</span><br><span class="line">hdfs.roundValue</span><br><span class="line">hdfs.roundUnit</span><br></pre></td></tr></table></figure></div>



<h3 id="解析：按不同topic在hdfs上分目录方案的原理"><a href="#解析：按不同topic在hdfs上分目录方案的原理" class="headerlink" title="解析：按不同topic在hdfs上分目录方案的原理"></a>解析：按不同topic在hdfs上分目录方案的原理</h3><p>1、kafka.topics可以配置多个topic，然后hdfs.path的目录设置为<code>/report-form-data/flume/%{topic}/%Y%m%d/%H</code>。</p>
<p>实现思路：kafka发的数据，每个event的headers中有topic字段，其中<code>%{topic}</code>就是取这个字段当目录</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在kafka生产者里生产数据，看logger sink 的接受效果，如下</span></span><br><span class="line">2019-11-05 14:24:50,615 (SinkRunner-PollingRunner-DefaultSinkProcessor) [INFO - org.apache.flume.sink.LoggerSink.process(LoggerSink.java:95)] Event: &#123; headers:&#123;topic=my-kafka-topic, partition=0, timestamp=1572935089618&#125; body: 78 69 78 69 78 69                               xixixi &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果有更深层的要求需要自己编写flume拦截器代码解析这个字段</span></span><br></pre></td></tr></table></figure></div>



<h3 id="测试环境和生产环境下的配置"><a href="#测试环境和生产环境下的配置" class="headerlink" title="测试环境和生产环境下的配置"></a>测试环境和生产环境下的配置</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 多久生成一个新的文件，生产环境不要设置30s，太快了</span></span><br><span class="line">a1.sinks.k1.hdfs.rollInterval = 30</span><br></pre></td></tr></table></figure></div>





<h1 id="可能遇到的BUG"><a href="#可能遇到的BUG" class="headerlink" title="可能遇到的BUG"></a>可能遇到的BUG</h1><h2 id="nc客户端无法使用"><a href="#nc客户端无法使用" class="headerlink" title="nc客户端无法使用"></a>nc客户端无法使用</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">报错：Ncat: Connection refused.</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> centos7安装netcat:</span></span><br><span class="line">https://my.oschina.net/u/3530967/blog/1560985</span><br></pre></td></tr></table></figure></div>



<h1 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h1><p>继续以上内容</p>
<p>问题：能同时监控 旧文件追加 和 新文件产生吗 ？</p>
<p>以上都是基于mem channal的</p>
<p>一个对比：</p>
<p>sqoop: 传统关系型数据库（musql） –&gt; sqoop   –&gt; 大数据平台（Hadoop hdfs/hive/hbase）</p>
<p>可以写定时器实时增量导入。</p>
<p>定位是数据迁移。导入结构化数据。Sqoop是关系型数据库和HDFS之间的一个桥梁。</p>
<p>Flume：监控文件/文件夹/端口/socket  数据变化   –&gt;Flume –&gt;  大数据平台（Hadoop hdfs/hive/hbase）</p>
<p>定位主要是各种来源的日志采集。</p>
]]></content>
      <categories>
        <category>大数据分布式</category>
        <category>数据采集</category>
      </categories>
      <tags>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>java设计模式-23种设计模式</title>
    <url>/2019/09/06/20190906210551001/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="23种设计模式概述"><a href="#23种设计模式概述" class="headerlink" title="23种设计模式概述"></a>23种设计模式概述</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">创建型模式</span><br><span class="line">	工厂方法模式</span><br><span class="line">	抽象工厂模式</span><br><span class="line">	建造者模式</span><br><span class="line">	单例模式</span><br><span class="line">	原型模式</span><br><span class="line">结构型模式</span><br><span class="line">	适配器模式</span><br><span class="line">	装饰者模式</span><br><span class="line">	代理模式</span><br><span class="line">	外观模式</span><br><span class="line">	桥接模式</span><br><span class="line">	组合模式</span><br><span class="line">	享元模式</span><br><span class="line">行为型模式</span><br><span class="line">	模板方法模式（Template Method）</span><br><span class="line">    策略模式（Strategy）</span><br><span class="line">    命令模式（Command）</span><br><span class="line">    中介者模式（Mediator）</span><br><span class="line">    观察者模式（Observer）</span><br><span class="line">    迭代器模式（Iteratior）</span><br><span class="line">    访问者模式（Visiter）</span><br><span class="line">    责任链模式（Chain of Responsibility）</span><br><span class="line">    备忘录模式（Memento）</span><br><span class="line">    状态模式（State）</span><br><span class="line">    解释器模式（Interpreter）</span><br></pre></td></tr></table></figure></div>



<h1 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h1><blockquote>
<p>参考：<a href="https://blog.csdn.net/weixin_37778801/article/details/84203415" target="_blank" rel="noopener">第4章 简单工厂模式</a></p>
</blockquote>
<p><strong>概念</strong></p>
<p>定义与类型</p>
<ul>
<li>定义：由一个工厂对象决定创建出哪一种产品类的实例</li>
<li>创建型：不属于23种设计模式</li>
</ul>
<p>适用场景</p>
<ul>
<li>工厂类负责创建的对象比较少</li>
<li>客户端（应用层）只知道传入工厂类的参数，对于如何创建对象（创建对象的具体逻辑）不关心</li>
</ul>
<p>优点</p>
<ul>
<li>只需要传入一个正确的参数，就可以获取你所需要的对象而无须知道其创建细节</li>
</ul>
<p>缺点</p>
<ul>
<li>工厂类的职责相对过重，增加新的产品时，需要修改工厂类的判断逻辑，违背了开闭原则</li>
<li>无法形成继承的等级结构</li>
</ul>
<p><strong>coding</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Video</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">product</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaVideo</span> <span class="keyword">extends</span> <span class="title">Video</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">product</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"录制Java课程视频"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Python</span> <span class="keyword">extends</span> <span class="title">Video</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">product</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"录制Python的课程视频"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VideoFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Video <span class="title">getVideo</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"java"</span>.equalsIgnoreCase(type)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> JavaVideo();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"python"</span>.equalsIgnoreCase(type)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Python();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[]args)</span></span>&#123;</span><br><span class="line">        VideoFactory videoFactory = <span class="keyword">new</span> VideoFactory();</span><br><span class="line">        Video video = videoFactory.getVideo(<span class="string">"java"</span>);</span><br><span class="line">        <span class="keyword">if</span> (video == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        video.product();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">具体的产生类的方法都在工厂类里面，这个就是简单工厂模式;</span><br><span class="line">但是，如果我们还要录制一个FE的前端课程，那么，我们就要对工厂类里面的方法进行扩展，那么这个并不符合开闭原则：</span><br><span class="line"></span><br><span class="line">----------------------</span><br><span class="line">改：用反射来演进一下：</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VideoFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Video <span class="title">getVideo</span><span class="params">(Class clazz)</span> </span>&#123;</span><br><span class="line">        Video video = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            video = (Video) Class.forName(clazz.getName()).newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> video;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[]args)</span></span>&#123;</span><br><span class="line">        VideoFactory videoFactory = <span class="keyword">new</span> VideoFactory();</span><br><span class="line">        Video video = videoFactory.getVideo(JavaVideo<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (video == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        video.product();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">这里从一定原则上讲是符合开闭原则的：</span><br><span class="line">如果我们要<span class="keyword">new</span>什么类，那我们就只需要传入这个类的类型就可以了，而这个工厂是不需要变化的;</span><br></pre></td></tr></table></figure></div>



<p><strong>JDK源码解析</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Calendar</span><br><span class="line">DriverManager里面的getConnection()方法</span><br><span class="line">LoggerFactory这个类里面的getLogger方法</span><br></pre></td></tr></table></figure></div>



<h1 id="1-工厂方法模式"><a href="#1-工厂方法模式" class="headerlink" title="1-工厂方法模式"></a>1-工厂方法模式</h1><blockquote>
<p>参考：<a href="https://blog.csdn.net/weixin_37778801/article/details/84309498" target="_blank" rel="noopener">第5章 工厂方法模式</a></p>
</blockquote>
<p><strong>概念</strong></p>
<p>工厂方法-定义与类型</p>
<ul>
<li>定义一个创建对象的接口，但让实现这个接口的类来决定实例化哪个类，工厂方法让这个类的实例化推迟到子类中进行</li>
<li>类型：创建型</li>
<li>两个关键词：工厂、方法<ul>
<li>工厂：用来创建对象</li>
<li>方法：通过子类实现方法来创建对象</li>
</ul>
</li>
</ul>
<p>工厂方法-适用场景</p>
<ul>
<li>创建对象需要大量重复的代码</li>
<li>客户端（应用层）不依赖于产品类实例如何被创建、实现等细节一个类通过子类来指定创建哪个对象</li>
</ul>
<p>工厂方法-优点</p>
<ul>
<li>用户只需关心所需产品对应的工厂(客户端不需要知道具体产品类的类名)，无须关心创建细节。加入新产品符合开闭原则，提高可扩展性</li>
</ul>
<p>工厂方法-缺点</p>
<ul>
<li>类的个数容易过多，增加复杂度增加了系统的抽象性和理解难度<ul>
<li>类的个数增加的原因：在添加新产品的时候要添加新的产品类，而且还要提供与此产品类对应的工厂类</li>
</ul>
</li>
</ul>
<p><strong>coding</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Video</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">JavaVideo</span> <span class="keyword">extends</span> <span class="title">Video</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">PythonVideo</span> <span class="keyword">extends</span> <span class="title">Video</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">// 把之前的工厂类改成一个抽象类，里面只留一个待实现的抽象方法</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">abstract</span> <span class="title">class</span> <span class="title">VideoFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Video <span class="title">getVideo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">【相同类型的一个产品，我们称之为产品等级，他们的等级都是在视频的这个等级上;</span><br><span class="line">产品等级和产品族是区分工厂方法和抽象方法的重要概念;】</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaVideoFactory</span> <span class="keyword">extends</span> <span class="title">VideoFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Video <span class="title">getVideo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JavaVideo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PythonVideoFactory</span> <span class="keyword">extends</span> <span class="title">VideoFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Video <span class="title">getVideo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PythonVideo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[]args)</span></span>&#123;</span><br><span class="line">    	<span class="comment">// 需要JavaVideo直接去找对应的工厂，而不用知道JavaVideo的任何信息</span></span><br><span class="line">    	<span class="comment">// 在这段代码中 JavaVideo这个类根本没有出现</span></span><br><span class="line">        VideoFactory videoFactory = <span class="keyword">new</span> JavaVideoFactory();</span><br><span class="line">        Video video = videoFactory.getVideo();</span><br><span class="line">        video.product();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">【产品族的概念：</span><br><span class="line">	Java的视频，Java的手记，他们都属于Java,他们属于同一产品族。</span><br><span class="line">	而Java的视频，Python的视频，FE的视频来说，他们属于同一产品等级。</span><br><span class="line">	这个概念有点拗口，抽象工厂就是解决产品族的问题。】</span><br></pre></td></tr></table></figure></div>



<p><strong>jdk源码解析</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Iterator</span><br><span class="line">URLStreamHandlerFactory</span><br></pre></td></tr></table></figure></div>



<h1 id="2-抽象工厂模式"><a href="#2-抽象工厂模式" class="headerlink" title="2-抽象工厂模式"></a>2-抽象工厂模式</h1><blockquote>
<p>参考：<a href="https://blog.csdn.net/weixin_37778801/article/details/84310346" target="_blank" rel="noopener">第6章 抽象工厂模式</a></p>
</blockquote>
<p><strong>概念</strong></p>
<p>定义与类型</p>
<ul>
<li>定义：抽象工厂模式提供一个创建一系列相关或相互依赖对象的接口。</li>
<li>无需指定它们具体的类</li>
<li>创建型</li>
</ul>
<p>适用场景</p>
<ul>
<li>强调一系列相关的产品对象（属于同一产品族）一起使用创建对象需要大量重复的代码</li>
</ul>
<p>优点</p>
<ul>
<li>将一系列的产品族统一到一起创建</li>
</ul>
<p>缺点</p>
<ul>
<li>规定了所有可能被创建的产品集合，产品族中扩展新的产品困难，需要修改接口</li>
</ul>
<p>产品等级结构和产品族</p>
<p>产品族：美的空调、美的冰箱、美的电视</p>
<p>产品等级结构：美的空调、海尔空调、格力空调</p>
<p>工厂方法针对产品等级结构、抽象工厂针对产品族</p>
<p><strong>coding</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">新的要求：每一个课程不仅仅要有视频，还要有对应的手记，如果用工厂方法的方式来进行扩展的话 。这个时候，就很容易出现类爆炸的现象。</span><br><span class="line"></span><br><span class="line"><span class="comment">// 课程</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Video</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 手记</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Article</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 课程工厂类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CourseFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 获取视频 */</span></span><br><span class="line">    <span class="function">Video <span class="title">getVideo</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 获取手记 */</span></span><br><span class="line">    <span class="function">Article <span class="title">getArticle</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaVideo</span> <span class="keyword">extends</span> <span class="title">Video</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">JavaArticle</span> <span class="keyword">extends</span> <span class="title">Article</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">// <span class="title">java</span>产品族的课程工厂</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">JavaCourseFactory</span> <span class="keyword">implements</span> <span class="title">CourseFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Video <span class="title">getVideo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JavaVideo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Article <span class="title">getArticle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JavaArticle();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PythonArticle</span> <span class="keyword">extends</span> <span class="title">Article</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">PythonVideo</span> <span class="keyword">extends</span> <span class="title">Video</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">PythonCourseFactory</span> <span class="keyword">implements</span> <span class="title">CourseFactory</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">// 只要是从<span class="title">Java</span>产品族里面拿的肯定是<span class="title">Java</span>的视频和<span class="title">Java</span>的手记</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[]args)</span></span>&#123;</span><br><span class="line">        CourseFactory courseFactory = <span class="keyword">new</span> JavaCourseFactory();</span><br><span class="line">        Article article = courseFactory.getArticle();</span><br><span class="line">        Video video = courseFactory.getVideo();</span><br><span class="line">        <span class="comment">/** 只要是从Java产品族里面拿的肯定是Java的视频和Java的手记 */</span></span><br><span class="line">        article.produce();</span><br><span class="line">        video.produce();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">【在使用抽象工厂的时候，尽量找那种固定程度比较高的，像课程里面的视频和手记，视频和手记都是必须要有的，就可以用抽象工厂模式来解决】</span><br><span class="line"></span><br><span class="line">缺点：在新增产品等级的时候，会比较的麻烦。如果在现有的产品族里面添加新的产品等级，就违背了开闭原则了;</span><br></pre></td></tr></table></figure></div>



<p><strong>jdk源码解析</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Connection</span><br><span class="line">mysql oracle属于同一个产品族</span><br></pre></td></tr></table></figure></div>



<h1 id="3-建造者模式"><a href="#3-建造者模式" class="headerlink" title="3-建造者模式"></a>3-建造者模式</h1><blockquote>
<p>参考：<a href="https://blog.csdn.net/weixin_37778801/article/details/84329073" target="_blank" rel="noopener">第7章 建造者模式</a></p>
</blockquote>
<p><strong>概念</strong></p>
<p>定义与类型</p>
<ul>
<li>定义：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示（炒菜 &gt; 炒出不同的菜）</li>
<li>用户只需要指定创建的类型就可以得到它，建造过程及细节不需要知道</li>
</ul>
<p>使用场景</p>
<ul>
<li>一个对象具有非常复杂的内部结构（很多属性）</li>
<li>想把复杂对象的创建和使用分离</li>
</ul>
<p>优点</p>
<ul>
<li>创建和使用分离</li>
</ul>
<p>缺点：</p>
<ul>
<li>产生多余的builder对象</li>
<li>产品内部发生变化，修改成本较大</li>
</ul>
<p>区别</p>
<ul>
<li>建造者模式更注重方法的调用顺序，可以创建复杂产品（不仅要创造产品，还要知道组成部件）</li>
<li>工厂模式更注重创建产品</li>
</ul>
<p><strong>coding</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 课程类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Course</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String courseName;</span><br><span class="line">    <span class="keyword">private</span> String coursePPT;</span><br><span class="line">    <span class="keyword">private</span> String courseVideo;</span><br><span class="line">    <span class="keyword">private</span> String courseArticle;</span><br><span class="line">    <span class="comment">/** 问题和答案 */</span></span><br><span class="line">    <span class="keyword">private</span> String courseQA;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CourseBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildCourseName</span><span class="params">(String courseName)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildCoursePPT</span><span class="params">(String coursePPT)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildCourseVideo</span><span class="params">(String courseVideo)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildCourseArticle</span><span class="params">(String courseArticle)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildCourseQA</span><span class="params">(String courseQA)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Course <span class="title">makeCourse</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现CourseBuilder 的子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CourseActualBuilder</span> <span class="keyword">extends</span> <span class="title">CourseBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 这里把课程组合到实际的Builde当中 */</span></span><br><span class="line">    <span class="keyword">private</span> Course course = <span class="keyword">new</span> Course();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildCourseName</span><span class="params">(String courseName)</span> </span>&#123;</span><br><span class="line">        course.setCourseName(courseName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildCoursePPT</span><span class="params">(String coursePPT)</span> </span>&#123;</span><br><span class="line">        course.setCoursePPT(coursePPT);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">        </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Course <span class="title">makeCourse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> course;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 教练类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Coach</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> CourseBuilder courseBuilder;</span><br><span class="line">    <span class="comment">/** 这里的CourseBuilder通过set的方式给注入进来 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCourseBuilder</span><span class="params">(CourseBuilder courseBuilder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.courseBuilder = courseBuilder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Course <span class="title">makeCourse</span><span class="params">(String courseName,String coursePPT,</span></span></span><br><span class="line"><span class="function"><span class="params">                             String courseVideo,String courseArticle,String courseQA)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.courseBuilder.buildCourseName(courseName);</span><br><span class="line">        <span class="keyword">this</span>.courseBuilder.buildCoursePPT(coursePPT);</span><br><span class="line">        <span class="keyword">this</span>.courseBuilder.buildCourseVideo(courseVideo);</span><br><span class="line">        <span class="keyword">this</span>.courseBuilder.buildCourseArticle(courseArticle);</span><br><span class="line">        <span class="keyword">this</span>.courseBuilder.buildCourseQA(courseQA);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.courseBuilder.makeCourse();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[]args)</span></span>&#123;</span><br><span class="line">        <span class="comment">/**抽象类的引用指向子类的实现 */</span></span><br><span class="line">        CourseBuilder courseBuilder = <span class="keyword">new</span> CourseActualBuilder();</span><br><span class="line">        Coach coach = <span class="keyword">new</span> Coach();</span><br><span class="line">        <span class="comment">/** 这里利用set方法注入进去 */</span></span><br><span class="line">        coach.setCourseBuilder(courseBuilder);</span><br><span class="line">        Course course = coach.makeCourse(<span class="string">"Java设计模式"</span>, <span class="string">"Java设计模式PPT"</span>, <span class="string">"Java设计模式视频"</span>, <span class="string">"Java设计模式手记"</span>, <span class="string">"Java设计模式问答"</span>);</span><br><span class="line">        System.out.println(course);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-------------------------------------------------</span><br><span class="line">演进：使用静态内部类</span><br><span class="line">【把具体的实体类和实体类对应的Builder写在一个类里面，这里一个很关键的地方就是<span class="keyword">this</span>和静态内部类的使用】</span><br><span class="line">关于静态内部类：</span><br><span class="line">- 外部类可以访问内部类的所有方法与属性，包括私有方法与属性</span><br><span class="line">- 不能够从静态内部类的对象中访问外部类的非静态成员</span><br><span class="line">- 静态内部类属于外部类，而不是属于外部类的对象</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Course</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String courseName;</span><br><span class="line">    <span class="keyword">private</span> String coursePPT;</span><br><span class="line">    <span class="keyword">private</span> String courseVideo;</span><br><span class="line">    <span class="keyword">private</span> String courseArticle;</span><br><span class="line">    <span class="keyword">private</span> String courseQA;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 可以直接访问内部类的私有属性 courseBuilder.courseName</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Course</span><span class="params">(CourseBuilder courseBuilder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.courseName = courseBuilder.courseName;</span><br><span class="line">        <span class="keyword">this</span>.coursePPT = courseBuilder.coursePPT;</span><br><span class="line">        <span class="keyword">this</span>.courseVideo = courseBuilder.courseVideo;</span><br><span class="line">        <span class="keyword">this</span>.courseArticle = courseBuilder.courseArticle;</span><br><span class="line">        <span class="keyword">this</span>.courseQA = courseBuilder.courseQA;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 静态内部类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CourseBuilder</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String courseName;</span><br><span class="line">        <span class="keyword">private</span> String coursePPT;</span><br><span class="line">        <span class="keyword">private</span> String courseVideo;</span><br><span class="line">        <span class="keyword">private</span> String courseArticle;</span><br><span class="line">        <span class="keyword">private</span> String courseQA;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 返回该类本身，可以使用链式调用</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> CourseBuilder <span class="title">builderCourseName</span><span class="params">(String courseName)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.courseName = courseName;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> CourseBuilder <span class="title">builderCoursePPT</span><span class="params">(String coursePPT)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.coursePPT = coursePPT;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        ...</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 内部类提供了某种进入外部类的窗户</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Course <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Course(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 应用层</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[]args)</span></span>&#123;</span><br><span class="line">    	<span class="comment">// 可以按需求链式调用，许多属性可以使用默认值</span></span><br><span class="line">        Course course = <span class="keyword">new</span> Course.CourseBuilder()</span><br><span class="line">                .builderCourseName(<span class="string">"Java设计模式"</span>)</span><br><span class="line">                .builderCoursePPT(<span class="string">"Java设计模式PPT"</span>)</span><br><span class="line">                .builderCourseVideo(<span class="string">"Java设计模式视频"</span>)</span><br><span class="line">                .builderCourseArticle(<span class="string">"Java设计模式手记"</span>)</span><br><span class="line">                .builderCourseQA(<span class="string">"Java设计模式问答"</span>).build();</span><br><span class="line">        System.out.println(course);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p><strong>源码解析</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">StringBuilder</span><br><span class="line">Guava</span><br></pre></td></tr></table></figure></div>



<h1 id="4-单例模式"><a href="#4-单例模式" class="headerlink" title="4-单例模式"></a>4-单例模式</h1><blockquote>
<p>参考：<a href></a></p>
</blockquote>
<p><strong>概念</strong></p>
<p><strong>coding</strong></p>
<p><strong>jdk源码解析</strong></p>
<h1 id="5-原型模式"><a href="#5-原型模式" class="headerlink" title="5-原型模式"></a>5-原型模式</h1><blockquote>
<p>参考：<a href></a></p>
</blockquote>
<p><strong>概念</strong></p>
<p><strong>coding</strong></p>
<p><strong>jdk源码解析</strong></p>
]]></content>
      <categories>
        <category>java设计模式</category>
      </categories>
      <tags>
        <tag>java设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Sqoop-入门实践</title>
    <url>/2019/09/04/20190904162811918/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[TOC]</p>
<blockquote>
<p>参考：<a href="https://www.imooc.com/learn/1044" target="_blank" rel="noopener">https://www.imooc.com/learn/1044</a></p>
</blockquote>
<h1 id="第1章-概述"><a href="#第1章-概述" class="headerlink" title="第1章 概述"></a>第1章 概述</h1><p>本章中将概要介绍Sqoop的作用，以及如何获取Sqoop</p>
<p>预装环境：</p>
<p>hadoop、mysql</p>
<h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><p><strong>Sqoop是什么？</strong></p>
<ul>
<li>开源的数据传输工具，Apache项目</li>
<li>Hadoop生态圈中的一个第三方模块（将关系型数据库数据和Hadoop平台数据进行传递，将关系型数据和文件类型数据相互转换）</li>
</ul>
<p><strong>为什么要使用Sqoop?</strong></p>
<ul>
<li>快速实现Hadoop(HDFS/hive/hbase)与传统数据库之间的数据传递</li>
<li>Sqoop提供了许多数据传输方式（分布式并行导入）</li>
<li>Sqoop支持多种数据库（mysql，oracle）</li>
</ul>
<h2 id="常用功能及运行原理"><a href="#常用功能及运行原理" class="headerlink" title="常用功能及运行原理"></a>常用功能及运行原理</h2><p><strong>Sqoop常用功能</strong></p>
<ul>
<li>数据导入（关系型 &gt; Hadoop）</li>
<li>数据导出（Hadoop &gt; 关系型，将hadoop处理完的计算结果提供给业务系统使用）</li>
<li>Sqoop作业（保存执行命令中设置的参数，方便重复执行）</li>
<li>案例：实现定时数据同步</li>
</ul>
<p>![屏幕快照 2019-09-04 下午4.52.34](20190904162811918/屏幕快照 2019-09-04 下午4.52.34.png)</p>
<p><strong>Sqoop运行原理</strong></p>
<p>![屏幕快照 2019-09-04 下午4.55.57](20190904162811918/屏幕快照 2019-09-04 下午4.55.57.png)</p>
<p>流程：</p>
<ul>
<li>总描述：Sqoop接收到用户的导入命令==&gt; 根据命令生成MapReduce代码，并提交给Hadoop==&gt; Hadoop会启动Map任务，完成数据导入。</li>
<li>两个步骤一个中心<ul>
<li>命令输入步骤：程序员输入command提交给Sqoop(比如导入数据到HDFS)，然后Sqoop全权负责导入事宜。首先读取数据表结构，生成运行类打成jar包，提交给Hadoop。</li>
<li>Map导入步骤：Hadoop收到Sqoop生成的jar包后会启动Map任务，Map任务去读取源数据表的内容，将读取到的数据导入到目标数据库中。</li>
<li>一个中心：Map任务（负责核心操作，数据导入导出）</li>
</ul>
</li>
</ul>
<p><strong>Sqoop核心技术</strong></p>
<ul>
<li>生成MapReduce</li>
<li>作业创建（主要用于定时任务执行，例如增量导入）</li>
<li>数据映射（自动完成数据类型映射转换，关系型数据类型==&gt; Hadoop相应的数据类型，可自定义映射关系）</li>
<li>并行控制（采用Sqoop集群，或多个任务并行进行数据导入导出工作，主要在大型数据导入导出，为了提升性能）</li>
</ul>
<h1 id="第2章-Sqoop下载与安装"><a href="#第2章-Sqoop下载与安装" class="headerlink" title="第2章 Sqoop下载与安装"></a>第2章 Sqoop下载与安装</h1><p>本章中将讲解，如何下载Sqoop安装包以及进行Sqoop环境变量配置</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载、解压、环境变量</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> wget http://archive.apache.org/dist/sqoop/1.4.7/sqoop-1.4.7.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar -zxvf sqoop-1.4.7.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vi ~/.bash_profile</span></span><br><span class="line">export SQOOP_HOME=/opt/sqoop-1.4.7</span><br><span class="line">export PATH=$SQOOP_HOME/bin:$PATH</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> ~/.bash_profile</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$SQOOP_HOME</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> conf/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cp sqoop-env-template.sh sqoop-env.sh</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vi sqoop-env.sh</span></span><br><span class="line">export HADOOP_COMMON_HOME=/opt/hadoop-3.1.2</span><br><span class="line">export HADOOP_MAPRED_HOME=/opt/hadoop-3.1.2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入bin目录，修改文件，注释掉liux中没装的项目：HBASE_HOME	HCAT_HOME	ACCUMULO_HOME</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vi configure-sqoop</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> sqoop version</span></span><br><span class="line">错误: 找不到或无法加载主类 org.apache.sqoop.Sqoop</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解决方案：</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入bin 修改sqoop，最后一行，如下：</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">exec</span> <span class="variable">$&#123;HADOOP_COMMON_HOME&#125;</span>/bin/hadoop org.apache.sqoop.Sqoop <span class="string">"<span class="variable">$@</span>"</span></span></span><br><span class="line">exec $&#123;HADOOP_COMMON_HOME&#125;/bin/hadoop jar $SQOOP_HOME/lib/sqoop-1.4.7.jar org.apache.sqoop.Sqoop "$@"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> sqoop-1.4.7.jar是不存在的，需要下载sqoop-1.4.7.bin__hadoop-2.6.0.tar.gz解压，将sqoop-1.4.7.jar取出来，放到<span class="variable">$SQOOP_HOME</span>/lib/ 下</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用帮助</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sqoop <span class="built_in">help</span> import</span></span><br></pre></td></tr></table></figure></div>



<h1 id="第3章-Sqoop导入"><a href="#第3章-Sqoop导入" class="headerlink" title="第3章 Sqoop导入"></a>第3章 Sqoop导入</h1><h2 id="全表导入"><a href="#全表导入" class="headerlink" title="全表导入"></a>全表导入</h2><p>本章中将讲解，如何将数据分别以全表和增量方式（两种增量方式对比append和lastmodified两种模式）导入HDFS</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hadoop fs -mkdir /user/root/movies</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> sqoop import （控制参数）（导入参数）</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -m 1 单任务执行</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 默认逐行导入，每列数据用 ‘,’ 分隔</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sqoop import --connect jdbc:mysql://10.211.55.6:3306/mxx_test --username machine --password 4869 --table topMovie250 -m 1 --target-dir /user/root/movies/topMovie250</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果报错找不到类，就把对应的jar包放在<span class="variable">$SQOOP_HOME</span>/lib下</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 成功的话，会启动mapreduce作业</span></span><br><span class="line">2019-09-05 07:41:10,463 INFO mapreduce.ImportJobBase: Transferred 109.9932 KB in 59.5167 seconds (1.8481 KB/sec)</span><br><span class="line">2019-09-05 07:41:10,468 INFO mapreduce.ImportJobBase: Retrieved 250 records.</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> hadoop fs -ls /user/root/movies</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hadoop fs -cat /user/root/movies/topMovie250/*</span></span><br></pre></td></tr></table></figure></div>

<h2 id="限制范围导入"><a href="#限制范围导入" class="headerlink" title="限制范围导入"></a>限制范围导入</h2><p>导入rank&gt;200的rank和movieName</p>
<p>2种方法：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">colmums：指定要导入的列</span><br><span class="line">-- colmums 列名1,列名2</span><br><span class="line">where：</span><br><span class="line">-- where &lt;条件&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> sqoop import --connect jdbc:mysql://10.211.55.6:3306/mxx_test --username machine --password 4869 --table topMovie250 -m 1 --target-dir /user/root/movies/movieRankAndName --columns <span class="string">'rank,movieName'</span> --<span class="built_in">where</span> <span class="string">'rank&gt;200'</span></span></span><br><span class="line"></span><br><span class="line">-- query &lt;SQL&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> sqoop import --connect jdbc:mysql://10.211.55.6:3306/mxx_test --username machine --password 4869 -m 1 --target-dir /user/root/movies/movieFreeSQL --query <span class="string">"select rank,movieName from topMovie250 where rank&gt;200 and \$CONDITIONS"</span></span></span><br></pre></td></tr></table></figure></div>



<h2 id="增量导入"><a href="#增量导入" class="headerlink" title="增量导入"></a>增量导入</h2><p>在生产系统中很常用，比如系统当天凌晨需要将昨天的交易数据抽取出来导入到HDFS中做并行计算。</p>
<p>意图：持续将源数据导入到存储位置，但每次只会将源数据中新增内容导入到目标地址</p>
<p>核心参数：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-check-column		检查指定列</span><br><span class="line">-last-value		上一次导入中检查列的最大值</span><br><span class="line">-incremental		标识增量导入</span><br></pre></td></tr></table></figure></div>

<p>append模式</p>
<p>意图：对数据进行附加，不支持更新数据。</p>
<p>应用：数据只累加不修改，如日志数据搜集</p>
<p>lastmodified模式</p>
<p>意图：在源表中数据更新的时候使用</p>
<hr>
<p><strong>演示apend模式</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 先导入rank&lt;=100的数据(rank,movieName)</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sqoop import --connect jdbc:mysql://10.211.55.6:3306/mxx_test --username machine --password 4869 -m 1 --target-dir /user/root/movies/movieAppend --query <span class="string">"select rank,movieName from topMovie250 where rank&lt;=100 and \$CONDITIONS"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> append 把100以后的数据全部追加到hdfs中</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sqoop import --connect jdbc:mysql://10.211.55.6:3306/mxx_test --username machine --password 4869 --table topMovie250 -m 1 --target-dir /user/root/movies/movieAppend --columns <span class="string">'rank,movieName'</span> --check-column rank --incremental append --last-value 100</span></span><br></pre></td></tr></table></figure></div>



<p><strong>演示lastmodified模式</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 先全量导入userInfo表</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sqoop import --connect jdbc:mysql://10.211.55.6:3306/mxx_test --username machine --password 4869 --table userInfo -m 1 --target-dir /user/root/userInfo</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 然后修改userInfo</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> --last-value 上次存储（修改前）的最大时间值</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sqoop import --connect jdbc:mysql://10.211.55.6:3306/mxx_test --username machine --password 4869 --table userInfo -m 1 --target-dir /user/root/userInfo --check-column last_mod --incremental lastmodified --last-value <span class="string">"2019-09-05 22:12:04"</span> --append</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 会将last-value指定时间后的修改操作更新到hdfs</span></span><br></pre></td></tr></table></figure></div>



<h1 id="第4章-Sqoop导出"><a href="#第4章-Sqoop导出" class="headerlink" title="第4章 Sqoop导出"></a>第4章 Sqoop导出</h1><p>本章中将概要介绍如何将HDFS的数据导出至Mysql的操作</p>
<p>在Hadoop并行计算后，将结果导出到mysql进行其他业务</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sqoop export</span><br><span class="line">2种模式：</span><br><span class="line">insert模式（数据附加导出，不支持更新。原理是将数据转化为insert语句，执行SQL插入）</span><br><span class="line">updat模式（支持数据更新。原理是将数据转化为update语句，执行更新操作）</span><br></pre></td></tr></table></figure></div>



<p>演示：略</p>
<h1 id="第5章-Sqoop作业制定"><a href="#第5章-Sqoop作业制定" class="headerlink" title="第5章 Sqoop作业制定"></a>第5章 Sqoop作业制定</h1><p>本章中将讲解，Sqoop基本作业的创建与查看以及如何 通过定时调度器调度Sqoop抽取作业。</p>
<h2 id="数据增量导入作业"><a href="#数据增量导入作业" class="headerlink" title="数据增量导入作业"></a>数据增量导入作业</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建密码的隐藏文件</span></span><br><span class="line">echo -n "123456" &gt; sqoopPWD.pwd</span><br><span class="line">hdfs dfs -mkdir -p /sqoop/pwd</span><br><span class="line">hdfs dfs -put sqoopPWD.pwd /sqoop/pwd</span><br><span class="line">hdfs dfs -chmod 400 /sqoop/pwd/sqoopPWD.pwd</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建job</span></span><br><span class="line">sqoop job \</span><br><span class="line">--create movieJob \</span><br><span class="line">-- import \</span><br><span class="line">--connect jdbc:mysql://localhost:3306/mxx_test \</span><br><span class="line">--username root \</span><br><span class="line">--password-file /sqoop/pwd/sqoopPWD.pwd \</span><br><span class="line">--table topMovie250 -m 1 \</span><br><span class="line">--target-dir /user/mxx/movies/movieJob \</span><br><span class="line">--incremental append --check-column rank \</span><br><span class="line">--last-value 1 \</span><br><span class="line">--verbose</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> sqoop job --list</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sqoop job --show movieJob</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行job</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sqoop job --<span class="built_in">exec</span> movieJob</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 增加一条数据，重复执行myJob，此时lastValue值已经被更改，它可以接着append</span></span><br></pre></td></tr></table></figure></div>



<h2 id="定时作业调度"><a href="#定时作业调度" class="headerlink" title="定时作业调度"></a>定时作业调度</h2><p>比如每天凌晨调度一次</p>
<p>实现定时的方式：</p>
<ul>
<li>Oozie，定时调度Sqoop任务</li>
<li>编写定时程序，定时程序定时调度Sqoop任务</li>
<li>使用Centos自带的调度器Crontab实现sqoop任务定时调度</li>
</ul>
<p>这里介绍使用Centos自带的调度器Crontab实现sqoop任务定时调度</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd $SQOOP_HOME</span><br><span class="line">vi sqoop_incremental.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">/home/machine/apps/sqoop-1.4.6-cdh5.16.1/bin/sqoop job --exec movieJob &gt; /home/machine/apps/sqoop-1.4.6-cdh5.16.1/movieJob.out 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line">crontab -e</span><br><span class="line">*/1 * * * * sh /home/machine/apps/sqoop-1.4.6-cdh5.16.1/sqoop_incremental.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 增加一条数据，myJob会定时执行，此时lastValue值已经被更改，它可以接着append</span></span><br></pre></td></tr></table></figure></div>



<h1 id="第6章-总结"><a href="#第6章-总结" class="headerlink" title="第6章 总结"></a>第6章 总结</h1><p>对本课程所学内容进行总结</p>
<p>略</p>
]]></content>
      <categories>
        <category>大数据分布式</category>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>Hadoop-电商日志分析（Hive实现）</title>
    <url>/2019/09/04/20190904113856638/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[TOC]</p>
<blockquote>
<p>参考：<a href="https://coding.imooc.com/class/301.html" target="_blank" rel="noopener">https://coding.imooc.com/class/301.html</a></p>
</blockquote>
<p>之前讲过用HDFS+MapReduce实现电商日志分析，现在用hive实现相同的功能。</p>
<h1 id="外部表"><a href="#外部表" class="headerlink" title="外部表"></a>外部表</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看表结构</span></span><br><span class="line"><span class="meta">hive&gt;</span><span class="bash"> desc formated emp;</span></span><br><span class="line">Table Type:	MANAGED_TABLE		# 这是一个内部表</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> use hadoop hive;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> show tables;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select * from TBLS \G;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 内部表删除表：HDFS上数据被删除了 &amp; meta信息也被删除</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建外部表</span></span><br><span class="line">create extennal table emmp_extenal()....</span><br></pre></td></tr></table></figure></div>

<p>![屏幕快照 2019-09-04 下午1.13.47](20190904113856638/屏幕快照 2019-09-04 下午1.13.47.png)</p>
<p>加载数据到外部表</p>
<p>![屏幕快照 2019-09-04 下午1.16.41](20190904113856638/屏幕快照 2019-09-04 下午1.16.41.png)</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">hive&gt;</span><span class="bash"> select * from emp_extenal;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 此时，外部表数据已加载进来；HDFS也有数据</span></span><br><span class="line"></span><br><span class="line"><span class="meta">hive&gt;</span><span class="bash"> desc formated emp;</span></span><br><span class="line">Table Type:	EXTENAL_TABLE		# 这是一个外部表</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 外部表删除表：Hive上表被删除了 &amp; meta信息也被删除 ，但HDFS上数据</span></span><br></pre></td></tr></table></figure></div>



<h1 id="分区表"><a href="#分区表" class="headerlink" title="分区表"></a>分区表</h1><p>分区就是HDFS的不同目录，比如按天分区，按性别分区，这样省去了杂乱排序需要的全扫描筛选时间。</p>
<p>比如以下是创建基于性别的分区表：</p>
<p>![屏幕快照 2019-09-04 下午4.08.35](20190904113856638/屏幕快照 2019-09-04 下午4.08.35.png)</p>
<p>然后，将性别是F的数据插入对应分区表：</p>
<p>![屏幕快照 2019-09-04 下午4.11.33](20190904113856638/屏幕快照 2019-09-04 下午4.11.33.png)</p>
<h1 id="track-info的创建"><a href="#track-info的创建" class="headerlink" title="track_info的创建"></a>track_info的创建</h1><p>按天分区，外部表</p>
<p>外部表是将源端数据move到目标端去，而不是copy</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">external</span> <span class="keyword">table</span> track_info(</span><br><span class="line">	ip <span class="keyword">string</span>,</span><br><span class="line">  country <span class="keyword">string</span>,</span><br><span class="line">  province <span class="keyword">string</span>,</span><br><span class="line">  city <span class="keyword">string</span>,</span><br><span class="line">  <span class="keyword">url</span> <span class="keyword">string</span>,</span><br><span class="line">  <span class="built_in">time</span> <span class="keyword">string</span>,</span><br><span class="line">  page <span class="keyword">string</span></span><br><span class="line">) patitioned <span class="keyword">by</span> (<span class="keyword">day</span> <span class="keyword">string</span>)</span><br><span class="line"><span class="keyword">ROW</span> <span class="keyword">FORMAT</span> <span class="keyword">DELIMITED</span> <span class="keyword">FIELDS</span> <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">'\t'</span></span><br><span class="line">location <span class="string">'/project/trackinfo/'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> track_info;</span><br><span class="line">deec formatted track_info;</span><br></pre></td></tr></table></figure></div>



<h1 id="基于ETL的数据加载到数据仓库"><a href="#基于ETL的数据加载到数据仓库" class="headerlink" title="基于ETL的数据加载到数据仓库"></a>基于ETL的数据加载到数据仓库</h1><p>1、将原始数据放到HDFS</p>
<p>2、跑ETL清洗数据etl.sh</p>
<p>定时执行：crontab表达式进行调度、Azkaban调度（依赖）：ETLApp==&gt;其他统计分析</p>
<p>（调度系统）</p>
<p>3、加载数据到hive表(要分区)</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">LOAD DATA INPATH ‘hdfs://centos01:8020/project/input/etl’ OVERWRITE INTO TABLE track_info partition(day='2013-07-21');</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> hadoop fs -ls /project/track_info</span></span><br><span class="line">/project/track_info/day=2013-07-21	# 自动建立了分区目录，数据在分区目录里</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查询hive数据</span></span><br><span class="line">select * from track_info where day='2013-07-21' limit 5;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意数据要一一对应</span></span><br></pre></td></tr></table></figure></div>



<h1 id="使用Hive进行统计分析"><a href="#使用Hive进行统计分析" class="headerlink" title="使用Hive进行统计分析"></a>使用Hive进行统计分析</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看数据量(跑mapreduce)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 统计每天的浏览量</span></span><br><span class="line">select count(*) from track_info where day='2013-07-21';</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 统计各个省份浏览量</span></span><br><span class="line">select province, count(*) from track_info where day='2013-07-21' group by province;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 总结：首先用MR做一次ETL，后续操作采用Hive SQL</span></span><br></pre></td></tr></table></figure></div>

<p>现在是结果直接打在控制台，怎么存？建立一张目标表，例如省份统计表：</p>
<p>![屏幕快照 2019-09-04 下午3.39.00](20190904113856638/屏幕快照 2019-09-04 下午3.39.00.png)</p>
<p>接下来要把一条SQL执行的结果写在结果表中：</p>
<p>![屏幕快照 2019-09-04 下午3.41.12](20190904113856638/屏幕快照 2019-09-04 下午3.41.12.png)</p>
<p>结果：</p>
<p>![屏幕快照 2019-09-04 下午3.42.47](20190904113856638/屏幕快照 2019-09-04 下午3.42.47.png)</p>
<p>结果数据存在Hive后，怎样使用呢？（例如前端展示）</p>
<p>![屏幕快照 2019-09-04 下午3.44.16](20190904113856638/屏幕快照 2019-09-04 下午3.44.16.png)</p>
<p>使用Hive的离线处理方案总结：</p>
<p>![屏幕快照 2019-09-04 下午3.47.11](20190904113856638/屏幕快照 2019-09-04 下午3.47.11.png)</p>
<p>把各个步骤，写出shell脚本，然后使用Azkaban定时任务调用。</p>
<h1 id="MapReduce与Hive实现对比"><a href="#MapReduce与Hive实现对比" class="headerlink" title="MapReduce与Hive实现对比"></a>MapReduce与Hive实现对比</h1><p>使用Hive相当程度减少了代码量(MR代码 &gt; SQL语句)</p>
<h1 id="else-TODO"><a href="#else-TODO" class="headerlink" title="else TODO"></a>else TODO</h1><p>Hadoop分布式集群搭建</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">数据抽取工具：</span><br><span class="line"></span><br><span class="line">kafka</span><br><span class="line">flume</span><br><span class="line">sync</span><br><span class="line">数据清洗</span><br><span class="line"></span><br><span class="line">hive&#x2F;tez</span><br><span class="line">pig&#x2F;tez</span><br><span class="line">storm</span><br><span class="line">spark</span><br><span class="line">其它工具</span><br><span class="line"></span><br><span class="line">数据存储：hadoop、hbase，ES、redis</span><br><span class="line">任务管理：azkaban、oozie</span><br><span class="line">数据同步：datax、sqoop</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>大数据分布式</category>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>Hive-入门</title>
    <url>/2019/09/02/20190902151453320/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>参考：</p>
<ul>
<li><p>1-2章 <a href="https://www.imooc.com/learn/387" target="_blank" rel="noopener">https://www.imooc.com/learn/387</a></p>
</li>
<li><p>3-4章 <a href="https://coding.imooc.com/class/301.html" target="_blank" rel="noopener">https://coding.imooc.com/class/301.html</a></p>
</li>
</ul>
</blockquote>
<h1 id="第1章-概述"><a href="#第1章-概述" class="headerlink" title="第1章 概述"></a>第1章 概述</h1><p>hive是基于HDFS的数据仓库，主要介绍数据仓库和Hive的基本概念</p>
<h2 id="什么是数据仓库"><a href="#什么是数据仓库" class="headerlink" title="什么是数据仓库"></a>什么是数据仓库</h2><p><strong>数据仓库</strong></p>
<p>数据仓库是一个面向主题的、集成的、不可更新的、随时间不变化的数据集合，它用于支持企业或组织的决策分析处理。</p>
<p>面向主题：推荐系统</p>
<p>集成：数据来自于关系型数据库、文本..</p>
<p>不可更新：一般只做查询</p>
<hr>
<p><strong>数据仓库的结构和建立过程</strong></p>
<p>![屏幕快照 2019-09-02 下午3.52.00](20190902151453320/屏幕快照 2019-09-02 下午3.52.00.png)</p>
<p>ETL:</p>
<p>抽取Extract：提取不同数据源的数据<br>转化Transform：转化格式，不同数据源的数据格式可能不一致<br>装载Load：将满足数据格式的数据装载到数据仓库</p>
<hr>
<p><strong>OLTP应用于OLAP应用</strong></p>
<p>OLTP应用：联机事务处理，关注的是事物的处理，典型的OLTP应用是银行转账，一般操作频率会比较高；</p>
<p>OLAP应用：联机分析处理，主要面向的是查询，典型的OLAP应用是商品推荐系统，一般不会做删除和更新，数据一般都是历史数据。</p>
<hr>
<p><strong>数据仓库中的数据模型</strong></p>
<p>星型模型和雪花模型。星型模型是数据仓库最基本的数据模型，雪花模型是在星型模型的基础上发展起来的。</p>
<p>![屏幕快照 2019-09-02 下午3.57.15](20190902151453320/屏幕快照 2019-09-02 下午3.57.15.png)</p>
<h2 id="什么是Hive"><a href="#什么是Hive" class="headerlink" title="什么是Hive"></a>什么是Hive</h2><ul>
<li><p>Hive是建立在Hadoop HDFS上的数据仓库基础架构;</p>
</li>
<li><p>Hive可以用来进行数据提取转化加载（ETL）</p>
</li>
<li><p>Hive定义了简单的类似SQL查询语言，称为HQL它允许熟悉SQL的用户查询数据</p>
</li>
<li><p>Hive允许熟悉MapRduce开发者的开发自定义的mapper和reducer来处理内建的mapper和reducer无法完成的复杂的分析工作;</p>
</li>
<li><p>Hive是SQL解析引擎，他将SQL语句转移成M/R Job然后在Hadoop执行;</p>
</li>
<li><p>Hive的表其实就是HDFS上的目录/文件;    </p>
</li>
<li><p>底层支持多种执行引擎：MR/Tez/Spark</p>
</li>
</ul>
<p>为什么要使用Hive</p>
<h1 id="第2章-Hive的体系结构"><a href="#第2章-Hive的体系结构" class="headerlink" title="第2章 Hive的体系结构"></a>第2章 Hive的体系结构</h1><p>hive的体系结构，以及与HDFS的关系</p>
<h2 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a><strong>元数据</strong></h2><p>Hive将元数据存储在(metastore),支持mysql，derby等数据库 （默认存放在derby数据库中）</p>
<p>Hive中的元数据包括表的名字，表的列和分区及其属性，表的属性(是否为外部表),表的数据所在目录。</p>
<p>![屏幕快照 2019-09-02 下午4.13.02](20190902151453320/屏幕快照 2019-09-02 下午4.13.02.png)</p>
<hr>
<h2 id="HQL的执行过程"><a href="#HQL的执行过程" class="headerlink" title="HQL的执行过程"></a><strong>HQL的执行过程</strong></h2><p>解释器、编译器、优化器完成HQL查询语句从词法分析、语法分析、编译、优化以及查询计划（Plan）的生成。生成的查询计划存储在HDFS中，并在随后有MapReduce调用执行。</p>
<p>![屏幕快照 2019-09-02 下午4.17.23](20190902151453320/屏幕快照 2019-09-02 下午4.17.23.png)</p>
<p>以oracle执行计划为例：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">explain plan for select * from emp where deptno10</span><br><span class="line">...</span><br></pre></td></tr></table></figure></div>

<hr>
<h2 id="Hive的体系结构"><a href="#Hive的体系结构" class="headerlink" title="Hive的体系结构"></a><strong>Hive的体系结构</strong></h2><p>![屏幕快照 2019-09-02 下午4.24.48](20190902151453320/屏幕快照 2019-09-02 下午4.24.48.png)</p>
<h1 id="第3章-Hive的安装"><a href="#第3章-Hive的安装" class="headerlink" title="第3章 Hive的安装"></a>第3章 Hive的安装</h1><p>演示元数据库的安装以及Hive的安装；包括基于MySQL的hive的安装</p>
<h2 id="安装模式介绍"><a href="#安装模式介绍" class="headerlink" title="安装模式介绍"></a>安装模式介绍</h2><p>1 嵌入模式</p>
<pre><code>- 本地durby ：元数据信息被存储在Hive自带的Derby数据库中
- 只允许创建一个链接：同一时间只能一个人操作
- 多用于Demo：演示环境</code></pre><p>2 本地模式</p>
<pre><code>- 元数据信息被存储在MySQL数据库中
- MySQL数据库与Hive运行在同一台物理机器上
- 多用于开发和测试环境</code></pre><p>3 远程模式</p>
<pre><code>- 元数据信息被存储在MySQL数据库中
- MySQL数据库与Hive运行在不同的物理机器上
- 多用于生产环境(mysql要主从备份，用VIP连接)</code></pre><h2 id="安装本地模式"><a href="#安装本地模式" class="headerlink" title="安装本地模式"></a>安装本地模式</h2><p><strong>安装</strong></p>
<p>apache-hive-3.1.2-bin.tar.gz</p>
<p>conf/hive-env.sh.template</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp hive-env.sh.template hive-env.sh</span><br><span class="line">vi hive-env.sh</span><br><span class="line"># 修改HADOOP_HOME</span><br><span class="line">HADOOP_HOME&#x3D;&#x2F;opt&#x2F;hadoop-3.1.2</span><br><span class="line"></span><br><span class="line">vi hive-site.xml</span><br></pre></td></tr></table></figure></div>

<p>hive-site.xml</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type="text/xsl" href="configuration.xsl"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionURL<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>jdbc:mysql://centos01:3306/hadoop_hive?createDatabaseIfNotExist=true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionDriverName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionUserName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>machine<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionPassword<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>4869<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>将mysql-connector-java-5.1.39-bin.jar拷贝到 ./lib下</p>
<hr>
<p><strong>启动</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> <span class="variable">$HIVE_HOME</span>/bin</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定元数据库并进行初始化</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./schematool -dbType mysql -initSchema</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hive</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> hive</span></span><br></pre></td></tr></table></figure></div>

<hr>
<h1 id="第4章-Hive的操作"><a href="#第4章-Hive的操作" class="headerlink" title="第4章 Hive的操作"></a>第4章 Hive的操作</h1><h2 id="Hive快速入门（建库-建表-执行HQL）"><a href="#Hive快速入门（建库-建表-执行HQL）" class="headerlink" title="Hive快速入门（建库/建表/执行HQL）"></a>Hive快速入门（建库/建表/执行HQL）</h2><p><strong>创建数据库</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">hive&gt;</span><span class="bash">create database test_db;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> use hadoop_hive;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> show tables;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select * from DBS \G;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 系统自动创建的</span></span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">          DB_ID: 1</span><br><span class="line">           DESC: Default Hive database</span><br><span class="line">DB_LOCATION_URI: hdfs://centos01:9000/user/hive/warehouse</span><br><span class="line">           NAME: default</span><br><span class="line">     OWNER_NAME: public</span><br><span class="line">     OWNER_TYPE: ROLE</span><br><span class="line">      CTLG_NAME: hive</span><br><span class="line"><span class="meta">#</span><span class="bash"> 用户自己创建的test_db</span></span><br><span class="line">*************************** 2. row ***************************</span><br><span class="line">          DB_ID: 2</span><br><span class="line">           DESC: NULL</span><br><span class="line">DB_LOCATION_URI: hdfs://centos01:9000/user/hive/warehouse/test_db.db</span><br><span class="line">           NAME: test_db</span><br><span class="line">     OWNER_NAME: root</span><br><span class="line">     OWNER_TYPE: USER</span><br><span class="line">      CTLG_NAME: hive</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> hadoop fs -ls /user/hive/warehouse</span></span><br><span class="line">Found 1 items</span><br><span class="line">drwxr-xr-x   - root supergroup          0 2019-09-02 16:14 /user/hive/warehouse/test_db.db</span><br></pre></td></tr></table></figure></div>

<hr>
<p><strong>创建一张表</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">hive&gt;</span><span class="bash"> use test_db;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 先建个空表</span></span><br><span class="line"><span class="meta">hive&gt;</span><span class="bash"> create table helloword(id int, name string) ROW FORMAT DELIMITED FIELDS TERMINATED BY <span class="string">'\t'</span>;</span></span><br><span class="line"><span class="meta">hive&gt;</span><span class="bash"> show tables;</span></span><br><span class="line"><span class="meta">hive&gt;</span><span class="bash"> select * from helloword;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 加载数据</span></span><br><span class="line"><span class="meta">hive&gt;</span><span class="bash"> load data <span class="built_in">local</span> inpath <span class="string">'/media/psf/centos_share/helloword.txt'</span> overwrite into table helloword;</span></span><br><span class="line"><span class="meta">hive&gt;</span><span class="bash"> select * from helloword;</span></span><br><span class="line">OK</span><br><span class="line">1	zhongshan</span><br><span class="line">2	lisi</span><br><span class="line">3	wangwu</span><br><span class="line"><span class="meta">#</span><span class="bash"> 统计（这是一条HQL，会生成mapreduce作业）</span></span><br><span class="line"><span class="meta">hive&gt;</span><span class="bash"> select count(1) from helloword;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 访问http://centos01:8088/cluster 查看mp作业</span></span><br></pre></td></tr></table></figure></div>



<h2 id="Hive-DDL"><a href="#Hive-DDL" class="headerlink" title="Hive DDL"></a>Hive DDL</h2><blockquote>
<p>参考官网：<a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+DDL" target="_blank" rel="noopener">Hive DDL</a></p>
</blockquote>
<p>DDL: Hive Data Definition Language</p>
<p>数据抽象/结构</p>
<p>![屏幕快照 2019-09-03 上午10.06.50](20190902151453320/屏幕快照 2019-09-03 上午10.06.50.png)</p>
<p><strong>Create Database</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">CREATE (DATABASE|SCHEMA) [IF NOT EXISTS] database_name``  ``[COMMENT database_comment]``  ``[LOCATION hdfs_path]``  ``[WITH DBPROPERTIES (property_name=property_value, ...)];</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建数据库</span></span><br><span class="line"><span class="meta">hive&gt;</span><span class="bash"> CREATE DATABASE IF NOT EXISTS hive;</span></span><br><span class="line"><span class="meta">hive&gt;</span><span class="bash"> CREATE DATABASE IF NOT EXISTS hive2 LOCATION <span class="string">'/test/location'</span>;</span></span><br><span class="line"><span class="meta">hive&gt;</span><span class="bash"> CREATE DATABASE IF NOT EXISTS hive3 WITH DBPROPERTIES(<span class="string">'creator'</span>=<span class="string">'pk'</span>);</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看信息</span></span><br><span class="line"><span class="meta">hive&gt;</span><span class="bash"> DESC DATABASE hive2;</span></span><br><span class="line"><span class="meta">hive&gt;</span><span class="bash"> DESC DATABASE extended hive3;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示当前数据库</span></span><br><span class="line"><span class="meta">hive&gt;</span><span class="bash"> <span class="built_in">set</span> hive.cli.print.current.db=<span class="literal">true</span>;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 清屏</span></span><br><span class="line"><span class="meta">hive&gt;</span><span class="bash"> !clear</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除</span></span><br><span class="line"><span class="meta">hive&gt;</span><span class="bash"> DROP DATABASE xxx;</span></span><br></pre></td></tr></table></figure></div>

<p><strong>建表</strong></p>
<p>![屏幕快照 2019-09-03 上午10.26.28](20190902151453320/屏幕快照 2019-09-03 上午10.26.28.png)</p>
<p>加载表数据</p>
<p>![屏幕快照 2019-09-03 上午10.30.28](20190902151453320/屏幕快照 2019-09-03 上午10.30.28.png)</p>
<p><strong>Rename Table</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;ALTER TABLE table_name RENAME TO new_table_name;&#96;</span><br></pre></td></tr></table></figure></div>



<h2 id="HIVE-DML"><a href="#HIVE-DML" class="headerlink" title="HIVE DML"></a><strong>HIVE DML</strong></h2><p><strong>Loading files into tables</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LOAD DATA [LOCAL] INPATH &#39;filepath&#39; [OVERWRITE] INTO TABLE tablename [PARTITION (partcol1&#x3D;val1, partcol2&#x3D;val2 ...)]</span><br></pre></td></tr></table></figure></div>

<p>LOCAL：本地系统，如果不加，就指HDFS路径</p>
<p>OVERWRITE：是否数据覆盖，如果没有，就是追加</p>
<p><strong>Inserting data into Hive Tables from queries</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> OVERWRITE <span class="keyword">TABLE</span> tablename1 [<span class="keyword">PARTITION</span> (partcol1=val1, partcol2=val2 ...) [<span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>]] select_statement1 <span class="keyword">FROM</span> from_statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp2 <span class="keyword">as</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure></div>



<p><strong>Writing data into the filesystem from queries</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSERT OVERWRITE [LOCAL] DIRECTORY directory1</span><br><span class="line">  &#96;&#96;[ROW FORMAT row_format] [STORED AS file_format] (Note: Only available starting with Hive &#96;&#96;0.11&#96;&#96;.&#96;&#96;0&#96;&#96;)</span><br><span class="line">  &#96;&#96;SELECT ... FROM ...</span><br></pre></td></tr></table></figure></div>

<p>![屏幕快照 2019-09-03 上午10.43.23](20190902151453320/屏幕快照 2019-09-03 上午10.43.23.png)</p>
<p><strong>insert 、update 不建议在大数据Hive下使用！</strong></p>
<h2 id="Hive-Query"><a href="#Hive-Query" class="headerlink" title="Hive Query"></a>Hive Query</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [<span class="keyword">ALL</span> | <span class="keyword">DISTINCT</span>] select_expr, select_expr, ...</span><br><span class="line">  <span class="string">``</span><span class="keyword">FROM</span> table_reference</span><br><span class="line">  <span class="string">``</span>[<span class="keyword">WHERE</span> where_condition]</span><br><span class="line">  <span class="string">``</span>[<span class="keyword">GROUP</span> <span class="keyword">BY</span> col_list]</span><br><span class="line">  <span class="string">``</span>[<span class="keyword">ORDER</span> <span class="keyword">BY</span> col_list]</span><br><span class="line">  <span class="string">``</span>[CLUSTER <span class="keyword">BY</span> col_list</span><br><span class="line">    <span class="string">``</span>| [<span class="keyword">DISTRIBUTE</span> <span class="keyword">BY</span> col_list] [<span class="keyword">SORT</span> <span class="keyword">BY</span> col_list]</span><br><span class="line">  <span class="string">``</span>]</span><br><span class="line"> <span class="string">``</span>[<span class="keyword">LIMIT</span> [<span class="keyword">offset</span>,] <span class="keyword">rows</span>]</span><br></pre></td></tr></table></figure></div>

<p><strong>基本查询</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">WHERE LIMIT ...</span><br></pre></td></tr></table></figure></div>

<p><strong>聚合</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">max&#x2F;min&#x2F;sum&#x2F;avg</span><br><span class="line">count</span><br><span class="line">这些都需要mp任务</span><br></pre></td></tr></table></figure></div>

<p><strong>分组函数：GROUP BY</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><strong>JOIN</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><strong>执行计划</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<p>else todo</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第4章 Hive的管理</span><br><span class="line"></span><br><span class="line">介绍Hive中三种管理方式，即：CLI、Web界面以及远程服务</span><br><span class="line"></span><br><span class="line">第5章 Hive的数据类型</span><br><span class="line"></span><br><span class="line">详细介绍hive的数据类型；对比与关系型数据库数据类型的异同</span><br><span class="line"></span><br><span class="line">第6章 Hive的数据模型</span><br><span class="line"></span><br><span class="line">详细说明Hive中各种表和视图以及如何使用</span><br><span class="line"></span><br><span class="line">第7章 课程总结</span><br><span class="line"></span><br><span class="line">课程总结</span><br></pre></td></tr></table></figure></div>



]]></content>
      <categories>
        <category>大数据分布式</category>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>Hadoop-电商日志分析（离线计算系统实战）</title>
    <url>/2019/09/02/20190902135818314/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[TOC]</p>
<blockquote>
<p>以电商业务为例，完成一个离线计算系统的技术架构（HDFS+MapReduce）</p>
</blockquote>
<h1 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h1><p><strong>用户行为日志</strong></p>
<p>点击、搜藏、搜索、加入购物车、下单…</p>
<p>推荐</p>
<p><strong>需求</strong></p>
<p>统计页面的浏览量</p>
<p>统计各个省份的浏览量</p>
<p>统计页面的访问量</p>
<p><strong>数据处理流程及技术架构（离线计算）</strong></p>
<p>![屏幕快照 2019-09-02 下午2.19.24](20190902135818314/屏幕快照 2019-09-02 下午2.19.24.png)</p>
<h1 id="统计页面的浏览量"><a href="#统计页面的浏览量" class="headerlink" title="统计页面的浏览量"></a>统计页面的浏览量</h1><p>每行数据都是固定的key，value赋值为1</p>
<p>select count(1) from xxx;</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PVStatApp</span><br></pre></td></tr></table></figure></div>

<h1 id="统计各个省份的浏览量"><a href="#统计各个省份的浏览量" class="headerlink" title="统计各个省份的浏览量"></a>统计各个省份的浏览量</h1><p>select province count(1) from xxx group by province;</p>
<p>地市信息通过IP解析获取</p>
<h2 id="IP库解析"><a href="#IP库解析" class="headerlink" title="IP库解析"></a>IP库解析</h2><p>IP解析：在正式项目中通常使用收费服务</p>
<p>这里测试使用<code>qqwry.dat</code>开源库</p>
<p>相关代码</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">IPParser</span><br><span class="line">IPSeeker</span><br><span class="line">IPTest</span><br></pre></td></tr></table></figure></div>

<h2 id="日志解析"><a href="#日志解析" class="headerlink" title="日志解析"></a>日志解析</h2><p>将一行日志的ip解析出来，并转换为城市信息</p>
<p>代码</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LogParser</span><br><span class="line">LogParseTest</span><br></pre></td></tr></table></figure></div>

<h2 id="MR统计省份流量"><a href="#MR统计省份流量" class="headerlink" title="MR统计省份流量"></a>MR统计省份流量</h2><p>解析出一行log的ip的省份信息，将省份作为key，value是1</p>
<p>代码</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ProvinceStatApp</span><br></pre></td></tr></table></figure></div>

<h1 id="统计页面的访问量"><a href="#统计页面的访问量" class="headerlink" title="统计页面的访问量"></a>统计页面的访问量</h1><p>解析出一行log的url的pageId（有的url没有），将pageId作为key，value是1</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ContentUtils	&#x2F;&#x2F; 获取编号</span><br><span class="line">PageStatApp</span><br></pre></td></tr></table></figure></div>

<h1 id="ETL-改进优化"><a href="#ETL-改进优化" class="headerlink" title="ETL-改进优化"></a>ETL-改进优化</h1><p>目前存在的问题</p>
<p>假设日志数据很大（5T），每个MR都去全量处理待处理的原始日志，非常消耗时间。</p>
<p>解决办法：ETL</p>
<p>ETL：全量数据不方便直接计算，最好是进行一步处理后再进行相应的维度统计分析。</p>
<p>解析出需要的字段：ip ==&gt; 城市信息</p>
<p>去除不需要的字段 ==&gt; 很多</p>
<p>保留字段：ip/time/url/page_id/province/city</p>
<p>其他作业的输入都使用etl文件</p>
<p>代码</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ETLApp</span><br><span class="line">ProvinceStatV2App</span><br><span class="line">PVStatV2App</span><br></pre></td></tr></table></figure></div>



<h1 id="打包到服务器上运行"><a href="#打包到服务器上运行" class="headerlink" title="打包到服务器上运行"></a>打包到服务器上运行</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mvn clean package</span><br><span class="line">vi pv.sh</span><br><span class="line"><span class="meta">#</span><span class="bash"> pv.sh</span></span><br><span class="line">hadoop jar /home/xxx/xxx.jar mxx.hadoop.userlog.mrv1.PVStatApp hdfs://centos01:8020/project/input/row/ hdfs://centos01:8020/project/output/v1/pvstat</span><br><span class="line"><span class="meta">#</span><span class="bash"> --------------</span></span><br><span class="line">chmod u+x pv.sh</span><br><span class="line">./pv.sh</span><br><span class="line"></span><br><span class="line">vi province.sh</span><br></pre></td></tr></table></figure></div>





<h1 id="扩展TODO"><a href="#扩展TODO" class="headerlink" title="扩展TODO"></a>扩展TODO</h1><p><strong>处理结果的存储</strong></p>
<p>大数据处理完后，目前存在HDFS上。</p>
<p>如果需要前台展示，可采用的方案：使用技术或框架把处理完的结果导出到数据库（mysql，mongoDB）中，然后前台展示。</p>
<p>Sqoop：把HDFS上的统计结果导出到mysql中。</p>
<p>T级别的初始数据，假设一天要处理一次。</p>
<p>可以采用压缩</p>
<p>原始日志一般在集群上会定期删掉，但一次etl的数据一般会存很久（比如一年）。</p>
<p>如果etl的数据存不下，可以把etl的数据先移到冷集群上，热集群就是跑当前数据（比如以一个月、一天为单位），冷集群放不下就要移到其他地方。</p>
<p>etl通常会拆字段，结果是etl的数据比原始数据还大。文本存储方式会全量读取再过滤，会采用列式存储（ORC），比如有100列，只需要访问3列，剩下的97列是不会产生io操作的。</p>
]]></content>
      <categories>
        <category>大数据分布式</category>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据概述</title>
    <url>/2019/08/28/20190828224836754/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>参考：<a href="https://coding.imooc.com/class/301.html" target="_blank" rel="noopener">https://coding.imooc.com/class/301.html</a></p>
</blockquote>
<p>[TOC]</p>
<h1 id="大数据概念及特征"><a href="#大数据概念及特征" class="headerlink" title="大数据概念及特征"></a>大数据概念及特征</h1><p>什么是大数据</p>
<p>海量计算、大数据管理、数据分析、大量用户群体</p>
<hr>
<p>大数据4V特性</p>
<ul>
<li><p>数据量大：大到什么程度</p>
</li>
<li><p>多样性、复杂性：数据库、文本、视频音频….</p>
</li>
<li><p>基于高度分析的新价值：在大量数据下提取微小信息（价值提纯）</p>
</li>
<li><p>速度：（hadoop mapreduce适用于离线批处理，延时性较高；还有其他实时性更高的框架：Spark）</p>
</li>
</ul>
<p>![屏幕快照 2019-08-28 下午11.01.10](20190828224836754/屏幕快照 2019-08-28 下午11.01.10.png)</p>
<h1 id="大数据带来的技术变革"><a href="#大数据带来的技术变革" class="headerlink" title="大数据带来的技术变革"></a>大数据带来的技术变革</h1><p>大数据所带来的技术变革</p>
<p>技术驱动：数据量大(TB..)</p>
<ul>
<li>存储：文件存储 ==&gt; 分布式存储（HDFS）</li>
<li>计算：单机 ==&gt; 分布式计算 </li>
<li>网络：万兆</li>
<li>DB：RDBMS ==&gt; NoSQL(HBase/Redis…)</li>
</ul>
<p>商业驱动：价值</p>
<hr>
<p>大数据现存的模式</p>
<ul>
<li>手握大数据、没有大数据思维</li>
<li>没有大数据、有大数据思维</li>
<li>既有大数据、又有大数据思维(goole\阿里)</li>
</ul>
<h1 id="大数据技术的概念"><a href="#大数据技术的概念" class="headerlink" title="大数据技术的概念"></a>大数据技术的概念</h1><ul>
<li><p>X 升级硬件：单机升级（加大CPU、内存…）</p>
</li>
<li><p>V 分布式并行计算/处理</p>
</li>
<li><p>数据采集：Flume Sqoop</p>
</li>
<li><p>数据存储：Hadoop</p>
</li>
<li><p>数据处理/分析/挖掘：Hadoop、Spark、Flink</p>
</li>
<li><p>可视化：</p>
</li>
</ul>
<h1 id="大数据技术的挑战"><a href="#大数据技术的挑战" class="headerlink" title="大数据技术的挑战"></a>大数据技术的挑战</h1><p>大数据在技术架构上带来的挑战</p>
<ul>
<li>对现有数据库管理技术的挑战（大数据一般不用关系型DB）</li>
<li>经典数据库技术没有考虑数据的多类别</li>
<li>实时性的技术挑战</li>
<li>网络架构、数据中心、运维的挑战</li>
<li>其他：数据隐私、数据源复杂多样</li>
</ul>
<h1 id="如何对大数据进行存储和分析"><a href="#如何对大数据进行存储和分析" class="headerlink" title="如何对大数据进行存储和分析"></a>如何对大数据进行存储和分析</h1><p>![屏幕快照 2019-08-28 下午11.23.58](20190828224836754/屏幕快照 2019-08-28 下午11.23.58.png)</p>
<ul>
<li>google发表了论文，社区进行了相应的技术实现–hadoop</li>
</ul>
<h1 id="大数据典型应用"><a href="#大数据典型应用" class="headerlink" title="大数据典型应用"></a>大数据典型应用</h1><ul>
<li>count/sum/avg ==&gt; group by/join ==&gt; 窗口分析函数 ==&gt; 异常/欺诈检测 ==&gt; 人工智能</li>
<li>报表 ==&gt; 用户细分 ==&gt; 指标监控 ==&gt; 指标预警</li>
</ul>
]]></content>
      <categories>
        <category>大数据分布式</category>
      </categories>
      <tags>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>Hadoop-资源调度框架YARN</title>
    <url>/2019/08/27/20190827212751326/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>参考：<a href="https://coding.imooc.com/class/301.html" target="_blank" rel="noopener">https://coding.imooc.com/class/301.html</a></p>
</blockquote>
<p>[TOC]</p>
<h1 id="YARN产生背景"><a href="#YARN产生背景" class="headerlink" title="YARN产生背景"></a>YARN产生背景</h1><p>1、MapReduce1.x==&gt;MapReduce2.x</p>
<p> master/slave：JobTracker/TaskTracker</p>
<p>JobTracker：单点、压力大</p>
<p>仅支持mapreduce作业</p>
<p>2、资源利用率</p>
<p>所有的计算框架（Hadoop\Spark）运行在一个集群中，共享一个集群的资源，按需分配。</p>
<p>![屏幕快照 2019-08-28 下午2.48.03](20190827212751326/屏幕快照 2019-08-28 下午2.48.03.png)</p>
<h1 id="YARN概述"><a href="#YARN概述" class="headerlink" title="YARN概述"></a>YARN概述</h1><ul>
<li>Yet Another Resource Negotiator</li>
<li>通用的资源管理系统</li>
<li>为上层应用提供统一的资源管理和调度</li>
</ul>
<p>基本思想：</p>
<blockquote>
<p>以下翻译自官网：<a href="http://archive.cloudera.com/cdh5/cdh/5/hadoop-2.6.0-cdh5.15.1/hadoop-yarn/hadoop-yarn-site/YARN.html" target="_blank" rel="noopener">YARN架构</a></p>
</blockquote>
<ul>
<li><p>YARN的基本思想是将JobTracker的两个主要功能，资源管理和作业调度/监视（resource management and job scheduling/monitoring）分成单独的守护进程。</p>
</li>
<li><p>拥有一个全局ResourceManager（<em>RM</em>）和每个应用程序ApplicationMaster（<em>AM</em>）（per-application ApplicationMaster ）。应用程序可以是传统意义上的Map-Reduce作业中的单个作业，也可以是作业的DAG。</p>
</li>
<li><p>ResourceManager和每个节点的从属节点NodeManager（<em>NM</em>）构成了数据计算框架。ResourceManager是在系统中的所有应用程序之间仲裁资源的最终权限。</p>
</li>
<li><p>每个应用程序ApplicationMaster实际上是一个特定于框架的库，其任务是协调来自ResourceManager的资源，并与NodeManager一起执行和监视任务。</p>
</li>
</ul>
<p><a href="/2019/08/27/20190827212751326/yarn_architecture.gif" data-fancybox="group" data-caption="yarn_architecture" class="fancybox"><img alt="yarn_architecture" title="yarn_architecture" data-src="/2019/08/27/20190827212751326/yarn_architecture.gif" class="lazyload"></a> </p>
<h1 id="YARN架构"><a href="#YARN架构" class="headerlink" title="YARN架构"></a>YARN架构</h1><p>master/slave：RM/NM</p>
<p>Client：向RM提交任务/杀死任务</p>
<p>ApplicationMaster：</p>
<ul>
<li>每个应用程序对应一个AM，AM用于向RM申请资源，用于在NM上启动对应的Task</li>
<li>数据切分</li>
<li>为每个task向RM申请资源（container，在container里面启动task）</li>
<li>与NM通信</li>
<li>任务监控</li>
</ul>
<p>NodeManager：</p>
<ul>
<li>计算；</li>
<li>向RM发送心跳、任务执行情况；</li>
<li>接收来自RM的亲求，启动Task</li>
<li>处理来自AM的命令</li>
</ul>
<p>ResourceManager：</p>
<ul>
<li>集群中同一时刻对外提供服务的只有一个，负责资源相关</li>
<li>处理来自客户端的请求：提交、杀死</li>
<li>启动/监控 AM</li>
<li>监控NM</li>
</ul>
<p>container：</p>
<ul>
<li>任务的运行抽象：memory、cpu…</li>
<li>task是运行在container里面的</li>
<li>一个container里可以运行AM，也可以运行map/reduce task</li>
</ul>
<h1 id="YARN执行流程"><a href="#YARN执行流程" class="headerlink" title="YARN执行流程"></a>YARN执行流程</h1><p>流程：client提交作业到RM==&gt;RM在一个NM上先申请第一个container，用于运行AM==&gt;AM注册到RM上去，AM向RM申请资源，返回资源==&gt;到对应的NM上启动Container==&gt;在Container上启动map/reduce task==&gt;然后各种监控开起来</p>
<p>![屏幕快照 2019-08-28 下午5.02.39](20190827212751326/屏幕快照 2019-08-28 下午5.02.39.png)</p>
<h1 id="YARN环境搭建"><a href="#YARN环境搭建" class="headerlink" title="YARN环境搭建"></a>YARN环境搭建</h1><p>mapreduce在调试的时候是本机运行的，在正式上线时需要放在YARN上。</p>
<p>配置</p>
<blockquote>
<p>参考官网：<a href="http://hadoop.apache.org/docs/r3.1.2/hadoop-project-dist/hadoop-common/SingleCluster.html#YARN_on_a_Single_Node" target="_blank" rel="noopener">YARN on a Single Node</a></p>
</blockquote>
<p><code>etc/hadoop/mapred-site.xml</code>:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><code>etc/hadoop/yarn-site.xml</code>:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>启动：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sbin&#x2F;start-yarn.sh</span><br></pre></td></tr></table></figure></div>

<p>界面</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ResourceManager - http:&#x2F;&#x2F;localhost:8088&#x2F;</span><br></pre></td></tr></table></figure></div>

<h1 id="提交作业到YARN运行"><a href="#提交作业到YARN运行" class="headerlink" title="提交作业到YARN运行"></a>提交作业到YARN运行</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hadoop jar share&#x2F;hadoop&#x2F;mapreduce&#x2F;hadoop-mapreduce-examples-3.1.2.jar pi 2 3</span><br><span class="line">hadoop jar xxxx.jar 作业名称 map数量 xxx</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>大数据分布式</category>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>Hadoop-进阶</title>
    <url>/2019/08/14/20190814182031052/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>参考：imooc <a href="https://www.imooc.com/learn/890" target="_blank" rel="noopener">https://www.imooc.com/learn/890</a></p>
</blockquote>
<p>接着我的笔记【Hadoop-基础篇】讲</p>
<h1 id="第1章-概述"><a href="#第1章-概述" class="headerlink" title="第1章 概述"></a>第1章 概述</h1><p>大数据应用</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">精准营销、个性化推荐</span><br></pre></td></tr></table></figure></div>

<p>Hadoop基础</p>
<ul>
<li><p>HDFS</p>
</li>
<li><p>Hadoop1x</p>
</li>
<li><p>Hadoop2x</p>
</li>
</ul>
<p>移除了JobTracker和TaskTracker,改由Yarn平台ResourceManager负责集群中所有资源的统一管理和分配，NodeManager管理Hadoop集群中单个计算节点。<br>可以在YARN平台上运行Spark和Storm作业，充分利用资源。</p>
<h1 id="第2章-深入探索Mapreduce过程"><a href="#第2章-深入探索Mapreduce过程" class="headerlink" title="第2章 深入探索Mapreduce过程"></a>第2章 深入探索Mapreduce过程</h1><h2 id="2-1-WordCount实例回顾"><a href="#2-1-WordCount实例回顾" class="headerlink" title="2-1 WordCount实例回顾"></a>2-1 WordCount实例回顾</h2><p>MapReduce概念</p>
<p>MapReduce作业时一种大规模数据的并行计算的便程模型。我们可以将HDFS中存储的海量数据，通过MapReduce作业进行计算，得到目标数据。</p>
<p>MapReduce四个阶段：</p>
<p>1、 Split </p>
<p>![屏幕快照 2019-08-16 下午2.27.05](20190814182031052/屏幕快照 2019-08-16 下午2.27.05.png)</p>
<p>如下，三行文本分片产生三个分片，每个分片就是一行单词，分别作为Map阶段的输入 </p>
<p>![屏幕快照 2019-08-16 下午2.32.01](20190814182031052/屏幕快照 2019-08-16 下午2.32.01.png)</p>
<p>2、 Map（需要编码）</p>
<p>如下是第一个分片(第一行)的处理逻辑：</p>
<p>![屏幕快照 2019-08-16 下午2.35.50](20190814182031052/屏幕快照 2019-08-16 下午2.35.50.png)</p>
<p>mapper类会对第二行、第三行..重复这个逻辑，直到结束。该阶段的输出回作为下阶段的输入。</p>
<p>3、Shuffle </p>
<p>可理解为从map输出到reduce输入的过程，且涉及到网络传输。将所有相同的单词归到一起，结果统计放在下个阶段做，该阶段的输出回作为下阶段的输入。</p>
<p>![屏幕快照 2019-08-16 下午2.38.55](20190814182031052/屏幕快照 2019-08-16 下午2.38.55.png)</p>
<p>4、Reduce（需要编码）</p>
<p>![屏幕快照 2019-08-16 下午2.40.03](20190814182031052/屏幕快照 2019-08-16 下午2.40.03.png)</p>
<p>WordCount总结:</p>
<p> ![屏幕快照 2019-08-16 下午2.41.49](20190814182031052/屏幕快照 2019-08-16 下午2.41.49.png)</p>
<h2 id="2-2-从分片输入到Map"><a href="#2-2-从分片输入到Map" class="headerlink" title="2-2 从分片输入到Map"></a>2-2 从分片输入到Map</h2><p>1、输入文件</p>
<p>![屏幕快照 2019-08-16 下午2.45.50](20190814182031052/屏幕快照 2019-08-16 下午2.45.50.png)</p>
<p>分片输入：</p>
<p>如下，某420M的文件被分成4个分片，若还有某40M的文件，可存在block4剩余位置。此时分片数量为5，他们的地址映射被保存在NameNode中。</p>
<p>![屏幕快照 2019-08-16 下午2.51.53](20190814182031052/屏幕快照 2019-08-16 下午2.51.53.png) </p>
<p>理想的输入文件：</p>
<blockquote>
<p>由于NameNode内存有限，大量的小文件会给Hdfs带来性能上的问题；故Hdfs适合存放大文件，对于大量的小文件，可以采取 *<em>压缩、合并小文件 *</em>的优化策略。例如，设置文件输入类型为CombineFileInputFormat格式。</p>
</blockquote>
<p>2、节点Map任务的个数</p>
<p>分片数个map任务个数有什么关系？</p>
<p>如下图，2个文件file1,file2经过计算，得到4个分片（file1是split1~split3, file2是split4），则这台节点会启动4个map任务，即同时有4个mapper线程在循环执行map任务。</p>
<p>![屏幕快照 2019-08-16 下午2.57.31](20190814182031052/屏幕快照 2019-08-16 下午2.57.31.png)</p>
<p>在实际情况下，map任务的个数是受多个条件的制约，一般一个DataNode的map任务数量控制在10到100比较合适。</p>
<p>如何调节map任务个数？</p>
<p>一般操作如下：</p>
<ul>
<li>增加map个数，可增大mapred.map.tasks;</li>
<li>减少map个数，可增大mapred.min.split.size;</li>
<li>如果要减少map个数，但有很多小文件，可将小文件合并成大文件，再使用准则2</li>
</ul>
<h2 id="2-3-Map-Shuffle-Reduce"><a href="#2-3-Map-Shuffle-Reduce" class="headerlink" title="2-3 Map-Shuffle-Reduce"></a>2-3 Map-Shuffle-Reduce</h2><p>1、本地优化-Combine</p>
<p>数据经过Map端输出后会进行网络混洗，经过Shuffle后进入Reduce，在大数据量的情况下可能会造成巨大的网络开销。故可以<strong>在本地先按照key先行一轮排序与合并</strong>，再进行网络混洗，这个过程就是Combine。</p>
<p>如下图，map输出后，按首字母排序，然后在本地进行一次合并，该合并逻辑与reduce一样。</p>
<p>![屏幕快照 2019-08-16 下午3.08.58](20190814182031052/屏幕快照 2019-08-16 下午3.08.58.png)</p>
<p>为什么需要一次Combine操作？</p>
<p>在多数情况下，Combine的逻辑和reduce的逻辑是一致的，即都是按照key合并数据，故可以认为Combine是对本地数据的Reduce操作。这里复用Reducer的逻辑，也可以自己实现Combiner类。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">job.setCombinerClass(MyReduce<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">job.setReducerClass(MyReduce<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure></div>



<p>2、从Map到Reduce</p>
<p>如下图，超过缓冲区大小，map数据会溢写到磁盘上，三个颜色表示文件中只有三种不同的key值。然后将小文件经过Combine操作合并成大文件，进一步减少网络开销。然后开始进行网络传输，进入各自的Patition阶段。 </p>
<p>![屏幕快照 2019-08-16 下午3.26.34](20190814182031052/屏幕快照 2019-08-16 下午3.26.34.png)</p>
<p>Patition阶段，所有相同key值数据都会进入同一个Patition，然后合并（只是将key汇聚，没有累加合并），然后将合并后的文件作为reduce阶段的输入。</p>
<p>Reduce阶段，进行value的累加合并，然后输出，就获得输出文件。</p>
<p>从图看出，Patition数量，Reduce数量，输出文件数量，三者总是相等的。</p>
<p>在一个reducer中，所有数据都会被按照key值升序排序（解释了Sort代码的疑问），故如果 part输出文件中包含key值，则这个文件一定是有序的。</p>
<p>3、Reduce任务数量</p>
<p>在大数据量下，如果只设置一个reduce任务，那整个集群只有该节点在运行reduce，效率低。故建议将reduce任务数设置为较大数（最大值为72）</p>
<p>调节reduce任务数量：</p>
<ul>
<li>参数调节：mapred.reduce.tasks</li>
<li>代码调节：job.setNumReduce Tasks(int n)方法</li>
</ul>
<h2 id="2-4-总结"><a href="#2-4-总结" class="headerlink" title="2-4 总结"></a>2-4 总结</h2><p>略</p>
<h1 id="第3章-Hadoop的分布式缓存"><a href="#第3章-Hadoop的分布式缓存" class="headerlink" title="第3章 Hadoop的分布式缓存"></a>第3章 Hadoop的分布式缓存</h1><h2 id="3-1-分布式缓存-DistributedCache"><a href="#3-1-分布式缓存-DistributedCache" class="headerlink" title="3-1 分布式缓存-DistributedCache"></a>3-1 分布式缓存-DistributedCache</h2><p>1、基本含义</p>
<p>背景：在执行mapreduce时，可能Mapper之间需要共享一些信息，如果信息量不大，可以将其从HDFS加载到内存中，这就是Hadoop分布式缓存机制。</p>
<p>例子：统计全量的单词文本中存在的单词，那么在Hadoop一开始就把全量的单词加载到内存中 ，然后对于输入的行单词，去在内存中查找，如果全局缓存中存在该单词，就输出；</p>
<p>![屏幕快照 2019-08-16 下午4.04.39](20190814182031052/屏幕快照 2019-08-16 下午4.04.39.png)</p>
<p>2、如何使用DistributedCache？</p>
<p><strong>第一步：</strong>设置路径和别名</p>
<p>在main方法中加载共享文件的HDFS路径，路径可以是目录也可以是文件。可以在路径末尾追加 “ #” +别名，在map阶段可以使用该别名； </p>
<p>![屏幕快照 2019-08-16 下午4.07.55](20190814182031052/屏幕快照 2019-08-16 下午4.07.55.png)</p>
<p><strong>第二步：</strong></p>
<p>在Mapper类或Reducer的setup方法中，用输入流获取分布式缓存中的文件；</p>
<p>该方法在map方法循环之前，只执行一次。</p>
<p> ![屏幕快照 2019-08-16 下午4.10.33](20190814182031052/屏幕快照 2019-08-16 下午4.10.33.png)</p>
<p>加载到内存发生在Job执行之前，每个从节点各自都缓存一份相同的共享数据。如果共享数据太大，可以把共享数据<strong>分批缓存</strong>，重复执行作业。</p>
<h2 id="3-2～3-4-MapReduce实现矩阵相乘"><a href="#3-2～3-4-MapReduce实现矩阵相乘" class="headerlink" title="3-2～3-4 MapReduce实现矩阵相乘"></a>3-2～3-4 MapReduce实现矩阵相乘</h2><p>![屏幕快照 2019-08-16 下午4.14.56](20190814182031052/屏幕快照 2019-08-16 下午4.14.56.png)</p>
<p>矩阵在文件中的表示：</p>
<p>![屏幕快照 2019-08-16 下午4.16.35](20190814182031052/屏幕快照 2019-08-16 下午4.16.35.png)</p>
<p>思路：</p>
<p>1、将右侧矩阵转置</p>
<p>矩阵是左矩阵行向量 点乘 右矩阵列向量，因为文本是按行读取的，右矩阵转置后，计算变成左矩阵行向量 点乘 右矩阵行向量</p>
<p>2、矩阵相乘</p>
<ul>
<li>将右矩阵载入分布式缓存；</li>
<li>将左矩阵的行作为map输入；</li>
<li>在map执行之前：将缓存的右矩阵以行为单位放入list；</li>
<li>在map计算时：从list中取出所有行分别与输入行相乘。</li>
</ul>
<p>代码：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Mapper1 Reducer1 MR1 负责转置 </span><br><span class="line">Mapper2 Reducer2 MR2 负责相乘</span><br><span class="line">略...</span><br></pre></td></tr></table></figure></div>



<h1 id="第4章-推荐算法"><a href="#第4章-推荐算法" class="headerlink" title="第4章 推荐算法"></a>第4章 推荐算法</h1><h2 id="4-1-相似度"><a href="#4-1-相似度" class="headerlink" title="4-1 相似度"></a>4-1 相似度</h2><p>余弦相似度</p>
<p>二维向量的余弦相似度</p>
<p>![屏幕快照 2019-08-26 下午3.14.48](20190814182031052/屏幕快照 2019-08-26 下午3.14.48.png)</p>
<p>多维向量的余弦相似度</p>
<p>![屏幕快照 2019-08-26 下午3.16.09](20190814182031052/屏幕快照 2019-08-26 下午3.16.09.png)</p>
<p>其他相似度</p>
<p>![屏幕快照 2019-08-26 下午3.16.38](20190814182031052/屏幕快照 2019-08-26 下午3.16.38.png)</p>
<p>之后的推荐算法统一采用余弦相似度</p>
<h2 id="4-2-基于物品的推荐算法（理论）"><a href="#4-2-基于物品的推荐算法（理论）" class="headerlink" title="4-2 基于物品的推荐算法（理论）"></a>4-2 基于物品的推荐算法（理论）</h2><p>例：tb 猜你喜欢</p>
<p>基于物品的协同过滤推荐算法（ItemCF）</p>
<p>用户行为与权重</p>
<p>![屏幕快照 2019-08-26 下午3.21.47](20190814182031052/屏幕快照 2019-08-26 下午3.21.47.png)</p>
<p>算法思想：给用户推荐那些和他们之前喜欢的物品相似的物品</p>
<p>实例：</p>
<p>![屏幕快照 2019-08-26 下午3.24.11](20190814182031052/屏幕快照 2019-08-26 下午3.24.11.png)</p>
<p>![屏幕快照 2019-08-26 下午3.24.22](20190814182031052/屏幕快照 2019-08-26 下午3.24.22.png)</p>
<p>算法步骤：</p>
<p>1、根据用户行为列表，计算用户、物品的评分矩阵</p>
<p>![屏幕快照 2019-08-26 下午3.27.24](20190814182031052/屏幕快照 2019-08-26 下午3.27.24.png)</p>
<p>![屏幕快照 2019-08-26 下午3.27.36](20190814182031052/屏幕快照 2019-08-26 下午3.27.36.png)</p>
<p>2、根据用户、物品的评分矩阵计算物品与物品的相似度矩阵</p>
<p>![屏幕快照 2019-08-26 下午3.32.00](20190814182031052/屏幕快照 2019-08-26 下午3.32.00.png)</p>
<p>![屏幕快照 2019-08-26 下午3.32.12](20190814182031052/屏幕快照 2019-08-26 下午3.32.12.png)</p>
<p>3、相似度矩阵 x 评分矩阵 = 推荐列表</p>
<p>![屏幕快照 2019-08-26 下午3.35.09](20190814182031052/屏幕快照 2019-08-26 下午3.35.09.png)</p>
<p>推荐列表（代表用户对商品的感兴趣程度）</p>
<p>![屏幕快照 2019-08-26 下午3.36.22](20190814182031052/屏幕快照 2019-08-26 下午3.36.22.png)</p>
<p>4、去掉推荐列表中已产生过行为的商品</p>
<p>![屏幕快照 2019-08-26 下午3.39.41](20190814182031052/屏幕快照 2019-08-26 下午3.39.41-6805206.png)</p>
<p>在这里，一个用户只有2个推荐物品，在数据量大的情况下，一个用户会有上千个推荐物品，取top1作为推荐结果，作为用户最感兴趣的物品。</p>
<p>算法实现：</p>
<p>![屏幕快照 2019-08-26 下午3.42.48](20190814182031052/屏幕快照 2019-08-26 下午3.42.48.png)</p>
<p>每一步都是一个mapreduce作业</p>
<p>![屏幕快照 2019-08-26 下午3.43.53](20190814182031052/屏幕快照 2019-08-26 下午3.43.53.png)</p>
<h2 id="4-3-4-5-基于物品的推荐算法（代码）"><a href="#4-3-4-5-基于物品的推荐算法（代码）" class="headerlink" title="4-3~4-5 基于物品的推荐算法（代码）"></a>4-3~4-5 基于物品的推荐算法（代码）</h2><p>![屏幕快照 2019-08-26 下午4.02.20](20190814182031052/屏幕快照 2019-08-26 下午4.02.20.png)</p>
<p>代码：</p>
<p>step1~step5</p>
<p>略，见代码</p>
<h2 id="4-6-基于用户的推荐算法（理论）"><a href="#4-6-基于用户的推荐算法（理论）" class="headerlink" title="4-6 基于用户的推荐算法（理论）"></a>4-6 基于用户的推荐算法（理论）</h2><p>userCF</p>
<p>算法思想：给用户推荐和他兴趣相似的其他用户喜欢的物品</p>
<p>算法步骤：</p>
<p>![屏幕快照 2019-08-27 下午4.33.33](20190814182031052/屏幕快照 2019-08-27 下午4.33.33.png)</p>
<p>![屏幕快照 2019-08-27 下午4.36.55](20190814182031052/屏幕快照 2019-08-27 下午4.36.55.png)</p>
<p>![屏幕快照 2019-08-27 下午4.37.36](20190814182031052/屏幕快照 2019-08-27 下午4.37.36.png)</p>
<p>4、给有过行为的商品置0</p>
<p>![屏幕快照 2019-08-27 下午4.38.31](20190814182031052/屏幕快照 2019-08-27 下午4.38.31.png)</p>
<h2 id="4-7-基于用户的推荐算法（代码）"><a href="#4-7-基于用户的推荐算法（代码）" class="headerlink" title="4-7 基于用户的推荐算法（代码）"></a>4-7 基于用户的推荐算法（代码）</h2><p>![屏幕快照 2019-08-27 下午4.41.05](20190814182031052/屏幕快照 2019-08-27 下午4.41.05.png)</p>
<p>代码：</p>
<p>略，见我的代码</p>
<h2 id="4-8-基于内容的推荐算法（理论）"><a href="#4-8-基于内容的推荐算法（理论）" class="headerlink" title="4-8 基于内容的推荐算法（理论）"></a>4-8 基于内容的推荐算法（理论）</h2><p>算法思想：给用户推荐和他们喜欢的物品在内容上相似的物品</p>
<p>物品特征建模（item profile）</p>
<p>![屏幕快照 2019-08-27 下午4.57.59](20190814182031052/屏幕快照 2019-08-27 下午4.57.59.png)</p>
<p>算法步骤：</p>
<p>![屏幕快照 2019-08-27 下午4.59.01](20190814182031052/屏幕快照 2019-08-27 下午4.59.01.png)</p>
<p>![屏幕快照 2019-08-27 下午4.59.46](20190814182031052/屏幕快照 2019-08-27 下午4.59.46.png)</p>
<p>![屏幕快照 2019-08-27 下午5.00.19](20190814182031052/屏幕快照 2019-08-27 下午5.00.19.png)</p>
<p>![屏幕快照 2019-08-27 下午5.01.16](20190814182031052/屏幕快照 2019-08-27 下午5.01.16.png)</p>
<p>![屏幕快照 2019-08-27 下午5.02.08](20190814182031052/屏幕快照 2019-08-27 下午5.02.08.png)</p>
<h2 id="4-9-基于内容的推荐算法（代码）"><a href="#4-9-基于内容的推荐算法（代码）" class="headerlink" title="4-9 基于内容的推荐算法（代码）"></a>4-9 基于内容的推荐算法（代码）</h2><p>![屏幕快照 2019-08-27 下午5.05.18](20190814182031052/屏幕快照 2019-08-27 下午5.05.18.png)</p>
<h1 id="第五章-总结-amp-其他"><a href="#第五章-总结-amp-其他" class="headerlink" title="第五章 总结 &amp; 其他"></a>第五章 总结 &amp; 其他</h1><h2 id="安装hadoop3"><a href="#安装hadoop3" class="headerlink" title="安装hadoop3"></a>安装hadoop3</h2><p><a href="https://blog.csdn.net/lucien7l/article/details/80781908" target="_blank" rel="noopener">https://blog.csdn.net/lucien7l/article/details/80781908</a></p>
<h2 id="关于-HDFS-数据块占用实际磁盘空间问题"><a href="#关于-HDFS-数据块占用实际磁盘空间问题" class="headerlink" title="关于 HDFS 数据块占用实际磁盘空间问题"></a>关于 HDFS 数据块占用实际磁盘空间问题</h2><p><a href="https://blog.csdn.net/qq_32445015/article/details/86677107" target="_blank" rel="noopener">https://blog.csdn.net/qq_32445015/article/details/86677107</a></p>
]]></content>
      <categories>
        <category>大数据分布式</category>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>用netty实现一个简单的rpc</title>
    <url>/2019/08/13/20190813154158451/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>目录</p>
<p>[TOC]</p>
<blockquote>
<p>参考文章：<a href="https://www.cnblogs.com/stateis0/p/8960791.html" target="_blank" rel="noopener">https://www.cnblogs.com/stateis0/p/8960791.html</a></p>
<p>我的代码地址：<a href="https://gitee.com/machine4869/note_netty/tree/netty案例：用netty实现一个简单的rpc/" target="_blank" rel="noopener">netty案例：用netty实现一个简单的rpc</a></p>
</blockquote>
<h1 id="1、需求"><a href="#1、需求" class="headerlink" title="1、需求"></a>1、需求</h1><p>客户端使用接口透明调用服务端：</p>
<p><a href="/2019/08/13/20190813154158451/image-20190813174733039.png" data-fancybox="group" data-caption="image-20190813174733039" class="fancybox"><img alt="image-20190813174733039" title="image-20190813174733039" data-src="/2019/08/13/20190813154158451/image-20190813174733039.png" class="lazyload"></a></p>
<h1 id="2、设计与实现"><a href="#2、设计与实现" class="headerlink" title="2、设计与实现"></a>2、设计与实现</h1><h2 id="接口设计"><a href="#接口设计" class="headerlink" title="接口设计"></a>接口设计</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line"><span class="number">2</span>   <span class="function">String <span class="title">hello</span><span class="params">(String msg)</span></span>;</span><br><span class="line"><span class="number">3</span> &#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="消费者相关实现"><a href="#消费者相关实现" class="headerlink" title="消费者相关实现"></a>消费者相关实现</h2><p>思路：使用动态代理实现接口的代理对象，当调用代理方法时，使用netty客户端发送请求，等待返回。</p>
<h3 id="客户端调用接口方法"><a href="#客户端调用接口方法" class="headerlink" title="客户端调用接口方法"></a>客户端调用接口方法</h3><p>客户端调用代理方法，返回一个实现了 HelloService 接口的代理对象，调用代理对象的方法，返回结果。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientBootstrap</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String providerName = <span class="string">"HelloService#hello#"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        RpcConsumer consumer = <span class="keyword">new</span> RpcConsumer();</span><br><span class="line">        <span class="comment">// 创建一个代理对象</span></span><br><span class="line">        HelloService service = (HelloService) consumer</span><br><span class="line">                .createProxy(HelloService<span class="class">.<span class="keyword">class</span>, <span class="title">providerName</span>)</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 每秒调用一次hello方法</span></span><br><span class="line">      	<span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            System.out.println(service.hello(<span class="string">"are you ok ?"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>那createProxy()是如何实现接口的代理对象的呢？</p>
<h3 id="接口的代理方法实现"><a href="#接口的代理方法实现" class="headerlink" title="接口的代理方法实现"></a>接口的代理方法实现</h3><p>思路：使用JDK 的动态代理(<code>Proxy.newProxyInstance</code>)创建HelloService的代理对象，当调用代理方法时，使用netty客户端向服务端发送相应请求，等待返回结果。</p>
<p>代码：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RpcConsumer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ExecutorService executor = Executors</span><br><span class="line">            .newFixedThreadPool(Runtime.getRuntime().availableProcessors());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> HelloClientHandler helloClientHandler;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一个代理对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">createProxy</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; serviceClass,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">final</span> String providerName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(),</span><br><span class="line">                <span class="keyword">new</span> Class&lt;?&gt;[]&#123;serviceClass&#125;, (proxy, method, args) -&gt; &#123;</span><br><span class="line">                    <span class="comment">// 当代理对象被创建时就会执行该内容</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (helloClientHandler == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        initClient();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 设置参数</span></span><br><span class="line">                    helloClientHandler.setPara(providerName + args[<span class="number">0</span>]);</span><br><span class="line">                    <span class="keyword">return</span> executor.submit(helloClientHandler).get();</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化客户端</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        helloClientHandler = <span class="keyword">new</span> HelloClientHandler();</span><br><span class="line">        EventLoopGroup group = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        Bootstrap b = <span class="keyword">new</span> Bootstrap();</span><br><span class="line">        b.group(group)</span><br><span class="line">                .channel(NioSocketChannel<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">                .<span class="title">option</span>(<span class="title">ChannelOption</span>.<span class="title">TCP_NODELAY</span>, <span class="title">true</span>)</span></span><br><span class="line"><span class="class">                .<span class="title">handler</span>(<span class="title">new</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">SocketChannel</span>&gt;() </span>&#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        ChannelPipeline p = ch.pipeline();</span><br><span class="line">                        p.addLast(<span class="keyword">new</span> StringDecoder());</span><br><span class="line">                        p.addLast(<span class="keyword">new</span> StringEncoder());</span><br><span class="line">                        p.addLast(helloClientHandler);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            b.connect(<span class="string">"localhost"</span>, <span class="number">8088</span>).sync();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>详细过程：</p>
<ol>
<li><p>当客户端调用代理类的方法时（hello() ），会触发InvocationHandler方法执行，其返回值即调用方法的返回值。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Proxy.newProxyInstance(ClassLoader loader,Class&lt;?&gt;[] interfaces,</span><br><span class="line">                                          InvocationHandler h)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>可在InvocationHandler方法里做如下操作：初始化 Netty 客户端，还需要向服务端请求数据，并返回数据</p>
</li>
<li><p>初始化客户端逻辑(<code>initClient()</code>)： 创建一个 Netty 的客户端，并连接提供者(服务端)，并设置一个自定义 handler（<code>HelloClientHandler</code>），和一些 String 类型的编解码器。</p>
</li>
<li><p>创建代理逻辑：使用 JDK 的动态代理技术，代理对象中的 invoke 方法实现如下：<br>如果 helloClientHandler 没有初始化，则初始化 helloClientHandler，这个 helloClientHandler 既是 handler ()，也是一个 Callback。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloClientHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> <span class="keyword">implements</span> <span class="title">Callable</span></span></span><br></pre></td></tr></table></figure></div>

<p>将参数设置进 client ，使用线程池调用 helloClientHandler 的 call 方法并阻塞等待数据返回（阻塞会在call里体现）。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 该返回即代理对象调用的代理方法的返回值</span></span><br><span class="line"><span class="keyword">return</span> executor.submit(helloClientHandler).get();</span><br><span class="line"></span><br><span class="line"><span class="comment">// ExecutorService.submit(Callable&lt;T&gt; task)</span></span><br><span class="line"><span class="comment">// submit方法会触发HelloClientHandler.call方法执行</span></span><br></pre></td></tr></table></figure></div>

</li>
</ol>
<p>​    </p>
<p>接下来是HelloClientHandler 的实现</p>
<h3 id="HelloClientHandler-的实现"><a href="#HelloClientHandler-的实现" class="headerlink" title="HelloClientHandler 的实现"></a>HelloClientHandler 的实现</h3><p>代码：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloClientHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> <span class="keyword">implements</span> <span class="title">Callable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ChannelHandlerContext context;</span><br><span class="line">    <span class="keyword">private</span> String result;</span><br><span class="line">    <span class="keyword">private</span> String para;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> </span>&#123;</span><br><span class="line">        context = ctx;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 收到服务端数据，唤醒等待线程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> </span>&#123;</span><br><span class="line">        result = msg.toString();</span><br><span class="line">        notify();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 写出数据，开始等待唤醒</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Object <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        context.writeAndFlush(para);</span><br><span class="line">        wait();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPara</span><span class="params">(String para)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.para = para;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>详细过程：</p>
<ol>
<li><p>当成功连接后，触发<code>channelActive()</code>，缓存 ChannelHandlerContext，用于下次使用（call方法每次要使用context发消息到服务端），该类有两个属性：返回结果和请求参数。</p>
</li>
<li><p>当调用 call 方法的时候，将请求参数发送到服务端，等待服务端返回（<code>wait()</code>）。</p>
</li>
<li><p>当服务端收到并返回数据后，触发 <code>channelRead</code>方法，将返回值赋值给 result，并唤醒等待在 call 方法上的线程（<code>notify()</code>）。此时，call方法返回数据，即代理对象返回数据。</p>
</li>
</ol>
<h2 id="提供者相关实现"><a href="#提供者相关实现" class="headerlink" title="提供者相关实现"></a>提供者相关实现</h2><p>主要就是创建一个 netty 服务端，实现一个自定义的 handler，自定义 handler 判断是否符合之间的约定（算是协议吧），如果符合，就创建一个接口的实现类，并调用他的方法返回字符串</p>
<h3 id="实现接口"><a href="#实现接口" class="headerlink" title="实现接口"></a>实现接口</h3><p>实现约定接口，用于返回客户端数据</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceImpl</span> <span class="keyword">implements</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> msg != <span class="keyword">null</span> ? msg + <span class="string">" -----&gt; I am fine."</span> : <span class="string">"I am fine."</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="实现-Netty-服务端及自定义handler"><a href="#实现-Netty-服务端及自定义handler" class="headerlink" title="实现 Netty 服务端及自定义handler"></a>实现 Netty 服务端及自定义handler</h3><p>服务端启动类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerBootstrap</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> port = <span class="number">8088</span>;</span><br><span class="line">        NettyServer.startServer(<span class="string">"localhost"</span>, port);</span><br><span class="line">        System.out.println(<span class="string">"服务端已开启，端口:"</span>+port);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>NettyServer的代码：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 服务端</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyServer</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 启动客户端</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">startServer</span><span class="params">(String hostName, <span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">        startServer0(hostName, port);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">startServer0</span><span class="params">(String hostName, <span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerBootstrap bootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">            NioEventLoopGroup eventLoopGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">            bootstrap.group(eventLoopGroup)</span><br><span class="line">                    .channel(NioServerSocketChannel<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">                    .<span class="title">childHandler</span>(<span class="title">new</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">SocketChannel</span>&gt;() </span>&#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            ChannelPipeline p = ch.pipeline();</span><br><span class="line">                            p.addLast(<span class="keyword">new</span> StringDecoder());</span><br><span class="line">                            p.addLast(<span class="keyword">new</span> StringEncoder());</span><br><span class="line">                            p.addLast(<span class="keyword">new</span> HelloServerHandler());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">            bootstrap.bind(hostName, port).sync();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>上面的代码中添加了 String类型的编解码 handler，添加了一个自定义 handler。<code>HelloServerHandler</code>用于处理客户端的请求。</p>
<p>HelloServerHandler的实现</p>
<p>代码：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 如何符合约定，则调用本地方法，返回数据</span></span><br><span class="line">        <span class="keyword">if</span> (msg.toString().startsWith(ClientBootstrap.providerName)) &#123;</span><br><span class="line">            String result = <span class="keyword">new</span> HelloServiceImpl()</span><br><span class="line">                    .hello(msg.toString().substring(msg.toString().lastIndexOf(<span class="string">"#"</span>) + <span class="number">1</span>));</span><br><span class="line">            ctx.writeAndFlush(result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这里判断是否符合约定（并没有使用复杂的协议，只是一个字符串判断），然后创建一个具体实现类，并调用方法写回客户端。</p>
<h1 id="3、测试结果"><a href="#3、测试结果" class="headerlink" title="3、测试结果"></a>3、测试结果</h1><p>启动ServerBootstrap</p>
<p>启动ClientBootstrap</p>
<p>控制台每秒打印：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">are you ok ? -----&gt; I am fine.</span><br><span class="line">are you ok ? -----&gt; I am fine.</span><br><span class="line">are you ok ? -----&gt; I am fine.</span><br><span class="line">are you ok ? -----&gt; I am fine.</span><br><span class="line">are you ok ? -----&gt; I am fine.</span><br><span class="line">...</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>大数据分布式</category>
      </categories>
      <tags>
        <tag>Netty</tag>
      </tags>
  </entry>
  <entry>
    <title>Netty项目-仿写微信 IM 即时通讯系统(3)</title>
    <url>/2019/08/09/20190809142144254/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>目录</p>
<p>[TOC]</p>
<h1 id="实战：客户端互聊原理与实现"><a href="#实战：客户端互聊原理与实现" class="headerlink" title="实战：客户端互聊原理与实现"></a>实战：客户端互聊原理与实现</h1><h2 id="1、最终效果"><a href="#1、最终效果" class="headerlink" title="1、最终效果"></a>1、最终效果</h2><blockquote>
<ol>
<li>客户端启动之后，我们在控制台输入用户名，服务端随机分配一个 userId 给客户端，这里我们省去了通过账号密码注册的过程，userId 就在服务端随机生成了，生产环境中可能会持久化在数据库，然后每次通过账号密码去“捞”。</li>
<li>当有两个客户端登录成功之后，在控制台输入<code>userId + 空格 + 消息</code>，这里的 userId 是消息接收方的标识， 消息接收方的控制台接着就会显示另外一个客户端发来的消息。</li>
</ol>
</blockquote>
<h2 id="2、-一对一单聊原理"><a href="#2、-一对一单聊原理" class="headerlink" title="2、 一对一单聊原理"></a>2、 一对一单聊原理</h2><ol>
<li>A 要和 B 聊天，首先 A 和 B 需要与服务器建立连接，然后进行一次登录流程，服务端保存用户标识和 TCP 连接的映射关系。</li>
<li>A 发消息给 B，首先需要将带有 B 标识的消息数据包发送到服务器，然后服务器从消息数据包中拿到 B 的标识，找到对应的 B 的连接，将消息发送给 B。</li>
</ol>
<h2 id="3、一对一单聊实现"><a href="#3、一对一单聊实现" class="headerlink" title="3、一对一单聊实现"></a>3、一对一单聊实现</h2><blockquote>
<p>总思路：</p>
<ol>
<li>我们定义一个会话类 <code>Session</code> 用户维持用户的登录信息，用户登录的时候绑定 Session 与 channel，用户登出或者断线的时候解绑 Session 与 channel。</li>
<li>服务端处理消息的时候，通过消息接收方的标识，拿到消息接收方的 channel，调用 <code>writeAndFlush()</code> 将消息发送给消息接收方。</li>
</ol>
</blockquote>
<ol>
<li>用户登录状态与 channel 的绑定</li>
</ol>
<blockquote>
<p>登录的时候保存会话信息，登出的时候删除会话信息。</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LoginRequestHandler.java</span><br><span class="line">Session.java</span><br><span class="line">SessionUtil.java</span><br></pre></td></tr></table></figure></div>



<ol start="2">
<li>服务端接收消息并转发的实现</li>
</ol>
<blockquote>
<ol>
<li>服务端在收到客户端发来的消息之后，首先拿到当前用户，也就是消息发送方的会话信息。</li>
<li>拿到消息发送方的会话信息之后，构造一个发送给客户端的消息对象 <code>MessageResponsePacket</code>，填上发送消息方的用户标识、昵称、消息内容。</li>
<li>通过消息接收方的标识拿到对应的 channel。</li>
<li>如果消息接收方当前是登录状态，直接发送，如果不在线，控制台打印出一条警告消息。</li>
</ol>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MessageRequestPacket.java</span><br><span class="line">MessageRequestHandler.java</span><br></pre></td></tr></table></figure></div>



<ol start="3">
<li>客户端收消息的逻辑处理</li>
</ol>
<blockquote>
<p>客户端收到消息之后，只是把当前消息打印出来</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MessageResponseHandler.java</span><br></pre></td></tr></table></figure></div>



<ol start="4">
<li>客户端控制台登录和发送消息</li>
</ol>
<blockquote>
<p>我们在客户端启动的时候，起一个线程</p>
<ol>
<li>如果当前用户还未登录，我们在控制台输入一个用户名，然后构造一个登录数据包发送给服务器，发完之后，我们等待一个超时时间，可以当做是登录逻辑的最大处理时间，这里就简单粗暴点了。</li>
<li>如果当前用户已经是登录状态，我们可以在控制台输入消息接收方的 userId，然后输入一个空格，再输入消息的具体内容，然后，我们就可以构建一个消息数据包，发送到服务端。</li>
</ol>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NettyClient.java</span><br></pre></td></tr></table></figure></div>



<p>测试：略</p>
<h1 id="实战：群聊的发起与通知"><a href="#实战：群聊的发起与通知" class="headerlink" title="实战：群聊的发起与通知"></a>实战：群聊的发起与通知</h1><blockquote>
<p>如何创建一个群聊，并通知到群聊中的各位成员</p>
</blockquote>
<h2 id="1、最终效果-1"><a href="#1、最终效果-1" class="headerlink" title="1、最终效果"></a>1、最终效果</h2><blockquote>
<ol>
<li>首先，依然是三位用户依次登录到服务器，分别是闪电侠、极速、萨维塔。</li>
<li>然后，我们在闪电侠的控制台输入 <code>createGroup</code> 指令，提示创建群聊需要输入 userId 列表，然后我们输入以英文逗号分隔的 userId。</li>
<li>群聊创建成功之后，分别在服务端和三个客户端弹出提示消息，包括群的 ID 以及群里各位用户的昵称。</li>
</ol>
</blockquote>
<h2 id="2、群聊原理"><a href="#2、群聊原理" class="headerlink" title="2、群聊原理"></a>2、群聊原理</h2><blockquote>
<ol>
<li>A，B，C 依然会经历登录流程，服务端保存用户标识对应的 TCP 连接</li>
<li>A 发起群聊的时候，将 A，B，C 的标识发送至服务端，服务端拿到之后建立一个群聊 ID，然后把这个 ID 与 A，B，C 的标识绑定</li>
<li>群聊里面任意一方在群里聊天的时候，将群聊 ID 发送至服务端，服务端拿到群聊 ID 之后，取出对应的用户标识，遍历用户标识对应的 TCP 连接，就可以将消息发送至每一个群聊成员</li>
</ol>
</blockquote>
<h2 id="3、控制台程序重构"><a href="#3、控制台程序重构" class="headerlink" title="3、控制台程序重构"></a>3、控制台程序重构</h2><blockquote>
<p>由于控制台输入的指令越来越多，需要重构</p>
<ol>
<li>我们在这个管理类中，把所有要管理的控制台指令都塞到一个 map 中。</li>
<li>执行具体操作的时候，我们先获取控制台第一个输入的指令，这里以字符串代替，比较清晰（这里我们已经实现了上小节课后思考题中的登出操作），然后通过这个指令拿到对应的控制台命令执行器执行。</li>
</ol>
</blockquote>
<ol>
<li>创建控制台命令执行器</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ConsoleCommand.java</span><br></pre></td></tr></table></figure></div>

<ol start="2">
<li>管理控制台命令执行器</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ConsoleCommandManager.java</span><br></pre></td></tr></table></figure></div>



<p>举个栗子：</p>
<ol>
<li><p>首先，我们在控制台输入 <code>createGroup</code>，然后我们按下回车，就会进入 <code>CreateGroupConsoleCommand</code> 这个类进行处理</p>
</li>
<li><p>进入到 <code>CreateGroupConsoleCommand</code> 的逻辑之后，我们创建了一个群聊创建请求的数据包，然后提示输入以英文逗号分隔的 userId 的列表，填充完这个数据包之后，调用 <code>writeAndFlush()</code> 我们就可以发送一个创建群聊的指令到服务端。</p>
</li>
</ol>
<p>最后，客户端的控制台线程相关的代码。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NettyClient.java  startConsoleThread</span><br></pre></td></tr></table></figure></div>



<h2 id="4、创建群聊的实现"><a href="#4、创建群聊的实现" class="headerlink" title="4、创建群聊的实现"></a>4、创建群聊的实现</h2><ol>
<li>客户端发送创建群聊请求</li>
</ol>
<blockquote>
<p>发送一个 <code>CreateGroupRequestPacket</code> 数据包到服务端，它只包含了一个列表，这个列表就是需要拉取群聊的用户列表</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CreateGroupRequestPacket.java</span><br></pre></td></tr></table></figure></div>



<ol start="2">
<li>服务端处理创建群聊请求</li>
</ol>
<blockquote>
<p>整个过程可以分为以下几个过程</p>
<ol>
<li>首先，我们这里创建一个 <code>ChannelGroup</code>。这里简单介绍一下 <code>ChannelGroup</code>：它可以把多个 chanel 的操作聚合在一起，可以往它里面添加删除 channel，可以进行 channel 的批量读写，关闭等操作，详细的功能读者可以自行翻看这个接口的方法。这里我们一个群组其实就是一个 channel 的分组集合，使用 <code>ChannelGroup</code> 非常方便。</li>
<li>接下来，我们遍历待加入群聊的 userId，如果存在该用户，就把对应的 channel 添加到<code>ChannelGroup</code> 中，用户昵称也添加到昵称列表中。</li>
<li>然后，我们创建一个创建群聊响应的对象，其中 <code>groupId</code> 是随机生成的，群聊创建结果一共三个字段，这里就不展开对这个类进行说明了。</li>
<li>最后，我们调用 <code>ChannelGroup</code> 的聚合发送功能，将拉群的通知批量地发送到客户端，接着在服务端控制台打印创建群聊成功的信息，至此，服务端处理创建群聊请求的逻辑结束。</li>
</ol>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// --NettyServer.java</span></span><br><span class="line">ch.pipeline().addLast(<span class="keyword">new</span> CreateGroupRequestHandler());</span><br><span class="line"></span><br><span class="line"><span class="comment">// --CreateGroupRequestHandler.java</span></span><br></pre></td></tr></table></figure></div>



<ol start="3">
<li>客户端处理创建群聊响应</li>
</ol>
<blockquote>
<p>仅仅是把创建群聊成功之后的具体信息打印出来</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// --NettyClient.java</span></span><br><span class="line">ch.pipeline().addLast(<span class="keyword">new</span> CreateGroupResponseHandler());</span><br><span class="line"><span class="comment">// --CreateGroupResponseHandler.java</span></span><br></pre></td></tr></table></figure></div>



<h1 id="实战：群聊的成员管理（加入与退出，获取成员列表）"><a href="#实战：群聊的成员管理（加入与退出，获取成员列表）" class="headerlink" title="实战：群聊的成员管理（加入与退出，获取成员列表）"></a>实战：群聊的成员管理（加入与退出，获取成员列表）</h1><blockquote>
<p>加入群聊、退出群聊、获取群成员列表</p>
</blockquote>
<h2 id="1、最终效果-2"><a href="#1、最终效果-2" class="headerlink" title="1、最终效果"></a>1、最终效果</h2><blockquote>
<ol>
<li>闪电侠先拉逆闪和极速加入了群聊，控制台输出群创建成功的消息。</li>
<li>随后在萨维塔的控制台输入 “joinGroup” 之后再输入群聊的 id，加入群聊，控制台显示加入群成功。</li>
<li>在闪电侠的控制台输入 “listGroupMembers” 之后再输入群聊的 id，展示了当前群聊成员包括了极速、萨维塔、闪电侠、逆闪。</li>
<li>萨维塔的控制台输入 “quitGroup” 之后再输入群聊的 id，退出群聊，控制台显示退群成功。</li>
<li>最后在闪电侠的控制台输入 “listGroupMembers” 之后再输入群聊的 ID，展示了当前群聊成员已无萨维塔。</li>
</ol>
</blockquote>
<h2 id="2、群的加入"><a href="#2、群的加入" class="headerlink" title="2、群的加入"></a>2、群的加入</h2><ol>
<li>控制台添加群加入命令处理器</li>
</ol>
<blockquote>
<p>我们在控制台先添加群加入命令处理器 <code>JoinGroupConsoleCommand</code>，在这个处理器中，我们创建一个指令对象 <code>JoinGroupRequestPacket</code>，填上群 id 之后，将数据包发送至服务端。之后，我们将该控制台指令添加到 <code>ConsoleCommandManager</code>。</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// --JoinGroupConsoleCommand.java</span></span><br><span class="line"><span class="comment">// --ConsoleCommandManager.java</span></span><br><span class="line">consoleCommandMap.put(<span class="string">"joinGroup"</span>, <span class="keyword">new</span> JoinGroupConsoleCommand());</span><br></pre></td></tr></table></figure></div>



<ol start="2">
<li>服务端处理群加入请求</li>
</ol>
<blockquote>
<ol>
<li>首先，通过 groupId 拿到对应的 <code>ChannelGroup</code>，之后，只需要调用 <code>ChannelGroup.add()</code> 方法，将加入群聊的用户的 channel 添加进去，服务端即完成了加入群聊的逻辑。</li>
<li>然后，构造一个加群响应，填入 groupId 之后，调用 <code>writeAndFlush()</code> 发送给加入群聊的客户端。</li>
</ol>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// --NettyServer.java</span></span><br><span class="line">ch.pipeline().addLast(<span class="keyword">new</span> JoinGroupRequestHandler());</span><br><span class="line"><span class="comment">// --JoinGroupRequestHandler.java</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// --CreateGroupRequestHandler</span></span><br><span class="line"><span class="comment">// 5. 保存群组相关的信息</span></span><br><span class="line">SessionUtil.bindChannelGroup(groupId, channelGroup);</span><br></pre></td></tr></table></figure></div>



<ol start="3">
<li>客户端处理群加入响应</li>
</ol>
<blockquote>
<p>该处理器的逻辑很简单，只是简单的将加群的结果输出到控制台</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// --NettyClient.java</span></span><br><span class="line">ch.pipeline().addLast(<span class="keyword">new</span> JoinGroupResponseHandler());</span><br><span class="line"><span class="comment">// --JoinGroupResponseHandler.java</span></span><br></pre></td></tr></table></figure></div>



<h2 id="3、群的退出"><a href="#3、群的退出" class="headerlink" title="3、群的退出"></a>3、群的退出</h2><blockquote>
<p><code>QuitGroupRequestHandler</code> 和 <code>JoinGroupRequestHandler</code> 其实是一个逆向的过程</p>
<ol>
<li>首先，通过 groupId 拿到对应的 <code>ChannelGroup</code>，之后，只需要调用 <code>ChannelGroup.remove()</code> 方法，将当前用户的 channel 删除，服务端即完成了退群的逻辑。</li>
<li>然后，构造一个退群响应，填入 groupId 之后，调用 <code>writeAndFlush()</code> 发送给退群的客户端。</li>
</ol>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// --QuitGroupRequestHandler.java</span></span><br></pre></td></tr></table></figure></div>



<h2 id="4、获取成员列表"><a href="#4、获取成员列表" class="headerlink" title="4、获取成员列表"></a>4、获取成员列表</h2><ol>
<li>控制台添加获取群列表命令处理器</li>
</ol>
<blockquote>
<p>我们在控制台先添加获取群列表命令处理器 <code>ListGroupMembersConsoleCommand</code>，在这个处理器中，我们创建一个指令对象 <code>ListGroupMembersRequestPacket</code>，填上群 id 之后，将数据包发送至服务端。之后，我们将该控制台指令添加到 <code>ConsoleCommandManager</code>。</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// --ListGroupMembersConsoleCommand.java</span></span><br><span class="line"><span class="comment">// --ConsoleCommandManager.java</span></span><br><span class="line">consoleCommandMap.put(<span class="string">"listGroupMembers"</span>, <span class="keyword">new</span> ListGroupMembersConsoleCommand());</span><br></pre></td></tr></table></figure></div>



<ol start="2">
<li>服务端处理获取成员列表请求</li>
</ol>
<blockquote>
<ol>
<li>首先，我们通过 groupId 拿到对应的 <code>ChannelGroup</code>。</li>
<li>接着，我们创建一个 sessionList 用来装载群成员信息，我们遍历 channel 的每个 session，把对应的用户信息装到 sessionList 中，实际生产环境中，这里可能会构造另外一个对象来装载用户信息而非 Session，这里我们就简单粗暴点了，改造起来不难。</li>
<li>最后，我们构造一个获取成员列表的响应指令数据包，填入 groupId 和群成员的信息之后，调用 <code>writeAndFlush()</code> 发送给发起获取成员列表的客户端。</li>
</ol>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// --NettyServer.java</span></span><br><span class="line">ch.pipeline().addLast(<span class="keyword">new</span> ListGroupMembersRequestHandler());</span><br><span class="line"><span class="comment">// --ListGroupMembersRequestHandler.java</span></span><br></pre></td></tr></table></figure></div>



<ol start="3">
<li>客户端处理获取成员列表响应</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NettyClient.java</span><br><span class="line">ListGroupMembersResponseHandler.java</span><br></pre></td></tr></table></figure></div>



<h2 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h2><p>添加一个服务端和客户端交互的新功能只需要遵循以下的步骤：</p>
<ol>
<li>创建控制台指令对应的 <code>ConsoleCommand</code> 并添加到 <code>ConsoleCommandManager</code>。</li>
<li>控制台输入指令和数据之后填入协议对应的指令数据包 - <code>xxxRequestPacket</code>，将请求写到服务端。</li>
<li>服务端创建对应的 <code>xxxRequestPacketHandler</code> 并添加到服务端的 pipeline 中，在 <code>xxxRequestPacketHandler</code> 处理完之后构造对应的 <code>xxxResponsePacket</code> 发送给客户端。</li>
<li>客户端创建对应的 <code>xxxResponsePacketHandler</code> 并添加到客户端的 pipeline 中，最后在 <code>xxxResponsePacketHandler</code> 完成响应的处理。</li>
<li>最后，最容易忽略的一点就是，新添加 <code>xxxPacket</code> 别忘了完善编解码器 <code>PacketCodec</code>中的 <code>packetTypeMap</code>！</li>
</ol>
<h1 id="实战：群聊消息的收发及-Netty-性能优化"><a href="#实战：群聊消息的收发及-Netty-性能优化" class="headerlink" title="实战：群聊消息的收发及 Netty 性能优化"></a>实战：群聊消息的收发及 Netty 性能优化</h1><h2 id="1、群聊消息最终效果"><a href="#1、群聊消息最终效果" class="headerlink" title="1、群聊消息最终效果"></a>1、群聊消息最终效果</h2><blockquote>
<ol>
<li>在闪电侠的控制台，输入 “sendToGroup” 指令之后，再输入 groupId + 空格 + 消息内容，发送消息给群里各位用户，随后，群组里的所有用户的控制台都显示了群消息。</li>
<li>随后，陆续在逆闪和极速的控制台做做相同的操作，群组里的所有用户的控制台陆续展示了群消息</li>
</ol>
</blockquote>
<h2 id="2、群聊消息的收发的实现"><a href="#2、群聊消息的收发的实现" class="headerlink" title="2、群聊消息的收发的实现"></a>2、群聊消息的收发的实现</h2><blockquote>
<ol>
<li>首先，通过 groupId 构造群聊响应 <code>GroupMessageResponsePacket</code>，然后再把发送群聊的用户信息填入，这里的用户信息我们就直接复用与 channel 绑定的 session了。</li>
<li>然后，我们拿到对应群组的 <code>ChannelGroup</code>，通过 <code>writeAndFlush()</code> 写到客户端。</li>
</ol>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GroupMessageRequestHandler.java</span><br></pre></td></tr></table></figure></div>



<h2 id="3、共享-handler"><a href="#3、共享-handler" class="headerlink" title="3、共享 handler"></a>3、共享 handler</h2><blockquote>
<p>问题引入：</p>
<ol>
<li>服务端的 pipeline 链里面已经有 12 个 handler，其中，与指令相关的 handler 有 9 个。</li>
<li>Netty 在这里的逻辑是：每次有新连接到来的时候，都会调用 <code>ChannelInitializer</code> 的 <code>initChannel()</code> 方法，然后这里 9 个指令相关的 handler 都会被 new 一次。</li>
<li>其实这里的每一个指令 handler，他们内部都是没有成员变量的，也就是说是无状态的，我们完全可以使用单例模式，即调用 <code>pipeline().addLast()</code> 方法的时候，都直接使用单例，不需要每次都 new，提高效率，也避免了创建很多小的对象。</li>
</ol>
</blockquote>
<p>拿 <code>LoginRequestHandler</code> 举例，来看一下如何改造</p>
<blockquote>
<ol>
<li>首先，非常重要的一点，如果一个 handler 要被多个 channel 进行共享，必须要加上 <code>@ChannelHandler.Sharable</code> 显示地告诉 Netty，这个 handler 是支持多个 channel 共享的，否则会报错，读者可以自行尝试一下。</li>
<li>然后，我们仿照 Netty 源码里面单例模式的写法，构造一个单例模式的类。</li>
</ol>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LoginRequestHandler.java</span><br></pre></td></tr></table></figure></div>



<p>服务端的代理里面就可以这么写</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// --NettyServer.java</span></span><br><span class="line"><span class="comment">// 单例模式，多个 channel 共享同一个 handler</span></span><br><span class="line">ch.pipeline().addLast(LoginRequestHandler.INSTANCE);</span><br></pre></td></tr></table></figure></div>



<h2 id="4、压缩-handler-合并编解码器"><a href="#4、压缩-handler-合并编解码器" class="headerlink" title="4、压缩 handler - 合并编解码器"></a>4、压缩 handler - 合并编解码器</h2><blockquote>
<p>问题引入：</p>
<p>pipeline 中第一个 handler - <code>Spliter</code>，我们是无法动它的，因为他内部实现是与每个 <code>channel</code>有关，每个 <code>Spliter</code> 需要维持每个 channel 当前读到的数据，也就是说他是有状态的。</p>
<p> 而 <code>PacketDecoder</code> 与 <code>PacketEncoder</code> 我们是可以继续改造的，Netty 内部提供了一个类，叫做 <code>MessageToMessageCodec</code>，使用它可以让我们的编解码操作放到一个类里面去实现，首先我们定义一个 <code>PacketCodecHandler</code></p>
<p>PacketCodecHandler</p>
<ol>
<li>首先，这里 <code>PacketCodecHandler</code>，他是一个无状态的 handler，因此，同样可以使用单例模式来实现。</li>
<li>我们看到，我们需要实现 <code>decode()</code> 和 <code>encode()</code> 方法，decode 是将二进制数据 ByteBuf 转换为 java 对象 Packet，而 encode 操作是一个相反的过程，在 <code>encode()</code> 方法里面，我们调用了 channel 的 内存分配器手工分配了 <code>ByteBuf</code>。</li>
</ol>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// --PacketCodecHandler.java</span></span><br></pre></td></tr></table></figure></div>



<h2 id="5、缩短事件传播路径"><a href="#5、缩短事件传播路径" class="headerlink" title="5、缩短事件传播路径"></a>5、缩短事件传播路径</h2><blockquote>
<p>问题引入：</p>
<p>随着指令相关的 handler 越来越多，handler 链越来越长，在事件传播过程中性能损耗会被逐渐放大，因为解码器解出来的每个 Packet 对象都要在每个 handler 上经过一遍，我们接下来来看一下如何缩短这个事件传播的路径。</p>
</blockquote>
<ol>
<li>压缩 handler - 合并平行 handler</li>
</ol>
<blockquote>
<p>对我们这个应用程序来说，每次 decode 出来一个指令对象之后，其实只会在一个指令 handler 上进行处理，因此，我们其实可以把这么多的指令 handler 压缩为一个 handler</p>
<p>IMHandler：</p>
<ol>
<li>首先，IMHandler 是无状态的，依然是可以写成一个单例模式的类。</li>
<li>我们定义一个 map，存放指令到各个指令处理器的映射。</li>
<li>每次回调到 IMHandler 的 <code>channelRead0()</code> 方法的时候，我们通过指令找到具体的 handler，然后调用指令 handler 的 <code>channelRead</code>，他内部会做指令类型转换，最终调用到每个指令 handler 的 <code>channelRead0()</code> 方法。</li>
</ol>
<p>效果：</p>
<p>所有的平行指令处理 handler，我们都压缩到了一个 <code>IMHandler</code>，并且 <code>IMHandler</code> 和指令 handler 均为单例模式，在单机十几万甚至几十万的连接情况下，性能能得到一定程度的提升</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// --IMHandler.java</span></span><br><span class="line"><span class="comment">// --NettyServer.java</span></span><br><span class="line">ch.pipeline().addLast(<span class="keyword">new</span> Spliter());</span><br><span class="line">ch.pipeline().addLast(PacketCodecHandler.INSTANCE);            ch.pipeline().addLast(LoginRequestHandler.INSTANCE);</span><br><span class="line">ch.pipeline().addLast(AuthHandler.INSTANCE);</span><br><span class="line">ch.pipeline().addLast(IMHandler.INSTANCE);</span><br></pre></td></tr></table></figure></div>



<ol start="2">
<li>更改事件传播源</li>
</ol>
<blockquote>
<p><code>ctx.writeAndFlush()</code> 事件传播路径</p>
<p><code>ctx.channel().writeAndFlush()</code> 事件传播路径</p>
<p>? </p>
<p>在我们的应用程序中，当我们没有改造编解码之前，我们必须调用 <code>ctx.channel().writeAndFlush()</code>, 而经过改造之后，我们的编码器（既属于 inBound, 又属于 outBound 类型的 handler）已处于 pipeline 的最前面，因此，可以大胆使用 <code>ctx.writeAndFlush()</code>。</p>
</blockquote>
<h2 id="6、减少阻塞主线程的操作"><a href="#6、减少阻塞主线程的操作" class="headerlink" title="6、减少阻塞主线程的操作"></a>6、减少阻塞主线程的操作</h2><blockquote>
<p>问题引入：</p>
<p>只要有一个 channel 的一个 handler 中的 <code>channelRead0()</code>方法阻塞了 NIO 线程，最终都会拖慢绑定在该 NIO 线程上的其他所有的 channel</p>
</blockquote>
<p>而我们需要怎么做？对于耗时的操作，我们需要把这些耗时的操作丢到我们的业务线程池中去处理。下面是解决方案的伪代码：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ThreadPool threadPool = xxx;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, T packet)</span> </span>&#123;</span><br><span class="line">    threadPool.submit(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="comment">// 1. balabala 一些逻辑</span></span><br><span class="line">        <span class="comment">// 2. 数据库或者网络等一些耗时的操作</span></span><br><span class="line">        <span class="comment">// 3. writeAndFlush()</span></span><br><span class="line">        <span class="comment">// 4. balabala 其他的逻辑</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这样，就可以避免一些耗时的操作影响 Netty 的 NIO 线程，从而影响其他的 channel。</p>
<h2 id="7、如何准确统计处理时长"><a href="#7、如何准确统计处理时长" class="headerlink" title="7、如何准确统计处理时长"></a>7、如何准确统计处理时长</h2><blockquote>
<p> <code>writeAndFlush()</code> 这个方法如果在非 NIO 线程（这里，我们其实是在业务线程中调用了该方法）中执行，它是一个异步的操作，调用之后，其实是会立即返回的，剩下的所有的操作，都是 Netty 内部有一个任务队列异步执行的</p>
</blockquote>
<p>那么如何才能判断 <code>writeAndFlush()</code> 执行完毕呢？我们可以这么做</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, T packet)</span> </span>&#123;</span><br><span class="line">    threadPool.submit(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="keyword">long</span> begin = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// 1. balabala 一些逻辑</span></span><br><span class="line">        <span class="comment">// 2. 数据库或者网络等一些耗时的操作</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3. writeAndFlush</span></span><br><span class="line">        xxx.writeAndFlush().addListener(future -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (future.isDone()) &#123;</span><br><span class="line">                <span class="comment">// 4. balabala 其他的逻辑</span></span><br><span class="line">                <span class="keyword">long</span> time =  System.currentTimeMillis() - begin;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h1 id="实战：心跳与空闲检测"><a href="#实战：心跳与空闲检测" class="headerlink" title="实战：心跳与空闲检测"></a>实战：心跳与空闲检测</h1><h2 id="1、网络问题"><a href="#1、网络问题" class="headerlink" title="1、网络问题"></a>1、网络问题</h2><p>连接假死</p>
<p>连接假死的现象是：在某一端（服务端或者客户端）看来，底层的 TCP 连接已经断开了，但是应用程序并没有捕获到，因此会认为这条连接仍然是存在的，从 TCP 层面来说，只有收到四次握手数据包或者一个 RST 数据包，连接的状态才表示已断开。</p>
<p>连接假死会带来以下两大问题</p>
<ol>
<li>对于服务端来说，因为每条连接都会耗费 cpu 和内存资源，大量假死的连接会逐渐耗光服务器的资源，最终导致性能逐渐下降，程序奔溃。</li>
<li>对于客户端来说，连接假死会造成发送数据超时，影响用户体验。</li>
</ol>
<p>通常，连接假死由以下几个原因造成的</p>
<ol>
<li>应用程序出现线程堵塞，无法进行数据的读写。</li>
<li>客户端或者服务端网络相关的设备出现故障，比如网卡，机房故障。</li>
<li>公网丢包。公网环境相对内网而言，非常容易出现丢包，网络抖动等现象，如果在一段时间内用户接入的网络连续出现丢包现象，那么对客户端来说数据一直发送不出去，而服务端也是一直收不到客户端来的数据，连接就一直耗着。</li>
</ol>
<p>接下来，我们分别从服务端和客户端的角度来解决连接假死的问题。</p>
<h2 id="2、服务端空闲检测"><a href="#2、服务端空闲检测" class="headerlink" title="2、服务端空闲检测"></a>2、服务端空闲检测</h2><p>对于服务端来说，客户端的连接如果出现假死，那么服务端将无法收到客户端的数据，也就是说，如果能一直收到客户端发来的数据，那么可以说明这条连接还是活的，因此，服务端对于连接假死的应对策略就是空闲检测。</p>
<p>何为空闲检测？简化一下，我们的服务端只需要检测一段时间内，是否收到过客户端发来的数据即可，Netty 自带的 <code>IdleStateHandler</code> 就可以实现这个功能。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">IMIdleStateHandler.java</span><br></pre></td></tr></table></figure></div>

<blockquote>
<ol>
<li>首先，我们观察一下 <code>IMIdleStateHandler</code> 的构造函数，他调用父类 <code>IdleStateHandler</code> 的构造函数，有四个参数，其中第一个表示读空闲时间，指的是在这段时间内如果没有数据读到，就表示连接假死；第二个是写空闲时间，指的是 在这段时间如果没有写数据，就表示连接假死；第三个参数是读写空闲时间，表示在这段时间内如果没有产生数据读或者写，就表示连接假死。写空闲和读写空闲为0，表示我们不关心者两类条件；最后一个参数表示时间单位。在我们的例子中，表示的是：如果 15 秒内没有读到数据，就表示连接假死。</li>
<li>连接假死之后会回调 <code>channelIdle()</code> 方法，我们这个方法里面打印消息，并手动关闭连接。</li>
</ol>
</blockquote>
<p>接下来，我们把这个 handler 插入到服务端 pipeline 的最前面</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NettyServer.java</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>为什么要插入到最前面？是因为如果插入到最后面的话，如果这条连接读到了数据，但是在 inBound 传播的过程中出错了或者数据处理完完毕就不往后传递了（我们的应用程序属于这类），那么最终 <code>IMIdleStateHandler</code> 就不会读到数据，最终导致误判。</p>
</blockquote>
<p>思考，在一段时间之内没有读到客户端的数据，是否一定能判断连接假死呢？并不能，如果在这段时间之内客户端确实是没有发送数据过来，但是连接是 ok 的，那么这个时候服务端也是不能关闭这条连接的，为了防止服务端误判，我们还需要在客户端做点什么。</p>
<h2 id="3、客户端定时发心跳"><a href="#3、客户端定时发心跳" class="headerlink" title="3、客户端定时发心跳"></a>3、客户端定时发心跳</h2><blockquote>
<p>可以在客户端定期发送数据到服务端，通常这个数据包称为心跳数据包，接下来，我们定义一个 handler，定期发送心跳给服务端</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HeartBeatTimerHandler.java</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><code>schedule()</code>，类似 jdk 的延时任务机制，可以隔一段时间之后执行一个任务，而我们这边是实现了每隔 5 秒(实现方法是方法回调自己，每回调一次自己，都会触发计时器延时执行，回调会造成栈溢出吗？？)，向服务端发送一个心跳数据包</p>
<p>实际在生产环境中，我们的发送心跳间隔时间和空闲检测时间可以略长一些，可以设置为几分钟级别</p>
</blockquote>
<p>上面其实解决了服务端的空闲检测问题，服务端这个时候是能够在一定时间段之内关掉假死的连接，释放连接的资源了，但是对于客户端来说，我们也需要检测到假死的连接。</p>
<h2 id="4、-服务端回复心跳与客户端空闲检测"><a href="#4、-服务端回复心跳与客户端空闲检测" class="headerlink" title="4、 服务端回复心跳与客户端空闲检测"></a>4、 服务端回复心跳与客户端空闲检测</h2><p>客户端的空闲检测其实和服务端一样，依旧是在客户端 pipeline 的最前方插入 <code>IMIdleStateHandler</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NettyClient.java</span><br></pre></td></tr></table></figure></div>

<p>服务端也要定期发送心跳给客户端。</p>
<p>而其实在前面我们已经实现了客户端向服务端定期发送心跳，服务端这边其实只要在收到心跳之后回复客户端，给客户端发送一个心跳响应包即可。如果在一段时间之内客户端没有收到服务端发来的数据，也可以判定这条连接为假死状态。</p>
<p>因此，服务端的 pipeline 中需要再加上如下一个 handler - <code>HeartBeatRequestHandler</code>，由于这个 handler 的处理其实是无需登录的，所以，我们将该 handler 放置在 <code>AuthHandler</code> 前面</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NettyServer.java</span><br><span class="line">HeartBeatRequestHandler.java</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>实现非常简单，只是简单地回复一个 <code>HeartBeatResponsePacket</code> 数据包。客户端在检测到假死连接之后，断开连接，然后可以有一定的策略去重连，重新登录等等…</p>
</blockquote>
<p>思考</p>
<ol>
<li><code>IMIdleStateHandler</code> 能否实现为单例模式，为什么？</li>
</ol>
<p>不能，因为每一个连接都需维持一个属于自己的15秒空闲检测</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="1-Netty-是什么？"><a href="#1-Netty-是什么？" class="headerlink" title="1. Netty 是什么？"></a>1. Netty 是什么？</h2><p>经过我们整个小册的学习，我们可以了解到，Netty 其实可以看做是对 BIO 和 NIO 的封装，并提供良好的 IO 读写相关的 API，另外还提供了非常多的开箱即用的 handler，工具类等等。</p>
<h2 id="2-服务端和客户端启动"><a href="#2-服务端和客户端启动" class="headerlink" title="2. 服务端和客户端启动"></a>2. 服务端和客户端启动</h2><p>Netty 提供了两大启动辅助类，<code>ServerBootstrap</code> 和 <code>Bootstrap</code>， 他们的启动参数类似，都是分为</p>
<ol>
<li>配置 IO 类型，配置线程模型。</li>
<li>配置 TCP 参数，attr 属性。</li>
<li>配置 handler。server 端除了配置 handler，还需要配置 childHandler，他是定义每条连接的处理器。</li>
</ol>
<h2 id="3-ByteBuf"><a href="#3-ByteBuf" class="headerlink" title="3. ByteBuf"></a>3. ByteBuf</h2><p>接着，我们又学习了 Netty 对二进制数据的抽象类 ByteBuf，ByteBuf 底层又可以细分为堆内存和堆外内存，它的 API 要比 jdk 提供的 ByteBuffer 要更好用，ByteBuf 所有的操作其实都是基于读指针和写指针来进行操作的，把申请到的一块内存划分为可读区、可写区，另外还提供了自动扩容的功能。</p>
<h2 id="4-自定义协议拆包与编解码"><a href="#4-自定义协议拆包与编解码" class="headerlink" title="4. 自定义协议拆包与编解码"></a>4. 自定义协议拆包与编解码</h2><p>通常，我们要实现客户端与服务端的通信，需要自定义协议，说白了就是双方商量在字节流里面，对应位置的字节段分别表示什么含义。</p>
<p>我们用的最多的协议呢就是基于长度的协议，一个协议数据包里面包含了一个长度字段，我们在解析的时候，首先第一步就是从字节流里面根据自定义协议截取出一个个数据包，使用的最多的拆包器就是 <code>LengthFieldBasedFrameDecoder</code>，只需要给他配置一些参数，即可实现自动拆包。</p>
<p>拆包之后呢，我们就拿到了代表字节流区段的一个个 ByteBuf，我们的解码器的作用就是把这些个 ByteBuf 变成一个个 java 对象，这样我们后续的 handler 就可以进行相应的逻辑的处理。</p>
<h2 id="5-handler-与-pipeline"><a href="#5-handler-与-pipeline" class="headerlink" title="5. handler 与 pipeline"></a>5. handler 与 pipeline</h2><p>Netty 对逻辑处理流的处理其实和 TCP 协议栈的思路非常类似，分为输入和输出，也就是 inBound 和 outBound 类型的 handler，inBound 类 handler 的添加顺序与事件传播的顺序相同，而 outBound 类 handler 的添加顺序与事件传播的顺序相反，这里一定要注意。</p>
<p>无状态的 handler 可以改造为单例模式，但是千万记得要加 <code>@ChannelHandler.Sharable</code> 注解，平行等价的 handler 可以使用压缩的方式减少事件传播路径，调用 <code>ctx.xxx()</code> 而不是 <code>ctx.channel().xxx()</code> 也可以减少事件传播路径，不过要看应用场景。</p>
<p>另外，每个 handler 都有自己的生命周期，Netty 会在 channel 或者 channelHandler 处于不同状态的情况下回调相应的方法，channelHandler 也可以动态添加，特别适用于一次性处理的 handler，用完即删除，干干净净。</p>
<h2 id="6-耗时操作的处理与统计"><a href="#6-耗时操作的处理与统计" class="headerlink" title="6. 耗时操作的处理与统计"></a>6. 耗时操作的处理与统计</h2><p>对于耗时的操作，不要直接在 NIO 线程里做，比如，不要在 <code>channelRead0()</code> 方法里做一些访问数据库或者网络相关的逻辑，要扔到自定义线程池里面去做，然后要注意这个时候，<code>writeAndFlush()</code> 的执行是异步的，需要通过添加监听回调的方式来判断是否执行完毕，进而进行延时的统计。</p>
<h2 id="关于进阶学习-Netty"><a href="#关于进阶学习-Netty" class="headerlink" title="关于进阶学习 Netty"></a>关于进阶学习 Netty</h2><p>参考原作者：<a href="https://juejin.im/book/5b4bc28bf265da0f60130116/section/5b4db177f265da0f9e589281" target="_blank" rel="noopener">扩展：进阶学习 Netty 的方向与资料</a></p>
]]></content>
      <categories>
        <category>大数据分布式</category>
        <category>socket编程</category>
      </categories>
      <tags>
        <tag>Netty</tag>
      </tags>
  </entry>
  <entry>
    <title>Netty项目-仿写微信 IM 即时通讯系统(2)</title>
    <url>/2019/07/28/20190728161454796/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>目录</p>
<p>[TOC]</p>
<h1 id="pipeline-与-channelHandler"><a href="#pipeline-与-channelHandler" class="headerlink" title="pipeline 与 channelHandler"></a>pipeline 与 channelHandler</h1><p>问题：如何避免 <code>else</code> 泛滥？</p>
<p>一个大致处理流程：</p>
<p><a href="/2019/07/28/20190728161454796/16545510d7b4f970.jpeg" data-fancybox="group" data-caption="16545510d7b4f970" class="fancybox"><img alt="16545510d7b4f970" title="16545510d7b4f970" data-src="/2019/07/28/20190728161454796/16545510d7b4f970.jpeg" class="lazyload"></a> </p>
<p>缺陷：ClientHandler、ServerHandler类臃肿，每增加新命令都要添加分支。</p>
<p>解决：模块化处理，不同的逻辑放置到单独的类来处理，最后形成一个完整的逻辑处理链。</p>
<p>Netty 中的 pipeline 和 channelHandler 正是用来解决这个问题的：责任链设计模式</p>
<h2 id="pipeline-与-channelHandler-的构成"><a href="#pipeline-与-channelHandler-的构成" class="headerlink" title="pipeline 与 channelHandler 的构成"></a>pipeline 与 channelHandler 的构成</h2><p><a href="/2019/07/28/20190728161454796/1654526f0a67bb52.jpeg" data-fancybox="group" data-caption="1654526f0a67bb52" class="fancybox"><img alt="1654526f0a67bb52" title="1654526f0a67bb52" data-src="/2019/07/28/20190728161454796/1654526f0a67bb52.jpeg" class="lazyload"></a> </p>
<p>1、一条连接对应着一个 Channel，这条 Channel 所有的处理逻辑都在一个叫做 <code>ChannelPipeline</code> 的对象里面</p>
<p>2、<code>ChannelPipeline</code> 里面每个节点都是一个 <code>ChannelHandlerContext</code> 对象，这个对象能够拿到和 Channel 相关的所有的上下文信息，然后这个对象包着一个重要的对象，那就是逻辑处理器 <code>ChannelHandler</code>。</p>
<h2 id="channelHandler-的分类"><a href="#channelHandler-的分类" class="headerlink" title="channelHandler 的分类"></a>channelHandler 的分类</h2><p><a href="/2019/07/28/20190728161454796/1654526f0a8f2890.jpeg" data-fancybox="group" data-caption="1654526f0a8f2890" class="fancybox"><img alt="1654526f0a8f2890" title="1654526f0a8f2890" data-src="/2019/07/28/20190728161454796/1654526f0a8f2890.jpeg" class="lazyload"></a> </p>
<p> <code>ChannelHandler</code> 有两大子接口：</p>
<p>1、 <code>ChannelInboundHandler</code>，处理读数据的逻辑。我们在一端读到一段数据，要做解析、处理、响应， 在开始组装响应之前的所有的逻辑，都可以放置在 <code>ChannelInboundHandler</code> 里处理</p>
<p>2、 <code>ChannelOutBoundHandler</code> ，处理写数据的逻辑。它是定义我们一端在组装完响应之后，把数据写到对端的逻辑。比如，我们封装好一个 response 对象，接下来我们有可能对这个 response 做一些其他的特殊逻辑，然后，再编码成 ByteBuf，最终写到对端（response&gt;ByteBuf之间的一些公共操作）。 <code>write()</code>。</p>
<p>3、这两个子接口分别有对应的默认实现，<code>ChannelInboundHandlerAdapter</code>，和 <code>ChanneloutBoundHandlerAdapter</code>，它们分别实现了两大接口的所有功能，默认情况下会把读写事件传播到下一个 handler。</p>
<h2 id="ChannelInboundHandler-的事件传播"><a href="#ChannelInboundHandler-的事件传播" class="headerlink" title="ChannelInboundHandler 的事件传播"></a>ChannelInboundHandler 的事件传播</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">serverBootstrap</span><br><span class="line">        .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;NioSocketChannel&gt;() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(NioSocketChannel ch)</span> </span>&#123;</span><br><span class="line">                ch.pipeline().addLast(<span class="keyword">new</span> InBoundHandlerA());</span><br><span class="line">                ch.pipeline().addLast(<span class="keyword">new</span> InBoundHandlerB());</span><br><span class="line">                ch.pipeline().addLast(<span class="keyword">new</span> InBoundHandlerC());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></div>

<p>InBoundHandlerA</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InBoundHandlerA</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"InBoundHandlerA: "</span> + msg);</span><br><span class="line">        <span class="keyword">super</span>.channelRead(ctx, msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>1、父类的 channelRead() 方法会自动调用到下一个 inBoundHandler 的 channelRead() 方法，并且会把当前 inBoundHandler 里处理完毕的对象传递到下一个 inBoundHandler，例子中传递的对象都是同一个 msg</p>
<p>2、inBoundHandler 的执行顺序与我们通过 <code>addLast()</code> 方法 添加的顺序保持一致</p>
<h2 id="ChannelOutboundHandler-的事件传播"><a href="#ChannelOutboundHandler-的事件传播" class="headerlink" title="ChannelOutboundHandler 的事件传播"></a>ChannelOutboundHandler 的事件传播</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// outBound，处理写数据的逻辑链</span></span><br><span class="line">ch.pipeline().addLast(<span class="keyword">new</span> OutBoundHandlerA());</span><br><span class="line">ch.pipeline().addLast(<span class="keyword">new</span> OutBoundHandlerB());</span><br><span class="line">ch.pipeline().addLast(<span class="keyword">new</span> OutBoundHandlerC());</span><br></pre></td></tr></table></figure></div>



<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OutBoundHandlerA</span> <span class="keyword">extends</span> <span class="title">ChannelOutboundHandlerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(ChannelHandlerContext ctx, Object msg, ChannelPromise promise)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"OutBoundHandlerA: "</span> + msg);</span><br><span class="line">        <span class="keyword">super</span>.write(ctx, msg, promise);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>1、父类的 <code>write()</code> 方法会自动调用到下一个 outBoundHandler 的 <code>write()</code> 方法，并且会把当前 outBoundHandler 里处理完毕的对象传递到下一个 outBoundHandler</p>
<p>2、可以看到，outBoundHandler 的执行顺序与我们添加的顺序相反</p>
<p>为什么？</p>
<blockquote>
<p>pipeline 的结构</p>
</blockquote>
<p><a href="/2019/07/28/20190728161454796/1654526f0a73d8c3.jpeg" data-fancybox="group" data-caption="1654526f0a73d8c3" class="fancybox"><img alt="1654526f0a73d8c3" title="1654526f0a73d8c3" data-src="/2019/07/28/20190728161454796/1654526f0a73d8c3.jpeg" class="lazyload"></a> </p>
<p>1、不管我们定义的是哪种类型的 handler, 最终它们都是以双向链表的方式连接,这里实际链表的节点是 <code>ChannelHandlerContext</code>。</p>
<p>2、虽然两种类型的 handler 在一个双向链表里，但是这两类 handler 的分工是不一样的。inBoundHandler 的事件通常只会传播到下一个 inBoundHandler，outBoundHandler 的事件通常只会传播到下一个 outBoundHandler，两者相互不受干扰。</p>
<p>在下一小节，我们会了解到几种特殊的 channelHandler，并且使用这几种特殊的 channelHandler 来改造我们的客户端和服务端逻辑，解决掉 <code>if else</code> 泛滥的问题。</p>
<h1 id="实战：构建客户端与服务端-pipeline"><a href="#实战：构建客户端与服务端-pipeline" class="headerlink" title="实战：构建客户端与服务端 pipeline"></a>实战：构建客户端与服务端 pipeline</h1><blockquote>
<p>把复杂的逻辑从单独的一个 channelHandler 中抽取出来。</p>
</blockquote>
<h2 id="ChannelInboundHandlerAdapter-与-ChannelOutboundHandlerAdapter"><a href="#ChannelInboundHandlerAdapter-与-ChannelOutboundHandlerAdapter" class="headerlink" title="ChannelInboundHandlerAdapter 与 ChannelOutboundHandlerAdapter"></a>ChannelInboundHandlerAdapter 与 ChannelOutboundHandlerAdapter</h2><blockquote>
<p>ChannelInboundHandlerAdapter.java</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    ctx.fireChannelRead(msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>1、这里的 <code>msg</code> 就是上一个 handler 的输出</p>
<p>2、默认情况下 adapter 会通过 <code>fireChannelRead()</code> 方法直接把上一个 handler 的输出结果传递到下一个 handler。</p>
<blockquote>
<p> ChannelOutboundHandlerAdapter.java</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(ChannelHandlerContext ctx, Object msg, ChannelPromise promise)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    ctx.write(msg, promise);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p>我们往 pipeline 添加的第一个 handler 中的 <code>channelRead</code> 方法中，<code>msg</code> 对象其实就是 <code>ByteBuf</code>。</p>
<p>服务端在接受到数据之后，应该首先要做的第一步逻辑就是把这个 ByteBuf 进行解码，然后把解码后的结果传递到下一个 handler，如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ByteBuf requestByteBuf = (ByteBuf) msg;</span><br><span class="line">        <span class="comment">// 解码</span></span><br><span class="line">        Packet packet = PacketCodeC.INSTANCE.decode(requestByteBuf);</span><br><span class="line">        <span class="comment">// 解码后的对象传递到下一个 handler 处理</span></span><br><span class="line">        ctx.fireChannelRead(packet)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="ByteToMessageDecoder"><a href="#ByteToMessageDecoder" class="headerlink" title="ByteToMessageDecoder"></a>ByteToMessageDecoder</h2><p>把二进制数据转换到我们的一个 Java 对象</p>
<p>使用：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PacketDecoder</span> <span class="keyword">extends</span> <span class="title">ByteToMessageDecoder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">decode</span><span class="params">(ChannelHandlerContext ctx, ByteBuf in, List out)</span> </span>&#123;</span><br><span class="line">        out.add(PacketCodeC.INSTANCE.decode(in));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>1、我们通过往这个 <code>List</code> 里面添加解码后的结果对象，就可以自动实现结果往下一个 handler 进行传递</p>
<p>2、使用 <code>ByteToMessageDecoder</code>，Netty 会自动进行内存的释放，不用操心太多的内存管理方面的逻辑（ByteBuf是堆外内存需要自行释放）</p>
<h2 id="SimpleChannelInboundHandler"><a href="#SimpleChannelInboundHandler" class="headerlink" title="SimpleChannelInboundHandler"></a>SimpleChannelInboundHandler</h2><p>XXXHandler.java</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (packet <span class="keyword">instanceof</span> XXXPacket) &#123;</span><br><span class="line">    <span class="comment">// ...处理</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   ctx.fireChannelRead(packet); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>SimpleChannelInboundHandler</code> 对象, 类型判断和对象传递的活都自动帮我们实现了，而我们可以专注于处理我们所关心的指令即可。</p>
<p>使用：</p>
<blockquote>
<p>LoginRequestHandler.java</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginRequestHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">LoginRequestPacket</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, LoginRequestPacket loginRequestPacket)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 登录逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>MessageRequestHandler.java</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageRequestHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">MessageRequestPacket</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, MessageRequestPacket messageRequestPacket)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="MessageToByteEncoder"><a href="#MessageToByteEncoder" class="headerlink" title="MessageToByteEncoder"></a>MessageToByteEncoder</h2><p>写响应的时候处理逻辑类似，都需要进行编码，然后调用 <code>writeAndFlush()</code> 将数据写到客户端，这个编码的过程其实也是重复的逻辑。</p>
<p>而Netty 提供了一个特殊的 channelHandler 来专门处理编码逻辑，我们不需要每一次将响应写到对端的时候调用一次编码逻辑进行编码，也不需要自行创建 ByteBuf，这个类叫做 <code>MessageToByteEncoder</code></p>
<p>实现编码逻辑：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PacketEncoder</span> <span class="keyword">extends</span> <span class="title">MessageToByteEncoder</span>&lt;<span class="title">Packet</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">encode</span><span class="params">(ChannelHandlerContext ctx, Packet packet, ByteBuf out)</span> </span>&#123;</span><br><span class="line">        PacketCodeC.INSTANCE.encode(out, packet);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>PacketCodeC.encode需要修改</p>
<h2 id="构建客户端与服务端-pipeline"><a href="#构建客户端与服务端-pipeline" class="headerlink" title="构建客户端与服务端 pipeline"></a>构建客户端与服务端 pipeline</h2><p><a href="/2019/07/28/20190728161454796/1666fd9cc2b9c089.jpeg" data-fancybox="group" data-caption="1666fd9cc2b9c089" class="fancybox"><img alt="1666fd9cc2b9c089" title="1666fd9cc2b9c089" data-src="/2019/07/28/20190728161454796/1666fd9cc2b9c089.jpeg" class="lazyload"></a> </p>
<blockquote>
<p>服务端</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">serverBootstrap</span><br><span class="line">               .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;NioSocketChannel&gt;() &#123;</span><br><span class="line">                    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(NioSocketChannel ch)</span> </span>&#123;</span><br><span class="line">                        ch.pipeline().addLast(<span class="keyword">new</span> PacketDecoder());</span><br><span class="line">                        ch.pipeline().addLast(<span class="keyword">new</span> LoginRequestHandler());</span><br><span class="line">                        ch.pipeline().addLast(<span class="keyword">new</span> MessageRequestHandler());</span><br><span class="line">                        ch.pipeline().addLast(<span class="keyword">new</span> PacketEncoder());</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;);</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>客户端</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">bootstrap</span><br><span class="line">        .handler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> </span>&#123;</span><br><span class="line">                ch.pipeline().addLast(<span class="keyword">new</span> PacketDecoder());</span><br><span class="line">                ch.pipeline().addLast(<span class="keyword">new</span> LoginResponseHandler());</span><br><span class="line">                ch.pipeline().addLast(<span class="keyword">new</span> MessageResponseHandler());</span><br><span class="line">                ch.pipeline().addLast(<span class="keyword">new</span> PacketEncoder());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></div>



<h1 id="实战：拆包粘包理论与解决方案"><a href="#实战：拆包粘包理论与解决方案" class="headerlink" title="实战：拆包粘包理论与解决方案"></a>实战：拆包粘包理论与解决方案</h1><h2 id="拆包粘包例子"><a href="#拆包粘包例子" class="headerlink" title="拆包粘包例子"></a>拆包粘包例子</h2><p>客户端在连接建立成功之后，使用一个 for 循环，不断向服务端写一串数据。服务端收到数据之后，仅仅把数据打印出来。出现了服务端粘包半包现象。</p>
<blockquote>
<p>见 FirstClientHandler 、FirstServerHandler</p>
</blockquote>
<ol>
<li>一种是正常的字符串输出。</li>
<li>一种是多个字符串“粘”在了一起，我们定义这种 ByteBuf 为粘包。</li>
<li>一种是一个字符串被“拆”开，形成一个破碎的包，我们定义这种 ByteBuf 为半包。</li>
</ol>
<h2 id="为什么会有粘包半包现象？"><a href="#为什么会有粘包半包现象？" class="headerlink" title="为什么会有粘包半包现象？"></a>为什么会有粘包半包现象？</h2><ol>
<li><p>应用层是按照 ByteBuf 为 单位来发送数据，数据到了服务端，也是按照字节流的方式读入，然后到了 Netty 应用层面，重新拼装成 ByteBuf，而这里的 ByteBuf 与客户端按顺序发送的 ByteBuf 可能是不对等的。</p>
</li>
<li><p>因此，我们需要在客户端根据自定义协议来组装我们应用层的数据包，然后在服务端根据我们的应用层的协议来组装数据包，这个过程通常在服务端称为拆包，而在客户端称为粘包。</p>
</li>
<li><p>举个栗子，发送端将三个数据包粘成两个 TCP 数据包发送到接收端，接收端就需要根据应用协议将两个数据包重新组装成三个数据包。</p>
</li>
</ol>
<h2 id="拆包的原理"><a href="#拆包的原理" class="headerlink" title="拆包的原理"></a>拆包的原理</h2><p>用户如果自己需要拆包：略</p>
<h2 id="Netty-自带的拆包器"><a href="#Netty-自带的拆包器" class="headerlink" title="Netty 自带的拆包器"></a>Netty 自带的拆包器</h2><ol>
<li><p>固定长度的拆包器 FixedLengthFrameDecoder</p>
</li>
<li><p>行拆包器 LineBasedFrameDecoder</p>
</li>
<li><p>分隔符拆包器 DelimiterBasedFrameDecoder</p>
</li>
<li><p>基于长度域拆包器 LengthFieldBasedFrameDecoder</p>
<p>只要你的自定义协议中包含长度域字段，均可以使用这个拆包器来实现应用层拆包。</p>
</li>
</ol>
<h2 id="如何使用-LengthFieldBasedFrameDecoder"><a href="#如何使用-LengthFieldBasedFrameDecoder" class="headerlink" title="如何使用 LengthFieldBasedFrameDecoder"></a>如何使用 LengthFieldBasedFrameDecoder</h2><p>1、在自定义协议中，得到长度域偏移量和长度域的长度（7，4），构造一个拆包器。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> LengthFieldBasedFrameDecoder(Integer.MAX_VALUE, <span class="number">7</span>, <span class="number">4</span>);</span><br></pre></td></tr></table></figure></div>

<p>2、这样一个拆包器写好之后，只需要在 pipeline 的最前面加上这个拆包器。</p>
<blockquote>
<p>可参考的文章： <a href="https://www.jianshu.com/p/a0a51fd79f62" target="_blank" rel="noopener">netty源码分析之LengthFieldBasedFrameDecoder</a></p>
</blockquote>
<p>服务端</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ch.pipeline().addLast(<span class="keyword">new</span> LengthFieldBasedFrameDecoder(Integer.MAX_VALUE, <span class="number">7</span>, <span class="number">4</span>));</span><br><span class="line">ch.pipeline().addLast(<span class="keyword">new</span> PacketDecoder());</span><br><span class="line">ch.pipeline().addLast(<span class="keyword">new</span> LoginRequestHandler());</span><br><span class="line">ch.pipeline().addLast(<span class="keyword">new</span> MessageRequestHandler());</span><br><span class="line">ch.pipeline().addLast(<span class="keyword">new</span> PacketEncoder());</span><br></pre></td></tr></table></figure></div>

<p>客户端</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ch.pipeline().addLast(<span class="keyword">new</span> LengthFieldBasedFrameDecoder(Integer.MAX_VALUE, <span class="number">7</span>, <span class="number">4</span>));</span><br><span class="line">ch.pipeline().addLast(<span class="keyword">new</span> PacketDecoder());</span><br><span class="line">ch.pipeline().addLast(<span class="keyword">new</span> LoginResponseHandler());</span><br><span class="line">ch.pipeline().addLast(<span class="keyword">new</span> MessageResponseHandler());</span><br><span class="line">ch.pipeline().addLast(<span class="keyword">new</span> PacketEncoder());</span><br></pre></td></tr></table></figure></div>

<p>这样，在后续 <code>PacketDecoder</code> 进行 decode 操作的时候，ByteBuf 就是一个完整的自定义协议数据包。</p>
<h2 id="拒绝非本协议连接"><a href="#拒绝非本协议连接" class="headerlink" title="拒绝非本协议连接"></a>拒绝非本协议连接</h2><blockquote>
<p>每个客户端发过来的数据包都做一次快速判断，判断当前发来的数据包是否是满足我的自定义协议， 我们只需要继承自 LengthFieldBasedFrameDecoder 的 <code>decode()</code> 方法，然后在 decode 之前判断前四个字节是否是等于我们定义的魔数 <code>0x12345678</code></p>
</blockquote>
<p>Spliter</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Spliter</span> <span class="keyword">extends</span> <span class="title">LengthFieldBasedFrameDecoder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> LENGTH_FIELD_OFFSET = <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> LENGTH_FIELD_LENGTH = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Spliter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(Integer.MAX_VALUE, LENGTH_FIELD_OFFSET, LENGTH_FIELD_LENGTH);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">decode</span><span class="params">(ChannelHandlerContext ctx, ByteBuf in)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 屏蔽非本协议的客户端</span></span><br><span class="line">        <span class="keyword">if</span> (in.getInt(in.readerIndex()) != PacketCodeC.MAGIC_NUMBER) &#123;</span><br><span class="line">            ctx.channel().close();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.decode(ctx, in);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>实验一下:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">~ telnet 127.0.0.1 8000</span><br><span class="line"><span class="meta">#</span><span class="bash"> ...</span></span><br><span class="line"><span class="meta">telnet&gt;</span><span class="bash"> send ayt	<span class="comment"># 发送字符串“Are you There”</span></span></span><br><span class="line">Connection closed by foreign host. # 被关闭了</span><br></pre></td></tr></table></figure></div>

<p>向服务端发送一段字符串，由于这段字符串是不符合我们的自定义协议的，于是在第一时间，我们的服务端就关闭了这条连接。</p>
<h2 id="服务端和客户端的-pipeline-结构"><a href="#服务端和客户端的-pipeline-结构" class="headerlink" title="服务端和客户端的 pipeline 结构"></a>服务端和客户端的 pipeline 结构</h2><p>至此</p>
<p><a href="/2019/07/28/20190728161454796/1657e014321e00b0.jpeg" data-fancybox="group" data-caption="1657e014321e00b0" class="fancybox"><img alt="1657e014321e00b0" title="1657e014321e00b0" data-src="/2019/07/28/20190728161454796/1657e014321e00b0.jpeg" class="lazyload"></a> </p>
<h1 id="channelHandler-的生命周期"><a href="#channelHandler-的生命周期" class="headerlink" title="channelHandler 的生命周期"></a>channelHandler 的生命周期</h1><blockquote>
<p>回调方法的执行是有顺序的，而这个执行顺序可以称为 ChannelHandler 的生命周期</p>
</blockquote>
<h2 id="ChannelHandler-的生命周期详解"><a href="#ChannelHandler-的生命周期详解" class="headerlink" title="ChannelHandler 的生命周期详解"></a>ChannelHandler 的生命周期详解</h2><blockquote>
<p>ChannelInBoundHandler为例</p>
</blockquote>
<p>1、LifeCyCleTestHandler</p>
<p>运行 <code>NettyServer</code>，控制台输出：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">逻辑处理器被添加：handlerAdded()</span><br><span class="line">channel 绑定到线程(NioEventLoop)：channelRegistered()</span><br><span class="line">channel 准备就绪：channelActive()</span><br><span class="line">channel 有数据可读：channelRead()</span><br><span class="line">Thu Aug 01 21:12:46 CST 2019: 收到客户端登录请求……</span><br><span class="line">Thu Aug 01 21:12:46 CST 2019: 登录成功!</span><br><span class="line">channel 某次数据读完：channelReadComplete()</span><br><span class="line">channel 某次数据读完：channelReadComplete()</span><br><span class="line">channel 被关闭：channelInactive()</span><br><span class="line">channel 取消线程(NioEventLoop) 的绑定: channelUnregistered()</span><br><span class="line">逻辑处理器被移除：handlerRemoved()</span><br></pre></td></tr></table></figure></div>

<p>2、回调方法的执行顺序</p>
<p>3、每个回调方法的含义</p>
<p>略</p>
<p>4、一幅图来标识 ChannelHandler 的生命周期 </p>
<p><a href="/2019/07/28/20190728161454796/1666fdc2bdcf3f9e.jpeg" data-fancybox="group" data-caption="1666fdc2bdcf3f9e" class="fancybox"><img alt="1666fdc2bdcf3f9e" title="1666fdc2bdcf3f9e" data-src="/2019/07/28/20190728161454796/1666fdc2bdcf3f9e.jpeg" class="lazyload"></a> </p>
<h2 id="ChannelHandler-生命周期各回调方法用法举例"><a href="#ChannelHandler-生命周期各回调方法用法举例" class="headerlink" title="ChannelHandler 生命周期各回调方法用法举例"></a>ChannelHandler 生命周期各回调方法用法举例</h2><ol>
<li><p>ChannelInitializer 的实现原理</p>
<p>initChannel()方法是利用handlerAdded()启动的</p>
</li>
<li><p>handlerAdded() 与 handlerRemoved()</p>
<p>这两个方法通常可以用在一些资源的申请和释放</p>
</li>
<li><p>channelActive() 与 channelInActive()</p>
<ol>
<li>通常我们在这两个回调里面统计单机的连接数，<code>channelActive()</code> 被调用，连接数加一，<code>channelInActive()</code> 被调用，连接数减一</li>
<li>也可以在 <code>channelActive()</code> 方法中，实现对客户端连接 ip 黑白名单的过滤</li>
</ol>
</li>
<li><p>channelRead()</p>
<p>案例：拆包器，可参考阅读：<a href="https://www.jianshu.com/p/dc26e944da95" target="_blank" rel="noopener">netty源码分析之拆包器的奥秘</a></p>
</li>
<li><p>channelReadComplete()</p>
<p>在每次向客户端写数据的时候，都通过 <code>writeAndFlush()</code> 的方法写并刷新到底层，其实这种方式不是特别高效。</p>
<p>可以在之前调用 <code>writeAndFlush()</code> 的地方都换成 <code>write()</code> 方法，然后在这个方面里面调用 <code>ctx.channel().flush()</code> 方法，相当于一个批量刷新的机制</p>
<p>如果对性能要求没那么高，<code>writeAndFlush()</code> 足矣。</p>
</li>
</ol>
<h1 id="实战：使用-channelHandler-的热插拔实现客户端身份校验"><a href="#实战：使用-channelHandler-的热插拔实现客户端身份校验" class="headerlink" title="实战：使用 channelHandler 的热插拔实现客户端身份校验"></a>实战：使用 channelHandler 的热插拔实现客户端身份校验</h1><blockquote>
<ol>
<li>如果有很多业务逻辑的 handler 都要进行某些相同的操作，我们完全可以抽取出一个 handler 来单独处理</li>
<li>如果某一个独立的逻辑在执行几次之后（这里是一次）不需要再执行了，那么我们可以通过 ChannelHandler 的热插拔机制来实现动态删除逻辑，应用程序性能处理更为高效</li>
<li>很多操作在执行前都要进行登录校验，所以将其抽取为单独的handler；只要连接未断开，客户端只要成功登录过，后续就不需要每次都进行客户端的身份校验。</li>
</ol>
</blockquote>
<h2 id="1、身份校验"><a href="#1、身份校验" class="headerlink" title="1、身份校验"></a>1、身份校验</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// --LoginRequestHandler.java</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, LoginRequestPacket loginRequestPacket)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (valid(loginRequestPacket)) &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="comment">// 基于我们前面小节的代码，添加如下一行代码</span></span><br><span class="line">        LoginUtil.markAsLogin(ctx.channel());</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// --NettyServer.java</span></span><br><span class="line">ch.pipeline().addLast(<span class="keyword">new</span> PacketDecoder());</span><br><span class="line">ch.pipeline().addLast(<span class="keyword">new</span> LoginRequestHandler());</span><br><span class="line"><span class="comment">// 新增加用户认证handler</span></span><br><span class="line">ch.pipeline().addLast(<span class="keyword">new</span> AuthHandler());</span><br><span class="line">ch.pipeline().addLast(<span class="keyword">new</span> MessageRequestHandler());</span><br><span class="line">ch.pipeline().addLast(<span class="keyword">new</span> PacketEncoder());</span><br><span class="line"></span><br><span class="line"><span class="comment">// --AuthHandler.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!LoginUtil.hasLogin(ctx.channel())) &#123;</span><br><span class="line">            ctx.channel().close();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.channelRead(ctx, msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="2、移除校验逻辑"><a href="#2、移除校验逻辑" class="headerlink" title="2、移除校验逻辑"></a>2、移除校验逻辑</h2><blockquote>
<p>客户端只要成功登录过，后续就不需要再进行客户端的身份校验</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// --AuthHandler.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!LoginUtil.hasLogin(ctx.channel())) &#123;</span><br><span class="line">            ctx.channel().close();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 一行代码实现逻辑的删除</span></span><br><span class="line">            ctx.pipeline().remove(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">super</span>.channelRead(ctx, msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlerRemoved</span><span class="params">(ChannelHandlerContext ctx)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (LoginUtil.hasLogin(ctx.channel())) &#123;</span><br><span class="line">            System.out.println(<span class="string">"当前连接登录验证完毕，无需再次验证, AuthHandler 被移除"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"无登录验证，强制关闭连接!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="3、-身份校验演示"><a href="#3、-身份校验演示" class="headerlink" title="3、 身份校验演示"></a>3、 身份校验演示</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// --NettyClient.java</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">startConsoleThread</span><span class="params">(Channel channel)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (!Thread.interrupted()) &#123;</span><br><span class="line">                <span class="comment">// 这里注释掉，因为已经有了校验handler</span></span><br><span class="line"><span class="comment">//                if (LoginUtil.hasLogin(channel)) &#123;</span></span><br><span class="line">                    System.out.println(<span class="string">"输入消息发送至服务端: "</span>);</span><br><span class="line">                    Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">                    String line = sc.nextLine();</span><br><span class="line"></span><br><span class="line">                    channel.writeAndFlush(<span class="keyword">new</span> MessageRequestPacket(line));</span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>有身份认证的演示</p>
<p>无身份认证的演示：令用户名密码错误</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// --LoginResponseHandler.java</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelInactive</span><span class="params">(ChannelHandlerContext ctx)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"客户端连接被关闭!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p>未完待续…</p>
]]></content>
      <categories>
        <category>大数据分布式</category>
        <category>socket编程</category>
      </categories>
      <tags>
        <tag>Netty</tag>
      </tags>
  </entry>
  <entry>
    <title>Netty项目-仿写微信 IM 即时通讯系统(1)</title>
    <url>/2019/07/22/20190722161728334/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>简介</p>
<p>1、Netty 是一个高性能网络通信框架，广泛用于互联网中间件领域网络通信层</p>
<p>2、项目：Netty实现单聊和群聊(控制台交互，不写UI)</p>
<p>目录</p>
<p>[TOC]</p>
<blockquote>
<p>项目参考：<a href="https://juejin.im/book/5b4bc28bf265da0f60130116" target="_blank" rel="noopener">https://juejin.im/book/5b4bc28bf265da0f60130116</a></p>
<p>原作者源码位置：<a href="https://github.com/lightningMan/flash-netty" target="_blank" rel="noopener">https://github.com/lightningMan/flash-netty</a></p>
<p>我的代码地址：<a href="https://gitee.com/machine4869/note_netty" target="_blank" rel="noopener">https://gitee.com/machine4869/note_netty</a></p>
</blockquote>
<h1 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h1><h2 id="单聊与群聊的流程和指令集"><a href="#单聊与群聊的流程和指令集" class="headerlink" title="单聊与群聊的流程和指令集"></a>单聊与群聊的流程和指令集</h2><p>单聊流程</p>
<p>单聊的指令</p>
<p>群聊流程</p>
<p>群聊要实现的指令集</p>
<p>具体内容：略</p>
<h2 id="Netty"><a href="#Netty" class="headerlink" title="Netty"></a>Netty</h2><p>涉及的核心知识点：</p>
<ul>
<li>服务端如何启动</li>
<li>客户端如何启动</li>
<li>数据载体 ByteBuf</li>
<li>长连自定义协议如何设计</li>
<li>粘包拆包原理与实践</li>
<li>如何实现自定义编解码</li>
<li>pipeline 与 channelHandler</li>
<li>定时发心跳怎么做</li>
<li>如何进行连接空闲检测</li>
</ul>
<p>客户端使用 Netty 的程序逻辑结构</p>
<p>服务端使用 Netty 的程序逻辑结构</p>
<p>具体内容：略</p>
<h1 id="Netty-基础"><a href="#Netty-基础" class="headerlink" title="Netty 基础"></a>Netty 基础</h1><p>见我的blog【Netty 基础】，用netty实现了简单的c/s通信</p>
<p>略</p>
<h1 id="Netty-环境配置"><a href="#Netty-环境配置" class="headerlink" title="Netty 环境配置"></a>Netty 环境配置</h1><blockquote>
<p>使用分支功能看源码</p>
</blockquote>
<h1 id="服务端启动流程"><a href="#服务端启动流程" class="headerlink" title="服务端启动流程"></a>服务端启动流程</h1><blockquote>
<p>切换分支查看代码</p>
<p>NettyServer.java</p>
</blockquote>
<h2 id="1、最小化参数配置"><a href="#1、最小化参数配置" class="headerlink" title="1、最小化参数配置"></a>1、最小化参数配置</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 两大线程组：</span><br><span class="line">bossGroup(接活的老板): 监听端口，accept新连接</span><br><span class="line">workerGroup(干活的员工): 处理每一条连接的数据读写</span><br><span class="line"></span><br><span class="line">- serverBootstrap</span><br><span class="line">引导类，引导我们进行服务端的启动工作，直接new出来开搞。</span><br><span class="line">- .group(bossGroup, workerGroup)</span><br><span class="line">给引导类配置两大线程组，这个引导类的线程模型也就定型了</span><br><span class="line"></span><br><span class="line">-.channel(NioServerSocketChannel.class)</span><br><span class="line">来指定 IO 模型，当然，这里也有其他的选择，如果你想指定 IO 模型为 BIO，那么这里配置上OioServerSocketChannel.class类型即可，当然通常我们也不会这么做，因为Netty的优势就在于NIO。</span><br><span class="line"></span><br><span class="line">- childHandler()</span><br><span class="line">给这个引导类创建一个ChannelInitializer，这里主要就是定义后续每条连接的数据读写，业务处理逻辑。</span><br><span class="line"></span><br><span class="line">ChannelInitializer这个类中，我们注意到有一个泛型参数NioSocketChannel，这个类，就是 Netty 对 NIO 类型的连接的抽象，而我们前面NioServerSocketChannel也是对 NIO 类型的连接的抽象</span><br><span class="line"></span><br><span class="line">NioServerSocketChannel和NioSocketChannel的概念可以和 BIO 编程模型中（IOServer）的ServerSocket以及Socket两个概念对应上</span><br><span class="line"></span><br><span class="line">- 总结：</span><br><span class="line">要启动一个Netty服务端，必须要指定三类属性，分别是线程模型（.group）、IO 模型（.channel）、连接读写处理逻辑（childHandler()），有了这三者，之后在调用bind(8000)，我们就可以在本地绑定一个 8000 端口启动起来</span><br></pre></td></tr></table></figure></div>

<h2 id="2、自动绑定递增端口"><a href="#2、自动绑定递增端口" class="headerlink" title="2、自动绑定递增端口"></a>2、自动绑定递增端口</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NettyServer.bind()</span><br><span class="line"></span><br><span class="line">递归绑定端口，直到成功</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">...</span><br><span class="line">端口[1021]绑定失败!</span><br><span class="line">端口[1022]绑定失败!</span><br><span class="line">端口[1023]绑定失败!</span><br><span class="line">端口[1024]绑定成功!</span><br></pre></td></tr></table></figure></div>

<h2 id="3、服务端启动其他方法"><a href="#3、服务端启动其他方法" class="headerlink" title="3、服务端启动其他方法"></a>3、服务端启动其他方法</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- handler()</span><br><span class="line">- attr()</span><br><span class="line">- childAttr()</span><br><span class="line">- childOption()</span><br><span class="line">- option()</span><br><span class="line">解释：略</span><br></pre></td></tr></table></figure></div>



<h1 id="客户端启动流程"><a href="#客户端启动流程" class="headerlink" title="客户端启动流程"></a>客户端启动流程</h1><blockquote>
<p>切换分支查看代码</p>
<p>NettyClient.java</p>
</blockquote>
<h2 id="1、标准流程"><a href="#1、标准流程" class="headerlink" title="1、标准流程"></a>1、标准流程</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">bootstrap</span><br><span class="line">	<span class="comment">// 1.指定线程模型</span></span><br><span class="line">    .group(workerGroup)</span><br><span class="line">    <span class="comment">// 2.指定 IO 类型为 NIO</span></span><br><span class="line">    .channel(NioSocketChannel<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    // 3.<span class="title">IO</span> 处理逻辑</span></span><br><span class="line"><span class="class">    .<span class="title">handler</span>(<span class="title">xxx</span>)</span></span><br></pre></td></tr></table></figure></div>

<h2 id="2、失败重连"><a href="#2、失败重连" class="headerlink" title="2、失败重连"></a>2、失败重连</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bootstrap.connect(host, port).addListener(xxx)</span><br><span class="line"></span><br><span class="line">- 指数退避逻辑：1 秒、2 秒、4 秒、8 秒，以 2 的幂次来建立连接，默认重试 5 次</span><br><span class="line">- schedule</span><br><span class="line">可实现定时任务逻辑，延迟delay时间执行connect方法</span><br></pre></td></tr></table></figure></div>

<h2 id="3、客户端启动其他方法"><a href="#3、客户端启动其他方法" class="headerlink" title="3、客户端启动其他方法"></a>3、客户端启动其他方法</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- attr()</span><br><span class="line">- option()</span><br><span class="line">解释：略</span><br></pre></td></tr></table></figure></div>



<h1 id="实战：客户端与服务端双向通信"><a href="#实战：客户端与服务端双向通信" class="headerlink" title="实战：客户端与服务端双向通信"></a>实战：客户端与服务端双向通信</h1><blockquote>
<p>切换分支查看代码</p>
</blockquote>
<p>功能：客户端连接成功之后，向服务端写一段数据 ，服务端收到数据之后打印，并向客户端回一段数据。</p>
<h2 id="1、客户端发数据到服务端"><a href="#1、客户端发数据到服务端" class="headerlink" title="1、客户端发数据到服务端"></a>1、客户端发数据到服务端</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- ch.pipeline() 返回的是和这条连接相关的逻辑处理链</span><br><span class="line">- addLast() 方法 添加一个逻辑处理器。为的就是在客户端建立连接成功之后，向服务端写数据</span><br><span class="line">- ChannelInboundHandlerAdapter.channelActive</span><br><span class="line">在客户端连接建立成功之后被调用</span><br><span class="line">- Netty 里面数据是以 ByteBuf 为单位的</span><br></pre></td></tr></table></figure></div>

<p>demo</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.handler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 自定义FirstClientHandler继承ChannelInboundHandlerAdapter</span></span><br><span class="line">        ch.pipeline().addLast(<span class="keyword">new</span> FirstClientHandler());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div>

<h2 id="2、服务端读取客户端数据"><a href="#2、服务端读取客户端数据" class="headerlink" title="2、服务端读取客户端数据"></a>2、服务端读取客户端数据</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- ChannelInboundHandlerAdapter.channelRead</span><br><span class="line">在接收到客户端发来的数据之后被回调</span><br><span class="line">-  msg 参数</span><br><span class="line">这里强转之后，然后调用 byteBuf.toString() 就能够拿到我们客户端发过来的字符串数据</span><br></pre></td></tr></table></figure></div>

<p>demo</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.childHandler(<span class="keyword">new</span> ChannelInitializer&lt;NioSocketChannel&gt;() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(NioSocketChannel ch)</span> </span>&#123;</span><br><span class="line">        ch.pipeline().addLast(<span class="keyword">new</span> FirstServerHandler());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div>



<h2 id="3、服务端回数据给客户端"><a href="#3、服务端回数据给客户端" class="headerlink" title="3、服务端回数据给客户端"></a>3、服务端回数据给客户端</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 覆写channelRead()</span><br><span class="line">- 创建填充ByteBuf</span><br><span class="line">- writeAndFlush()</span><br></pre></td></tr></table></figure></div>



<h2 id="4、客户端读取数据"><a href="#4、客户端读取数据" class="headerlink" title="4、客户端读取数据"></a>4、客户端读取数据</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 覆盖 ChannelRead()</span><br><span class="line">- 类似</span><br></pre></td></tr></table></figure></div>



<h1 id="数据传输载体-ByteBuf-介绍"><a href="#数据传输载体-ByteBuf-介绍" class="headerlink" title="数据传输载体 ByteBuf 介绍"></a>数据传输载体 ByteBuf 介绍</h1><h2 id="1、ByteBuf结构"><a href="#1、ByteBuf结构" class="headerlink" title="1、ByteBuf结构"></a>1、ByteBuf结构</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- readerIndex、writerIndex</span><br><span class="line">- capacity、maxCapacity</span><br><span class="line">- 有效地区分可读数据和可写数据，读写之间相互没有冲突</span><br></pre></td></tr></table></figure></div>

<h2 id="2、ByteBuf-常用的-API"><a href="#2、ByteBuf-常用的-API" class="headerlink" title="2、ByteBuf 常用的 API"></a>2、ByteBuf 常用的 API</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">解释：略</span><br><span class="line"></span><br><span class="line">容量 APIAPI</span><br><span class="line">- capacity()</span><br><span class="line">- maxCapacity()</span><br><span class="line">- readableBytes() 与 isReadable()</span><br><span class="line">- writableBytes()、 isWritable() 与 maxWritableBytes()</span><br><span class="line"></span><br><span class="line">读写指针相关的 API</span><br><span class="line">- readerIndex() 与 readerIndex(int)</span><br><span class="line">- writeIndex() 与 writeIndex(int)</span><br><span class="line">- markReaderIndex() 与 resetReaderIndex()  &#x2F;&#x2F; 推荐使用</span><br><span class="line"></span><br><span class="line">读写 API</span><br><span class="line">- writeBytes(byte[] src) 与 buffer.readBytes(byte[] dst)</span><br><span class="line">- writeByte(byte b) 与 buffer.readByte()</span><br><span class="line">- release() 与 retain()</span><br><span class="line">    Netty 使用了堆外内存，申请到的内存无法被垃圾回收器直接回收，所以需要我们手动回收。</span><br><span class="line">	Netty 的 ByteBuf 是通过引用计数的方式管理的。</span><br><span class="line"></span><br><span class="line">- slice()、duplicate()、copy()</span><br><span class="line">- retainedSlice() 与 retainedDuplicate()</span><br><span class="line">	内存共享，引用计数共享，读写指针不共享</span><br><span class="line"></span><br><span class="line">	错误demo</span><br><span class="line">    1、多次释放</span><br><span class="line">    2、不释放造成内存泄漏</span><br><span class="line"></span><br><span class="line">    要点：在一个函数体里面，只要增加了引用计数（包括 ByteBuf 的创建和手动调用 retain() 方法），就必须调用 release() 方法</span><br></pre></td></tr></table></figure></div>

<h2 id="3、实战"><a href="#3、实战" class="headerlink" title="3、实战"></a>3、实战</h2><blockquote>
<p>切换分支查看代码</p>
<p>ByteBufTest.java</p>
</blockquote>
<p>一个具体的例子说明 ByteBuf 的实际使用</p>
<h1 id="客户端与服务端通信协议编解码"><a href="#客户端与服务端通信协议编解码" class="headerlink" title="客户端与服务端通信协议编解码"></a>客户端与服务端通信协议编解码</h1><p>如何设计并实现客户端与服务端的通信协议</p>
<h2 id="1、什么是服务端与客户端的通信协议"><a href="#1、什么是服务端与客户端的通信协议" class="headerlink" title="1、什么是服务端与客户端的通信协议"></a>1、什么是服务端与客户端的通信协议</h2><p>例：一个简单的登录指令数据包格式</p>
<h2 id="2、通信协议的设计"><a href="#2、通信协议的设计" class="headerlink" title="2、通信协议的设计"></a>2、通信协议的设计</h2><p><a href="/2019/07/22/20190722161728334/1653028b36ee5d81.jpeg" data-fancybox="group" data-caption="1653028b36ee5d81" class="fancybox"><img alt="1653028b36ee5d81" title="1653028b36ee5d81" data-src="/2019/07/22/20190722161728334/1653028b36ee5d81.jpeg" class="lazyload"></a> </p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、魔数</span><br><span class="line">通常情况下为固定的几个字节。识别该数据包是自定义协议</span><br><span class="line"></span><br><span class="line">2、版本号</span><br><span class="line">通常情况下是预留字段，用于协议升级的时候用到</span><br><span class="line"></span><br><span class="line">3、序列化算法</span><br><span class="line">Java对象转换二进制数据是如何转换的。比如 Java 自带的序列化，json，hessian 等序列化方式</span><br><span class="line"></span><br><span class="line">4、指令</span><br><span class="line">服务端或者客户端每收到一种指令都会有相应的处理逻辑，用一个字节来表示，最高支持256种指令，对于我们这个 IM 系统来说已经完全足够了。</span><br><span class="line"></span><br><span class="line">5、数据长度</span><br><span class="line"></span><br><span class="line">6、数据内容</span><br><span class="line"></span><br><span class="line">这样一套标准的协议能够适配大多数情况下的服务端与客户端的通信场景</span><br></pre></td></tr></table></figure></div>



<h2 id="3、通信协议的实现"><a href="#3、通信协议的实现" class="headerlink" title="3、通信协议的实现"></a>3、通信协议的实现</h2><p>如何使用 Netty 来实现这套协议</p>
<h3 id="定义协议对象"><a href="#定义协议对象" class="headerlink" title="定义协议对象"></a>定义协议对象</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Packet</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 协议版本</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Byte version = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 指令: 抽象方法</span></span><br><span class="line"><span class="comment">    * /</span></span><br><span class="line"><span class="comment">    public abstract Byte getCommand();</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure></div>



<p>例：定义登录请求数据包</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Byte LOGIN_REQUEST = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginRequestPacket</span> <span class="keyword">extends</span> <span class="title">Packet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Byte <span class="title">getCommand</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> LOGIN_REQUEST;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="序列化-反序列化"><a href="#序列化-反序列化" class="headerlink" title="序列化/反序列化"></a>序列化/反序列化</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Serializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 序列化算法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">byte</span> <span class="title">getSerializerAlgorithm</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * java 对象转换成二进制</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">byte</span>[] serialize(Object object);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 二进制转换成 java 对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    &lt;T&gt; <span class="function">T <span class="title">deserialize</span><span class="params">(Class&lt;T&gt; clazz, <span class="keyword">byte</span>[] bytes)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>本项目方案：</p>
<p>使用最简单的 json 序列化方式，使用阿里巴巴的 <a href="https://github.com/alibaba/fastjson" target="_blank" rel="noopener">fastjson</a> 作为序列化框架。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SerializerAlgorithm</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * json 序列化标识</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">byte</span> JSON = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JSONSerializer</span> <span class="keyword">implements</span> <span class="title">Serializer</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">byte</span> <span class="title">getSerializerAlgorithm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> SerializerAlgorithm.JSON;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] serialize(Object object) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> JSON.toJSONBytes(object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">deserialize</span><span class="params">(Class&lt;T&gt; clazz, <span class="keyword">byte</span>[] bytes)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> JSON.parseObject(bytes, clazz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p>使用的默认值</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Serializer</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * json 序列化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">byte</span> JSON_SERIALIZER = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    Serializer DEFAULT = <span class="keyword">new</span> JSONSerializer();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="编码：封装成二进制"><a href="#编码：封装成二进制" class="headerlink" title="编码：封装成二进制"></a>编码：封装成二进制</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// PacketCodeC.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAGIC_NUMBER = <span class="number">0x12345678</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> ByteBuf <span class="title">encode</span><span class="params">(Packet packet)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 创建 ByteBuf 对象</span></span><br><span class="line">    ByteBuf byteBuf = ByteBufAllocator.DEFAULT.ioBuffer();</span><br><span class="line">    <span class="comment">// 2. 序列化 Java 对象</span></span><br><span class="line">    <span class="keyword">byte</span>[] bytes = Serializer.DEFAULT.serialize(packet);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 实际编码过程</span></span><br><span class="line">    byteBuf.writeInt(MAGIC_NUMBER);</span><br><span class="line">    byteBuf.writeByte(packet.getVersion());</span><br><span class="line">    byteBuf.writeByte(Serializer.DEFAULT.getSerializerAlgorithm());</span><br><span class="line">    byteBuf.writeByte(packet.getCommand());</span><br><span class="line">    byteBuf.writeInt(bytes.length);</span><br><span class="line">    byteBuf.writeBytes(bytes);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> byteBuf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="解码：解析-Java-对象"><a href="#解码：解析-Java-对象" class="headerlink" title="解码：解析 Java 对象"></a>解码：解析 Java 对象</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Packet <span class="title">decode</span><span class="params">(ByteBuf byteBuf)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 跳过 magic number</span></span><br><span class="line">    byteBuf.skipBytes(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 跳过版本号</span></span><br><span class="line">    byteBuf.skipBytes(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 序列化算法标识</span></span><br><span class="line">    <span class="keyword">byte</span> serializeAlgorithm = byteBuf.readByte();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指令</span></span><br><span class="line">    <span class="keyword">byte</span> command = byteBuf.readByte();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据包长度</span></span><br><span class="line">    <span class="keyword">int</span> length = byteBuf.readInt();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[length];</span><br><span class="line">    byteBuf.readBytes(bytes);</span><br><span class="line"></span><br><span class="line">    Class&lt;? extends Packet&gt; requestType = getRequestType(command);</span><br><span class="line">    Serializer serializer = getSerializer(serializeAlgorithm);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (requestType != <span class="keyword">null</span> &amp;&amp; serializer != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> serializer.deserialize(requestType, bytes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<blockquote>
<p><code>PacketCodeCTest.java</code> 是对编解码过程的测试用例</p>
</blockquote>
<h1 id="实战：Netty-实现客户端登录"><a href="#实战：Netty-实现客户端登录" class="headerlink" title="实战：Netty 实现客户端登录"></a>实战：Netty 实现客户端登录</h1><h2 id="1、登录流程"><a href="#1、登录流程" class="headerlink" title="1、登录流程"></a>1、登录流程</h2><p>实现客户端登录到服务端的过程</p>
<p><a href="/2019/07/22/20190722161728334/16535d7424e02d3a.jpeg" data-fancybox="group" data-caption="16535d7424e02d3a" class="fancybox"><img alt="16535d7424e02d3a" title="16535d7424e02d3a" data-src="/2019/07/22/20190722161728334/16535d7424e02d3a.jpeg" class="lazyload"></a> </p>
<h2 id="2、逻辑处理器"><a href="#2、逻辑处理器" class="headerlink" title="2、逻辑处理器"></a>2、逻辑处理器</h2><p>客户端</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bootstrap.handler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> </span>&#123;</span><br><span class="line">                ch.pipeline().addLast(<span class="keyword">new</span> ClientHandler());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></div>

<p>服务端</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">serverBootstrap.childHandler(<span class="keyword">new</span> ChannelInitializer&lt;NioSocketChannel&gt;() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(NioSocketChannel ch)</span> </span>&#123;</span><br><span class="line">                ch.pipeline().addLast(<span class="keyword">new</span> ServerHandler());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="3、客户端发送登录请求"><a href="#3、客户端发送登录请求" class="headerlink" title="3、客户端发送登录请求"></a>3、客户端发送登录请求</h2><p>客户端处理登录请求</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在连接上服务端之后，Netty 会回调到 ClientHandler 的 channelActive()</span></span><br><span class="line"><span class="comment">// 把 PacketCodeC 变成单例模式</span></span><br><span class="line"><span class="comment">// ctx.alloc() 获取的就是与当前连接相关的 ByteBuf 分配器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="keyword">new</span> Date() + <span class="string">": 客户端开始登录"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建登录对象</span></span><br><span class="line">    LoginRequestPacket loginRequestPacket = <span class="keyword">new</span> LoginRequestPacket();</span><br><span class="line">    loginRequestPacket.setUserId(UUID.randomUUID().toString());</span><br><span class="line">    loginRequestPacket.setUsername(<span class="string">"flash"</span>);</span><br><span class="line">    loginRequestPacket.setPassword(<span class="string">"pwd"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 编码</span></span><br><span class="line">    ByteBuf buffer = PacketCodeC.INSTANCE.encode(ctx.alloc(), loginRequestPacket);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 写数据</span></span><br><span class="line">    ctx.channel().writeAndFlush(buffer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p>服务端处理登录请求</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> </span>&#123;</span><br><span class="line">    ByteBuf requestByteBuf = (ByteBuf) msg;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解码</span></span><br><span class="line">    Packet packet = PacketCodeC.INSTANCE.decode(requestByteBuf);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断是否是登录请求数据包</span></span><br><span class="line">    <span class="keyword">if</span> (packet <span class="keyword">instanceof</span> LoginRequestPacket) &#123;</span><br><span class="line">        LoginRequestPacket loginRequestPacket = (LoginRequestPacket) packet;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 登录校验</span></span><br><span class="line">        <span class="keyword">if</span> (valid(loginRequestPacket)) &#123;</span><br><span class="line">            <span class="comment">// 校验成功</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 校验失败</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">valid</span><span class="params">(LoginRequestPacket loginRequestPacket)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="4、服务端发送登录响应"><a href="#4、服务端发送登录响应" class="headerlink" title="4、服务端发送登录响应"></a>4、服务端发送登录响应</h2><p>服务端处理登录响应</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ServerHandler 的 channelRead() 方法里</span></span><br><span class="line"></span><br><span class="line">LoginResponsePacket loginResponsePacket = <span class="keyword">new</span> LoginResponsePacket();</span><br><span class="line">loginResponsePacket.setVersion(packet.getVersion());</span><br><span class="line"><span class="keyword">if</span> (valid(loginRequestPacket)) &#123;</span><br><span class="line">    loginResponsePacket.setSuccess(<span class="keyword">true</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    loginResponsePacket.setReason(<span class="string">"账号密码校验失败"</span>);</span><br><span class="line">    loginResponsePacket.setSuccess(<span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 编码</span></span><br><span class="line">ByteBuf responseByteBuf = PacketCodeC.INSTANCE.encode(ctx.alloc(), loginResponsePacket);</span><br><span class="line">ctx.channel().writeAndFlush(responseByteBuf);</span><br></pre></td></tr></table></figure></div>

<p>客户端处理登录响应</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> </span>&#123;</span><br><span class="line">    ByteBuf byteBuf = (ByteBuf) msg;</span><br><span class="line"></span><br><span class="line">    Packet packet = PacketCodeC.INSTANCE.decode(byteBuf);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (packet <span class="keyword">instanceof</span> LoginResponsePacket) &#123;</span><br><span class="line">        LoginResponsePacket loginResponsePacket = (LoginResponsePacket) packet;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (loginResponsePacket.isSuccess()) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> Date() + <span class="string">": 客户端登录成功"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> Date() + <span class="string">": 客户端登录失败，原因："</span> + loginResponsePacket.getReason());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p>测试</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">分别启动 NettyServer.java 与 NettyClient.java 即可看到效果</span><br></pre></td></tr></table></figure></div>



<h1 id="实战：实现客户端与服务端收发消息"><a href="#实战：实现客户端与服务端收发消息" class="headerlink" title="实战：实现客户端与服务端收发消息"></a>实战：实现客户端与服务端收发消息</h1><blockquote>
<p>具体功能是：在控制台输入一条消息之后按回车，校验完客户端的登录状态之后，把消息发送到服务端，服务端收到消息之后打印并且向客户端发送一条消息，客户端收到之后打印。</p>
</blockquote>
<h2 id="1、收发消息对象"><a href="#1、收发消息对象" class="headerlink" title="1、收发消息对象"></a>1、收发消息对象</h2><p>c&gt;s</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageRequestPacket</span> <span class="keyword">extends</span> <span class="title">Packet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Byte <span class="title">getCommand</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MESSAGE_REQUEST;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>s&gt;c</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageResponsePacket</span> <span class="keyword">extends</span> <span class="title">Packet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Byte <span class="title">getCommand</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> MESSAGE_RESPONSE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>加入PacketCodeC</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">PacketCodeC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        packetTypeMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        packetTypeMap.put(LOGIN_REQUEST, LoginRequestPacket<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        packetTypeMap.put(LOGIN_RESPONSE, LoginResponsePacket<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">// 新加的</span></span><br><span class="line">        packetTypeMap.put(MESSAGE_REQUEST, MessageRequestPacket<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        packetTypeMap.put(MESSAGE_RESPONSE, MessageResponsePacket<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        serializerMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        Serializer serializer = <span class="keyword">new</span> JSONSerializer();</span><br><span class="line">        serializerMap.put(serializer.getSerializerAlogrithm(), serializer);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="2、判断客户端是否登录成功"><a href="#2、判断客户端是否登录成功" class="headerlink" title="2、判断客户端是否登录成功"></a>2、判断客户端是否登录成功</h2><p>避免重复登录。可以在登录成功之后，给客户端连接 Channel 绑定一个登录成功的标志位。</p>
<p>定义一下是否登录成功的标志位</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Attributes</span> </span>&#123;</span><br><span class="line">    AttributeKey&lt;Boolean&gt; LOGIN = AttributeKey.newInstance(<span class="string">"login"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>登录成功之后，给客户端绑定登录成功的标志位</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">        <span class="keyword">if</span> (loginResponsePacket.isSuccess()) &#123;</span><br><span class="line">            LoginUtil.markAsLogin(ctx.channel());</span><br><span class="line">            System.out.println(<span class="keyword">new</span> Date() + <span class="string">": 客户端登录成功"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> Date() + <span class="string">": 客户端登录失败，原因："</span> + loginResponsePacket.getReason());</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="2、控制台输入消息并发送"><a href="#2、控制台输入消息并发送" class="headerlink" title="2、控制台输入消息并发送"></a>2、控制台输入消息并发送</h2><blockquote>
<p>在客户端连接上服务端之后启动控制台线程，从控制台获取消息，然后发送至服务端</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">(Bootstrap bootstrap, String host, <span class="keyword">int</span> port, <span class="keyword">int</span> retry)</span> </span>&#123;</span><br><span class="line">    bootstrap.connect(host, port).addListener(future -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (future.isSuccess()) &#123;</span><br><span class="line">            Channel channel = ((ChannelFuture) future).channel();</span><br><span class="line">            <span class="comment">// 连接成功之后，启动控制台线程</span></span><br><span class="line">            startConsoleThread(channel);</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">startConsoleThread</span><span class="params">(Channel channel)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">while</span> (!Thread.interrupted()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (LoginUtil.hasLogin(channel)) &#123;</span><br><span class="line">                System.out.println(<span class="string">"输入消息发送至服务端: "</span>);</span><br><span class="line">                Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">                String line = sc.nextLine();</span><br><span class="line">                </span><br><span class="line">                MessageRequestPacket packet = <span class="keyword">new</span> MessageRequestPacket();</span><br><span class="line">                packet.setMessage(line);</span><br><span class="line">                ByteBuf byteBuf = PacketCodeC.INSTANCE.encode(channel.alloc(), packet);</span><br><span class="line">                channel.writeAndFlush(byteBuf);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="3、服务端收发消息处理"><a href="#3、服务端收发消息处理" class="headerlink" title="3、服务端收发消息处理"></a>3、服务端收发消息处理</h2><blockquote>
<p>ServerHandler.java</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> </span>&#123;</span><br><span class="line">    ByteBuf requestByteBuf = (ByteBuf) msg;</span><br><span class="line"></span><br><span class="line">    Packet packet = PacketCodeC.INSTANCE.decode(requestByteBuf);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (packet <span class="keyword">instanceof</span> LoginRequestPacket) &#123;</span><br><span class="line">        <span class="comment">// 处理登录..</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (packet <span class="keyword">instanceof</span> MessageRequestPacket) &#123;</span><br><span class="line">        <span class="comment">// 处理消息</span></span><br><span class="line">        MessageRequestPacket messageRequestPacket = ((MessageRequestPacket) packet);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Date() + <span class="string">": 收到客户端消息: "</span> + messageRequestPacket.getMessage());</span><br><span class="line"></span><br><span class="line">        MessageResponsePacket messageResponsePacket = <span class="keyword">new</span> MessageResponsePacket();</span><br><span class="line">        messageResponsePacket.setMessage(<span class="string">"服务端回复【"</span> + messageRequestPacket.getMessage() + <span class="string">"】"</span>);</span><br><span class="line">        ByteBuf responseByteBuf = PacketCodeC.INSTANCE.encode(ctx.alloc(), messageResponsePacket);</span><br><span class="line">        ctx.channel().writeAndFlush(responseByteBuf);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="4、客户端收消息处理"><a href="#4、客户端收消息处理" class="headerlink" title="4、客户端收消息处理"></a>4、客户端收消息处理</h2><blockquote>
<p>ClientHandler.java</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> </span>&#123;</span><br><span class="line">    ByteBuf byteBuf = (ByteBuf) msg;</span><br><span class="line"></span><br><span class="line">    Packet packet = PacketCodeC.INSTANCE.decode(byteBuf);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (packet <span class="keyword">instanceof</span> LoginResponsePacket) &#123;</span><br><span class="line">        <span class="comment">// 登录逻辑...</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (packet <span class="keyword">instanceof</span> MessageResponsePacket) &#123;</span><br><span class="line">        MessageResponsePacket messageResponsePacket = (MessageResponsePacket) packet;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Date() + <span class="string">": 收到服务端的消息: "</span> + messageResponsePacket.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p>测试</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">分别启动 NettyServer.java 与 NettyClient.java 即可看到效果。</span><br></pre></td></tr></table></figure></div>

<p>控制台输出</p>
<p>客户端</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Sun Jul 28 16:03:56 CST 2019: 连接成功，启动控制台线程……</span><br><span class="line">Sun Jul 28 16:03:56 CST 2019: 客户端开始登录</span><br><span class="line">输入消息发送至服务端: </span><br><span class="line">Sun Jul 28 16:03:57 CST 2019: 客户端登录成功</span><br><span class="line">你好，我是Machine</span><br><span class="line">输入消息发送至服务端: </span><br><span class="line">Sun Jul 28 16:04:12 CST 2019: 收到服务端的消息: 服务端回复【你好，我是Machine】</span><br><span class="line">我在学Netty通信</span><br><span class="line">输入消息发送至服务端: </span><br><span class="line">Sun Jul 28 16:04:25 CST 2019: 收到服务端的消息: 服务端回复【我在学Netty通信】</span><br></pre></td></tr></table></figure></div>

<p>服务端</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">端口[8000]绑定成功!</span><br><span class="line">Sun Jul 28 16:03:57 CST 2019: 收到客户端登录请求……</span><br><span class="line">Sun Jul 28 16:03:57 CST 2019: 登录成功!</span><br><span class="line">Sun Jul 28 16:04:12 CST 2019: 收到客户端消息: 你好，我是Machine</span><br><span class="line">Sun Jul 28 16:04:25 CST 2019: 收到客户端消息: 我在学Netty通信</span><br></pre></td></tr></table></figure></div>





<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>大数据分布式</category>
        <category>socket编程</category>
      </categories>
      <tags>
        <tag>Netty</tag>
      </tags>
  </entry>
  <entry>
    <title>Netty基础</title>
    <url>/2019/07/22/20190722134143780/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Netty : </p>
<p>一个用来做sokect网络编程的高性能框架；</p>
<p>一个替代JDK NIO的优秀框架；</p>
<p>是大多数高并发/分布式框架的底层基础；</p>
<p>目录：</p>
<p>[TOC]</p>
<blockquote>
<p>参考：基础介绍  <a href="https://www.jianshu.com/p/a4e03835921a" target="_blank" rel="noopener">https://www.jianshu.com/p/a4e03835921a</a></p>
</blockquote>
<h1 id="传统IO编程如何做c-s通信"><a href="#传统IO编程如何做c-s通信" class="headerlink" title="传统IO编程如何做c/s通信"></a>传统IO编程如何做c/s通信</h1><p>IOServer</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> mxx.netty.io;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 目标：客户端每隔两秒发送一个带有时间戳的"hello world"给服务端，服务端收到之后打印。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、创建了一个serverSocket来监听8000端口</span></span><br><span class="line"><span class="comment"> * 2、创建一个线程，线程里面不断调用阻塞方法 serversocket.accept();获取新的连接</span></span><br><span class="line"><span class="comment"> * 3、当获取到新的连接之后，给每条连接创建一个新的线程，这个线程负责从该连接中读取数据</span></span><br><span class="line"><span class="comment"> * 4、读取数据是以字节流的方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 同时开2个client效果：</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Thread-1-Mon Jul 22 14:15:29 CST 2019: hello world</span></span><br><span class="line"><span class="comment"> * Thread-2-Mon Jul 22 14:15:29 CST 2019: hello world</span></span><br><span class="line"><span class="comment"> * Thread-1-Mon Jul 22 14:15:31 CST 2019: hello world</span></span><br><span class="line"><span class="comment"> * Thread-2-Mon Jul 22 14:15:31 CST 2019: hello world</span></span><br><span class="line"><span class="comment"> * Thread-1-Mon Jul 22 14:15:33 CST 2019: hello world</span></span><br><span class="line"><span class="comment"> * Thread-2-Mon Jul 22 14:15:33 CST 2019: hello world</span></span><br><span class="line"><span class="comment"> * Thread-1-Mon Jul 22 14:15:35 CST 2019: hello world</span></span><br><span class="line"><span class="comment"> * ...</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IOServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">8000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// (1) 接收新连接线程</span></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// (1) 阻塞方法获取新的连接</span></span><br><span class="line">                    Socket socket = serverSocket.accept();</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// (2) 每一个新的连接都创建一个线程，负责读取数据</span></span><br><span class="line">                    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            String tName = Thread.currentThread().getName();</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">byte</span>[] data = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                            InputStream inputStream = socket.getInputStream();</span><br><span class="line">                            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                                <span class="keyword">int</span> len;</span><br><span class="line">                                <span class="comment">// (3) 按字节流方式读取数据</span></span><br><span class="line">                                <span class="comment">// inputStream.read 是一个阻塞方法吗？</span></span><br><span class="line">                                <span class="keyword">while</span> ((len = inputStream.read(data)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                                    System.out.println(tName + <span class="string">'-'</span> +<span class="keyword">new</span> String(data, <span class="number">0</span>, len));</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;).start();</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p>IOClient</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> mxx.netty.io;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 连接上服务端8000端口之后，每隔2秒，向服务端写一个带有时间戳的 "hello world"</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IOClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Socket socket = <span class="keyword">new</span> Socket(<span class="string">"127.0.0.1"</span>, <span class="number">8000</span>);</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        socket.getOutputStream().write((<span class="keyword">new</span> Date() + <span class="string">": hello world"</span>).getBytes());</span><br><span class="line">                        socket.getOutputStream().flush();</span><br><span class="line">                        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h1 id="NIO编程-vs-IO编程"><a href="#NIO编程-vs-IO编程" class="headerlink" title="NIO编程 vs IO编程"></a>NIO编程 vs IO编程</h1><p>IO编程问题：</p>
<p>1、1w个client连接对应server要开1w个线程去维护，继而1w个while死循环</p>
<p>2、线程资源受限：大量线程阻塞，操作系统耗不起</p>
<p>3、线程切换效率低下：要在1w个线程里来回切</p>
<p>4、数据读写是以字节流为单位，效率不高</p>
<p>如何解决以上问题的？</p>
<p>1、线程资源受限</p>
<p>新连接不再创建线程，而是批量绑定。</p>
<p><a href="/2019/07/22/20190722134143780/1357217-1c856423372e7d5a.png" data-fancybox="group" data-caption="1357217-1c856423372e7d5a" class="fancybox"><img alt="1357217-1c856423372e7d5a" title="1357217-1c856423372e7d5a" data-src="/2019/07/22/20190722134143780/1357217-1c856423372e7d5a.png" class="lazyload"></a> </p>
<p>一个循环如何监测1w个连接？</p>
<p>selector：新连接注册到selector上，批量监测出有数据可读的连接（同一时刻只有少量的连接有数据可读）</p>
<p>实际开发中，会开多个线程，每个线程都管理着一批连接，这样线程消耗大幅减少。</p>
<p>2、线程切换效率低下</p>
<p>NIO模型中线程数量大大降低，线程切换效率因此也大幅度提高</p>
<p>3、IO读写以字节为单位</p>
<p>NIO以字节块为单位读取，NIO维护一个缓冲区。</p>
<h1 id="使用JDK原生NIO实现server"><a href="#使用JDK原生NIO实现server" class="headerlink" title="使用JDK原生NIO实现server"></a>使用JDK原生NIO实现server</h1><p>强烈不建议直接基于JDK原生NIO来进行网络开发</p>
<p>(看看注释就行了)</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> mxx.netty.m02_jdk_nio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SelectionKey;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.Selector;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.ServerSocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 核心思路：</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1、NIO模型中通常会有两个线程，每个线程绑定一个轮询器selector，在我们这个例子中serverSelector负责轮询是否有新的连接，clientSelector负责轮询连接是否有数据可读</span></span><br><span class="line"><span class="comment"> * 2、服务端监测到新的连接之后，不再创建一个新的线程，而是直接将新连接绑定到clientSelector上，这样就不用IO模型中1w个while循环在死等，参见(1)</span></span><br><span class="line"><span class="comment"> * 3、clientSelector被一个while死循环包裹着，如果在某一时刻有多条连接有数据可读，那么通过 clientSelector.select(1)方法可以轮询出来，进而批量处理，参见(2)</span></span><br><span class="line"><span class="comment"> * 4、数据的读写以内存块为单位，参见(3)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 强烈不建议直接基于JDK原生NIO来进行网络开发：</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1、模型复杂，接口反人类</span></span><br><span class="line"><span class="comment"> * 2、没有合适的线程模型，很多基本东西要自己实现</span></span><br><span class="line"><span class="comment"> * 3、JDK的NIO底层是epoll, 有BUG, cpu飙升</span></span><br><span class="line"><span class="comment"> * 4、自行实现的NIO很容易出现各类bug</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 所以，Netty来了</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NIOServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Selector serverSelector = Selector.open();</span><br><span class="line">        Selector clientSelector = Selector.open();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 对应IO编程中服务端启动</span></span><br><span class="line">                ServerSocketChannel listenerChannel = ServerSocketChannel.open();</span><br><span class="line">                listenerChannel.socket().bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">8000</span>));</span><br><span class="line">                listenerChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">                listenerChannel.register(serverSelector, SelectionKey.OP_ACCEPT);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                    <span class="comment">// 监测是否有新的连接，这里的1指的是阻塞的时间为1ms</span></span><br><span class="line">                    <span class="keyword">if</span> (serverSelector.select(<span class="number">1</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        Set&lt;SelectionKey&gt; set = serverSelector.selectedKeys();</span><br><span class="line">                        Iterator&lt;SelectionKey&gt; keyIterator = set.iterator();</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">while</span> (keyIterator.hasNext()) &#123;</span><br><span class="line">                            SelectionKey key = keyIterator.next();</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">if</span> (key.isAcceptable()) &#123;</span><br><span class="line">                                <span class="keyword">try</span> &#123;</span><br><span class="line">                                    <span class="comment">// (1) 每来一个新连接，不需要创建一个线程，而是直接注册到clientSelector</span></span><br><span class="line">                                    SocketChannel clientChannel = ((ServerSocketChannel) key.channel()).accept();</span><br><span class="line">                                    clientChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">                                    clientChannel.register(clientSelector, SelectionKey.OP_READ);</span><br><span class="line">                                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                                    keyIterator.remove();</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ignored) &#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                    <span class="comment">// (2) 批量轮询是否有哪些连接有数据可读，这里的1指的是阻塞的时间为1ms</span></span><br><span class="line">                    <span class="keyword">if</span> (clientSelector.select(<span class="number">1</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        Set&lt;SelectionKey&gt; set = clientSelector.selectedKeys();</span><br><span class="line">                        Iterator&lt;SelectionKey&gt; keyIterator = set.iterator();</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 有多条连接有数据可读</span></span><br><span class="line">                        <span class="keyword">while</span> (keyIterator.hasNext()) &#123;</span><br><span class="line">                            SelectionKey key = keyIterator.next();</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">if</span> (key.isReadable()) &#123;</span><br><span class="line">                                <span class="keyword">try</span> &#123;</span><br><span class="line">                                    SocketChannel clientChannel = (SocketChannel) key.channel();</span><br><span class="line">                                    ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">                                    <span class="comment">// (3) 读取数据以块为单位批量读取</span></span><br><span class="line">                                    clientChannel.read(byteBuffer);</span><br><span class="line">                                    byteBuffer.flip();</span><br><span class="line">                                    System.out.println(Charset.defaultCharset().newDecoder().decode(byteBuffer)</span><br><span class="line">                                            .toString());</span><br><span class="line">                                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                                    keyIterator.remove();</span><br><span class="line">                                    key.interestOps(SelectionKey.OP_READ);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ignored) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h1 id="Netty编程"><a href="#Netty编程" class="headerlink" title="Netty编程"></a>Netty编程</h1><p>概述：</p>
<p>1、Netty封装了JDK的NIO，用户友好</p>
<p>2、官话：”Netty是一个异步事件驱动的网络应用框架，用于快速开发可维护的高性能服务器和客户端。”</p>
<p>使用Netty不使用JDK原生NIO的原因：</p>
<p>1、JDK-NIO：使用复杂、BUG横飞</p>
<p>2、Netty底层IO模型随意切换（可以直接从NIO模型变身为IO模型）</p>
<p><strong>3、简化开发，脱离细节，专注业务</strong>（Netty自带的拆包解包，异常检测等机制…）</p>
<p>4、Netty解决了JDK的很多BUG</p>
<p>5、Netty底层对线程，selector做了很多细小的优化</p>
<p>6、自带各种协议栈</p>
<p>7、Netty社区活跃</p>
<p><strong>8、Netty已经历各大rpc框架，消息中间件，分布式通信中间件线上的广泛验证</strong>，健壮性无比强大</p>
<hr>
<p>开始写代码…</p>
<p>maven</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.netty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>netty-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.6.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>



<h1 id="END"><a href="#END" class="headerlink" title="END"></a>END</h1><p>下一步：一个Netty实战项目</p>
]]></content>
      <categories>
        <category>大数据分布式</category>
        <category>socket编程</category>
      </categories>
      <tags>
        <tag>Netty</tag>
      </tags>
  </entry>
  <entry>
    <title>知识点脑图汇总</title>
    <url>/2019/06/20/20190620200819690/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><ul>
<li><p><a href="http://naotu.baidu.com/file/1e788db610a9bf7ba57ce2badf6f113f?token=9677f76e4a3b613f" target="_blank" rel="noopener">Java内存区域与内存溢出异常</a></p>
</li>
<li><p><a href="http://naotu.baidu.com/file/557318a638ec61e39ae2c207acd40265?token=d902b5ff4327b5c4" target="_blank" rel="noopener">Spring Security技术栈开发企业级认证与授权</a></p>
</li>
<li><p><a href="http://naotu.baidu.com/file/abf77fbba0c2a2f7d4c4cf600990e82b?token=90fd411c50e69637" target="_blank" rel="noopener">大数据</a></p>
</li>
<li><p><a href="http://naotu.baidu.com/file/caceda5851ebccee143af9deeba8de86?token=ecaae3cdae12e77a" target="_blank" rel="noopener">Python基础</a></p>
</li>
<li><p><a href="http://naotu.baidu.com/file/3adea0eca05e3c3f081290142732313d?token=b14e7b97ee7411e0" target="_blank" rel="noopener">Python爬虫</a>    </p>
<p>代码地址：<a href="https://gitee.com/machine4869/note-code/tree/master/note_py_spider" target="_blank" rel="noopener">note_py_spider</a> </p>
<p>参考：heima</p>
</li>
<li><p><a href="http://naotu.baidu.com/file/2efeb9e27940482377a001096806f2a6?token=126602efca591748" target="_blank" rel="noopener">Python数据分析</a></p>
<p>代码地址：<a href="https://gitee.com/machine4869/note-code/tree/master/note_py_data_analysis" target="_blank" rel="noopener">note_py_data_analysis</a></p>
<p>参考：heima、imooc- <a href="https://www.imooc.com/learn/843" target="_blank" rel="noopener">Python数据分析-基础技术篇</a></p>
</li>
<li><p><a href="http://naotu.baidu.com/file/60c958b2c8b6f7d5a2403297835bb3af?token=3861a425a0b868a6" target="_blank" rel="noopener">机器学习</a></p>
</li>
<li><p><a href="http://naotu.baidu.com/file/4a266c95ef78cd6cb1df76294feb99d0?token=2301a307831d8d65" target="_blank" rel="noopener">深度学习</a></p>
</li>
</ul>
<a id="more"></a>

<p>脑图示例</p>
<p><a href="/2019/06/20/20190620200819690/Spider.svg" data-fancybox="group" data-caption="Spider" class="fancybox"><img alt="Spider" title="Spider" data-src="/2019/06/20/20190620200819690/Spider.svg" class="lazyload"></a></p>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>Hadoop-基础篇</title>
    <url>/2019/06/20/20190620122348137/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>参考：</p>
<ul>
<li>imooc <a href="https://www.imooc.com/learn/391" target="_blank" rel="noopener">认识Hadoop–基础篇</a></li>
<li>笔记 <a href="https://hankin2015.github.io/2018/01/06/20180106Hadoop/" target="_blank" rel="noopener">Hadoop大数据平台架构与实践–基础篇</a></li>
<li>我的代码：</li>
</ul>
</blockquote>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>大数据时代已经到来，越来越多的行业面临着大量数据需要存储以及分析的挑战。Hadoop，作为一个开源的分布式并行处理平台，以其高扩展、高效率、高可靠等优点，得到越来越广泛的应用。本课旨在培养学员理解Hadoop的架构设计以及掌握Hadoop的运用能力。</p>
<h1 id="第1章-初识Hadoop"><a href="#第1章-初识Hadoop" class="headerlink" title="第1章 初识Hadoop"></a>第1章 初识Hadoop</h1><h2 id="1-1-Hadoop大数据平台架构与实践"><a href="#1-1-Hadoop大数据平台架构与实践" class="headerlink" title="1-1 Hadoop大数据平台架构与实践"></a>1-1 Hadoop大数据平台架构与实践</h2><p>学习目标：<br>掌握大数据存储与处理技术的原理（理论）<br>掌握Hadoop的使用和开发能力<br>学习建议：<br>《Hadoop技术详解》《Hadoop权威指南》<br>Linux命令、Java编程基础</p>
<p>1.大数据的相关概念<br>2.Hadoop的架构和运行机制<br>3.实战：Hadoop的安装和配置<br>4.实战：Hadoop开发</p>
<h2 id="1-2-Hadoop的前世今生"><a href="#1-2-Hadoop的前世今生" class="headerlink" title="1-2 Hadoop的前世今生"></a>1-2 Hadoop的前世今生</h2><p>系统瓶颈：存储容量 读写速率 运行效率<br>google 提出三大关键技术mapreduce Bigtable GFS<br>革命性变化：<br>1、降低成本，普通PC集群；<br>2、硬件故障是常态，利用软件保证高可靠性；<br>3、简化并行计算，无须同步和数据交换</p>
<p>hadoop:是模拟谷歌的分布式的开源实现，其作用是降低成本，可容错，高效计算<br>容错性：硬件故障是常态，通过软件来保证可靠性</p>
<h2 id="1-3-Hadoop的功能与优势"><a href="#1-3-Hadoop的功能与优势" class="headerlink" title="1-3 Hadoop的功能与优势"></a>1-3 Hadoop的功能与优势</h2><p>Hadoop=分布式存储+分布式计算<br>包括两个核心组成：<br>HDFS：分布式文件系统，存储海量的数据<br>MapReduce：并行处理框架，实现任务分解和调度。</p>
<p>优势：高扩展、低成本<br>Hadoop可以用来搭建大型数据仓库，PB级数据的存储、处理、分析、统计等业务</p>
<h2 id="1-4-Hadoop生态系统及版本"><a href="#1-4-Hadoop生态系统及版本" class="headerlink" title="1-4 Hadoop生态系统及版本"></a>1-4 Hadoop生态系统及版本</h2><p>Hadoop不仅包括HDFS和MapReduce，还包括一次额开源工具。比如：<br>HIVE，本意是小蜜蜂，轻盈。<br>HBASE，存储结构化数据的分布式数据库。区别于HDFS的一点是，HABASE提供数据的随机读写和实时访问，实现对表数据的读写功能。<br>zookeeper，动物管理员。 监控Hadoop集群里面每个节点的状态，管理整个集群的配置，维护节点之家数据的（一次？依次）性</p>
<p>hive使sql转成一个hadoop任务去执行，降低hadoop的门槛。<br>hive(sql语句转换工具) habse(结构型数据，随机写入和实时读取) zookeeper(监控个节点使用、配置)。<br>habase存储结构化数据的分布式数据库，放弃事务特性，追求更高的扩展。habase提供数据的随机读写和实时访问，实现对表数据的读写功能。<br>zookeeper监控hadoop每个节点的状态，管理集群配置，维护节点间数据的一致性。<br>zookeeper的作用:<br>1）监控hadoop每个节点的状态<br>2）管理整个集群的配置<br>3）维护节点间数据的一致性</p>
<p>hadoop生态系统：<br>1.hdfs<br>2.mapreduce<br>3.相关开源工具：<br>（1）hive：将简单的sql语句转化为hadoop任务，降低使用hadoop的门槛<br>（2）HBASE：区别于传统数据库：存储结构化数据的分布式数据库，放弃事务特性，追求更高的扩展，它提供数据的随机读写和实时访问，实现对表数据的读写功能<br>（3）zookeeper:监控Hadoop集群里的每个节点的状态，管理整个集群的配置，维护数据节点之间的一致性<br>Hadoop版本最高2.6，初学者建议1.2（ver1.2-稳定）</p>
<h1 id="第2章-Hadoop安装"><a href="#第2章-Hadoop安装" class="headerlink" title="第2章 Hadoop安装"></a>第2章 Hadoop安装</h1><h2 id="2-4-安装小结"><a href="#2-4-安装小结" class="headerlink" title="2-4 安装小结"></a>2-4 安装小结</h2><p>修改4个配置文件<br>(a) 修改hadoop-env.sh,设置JAVA_HOME<br>(b) 修改core-site.xml,设置hadoop.tmp.dir, dfs.name.dir, fs.default.name<br>(c) 修改mapred-site.xml,设置mapred.job.tracker<br>(d) 修改hdfs-site.xml,设置dfs.data.dir</p>
<p>hadoop安装步骤：<br>1、安装JDK:apt-get install openjdk-7-jdk；<br>2、设置环境变量：JAVA_HOME、JRE_HOME、CLASSPATH、PATH（在/etc/profile）<br>3、下载hadoop安装包并解压到指定目录下；<br>4、设置环境变量：HADOOP_HOME、PATH（在/etc/profile）<br>5、修改相关配置文件$HADOOP_HOME/conf：<br>​    1）修改hadoop-env.sh，设置JAVA_HOME；<br>​    2）修改core-site.xml，设置hadoop.tmp.dir、dfs.name.dir、fs.default.name；<br>​    3）修改mapred-site.xml，设置mapred.job.tracker；<br>​    4）修改hdfs-site.xml，设置dfs.data.dir；<br>6、格式化：hadoop namenode -format；<br>7、启动：start-all.sh<br>8、检查：jps</p>
<h1 id="第3章-Hadoop的核心-HDFS简介"><a href="#第3章-Hadoop的核心-HDFS简介" class="headerlink" title="第3章 Hadoop的核心-HDFS简介"></a>第3章 Hadoop的核心-HDFS简介</h1><h2 id="3-1-HDFS基本概念"><a href="#3-1-HDFS基本概念" class="headerlink" title="3-1 HDFS基本概念"></a>3-1 HDFS基本概念</h2><p>HDFS的文件被分成快进行存储<br>HDFS块的默认大小64MB<br>块是文件村春处理的逻辑单元</p>
<p>nameNode 是管理节点，用来读取元数据的<br>DataNode是数据节点，用来存储数据的</p>
<p>HDFS——文件系统<br>MapReduce——并行计算框架</p>
<p>namenode是管理节点，存放文件元数据，元数据包括两部分：</p>
<ol>
<li>文件与数据块的映射表</li>
<li>数据块与数据节点的映射表</li>
</ol>
<p><a href="/2019/06/20/20190620122348137/5a3b288900016b4b12800720.jpg" data-fancybox="group" data-caption="5a3b288900016b4b12800720" class="fancybox"><img alt="5a3b288900016b4b12800720" title="5a3b288900016b4b12800720" data-src="/2019/06/20/20190620122348137/5a3b288900016b4b12800720.jpg" class="lazyload"></a> </p>
<h2 id="3-2-数据管理策略"><a href="#3-2-数据管理策略" class="headerlink" title="3-2 数据管理策略"></a>3-2 数据管理策略</h2><p>hdf数据管理策略：</p>
<ol>
<li>hdfs是采用master-slave的模式关管理文件，即一个master(namenade:保存datanode的一些基本信息和元数据)和多个slave(datanode:真正的存贮单元，里面存储了真实数据)</li>
<li>hdfs默认保存三份文件，有两份保存在同一台机器上，另外一份（备份文件）保存到另外一台机器上，确保当一台机器挂了时能保存数据的存在</li>
<li>namenade也有一个备用节点：Secondary NameNode,当namenode挂了时secondaryNameNode就变为nameNode的角色进行管理数据</li>
<li>datandoe会采用心跳的方式时不时的想namenode报告自己的基本信息，比如网络是否正常，运行是否正确常。</li>
</ol>
<h2 id="3-3-HDFS中文件的读写操作"><a href="#3-3-HDFS中文件的读写操作" class="headerlink" title="3-3 HDFS中文件的读写操作"></a>3-3 HDFS中文件的读写操作</h2><p><a href="/2019/06/20/20190620122348137/12617-20170308123104828-132826254.jpg" data-fancybox="group" data-caption="12617-20170308123104828-132826254" class="fancybox"><img alt="12617-20170308123104828-132826254" title="12617-20170308123104828-132826254" data-src="/2019/06/20/20190620122348137/12617-20170308123104828-132826254.jpg" class="lazyload"></a> </p>
<p>客户端发出读请求，namenode根据元数据返回给客户端，下载需要的block并组装</p>
<p>HDFS读取文件的流程：</p>
<p>（1）客户端向namenode发起读文件请求，把文件名，路径告诉namenode；</p>
<p>（2）namenode查询元数据，并把数据库返回客户端；</p>
<p>（3）此时客户端就明白文件包含哪些块，这些块在哪些datanode中可以找到；</p>
<p><a href="/2019/06/20/20190620122348137/12617-20170308123105109-1542248328.jpg" data-fancybox="group" data-caption="12617-20170308123105109-1542248328" class="fancybox"><img alt="12617-20170308123105109-1542248328" title="12617-20170308123105109-1542248328" data-src="/2019/06/20/20190620122348137/12617-20170308123105109-1542248328.jpg" class="lazyload"></a>  </p>
<p>HDFS写数据：首先将文件拆分为默认大小64M的块。通知NameNode，找到并返回可用的datanode信息，客户端写入一个后，其他的进行流水线复制。最后更新元数据。</p>
<p>HDFS写文件流程：</p>
<p>（1）客户端把文件拆分成固定大小64M的块，并通知namenode；</p>
<p>（2）namenode找到可用的datanode返回给客户端；</p>
<p>（3）客户端根据返回的datanode，对块进行写入</p>
<p>（4）通过流水线管道流水线复制</p>
<p>（5）更新元数据。告诉namenode已经完成了创建心的数据块。保证了namenode中的元数据都是最新的状态。</p>
<h2 id="3-4-HDFS特点"><a href="#3-4-HDFS特点" class="headerlink" title="3-4 HDFS特点"></a>3-4 HDFS特点</h2><p>1）数据冗余，硬件容错；</p>
<p>2）流式的数据访问，写一次，读多次。数据没办法修改，如果要修改只能把之前的数据删除，然后重新写入一份；</p>
<p>3）适合存储大文件，这是设计之初就这么考虑的，如果是大量的小文件的话，不适合，因为一个小文件也要存储元数据，此时NameNode的压力会非常大。</p>
<p>4）适合数据的批量读写，吞吐量高，不适合做交互式应用，低延迟很难满足；</p>
<p>5）支持顺序读写，不支持此多用户并发写相同文件；</p>
<h2 id="3-5-HDFS使用"><a href="#3-5-HDFS使用" class="headerlink" title="3-5 HDFS使用"></a>3-5 HDFS使用</h2><p>hadoop的几个常用命令来演示如何在hadoop中创建一个目录，然后上传一个文件，然后再下载一个文件。</p>
<p>大致都是：</p>
<p>hadoop fs -put filea.dat  input/</p>
<p>或者是get命令下载文件</p>
<p>或者是cat命令查看文件内容</p>
<p>或者是hdfsadmin命令来查看整个系统的一些统计信息。</p>
<h1 id="第4章-Hadoop的核心-MapReduce"><a href="#第4章-Hadoop的核心-MapReduce" class="headerlink" title="第4章 Hadoop的核心-MapReduce"></a>第4章 Hadoop的核心-MapReduce</h1><h2 id="4-1-MapReduce的原理"><a href="#4-1-MapReduce的原理" class="headerlink" title="4-1 MapReduce的原理"></a>4-1 MapReduce的原理</h2><p>所谓Map就是要将任务拆分成很多份，这里给了一个例子，有1000副牌，少了一张，然后要找出到底是少了哪一章。</p>
<p><a href="/2019/06/20/20190620122348137/12617-20170308123105359-963721942.jpg" data-fancybox="group" data-caption="12617-20170308123105359-963721942" class="fancybox"><img alt="12617-20170308123105359-963721942" title="12617-20170308123105359-963721942" data-src="/2019/06/20/20190620122348137/12617-20170308123105359-963721942.jpg" class="lazyload"></a> </p>
<p>然后又给了一个从日志中统计出访问此处最多的ip的例子，也都是类似的，先把日志分块，然后由不同的任务分别统计，然后再把他们的结果拿来合并，也就是Reduce了</p>
<h2 id="4-2-MapReduce的运行流程"><a href="#4-2-MapReduce的运行流程" class="headerlink" title="4-2 MapReduce的运行流程"></a>4-2 MapReduce的运行流程</h2><p>几个基本的概念：</p>
<ul>
<li><p>Job&amp;Task，比如上面的找出访问次数最多的任务就是一个Job，然后这个Job要完成的话要被分解为多个Task，放到不同的节点上去执行。Task又可以分为MapTask和ReduceTask</p>
</li>
<li><p>JobTracker，作业调度，分配任务并监控任务的执行进度，任务分配出去之后，TaskTracker每隔几秒钟要向JobTracker更新状态</p>
</li>
<li><p>TaskTracker，作业的执行</p>
</li>
</ul>
<p>这几个概念互相之间的关系如下图：</p>
<p><a href="/2019/06/20/20190620122348137/12617-20170308123105625-357060316.jpg" data-fancybox="group" data-caption="12617-20170308123105625-357060316" class="fancybox"><img alt="12617-20170308123105625-357060316" title="12617-20170308123105625-357060316" data-src="/2019/06/20/20190620122348137/12617-20170308123105625-357060316.jpg" class="lazyload"></a> </p>
<p>一般来说，TaskTracker就是分配在其数据所在的DataNode上，这样可以保证运行的效率最高，毕竟读取本机的磁盘总是更快的。这也是MapReduce的一个设计思想，用移动计算来避免移动数据。  </p>
<p><a href="/2019/06/20/20190620122348137/12617-20170308123105984-801660379.jpg" data-fancybox="group" data-caption="12617-20170308123105984-801660379" class="fancybox"><img alt="12617-20170308123105984-801660379" title="12617-20170308123105984-801660379" data-src="/2019/06/20/20190620122348137/12617-20170308123105984-801660379.jpg" class="lazyload"></a> </p>
<p>MapReduce的容错机制，</p>
<p>1）重复执行；也就是执行的过程中如果出错了，他会重复执行，但是重复了4次之后如果还出错，他就放弃了。</p>
<p> 2）推测执行，用于解决那种计算速度特别慢的情况，此时会新开一个任务，然后再看这两个任务谁先执行完。</p>
<h1 id="第5章-开发Hadoop应用程序"><a href="#第5章-开发Hadoop应用程序" class="headerlink" title="第5章 开发Hadoop应用程序"></a>第5章 开发Hadoop应用程序</h1><h2 id="5-1～5-3-WordCount单词计数"><a href="#5-1～5-3-WordCount单词计数" class="headerlink" title="5-1～5-3 WordCount单词计数"></a>5-1～5-3 WordCount单词计数</h2><p>需求：计算文件中出现每个单词的频数，输入结果按照字母顺序进行排序</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">byte		3</span><br><span class="line">hello 	3</span><br><span class="line">hadoop	4</span><br><span class="line">world		2</span><br></pre></td></tr></table></figure></div>



<p>思路：</p>
<p>map:切分<br>对每个词统计记1次</p>
<p>![屏幕快照 2019-08-14 下午2.47.39](20190620122348137/屏幕快照 2019-08-14 下午2.47.39.png)</p>
<p>reduce:合并<br>相同的key放在同一个节点</p>
<p>![屏幕快照 2019-08-14 下午2.48.16](20190620122348137/屏幕快照 2019-08-14 下午2.48.16.png)</p>
<p>代码实现</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;hadoop.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>



<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordCount</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 1 两个静态内部类</span></span><br><span class="line">	<span class="comment">// 2 继承Mapper，定义了输入输出格式&lt;key,value, key,value&gt;</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">WordCountMap</span> <span class="keyword">extends</span></span></span><br><span class="line"><span class="class">			<span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 3 表示单词出现次数，初始为1次</span></span><br><span class="line">		<span class="keyword">private</span> <span class="keyword">final</span> IntWritable one = <span class="keyword">new</span> IntWritable(<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">private</span> Text word = <span class="keyword">new</span> Text();</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 4 map切分操作</span></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span></span></span><br><span class="line"><span class="function">				<span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">			String line = value.toString();</span><br><span class="line">			StringTokenizer token = <span class="keyword">new</span> StringTokenizer(line);</span><br><span class="line"></span><br><span class="line">			<span class="comment">// 5 分词，发现一个词就写入</span></span><br><span class="line">			<span class="keyword">while</span> (token.hasMoreTokens()) &#123;</span><br><span class="line">				word.set(token.nextToken());</span><br><span class="line">				context.write(word, one);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 继承Reducer，定义了输入输出格式&lt;key,value, key,value&gt;</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">WordCountReduce</span> <span class="keyword">extends</span></span></span><br><span class="line"><span class="class">			<span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">IntWritable</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// reduce合并</span></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;IntWritable&gt; values,</span></span></span><br><span class="line"><span class="function"><span class="params">				Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">			<span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">			<span class="comment">// &lt;hello, [1,1,1]&gt;  --&gt; &lt;hello, 3&gt;</span></span><br><span class="line">			<span class="keyword">for</span> (IntWritable val : values) &#123;</span><br><span class="line">				sum += val.get();</span><br><span class="line">			&#125;</span><br><span class="line">			context.write(key, <span class="keyword">new</span> IntWritable(sum));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">		Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 配置作业</span></span><br><span class="line">		Job job = Job.getInstance(conf);</span><br><span class="line">		job.setJarByClass(WordCount<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		job.setJobName(<span class="string">"wordcount"</span>);</span><br><span class="line">		job.setOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		job.setOutputValueClass(IntWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		job.setMapperClass(WordCountMap<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		job.setReducerClass(WordCountReduce<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		job.setInputFormatClass(TextInputFormat<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		job.setOutputFormatClass(TextOutputFormat<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		</span><br><span class="line">    <span class="comment">// 文件输入和输出路径</span></span><br><span class="line">		FileInputFormat.addInputPath(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">		FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line"></span><br><span class="line">		job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p>输入文件如file1：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hello world</span><br><span class="line">hello hadoop</span><br><span class="line">hadoop file system</span><br><span class="line">hadoop java api</span><br><span class="line">hello java</span><br></pre></td></tr></table></figure></div>



<p>部署到hadoop上执行：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 打包成 WordCount.jar</span><br><span class="line">- 将file1 file2提交到fs文件系统里去</span><br><span class="line">$ hadoop fs -mkdir input_WordCount</span><br><span class="line">$ hadoop fs -put input&#x2F;* input_WordCount&#x2F;</span><br><span class="line">$ hadoop fs -ls</span><br><span class="line">$ hadoop fs -ls input_WordCount</span><br><span class="line">$ hadoop fs -cat input_WordCount&#x2F;file1</span><br><span class="line"></span><br><span class="line">- 提交任务</span><br><span class="line">$ hadoop jar WordCount.jar input_WordCount output_WordCount</span><br><span class="line">19&#x2F;08&#x2F;14 08:51:17 INFO mapred.JobClient:  map 0% reduce 0%</span><br><span class="line">19&#x2F;08&#x2F;14 08:51:29 INFO mapred.JobClient:  map 100% reduce 0%</span><br><span class="line">19&#x2F;08&#x2F;14 08:51:36 INFO mapred.JobClient:  map 100% reduce 33%</span><br><span class="line">19&#x2F;08&#x2F;14 08:51:38 INFO mapred.JobClient:  map 100% reduce 100%</span><br><span class="line"></span><br><span class="line">- 查看结果</span><br><span class="line">$ hadoop fs -ls output_WordCount</span><br><span class="line">$ hadoop fs -cat output_WordCount&#x2F;part-r-00000</span><br><span class="line">api	1</span><br><span class="line">file	3</span><br><span class="line">free	2</span><br><span class="line">hadoop	7</span><br><span class="line">hello	3</span><br><span class="line">home	1</span><br><span class="line">java	2</span><br><span class="line">new	2</span><br><span class="line">school	1</span><br><span class="line">system	1</span><br><span class="line">world	2</span><br></pre></td></tr></table></figure></div>



<h2 id="5-4-5-5-利用MapReduce进行排序"><a href="#5-4-5-5-利用MapReduce进行排序" class="headerlink" title="5-4~5-5 利用MapReduce进行排序"></a>5-4~5-5 利用MapReduce进行排序</h2><p>数据排序</p>
<p>思路：将数据按照大小区间分片，放到reduce进行排序</p>
<p>![屏幕快照 2019-08-14 下午5.02.13](20190620122348137/屏幕快照 2019-08-14 下午5.02.13.png) </p>
<p>输入样例：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">32</span><br><span class="line">654</span><br><span class="line">32</span><br><span class="line">15</span><br><span class="line">756</span><br><span class="line">65223</span><br></pre></td></tr></table></figure></div>

<p>输出样例</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 2</span><br><span class="line">2 6</span><br><span class="line">3 15</span><br><span class="line">4 ...</span><br></pre></td></tr></table></figure></div>



<p>代码：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 输出是&lt;IntWritable, IntWritable&gt;格式</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Map</span> <span class="keyword">extends</span></span></span><br><span class="line"><span class="class">			<span class="title">Mapper</span>&lt;<span class="title">Object</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>, <span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">private</span> <span class="keyword">static</span> IntWritable data = <span class="keyword">new</span> IntWritable();</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 读出文本的每一行，转化为整数作为key值放入，value随便放一个1</span></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(Object key, Text value, Context context)</span></span></span><br><span class="line"><span class="function">				<span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">			String line = value.toString();</span><br><span class="line"></span><br><span class="line">			data.set(Integer.parseInt(line));</span><br><span class="line"></span><br><span class="line">			context.write(data, <span class="keyword">new</span> IntWritable(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Reduce</span> <span class="keyword">extends</span></span></span><br><span class="line"><span class="class">			<span class="title">Reducer</span>&lt;<span class="title">IntWritable</span>, <span class="title">IntWritable</span>, <span class="title">IntWritable</span>, <span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">private</span> <span class="keyword">static</span> IntWritable linenum = <span class="keyword">new</span> IntWritable(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(IntWritable key, Iterable&lt;IntWritable&gt; values,</span></span></span><br><span class="line"><span class="function"><span class="params">				Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">for</span> (IntWritable val : values) &#123;</span><br><span class="line"></span><br><span class="line">				context.write(linenum, key);</span><br><span class="line"></span><br><span class="line">				<span class="comment">// 行号+1，代表排序序号</span></span><br><span class="line">				linenum = <span class="keyword">new</span> IntWritable(linenum.get() + <span class="number">1</span>);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 相当于自己定义reduce过程的分区策略(划分区间)，而不是使用默认的</span></span><br><span class="line">	<span class="comment">// 在每个区间排好序，合并之后就得到了最终结果</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Partition</span> <span class="keyword">extends</span> <span class="title">Partitioner</span>&lt;<span class="title">IntWritable</span>, <span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// numPartitions是分区数</span></span><br><span class="line">		<span class="comment">// 返回值是当前key属于哪个区间</span></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPartition</span><span class="params">(IntWritable key, IntWritable value,</span></span></span><br><span class="line"><span class="function"><span class="params">				<span class="keyword">int</span> numPartitions)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">int</span> MaxNumber = <span class="number">65223</span>;</span><br><span class="line">			<span class="keyword">int</span> bound = MaxNumber / numPartitions + <span class="number">1</span>;	<span class="comment">// 每个区间有多少个数</span></span><br><span class="line">			<span class="keyword">int</span> keynumber = key.get();</span><br><span class="line"></span><br><span class="line">			<span class="comment">// 扫描每个区间</span></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numPartitions; i++) &#123;</span><br><span class="line">				<span class="comment">// 如果当前key属于该区间，则返回分区号</span></span><br><span class="line">				<span class="keyword">if</span> (keynumber &lt; bound * i &amp;&amp; keynumber &gt;= bound * (i - <span class="number">1</span>))</span><br><span class="line">					<span class="keyword">return</span> i - <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line"></span><br><span class="line">		String[] otherArgs = <span class="keyword">new</span> GenericOptionsParser(conf, args)</span><br><span class="line">				.getRemainingArgs();</span><br><span class="line">		<span class="keyword">if</span> (otherArgs.length != <span class="number">2</span>) &#123;</span><br><span class="line">			System.err.println(<span class="string">"Usage WordCount &lt;int&gt; &lt;out&gt;"</span>);</span><br><span class="line">			System.exit(<span class="number">2</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 配置作业</span></span><br><span class="line">		Job job = Job.getInstance(conf, <span class="string">"Sort"</span>);</span><br><span class="line">		job.setJarByClass(Sort<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		job.setMapperClass(Map<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		job.setPartitionerClass(Partition<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		job.setReducerClass(Reduce<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		job.setOutputKeyClass(IntWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		job.setOutputValueClass(IntWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		FileInputFormat.addInputPath(job, <span class="keyword">new</span> Path(otherArgs[<span class="number">0</span>]));</span><br><span class="line">		FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(otherArgs[<span class="number">1</span>]));</span><br><span class="line">		System.exit(job.waitForCompletion(<span class="keyword">true</span>) ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//		System.out.println("Sort...");</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>最后输出结果：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1	2</span><br><span class="line">2	6</span><br><span class="line">3	15</span><br><span class="line">4	22</span><br><span class="line">5	26</span><br><span class="line">6	32</span><br><span class="line">7	32</span><br><span class="line">8	54</span><br><span class="line">9	92</span><br><span class="line">10	650</span><br><span class="line">11	654</span><br><span class="line">12	756</span><br><span class="line">13	5956</span><br><span class="line">14	65223</span><br></pre></td></tr></table></figure></div>

<p>疑问：每个区间内部的排序是在哪里完成的？</p>
<h2 id="5-6-课程总结"><a href="#5-6-课程总结" class="headerlink" title="5-6 课程总结"></a>5-6 课程总结</h2><p>略</p>
]]></content>
      <categories>
        <category>大数据分布式</category>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>java设计模式-UML简述&amp;软件设计七大原则</title>
    <url>/2019/03/26/20190326162203290/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[TOC]</p>
<h1 id="UML简述"><a href="#UML简述" class="headerlink" title="UML简述"></a>UML简述</h1><blockquote>
<p>参考：<a href="https://blog.csdn.net/weixin_37778801/article/details/84190054" target="_blank" rel="noopener">第2章 UML急速入门</a></p>
</blockquote>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UML的定义</span><br><span class="line">UML的特点</span><br><span class="line">UML2.2的分类</span><br><span class="line">	结构式图形</span><br><span class="line">	行为式图形</span><br><span class="line">	交互式图形</span><br><span class="line">UML类图</span><br><span class="line">	记忆技巧</span><br><span class="line">UML时序图</span><br><span class="line">	1、黑色的实线和实心箭头表示同步调用</span><br><span class="line">	2、黑色的实线和空心箭头表示异步调用</span><br><span class="line">	3、黑色的虚线和空心箭头就表示方法的返回值</span><br></pre></td></tr></table></figure></div>



<h2 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h2><p>UML类图讲解</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、如果出抽象类，类名是用斜体来表示</span><br><span class="line">2、&quot;+&quot;表示public</span><br><span class="line">3、&quot;-&quot;表示private</span><br><span class="line">4、&quot;#&quot;表示protected</span><br><span class="line">5、&quot;~&quot;或者什么都不加就表示default的包权限</span><br><span class="line">6、有下划线&quot;_&quot;表示static的属性或者是方法</span><br><span class="line">7、斜体的表示的是抽象方法，既然这个类里面含有抽象方法，那么这个类也必然是一个抽象类</span><br></pre></td></tr></table></figure></div>

<p>UML类图讲解-自上而下</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">《大话设计模式》</span><br><span class="line">依赖关系：一般是作为一个方法的入参：</span><br><span class="line">继承的关系：这里要注意的是：箭头的指向，是从子类指向父类	鸟 is a 动物</span><br><span class="line">组合关系：组合关系的两个类是具有相同的生命周期的;  鸟 翅膀</span><br><span class="line">关联关系：一个类把另一个类作为属性</span><br><span class="line">聚合关系：这里要注意菱形和箭头的方向不要指反了，菱形是多的一方。 大雁 雁群</span><br><span class="line">实现接口：</span><br><span class="line">	棒棒糖表示法</span><br></pre></td></tr></table></figure></div>

<p>UML类图讲解-对比讲解</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">依赖是虚线、关联是实线</span><br><span class="line">聚合是空菱形、组合是实菱形</span><br><span class="line">继承是实线、实现是虚线</span><br></pre></td></tr></table></figure></div>



<h1 id="软件设计七大原则"><a href="#软件设计七大原则" class="headerlink" title="软件设计七大原则"></a>软件设计七大原则</h1><blockquote>
<p>参考：<a href="https://blog.csdn.net/weixin_37778801/article/details/84192746" target="_blank" rel="noopener">第3章 软件设计七大原则</a></p>
</blockquote>
<h2 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h2><p>定义：对扩展开放，对修改关闭</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICourse</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">JavaCourse</span> <span class="keyword">implements</span> <span class="title">ICourse</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">接口应该是稳定的，不应该是经常修改的。</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">// 打折</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">JavaDiscountCourse</span> <span class="keyword">extends</span> <span class="title">JavaCourse</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">我们通过了继承了基类，然后对其进行扩展，对扩展是开发的，而对修改接口和基类是关闭的</span>;</span><br><span class="line">越是基层的模块的修改影响的范围是越大的。</span><br></pre></td></tr></table></figure></div>



<h2 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h2><p>定义：高层[tom]不该依赖底层[JavaCourse]、两者都该依赖其抽象[ICourse]</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">面向实现来进行编程，面向实现类来进行编程的话， 扩展性比较的差，这个就是依赖于底层的实现的</span><br><span class="line"></span><br><span class="line">改为面向接口编程：</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaCourse</span> <span class="keyword">implements</span> <span class="title">ICourse</span> </span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">FECourse</span> <span class="keyword">implements</span> <span class="title">ICourse</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">Tom</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">studyCourse</span><span class="params">(ICourse iCourse)</span> </span>&#123;</span><br><span class="line">        iCourse.studyCourse();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">注入：</span><br><span class="line">	通过接口方法的方式来注入</span><br><span class="line">		tom.studyCourse(<span class="keyword">new</span> JavaCourse());</span><br><span class="line">	通过构造器的方式来注入</span><br><span class="line">		Tom tom = <span class="keyword">new</span> Tom(<span class="keyword">new</span> JavaCourse());</span><br><span class="line">        tom.studyCourse();</span><br><span class="line">    利用set方法来进行注入</span><br><span class="line">    	Tom tom = <span class="keyword">new</span> Tom();</span><br><span class="line">        tom.setiCourse(<span class="keyword">new</span> JavaCourse());</span><br><span class="line">        tom.studyCourse();</span><br></pre></td></tr></table></figure></div>



<h2 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h2><p>定义：不要存在多于一个导致类变更的原因</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bird</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">那么现在就是有问题的 ，鸵鸟不是用翅膀飞的。</span></span><br><span class="line"><span class="class">这个时候，我们在原来<span class="title">Bird</span>类里面进行扩展：这个时候，是不遵循单一职责原则的</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">这个时候，我们按照职责的不同来进行拆分：</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">FlyBird</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">WalkBird</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line">案例2:</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICourse</span></span></span><br><span class="line"><span class="class">这个接口里面含有两个大块的功能：一个是获取课程的相关的信息，一个是对课程进行管理：</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">这个时候，我们就是可以对上面的接口进行一个拆分：</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">ICourseContent</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">ICourseManager</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">实现类：</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">CourseImpl</span> <span class="keyword">implements</span> <span class="title">ICourseManager</span>,<span class="title">ICourseContent</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">要看实际的情况，不能过少的运用单一职责原则，也不能过多的使用单一职责原则，如果类过多的话，会引起来类的爆炸的现象</span>;</span><br></pre></td></tr></table></figure></div>



<h2 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h2><p>定义：用多个专门的接口，而不使用单一的总接口，客户端不应该依赖它不需要的接口</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAnimalAction</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">swim</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">IAnimalAction</span></span></span><br><span class="line"><span class="class">但狗不会飞</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">我们可以对上面的接口来进行细化</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">IEatAnimalAction</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">IFlyAnimalAction</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">ISwimAnimalAction</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">我们在设计接口的时候，也不能分的太细，让接口过多</span>;接口隔离原则在使用的时候，一定要适度，用的过多，或者过少都是不好的。</span><br></pre></td></tr></table></figure></div>



<h2 id="迪米特原则"><a href="#迪米特原则" class="headerlink" title="迪米特原则"></a>迪米特原则</h2><p>定义：一个对象应该对其他对象保持最少的了解。又叫【最少知道原则】</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Course</span></span></span><br><span class="line"><span class="class">// 负责人</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">TeamLeader</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkNumberOfCourses</span><span class="params">(List&lt;Course&gt; courseList)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"在线课程的数量是:"</span>+courseList.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Boss</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commandCheckNumber</span><span class="params">(TeamLeader teamLeader)</span> </span>&#123;</span><br><span class="line">        List&lt;Course&gt; courseList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">        	<span class="comment">// new Course()不该出现在Boss类</span></span><br><span class="line">            courseList.add(<span class="keyword">new</span> Course());</span><br><span class="line">        &#125;</span><br><span class="line">        teamLeader.checkNumberOfCourses(courseList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">在Boss这个类的下达指令的方法里面，除开入参 ，出参， 还有类里面的成员变量，这些变量称为朋友，其他的都不能称为朋友，在下达指令的这个方法里面不应该和Course的这个类有任何的交互，这里就是违背了迪米特法则。</span><br><span class="line">【只和朋友交流，不要和陌生人说话】</span><br><span class="line"></span><br><span class="line">---------------------------------</span><br><span class="line">修改：</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeamLeader</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkNumberOfCourses</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Course&gt; courseList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">        	<span class="comment">// new Course()交给TeamLeader</span></span><br><span class="line">            courseList.add(<span class="keyword">new</span> Course());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"在线课程的数量是:"</span>+courseList.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Boss</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 和 Course()没关了</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commandCheckNumber</span><span class="params">(TeamLeader teamLeader)</span> </span>&#123;</span><br><span class="line">        teamLeader.checkNumberOfCourses();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">在使用迪米特法则的时候，我们要区分哪些是朋友，哪些不是朋友；</span><br></pre></td></tr></table></figure></div>



<h2 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h2><p>定义：任何基类可以出现的地方，子类一定可以出现。 LSP(里氏替换原则)是继承复用的基石，只有当衍生类可以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为</p>
<p>引申：子类可以扩展父类功能，但不能改变父类原有功能</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">开闭原则的时候，在获取打折价格，我们是这样来写的：</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDiscountCourse</span> <span class="keyword">extends</span> <span class="title">JavaCourse</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 获取原价的方法 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">getOriginPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getPrice();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getPrice()*<span class="number">0.8</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">这里的getPrice()方法已经是重写了父类里面的非抽象方法，不符合里氏替换原则</span><br><span class="line">优点：约束继承泛滥</span><br><span class="line"></span><br><span class="line">改：</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDiscountCourse</span> <span class="keyword">extends</span> <span class="title">JavaCourse</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 获取原价的方法 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">getDiscountPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getPrice()*<span class="number">0.8</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">---------------------------</span><br><span class="line">案例<span class="number">2</span>:</span><br><span class="line"></span><br><span class="line">描述一下长方形和正方形的关系</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> length;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> width;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//get set</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Rectangle</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> sidelength;</span><br><span class="line">	<span class="comment">//get set</span></span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getLength</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getSidelength();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLength</span><span class="params">(<span class="keyword">long</span> length)</span> </span>&#123;</span><br><span class="line">        setSidelength(length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">上面的实现是不符合里氏替换原则的;</span><br><span class="line"></span><br><span class="line">改：</span><br><span class="line"></span><br><span class="line">四边形的接口：</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Quadrangle</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">getWidth</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">getLength</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">长方形这个类来实现上面的接口</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">implements</span> <span class="title">Quadrangle</span></span></span><br><span class="line"><span class="class">正方形：</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">Square</span> <span class="keyword">implements</span> <span class="title">Quadrangle</span></span></span><br></pre></td></tr></table></figure></div>



<h2 id="合成复用原则"><a href="#合成复用原则" class="headerlink" title="合成复用原则"></a>合成复用原则</h2><p>定义：尽量使用对象组合/聚合，而不是继承关系达到软件复用的目的</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBConnection</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"MySQL的数据库连接"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductDao</span> <span class="keyword">extends</span> <span class="title">DBConnection</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String conn = <span class="keyword">super</span>.getConnection();</span><br><span class="line">        System.out.println(<span class="string">"使用"</span>+conn+<span class="string">"增加产品"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">现在需要再用Oracle的数据库来进行连接</span><br><span class="line"></span><br><span class="line">改：</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">DBConnection</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getConnection</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySQLConnection</span> <span class="keyword">extends</span> <span class="title">DBConnection</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">OracleConnection</span> <span class="keyword">extends</span> <span class="title">DBConnection</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">// 使用组合而不是继承！！</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">ProductDao</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> DBConnection dbConnection;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 如参放DBConnection的实现类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDbConnection</span><span class="params">(DBConnection dbConnection)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dbConnection = dbConnection;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String conn = dbConnection.getConnection();</span><br><span class="line">        System.out.println(<span class="string">"使用"</span>+conn+<span class="string">"增加产品"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">如果我们还有再进行扩展的话，那么我们就再写上一个类 ，然后去实现DBConnection里面的抽象方法，具体的实现由调用者自己去决定<span class="keyword">new</span>哪一个实现的实例。</span><br></pre></td></tr></table></figure></div>



]]></content>
      <categories>
        <category>java设计模式</category>
      </categories>
      <tags>
        <tag>java设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>python爬虫(3)-Scrapy框架</title>
    <url>/2019/03/21/20190321133211318/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>本文档由脑图导出，地址：<a href="http://naotu.baidu.com/file/3adea0eca05e3c3f081290142732313d?token=b14e7b97ee7411e0" target="_blank" rel="noopener">Spider脑图</a></p>
<p>参考：heima</p>
</blockquote>
<h1 id="Spider"><a href="#Spider" class="headerlink" title="Spider"></a>Spider</h1><h2 id="Scrapy-框架"><a href="#Scrapy-框架" class="headerlink" title="Scrapy 框架"></a>Scrapy 框架</h2><h3 id="数据抓取基础"><a href="#数据抓取基础" class="headerlink" title="数据抓取基础"></a>数据抓取基础</h3><h4 id="概述-amp-架构图-amp-运作流程-amp-安装"><a href="#概述-amp-架构图-amp-运作流程-amp-安装" class="headerlink" title="概述&amp;架构图&amp;运作流程&amp;安装"></a>概述&amp;架构图&amp;运作流程&amp;安装</h4><p>概述<br>Scrapy是一个为了爬取网站数据，提取结构性数据而编写的应用框架<br>多线程、异步</p>
<p>架构图&amp;运作流程<br>略</p>
<p>配置安装</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install Scrapy</span><br></pre></td></tr></table></figure></div>




<h4 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h4><p>入门案例</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sh</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入项目目录中运行：</span></span><br><span class="line">scrapy startproject mySpider</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> mySpider</span><br><span class="line">mySpider        scrapy.cfg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 目录结构</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入mySpider目录运行 生成爬虫</span></span><br><span class="line">scrapy genspider itcast <span class="string">"itcast.cn”</span></span><br><span class="line"><span class="string"># 会自动生成itcast.py</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># itcast.py</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure></div>

<p>itcast.py</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ItcastSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'itcast'</span> <span class="comment"># 爬虫名</span></span><br><span class="line">    allowed_domains = [<span class="string">'itcast.cn'</span>]  <span class="comment"># 允许爬的范围</span></span><br><span class="line">    start_urls = [<span class="string">'http://www.itcast.cn/channel/teacher.shtml'</span>]   <span class="comment"># 开始爬取的地址</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 继承</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="comment"># 处理start_urls对应的响应</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 每一个老师信息</span></span><br><span class="line">        li_list = response.xpath(<span class="string">"//div[@class='tea_con']//li"</span>)</span><br><span class="line">        <span class="keyword">for</span> li <span class="keyword">in</span> li_list:</span><br><span class="line">            item = &#123;&#125;</span><br><span class="line">            <span class="comment"># extract_first: 提取数据</span></span><br><span class="line">            item[<span class="string">"name"</span>] = li.xpath(<span class="string">".//h3/text()"</span>).extract_first()</span><br><span class="line">            item[<span class="string">"title"</span>] = li.xpath(<span class="string">".//h4/text()"</span>).extract_first()</span><br><span class="line">            <span class="comment"># 变成生成器、减小内存占用、将item传递给pipline</span></span><br><span class="line">            <span class="comment"># print(item)</span></span><br><span class="line">            <span class="keyword">yield</span> item</span><br></pre></td></tr></table></figure></div>

<p>go on</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sh</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">scrapy crawl itcast</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">settings.py</span><br><span class="line"><span class="comment"># 设置日志等级</span></span><br><span class="line">LOG_LEVEL = <span class="string">"WARNING"</span></span><br><span class="line"><span class="comment"># 开启pipline</span></span><br><span class="line"><span class="comment"># 多个pipline，有处理优先级（距离引擎的远近）,越近越先处理</span></span><br><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">   <span class="string">'mySpider.pipelines.MyspiderPipeline'</span>: 300,</span><br><span class="line">   <span class="string">'mySpider.pipelines.MyspiderPipeline1'</span>: 301,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># pipelines.py</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure></div>

<p>pipelines.py</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Define your item pipelines here</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Don't forget to add your pipeline to the ITEM_PIPELINES setting</span></span><br><span class="line"><span class="comment"># See: https://doc.scrapy.org/en/latest/topics/item-pipeline.html</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyspiderPipeline</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        item[<span class="string">"hello"</span>] = <span class="string">"world"</span></span><br><span class="line">        <span class="comment"># pipline必须return传递item</span></span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyspiderPipeline1</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        print(item)</span><br><span class="line">        <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure></div>





<p><strong>关于迭代器、生成器</strong></p>
<p>迭代器：不用再将所有要迭代的数据都一次性缓存下来供后续依次读取，这样可以节省大量的存储（内存）空间</p>
<p>生成器(generator)：生成器是一类特殊的迭代器。将每次迭代返回数值的return换成了yield，此时新定义的函数便不再是函数，而是一个<strong>生成器</strong>了。简单来说：只要在def中有yield关键字的 就称为 生成器</p>
<p>yield关键字有两点作用：</p>
<ul>
<li>保存当前运行状态（断点），然后暂停执行，即将生成器（函数）挂起</li>
<li>将yield关键字后面表达式的值作为返回值返回，此时可以理解为起到了return的作用</li>
</ul>
<h4 id="关于日志"><a href="#关于日志" class="headerlink" title="关于日志"></a>关于日志</h4><p>多个spider都提交到pipeline，需要if判断区分</p>
<p>关于日志</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import logging</span><br><span class="line"></span><br><span class="line"># 设置日志输出样式</span><br><span class="line">logging.basicConfig(...)</span><br><span class="line"></span><br><span class="line">logger &#x3D; logging.getLogger(__name__)</span><br><span class="line"></span><br><span class="line">logger.warning(&quot;XX&quot;)</span><br><span class="line"></span><br><span class="line"># -----------------------</span><br><span class="line">settings.py</span><br><span class="line"># 设置日志保存位置</span><br><span class="line">LOG_FILE &#x3D; &#39;.&#x2F;log.log&#39;</span><br></pre></td></tr></table></figure></div>




<h4 id="实现翻页"><a href="#实现翻页" class="headerlink" title="实现翻页"></a>实现翻页</h4><p>hr.py</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="comment"># 爬招聘信息，存到mongodb</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HrSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'hr'</span></span><br><span class="line">    allowed_domains = [<span class="string">'tencent.com'</span>]</span><br><span class="line">    start_urls = [<span class="string">'http://hr.tencent.com/position.php'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        tr_list = response.xpath(<span class="string">"//table[@class='tablelist']/tr"</span>)[<span class="number">1</span>:<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">for</span> tr <span class="keyword">in</span> tr_list:</span><br><span class="line">            item = &#123;&#125;</span><br><span class="line">            item[<span class="string">"title"</span>] = tr.xpath(<span class="string">"./td[1]/a/text()"</span>).extract_first()</span><br><span class="line">            item[<span class="string">"position"</span>] = tr.xpath(<span class="string">"./td[2]/text()"</span>).extract_first()</span><br><span class="line">            item[<span class="string">"publish_date"</span>] = tr.xpath(<span class="string">"./td[5]/text()"</span>).extract_first()</span><br><span class="line">            <span class="keyword">yield</span> item</span><br><span class="line">        <span class="comment">#找到下一页的url地址</span></span><br><span class="line">        next_url = response.xpath(<span class="string">"//a[@id='next']/@href"</span>).extract_first()</span><br><span class="line">        <span class="keyword">if</span> next_url != <span class="string">"javascript:;"</span>:</span><br><span class="line">            next_url = <span class="string">"http://hr.tencent.com/"</span> +next_url</span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(</span><br><span class="line">                next_url,</span><br><span class="line">                callback=self.parse,	<span class="comment"># 新请求使用哪个处理逻辑</span></span><br><span class="line">                <span class="comment"># meta = &#123;"item":item&#125;</span></span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># def parse1(self,response):</span></span><br><span class="line">    <span class="comment">#     response.meta["item"]</span></span><br></pre></td></tr></table></figure></div>



<p>settings.py</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">USER_AGENT = <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36'</span></span><br></pre></td></tr></table></figure></div>



<p>piplines.py</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line"><span class="keyword">from</span> tencent.items <span class="keyword">import</span> TencentItem</span><br><span class="line"></span><br><span class="line">client = MongoClient()</span><br><span class="line">collection = client[<span class="string">"tencent"</span>][<span class="string">"hr"</span>]</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TencentPipeline</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        print(item)</span><br><span class="line">        collection.insert(item)</span><br><span class="line">        <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure></div>



<p>else</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">scrapy.Request(url, callback, method, headers, body, cookies, meta, dont_filter=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># dont_filter : scrapy默认去重（请求过的url不会再请求）</span></span><br><span class="line"><span class="comment"># 如贴吧会更新数据（同一个url不同时间请求，数据不同），这时可将dont_filter=False</span></span><br></pre></td></tr></table></figure></div>

<h4 id="item"><a href="#item" class="headerlink" title="item"></a>item</h4><p>items.py</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TencentItem</span><span class="params">(scrapy.Item)</span>:</span></span><br><span class="line">    <span class="comment"># define the fields for your item here like:</span></span><br><span class="line">    title = scrapy.Field()</span><br><span class="line">    position = scrapy.Field()</span><br><span class="line">    publish_date = scrapy.Field()</span><br></pre></td></tr></table></figure></div>



<p>hr.py修改</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tencent.items <span class="keyword">import</span> TencentItem</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> tr <span class="keyword">in</span> tr_list:</span><br><span class="line">    <span class="comment"># 使用定义好的item</span></span><br><span class="line">    item = TencentItem()</span><br><span class="line">    item[<span class="string">"title"</span>] = tr.xpath(<span class="string">"./td[1]/a/text()"</span>).extract_first()</span><br><span class="line">    item[<span class="string">"position"</span>] = tr.xpath(<span class="string">"./td[2]/text()"</span>).extract_first()</span><br><span class="line">    item[<span class="string">"publish_date"</span>] = tr.xpath(<span class="string">"./td[5]/text()"</span>).extract_first()</span><br><span class="line">    <span class="keyword">yield</span> item</span><br></pre></td></tr></table></figure></div>



<p>piplines.py修改</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TencentPipeline</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(item,TencentItem):</span><br><span class="line">            print(item)</span><br><span class="line">            <span class="comment"># item不是字典，需要转化</span></span><br><span class="line">            collection.insert(dict(item))</span><br><span class="line">        <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure></div>



<p><strong>item使用案例 - 阳光政务平台爬虫</strong></p>
<p>实现翻页+请求详情页</p>
<p>yg.py</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> yangguang.items <span class="keyword">import</span> YangguangItem</span><br><span class="line"><span class="keyword">from</span> yangguang.settings <span class="keyword">import</span> MONGO_HOST</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">YgSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'yg'</span></span><br><span class="line">    allowed_domains = [<span class="string">'sun07691.com'</span>]</span><br><span class="line">    start_urls = [<span class="string">'http://wz.sun0769.com/index.php/question/questionType?type=4&amp;page=0'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="comment">#分组</span></span><br><span class="line">        tr_list = response.xpath(<span class="string">"//div[@class='greyframe']/table[2]/tr/td/table/tr"</span>)</span><br><span class="line">        <span class="keyword">for</span> tr <span class="keyword">in</span> tr_list:</span><br><span class="line">            item = YangguangItem()</span><br><span class="line">            item[<span class="string">"title"</span>] = tr.xpath(<span class="string">"./td[2]/a[@class='news14']/@title"</span>).extract_first()</span><br><span class="line">            item[<span class="string">"href"</span>] = tr.xpath(<span class="string">"./td[2]/a[@class='news14']/@href"</span>).extract_first()</span><br><span class="line">            item[<span class="string">"publish_date"</span>]=tr.xpath(<span class="string">"./td[last()]/text()"</span>).extract_first()</span><br><span class="line">			</span><br><span class="line">            <span class="comment"># item有些字段需要请求详情页</span></span><br><span class="line">            <span class="keyword">yield</span>  scrapy.Request(</span><br><span class="line">                item[<span class="string">"href"</span>],</span><br><span class="line">                callback=self.parse_detail,</span><br><span class="line">                meta = &#123;<span class="string">"item"</span>:item&#125;</span><br><span class="line">            )</span><br><span class="line">        <span class="comment">#翻页</span></span><br><span class="line">        next_url = response.xpath(<span class="string">"//a[text()='&gt;']/@href"</span>).extract_first()</span><br><span class="line">        <span class="keyword">if</span> next_url <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(</span><br><span class="line">                next_url,</span><br><span class="line">                callback=self.parse</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_detail</span><span class="params">(self,response)</span>:</span> <span class="comment">#处理详情页</span></span><br><span class="line">        item = response.meta[<span class="string">"item"</span>]</span><br><span class="line">        item[<span class="string">"content"</span>] = response.xpath(<span class="string">"//div[@class='c1 text14_2']//text()"</span>).extract()</span><br><span class="line">        item[<span class="string">"content_img"</span>] = response.xpath(<span class="string">"//div[@class='c1 text14_2']//img/@src"</span>).extract()</span><br><span class="line">        item[<span class="string">"content_img"</span>] = [<span class="string">"http://wz.sun0769.com"</span>+i <span class="keyword">for</span> i <span class="keyword">in</span> item[<span class="string">"content_img"</span>]]</span><br><span class="line">        <span class="comment"># print(item)</span></span><br><span class="line">        <span class="keyword">yield</span> item</span><br></pre></td></tr></table></figure></div>



<p>piplines.py</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> yangguang.settings <span class="keyword">import</span> MONGO_HOST</span><br><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">YangguangPipeline</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span><span class="params">(self,spider)</span>:</span></span><br><span class="line">        <span class="comment"># spider.hello = "world"</span></span><br><span class="line">        client = MongoClient()</span><br><span class="line">        self.collection = client[<span class="string">"test"</span>][<span class="string">"test"</span>]</span><br><span class="line">	</span><br><span class="line">    <span class="comment"># 保存到mongo</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        <span class="comment"># </span></span><br><span class="line">        spider.settings.get(<span class="string">"MONGO_HOST"</span>)</span><br><span class="line">        item[<span class="string">"content"</span>] = self.process_content(item[<span class="string">"content"</span>])</span><br><span class="line">        print(item)</span><br><span class="line"></span><br><span class="line">        self.collection.insert(dict(item))</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line">	</span><br><span class="line">    <span class="comment"># 做一些数据处理</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_content</span><span class="params">(self,content)</span>:</span></span><br><span class="line">        content = [re.sub(<span class="string">r"\xa0|\s"</span>,<span class="string">""</span>,i) <span class="keyword">for</span> i <span class="keyword">in</span> content]</span><br><span class="line">        content = [i <span class="keyword">for</span> i <span class="keyword">in</span> content <span class="keyword">if</span> len(i)&gt;<span class="number">0</span>] <span class="comment">#去除列表中的空字符串</span></span><br><span class="line">        <span class="keyword">return</span> content</span><br></pre></td></tr></table></figure></div>



<h3 id="scrapy深入"><a href="#scrapy深入" class="headerlink" title="scrapy深入"></a>scrapy深入</h3><h4 id="debug日志-amp-scrapy-shell-amp-settings-py-amp-pipline"><a href="#debug日志-amp-scrapy-shell-amp-settings-py-amp-pipline" class="headerlink" title="debug日志 &amp; scrapy shell &amp; settings.py &amp; pipline"></a>debug日志 &amp; scrapy shell &amp; settings.py &amp; pipline</h4><p>程序的debug日志信息</p>
<p>略</p>
<p>scrapy shell</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Scrapy shell是一个交互终端，我们可以在未启动spider的情况下尝试及调试代码，也可以用来测试XPath表达式</span><br><span class="line"></span><br><span class="line">使用方法：</span><br><span class="line">	scrapy shell http://www.itcast.cn/channel/teacher.shtml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">response.url：当前响应的url地址</span><br><span class="line">response.request.url：当前响应对应的请求的url地址</span><br><span class="line">response.headers：响应头</span><br><span class="line">response.body：响应体，也就是html代码，默认是byte类型</span><br><span class="line">response.requests.headers：当前响应的请求头</span><br></pre></td></tr></table></figure></div>



<p>settings.py</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 存放公共变量</span></span><br><span class="line">MONGO_HOST = <span class="string">"localhost"</span></span><br><span class="line"><span class="comment"># 在pipline里使用</span></span><br><span class="line">spider.settings.get(<span class="string">"MONGO_HOST"</span>)</span><br></pre></td></tr></table></figure></div>



<p>pipline</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 爬虫开启的的时候，仅执行一次</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">open_spider</span><span class="params">(self,spider)</span>:</span></span><br><span class="line">        <span class="comment"># spider.hello = "world"</span></span><br><span class="line">        client = MongoClient()</span><br><span class="line">        self.collection = client[<span class="string">"test"</span>][<span class="string">"test"</span>]</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 爬虫关闭的的时候，仅执行一次      </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">close_spider</span></span></span><br></pre></td></tr></table></figure></div>



<h4 id="综合案例-苏宁图书爬虫"><a href="#综合案例-苏宁图书爬虫" class="headerlink" title="综合案例-苏宁图书爬虫"></a>综合案例-苏宁图书爬虫</h4><h4 id="crawlspider"><a href="#crawlspider" class="headerlink" title="crawlspider"></a>crawlspider</h4><p>crowspider</p>
<p>启动项目</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sh</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ scrapy startproject circ</span><br><span class="line">$ <span class="built_in">cd</span> circ</span><br><span class="line">$ scrapy genspider -t crawl cf bxjg.circ.gov.cn</span><br></pre></td></tr></table></figure></div>

<p>cf.py</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">提取每一个详情页的某些字段</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> scrapy.linkextractors <span class="keyword">import</span> LinkExtractor</span><br><span class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> CrawlSpider, Rule</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CfSpider</span><span class="params">(CrawlSpider)</span>:</span></span><br><span class="line">    name = <span class="string">'cf'</span></span><br><span class="line">    allowed_domains = [<span class="string">'bxjg.circ.gov.cn'</span>]</span><br><span class="line">    start_urls = [<span class="string">'http://bxjg.circ.gov.cn/web/site0/tab5240/module14430/page1.htm'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义提取url地址规则</span></span><br><span class="line">    rules = (</span><br><span class="line">        <span class="comment"># LinkExtractor：连接提取器，提取url地址</span></span><br><span class="line">        <span class="comment"># allow：通过正则表达式提取url</span></span><br><span class="line">        <span class="comment"># 提取后会交给父类parse函数发送请求，所以子类不能自定义parse函数</span></span><br><span class="line">        <span class="comment"># callback：提取后的url的response 会交给callback处理，callback可以为null</span></span><br><span class="line">        <span class="comment"># follow：当前url的响应，是否重新经过该Rule的规则来提取</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># /web/site0/tab5240/module14430/page3.htm</span></span><br><span class="line">        <span class="comment"># CrawlSpider会自动补充完整的url</span></span><br><span class="line">        Rule(LinkExtractor(allow=<span class="string">r'/web/site0/tab5240/info\d+\.htm'</span>), callback=<span class="string">'parse_item'</span>, follow=<span class="literal">False</span>),</span><br><span class="line">        Rule(LinkExtractor(allow=<span class="string">r'/web/site0/tab5240/module14430/page\d+\.htm'</span>), follow=<span class="literal">True</span>),</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Rule(LinkExtractor(allow=r'Items/'), callback='parse_item', follow=True),</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_item</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        item = &#123;&#125;</span><br><span class="line">        <span class="comment">#item['domain_id'] = response.xpath('//input[@id="sid"]/@value').get()</span></span><br><span class="line">        <span class="comment">#item['name'] = response.xpath('//div[@id="name"]').get()</span></span><br><span class="line">        <span class="comment">#item['description'] = response.xpath('//div[@id="description"]').get()</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># &lt;!--TitleStart--&gt;中国银行保险监督管理委员会行政处罚决定书(银保监罚决字〔2019〕2号) &lt;!--TitleEnd--&gt;</span></span><br><span class="line">        item[<span class="string">'title'</span>] = re.findall(<span class="string">"&lt;!--TitleStart--&gt;(.*?)&lt;!--TitleEnd--&gt;"</span>, response.body.decode())[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># 发布时间：2019-03-18</span></span><br><span class="line">        item[<span class="string">'publish_date'</span>] = re.findall(<span class="string">"发布时间：(\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125;)"</span>, response.body.decode())[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        print(item)</span><br></pre></td></tr></table></figure></div>

<p>else</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 运行</span><br><span class="line">$ scrapy crawl cf</span><br><span class="line"></span><br><span class="line">其他参数说明：</span><br><span class="line">略</span><br></pre></td></tr></table></figure></div>





]]></content>
      <categories>
        <category>python爬虫</category>
      </categories>
      <tags>
        <tag>python爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB(by python)</title>
    <url>/2019/03/04/20190304105434006/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>参考：heima</p>
</blockquote>
<p>[TOC]</p>
<h1 id="介绍-amp-安装"><a href="#介绍-amp-安装" class="headerlink" title="介绍&amp;安装"></a>介绍&amp;安装</h1><p>关系型缺点</p>
<ul>
<li>扩展性差、大数据下IO压力大、表结构更改困难</li>
</ul>
<p>MongoDB优点</p>
<ul>
<li>易扩展、大数据量，高性能、灵活的数据模型</li>
</ul>
<p>安装：centos+yum安装mongodb</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sh</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置MongoDB的yum源</span></span><br><span class="line">$ vim /etc/yum.repos.d/mongodb-org-3.4.repo</span><br><span class="line"><span class="comment">#添加以下内容：</span></span><br><span class="line">[mongodb-org-3.4]  </span><br><span class="line">name=MongoDB Repository  </span><br><span class="line">baseurl=https://repo.mongodb.org/yum/redhat/<span class="variable">$releasever</span>/mongodb-org/3.4/x86_64/  </span><br><span class="line">gpgcheck=1  </span><br><span class="line">enabled=1  </span><br><span class="line">gpgkey=https://www.mongodb.org/static/pgp/server-3.4.asc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ yum makecache      </span><br><span class="line">$ yum -y install mongodb-org</span><br><span class="line"><span class="comment"># 查看mongo安装位置 </span></span><br><span class="line">$ whereis mongod</span><br><span class="line"><span class="comment"># 查看修改配置文件 ：</span></span><br><span class="line">$ vim /etc/mongod.conf</span><br><span class="line"><span class="comment"># 启动mongodb ：</span></span><br><span class="line">$ systemctl start mongod.service</span><br><span class="line"><span class="comment"># 启动Mongo shell</span></span><br><span class="line">$ mongo </span><br><span class="line"><span class="comment"># 查看数据库：</span></span><br><span class="line">&gt; show dbs</span><br><span class="line"><span class="comment"># 退出</span></span><br><span class="line">&gt; <span class="built_in">exit</span></span><br></pre></td></tr></table></figure></div>



<h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><ul>
<li>关于database的基础命令</li>
<li>关于集合的基础命令</li>
<li>数据类型</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sh</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、关于database的基础命令</span></span><br><span class="line"><span class="comment"># 查看当前的数据库：</span></span><br><span class="line">&gt; db</span><br><span class="line"><span class="comment"># 查看所有的数据库：</span></span><br><span class="line">&gt; show dbs</span><br><span class="line"><span class="comment"># 切换数据库：</span></span><br><span class="line">&gt; use db_name</span><br><span class="line"><span class="comment"># 删除当前的数据库：</span></span><br><span class="line">&gt; db.dropDatabase()</span><br><span class="line"><span class="comment"># 不用创建数据库，插数据时会自动创建</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、关于集合的基础命令</span></span><br><span class="line"><span class="comment"># 不手动创建集合：</span></span><br><span class="line"><span class="comment"># 向不存在的集合中第⼀次加⼊数据时， 集合会被创建出来</span></span><br><span class="line"><span class="comment"># 手动创建结合：</span></span><br><span class="line">&gt; db.createCollection(name,options)</span><br><span class="line">&gt; db.createCollection(<span class="string">"stu"</span>)</span><br><span class="line">&gt; db.createCollection(<span class="string">"sub"</span>, &#123; capped : <span class="literal">true</span>, size : 10 &#125; )</span><br><span class="line"><span class="comment"># 参数capped： 默认值为false表示不设置上限,值为true表示设置上限</span></span><br><span class="line"><span class="comment"># 参数size： 当capped值为true时， 需要指定此参数， 表示上限⼤⼩,当⽂档达到上限时， 会将之前的数据覆盖， 单位为字节</span></span><br><span class="line"><span class="comment"># 查看集合：</span></span><br><span class="line">&gt; show collections</span><br><span class="line"><span class="comment"># 删除集合：</span></span><br><span class="line">&gt; db.集合名称.drop()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、数据类型</span></span><br><span class="line">Object ID： ⽂档ID</span><br><span class="line">String： 字符串， 最常⽤， 必须是有效的UTF-8</span><br><span class="line">Boolean： 存储⼀个布尔值， <span class="literal">true</span>或<span class="literal">false</span></span><br><span class="line">Integer： 整数可以是32位或64位， 这取决于服务器</span><br><span class="line">Double： 存储浮点值</span><br><span class="line">Arrays： 数组或列表， 多个值存储到⼀个键</span><br><span class="line">Object： ⽤于嵌⼊式的⽂档， 即⼀个值为⼀个⽂档</span><br><span class="line">Null： 存储Null值</span><br><span class="line">Timestamp： 时间戳， 表示从1970-1-1到现在的总秒数</span><br><span class="line">Date： 存储当前⽇期或时间的UNIX时间格式</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建⽇期语句如下 ：参数的格式为YYYY-MM-DD</span></span><br><span class="line">&gt; new Date(<span class="string">'2017-12-20'</span>)</span><br><span class="line"><span class="comment"># 每个⽂档都有⼀个属性， 为_id， 保证每个⽂档的唯⼀性</span></span><br><span class="line"><span class="comment"># 可以⾃⼰去设置_id插⼊⽂档，如果没有提供， 那么MongoDB为每个⽂档提供了⼀个独特的_id， 类型为objectID</span></span><br><span class="line"><span class="comment"># objectID是⼀个12字节的⼗六进制数：</span></span><br><span class="line">前4个字节为当前时间戳</span><br><span class="line">接下来3个字节的机器ID</span><br><span class="line">接下来的2个字节中MongoDB的服务进程id</span><br><span class="line">最后3个字节是简单的增量值</span><br></pre></td></tr></table></figure></div>



<h1 id="数据库的增删改"><a href="#数据库的增删改" class="headerlink" title="数据库的增删改"></a>数据库的增删改</h1><ul>
<li>insert、save、update、remove</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sh</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 插入：insert</span></span><br><span class="line"><span class="comment"># test01会自动创建</span></span><br><span class="line">&gt; db.test01.insert(&#123;<span class="string">'name'</span>:<span class="string">'mxx'</span>,<span class="string">'age'</span>:10&#125;)</span><br><span class="line">WriteResult(&#123; <span class="string">"nInserted"</span> : 1 &#125;)</span><br><span class="line"><span class="comment"># _id自动生成，键值name可以不打引号</span></span><br><span class="line">&gt; db.test01.find()</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5c7cbe034cb2765ea56d825e"</span>), <span class="string">"name"</span> : <span class="string">"mxx"</span>, <span class="string">"age"</span> : 10 &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新：save</span></span><br><span class="line">&gt; db.集合名称.save(document)</span><br><span class="line"><span class="comment"># 如果⽂档的_id已经存在则修改， 如果⽂档的_id不存在则添加</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 简单查询</span></span><br><span class="line">&gt; db.集合名称.find()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新：update</span></span><br><span class="line">db.集合名称.update(&lt;query&gt; ,&lt;update&gt;,&#123;multi: &lt;boolean&gt;&#125;)</span><br><span class="line">参数query:查询条件</span><br><span class="line">参数update:更新操作符</span><br><span class="line">参数multi:可选， 默认是<span class="literal">false</span>，表示只更新找到的第⼀条记录， 值为<span class="literal">true</span>表示把满⾜条件的⽂档全部更新</span><br><span class="line"></span><br><span class="line">db.stu.update(&#123;name:<span class="string">'hr'</span>&#125;,&#123;name:<span class="string">'mnc'</span>&#125;)   更新一条，其他字段没了</span><br><span class="line">db.stu.update(&#123;name:<span class="string">'hr'</span>&#125;,&#123;<span class="variable">$set</span>:&#123;name:<span class="string">'hys'</span>&#125;&#125;)    更新一条，其他字段还在</span><br><span class="line">db.stu.update(&#123;&#125;,&#123;<span class="variable">$set</span>:&#123;gender:0&#125;&#125;,&#123;multi:<span class="literal">true</span>&#125;)   更新全部</span><br><span class="line"></span><br><span class="line">注意：<span class="string">"multi update only works with $ operators"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除：remove</span></span><br><span class="line">&gt; db.集合名称.remove(&lt;query&gt;,&#123;justOne: &lt;boolean&gt;&#125;)</span><br><span class="line">参数query:可选，删除的⽂档的条件</span><br><span class="line">参数justOne:可选， 如果设为<span class="literal">true</span>或1， 则只删除⼀条， 默认<span class="literal">false</span>， 表示删除多条</span><br></pre></td></tr></table></figure></div>



<h1 id="数据高级查询"><a href="#数据高级查询" class="headerlink" title="数据高级查询"></a>数据高级查询</h1><ul>
<li>数据查询、⽐较运算符、逻辑运算符、范围运算符、⽀持正则表达式、limit和skip、⾃定义查询*、投影、排序、统计个数、消除重复</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sh</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数据查询</span></span><br><span class="line">⽅法find()： 查询</span><br><span class="line">	db.集合名称.find(&#123;条件⽂档&#125;)</span><br><span class="line">⽅法findOne()：查询，只返回第⼀个</span><br><span class="line">	db.集合名称.findOne(&#123;条件⽂档&#125;)</span><br><span class="line">⽅法pretty()： 将结果格式化</span><br><span class="line">	db.集合名称.find(&#123;条件⽂档&#125;).pretty()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ⽐较运算符</span></span><br><span class="line">等于： 默认是等于判断， 没有运算符</span><br><span class="line">⼩于：<span class="variable">$lt</span> （less than）</span><br><span class="line">⼩于等于：<span class="variable">$lte</span> （less than equal）</span><br><span class="line">⼤于：<span class="variable">$gt</span> （greater than）</span><br><span class="line">⼤于等于：<span class="variable">$gte</span></span><br><span class="line">不等于：<span class="variable">$ne</span></span><br><span class="line">&gt; db.stu.find(&#123;age:&#123;<span class="variable">$gte</span>:18&#125;&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 逻辑运算符</span></span><br><span class="line">and：在json中写多个条件即可</span><br><span class="line">查询年龄⼤于或等于18， 并且性别为<span class="literal">true</span>的学⽣</span><br><span class="line">db.stu.find(&#123;age:&#123;<span class="variable">$gte</span>:18&#125;,gender:<span class="literal">true</span>&#125;)</span><br><span class="line"></span><br><span class="line">or:使⽤<span class="variable">$or</span>， 值为数组， 数组中每个元素为json</span><br><span class="line">查询年龄⼤于18， 或性别为<span class="literal">false</span>的学⽣</span><br><span class="line">db.stu.find(&#123;<span class="variable">$or</span>:[&#123;age:&#123;<span class="variable">$gt</span>:18&#125;&#125;,&#123;gender:<span class="literal">false</span>&#125;]&#125;)</span><br><span class="line"></span><br><span class="line">查询年龄⼤于18或性别为男⽣， 并且姓名是郭靖</span><br><span class="line">db.stu.find(&#123;<span class="variable">$or</span>:[&#123;age:&#123;<span class="variable">$gte</span>:18&#125;&#125;,&#123;gender:<span class="literal">true</span>&#125;],name:<span class="string">'gj'</span>&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 范围运算符</span></span><br><span class="line">使⽤<span class="string">"<span class="variable">$in</span>"</span>， <span class="string">"<span class="variable">$nin</span>"</span> 判断是否在某个范围内</span><br><span class="line">查询年龄为18、 28的学⽣</span><br><span class="line">db.stu.find(&#123;age:&#123;<span class="variable">$in</span>:[18,28]&#125;&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ⽀持正则表达式</span></span><br><span class="line">使⽤//或<span class="variable">$regex</span>编写正则表达式</span><br><span class="line">查询姓⻩的学⽣</span><br><span class="line">db.stu.find(&#123;name:/^⻩/&#125;)</span><br><span class="line">db.stu.find(&#123;name:&#123;<span class="variable">$regex</span>:<span class="string">'^⻩'</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># limit和skip</span></span><br><span class="line">⽅法<span class="built_in">limit</span>()： ⽤于读取指定数量的⽂档</span><br><span class="line">db.集合名称.find().<span class="built_in">limit</span>(NUMBER)</span><br><span class="line">查询2条学⽣信息</span><br><span class="line">db.stu.find().<span class="built_in">limit</span>(2)</span><br><span class="line"></span><br><span class="line">⽅法skip()： ⽤于跳过指定数量的⽂档</span><br><span class="line">db.集合名称.find().skip(NUMBER)</span><br><span class="line">db.stu.find().skip(2)</span><br><span class="line"></span><br><span class="line">同时使用</span><br><span class="line">db.stu.find().<span class="built_in">limit</span>(4).skip(5)</span><br><span class="line">或 </span><br><span class="line">db.stu.find().skip(5).<span class="built_in">limit</span>(4)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ⾃定义查询*</span></span><br><span class="line">使⽤<span class="variable">$where</span>后⾯写⼀个函数， 返回满⾜条件的数据</span><br><span class="line">查询年龄⼤于30的学⽣</span><br><span class="line">db.stu.find(&#123;</span><br><span class="line">    <span class="variable">$where</span>:<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> this.age&gt;30;&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 投影</span></span><br><span class="line">在查询到的返回结果中， 只选择必要的字段</span><br><span class="line">db.集合名称.find(&#123;&#125;,&#123;字段名称:1,...&#125;)</span><br><span class="line">参数为字段与值， 值为1表示显示， 值为0不显</span><br><span class="line">特殊： 对于_id列默认是显示的， 如果不显示需要明确设置为0</span><br><span class="line"></span><br><span class="line">db.stu.find(&#123;&#125;,&#123;_id:0,name:1,gender:1&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 排序</span></span><br><span class="line">⽅法sort()， ⽤于对	集进⾏排序</span><br><span class="line">db.集合名称.find().sort(&#123;字段:1,...&#125;)</span><br><span class="line">参数1为升序排列</span><br><span class="line">参数-1为降序排列</span><br><span class="line">根据性别降序， 再根据年龄升序</span><br><span class="line">db.stu.find().sort(&#123;gender:-1,age:1&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计个数</span></span><br><span class="line">⽅法count()⽤于统计结果集中⽂档条数</span><br><span class="line">db.集合名称.find(&#123;条件&#125;).count()</span><br><span class="line">db.集合名称.count(&#123;条件&#125;)</span><br><span class="line">db.stu.find(&#123;gender:<span class="literal">true</span>&#125;).count()</span><br><span class="line">db.stu.count(&#123;age:&#123;<span class="variable">$gt</span>:20&#125;,gender:<span class="literal">true</span>&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 消除重复</span></span><br><span class="line">⽅法distinct()对数据进⾏去重</span><br><span class="line">db.集合名称.distinct(<span class="string">'去重字段'</span>,&#123;条件&#125;)</span><br><span class="line"><span class="comment"># 年龄大于20的学生家乡 去重集合</span></span><br><span class="line">db.stu.distinct(<span class="string">'hometown'</span>,&#123;age:&#123;<span class="variable">$gt</span>:18&#125;&#125;)</span><br></pre></td></tr></table></figure></div>



<h1 id="数据的备份和恢复"><a href="#数据的备份和恢复" class="headerlink" title="数据的备份和恢复"></a>数据的备份和恢复</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sh</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">备份的语法：</span><br><span class="line">    mongodump -h dbhost -d dbname -o dbdirectory</span><br><span class="line">-h： 服务器地址， 也可以指定端⼝号</span><br><span class="line">-d： 需要备份的数据库名称</span><br><span class="line">-o： 备份的数据存放位置， 此⽬录中存放着备份出来的数据</span><br><span class="line"></span><br><span class="line">mongodump -h 192.168.196.128:27017 -d test1 -o ~/Desktop/test1bak</span><br><span class="line"></span><br><span class="line">恢复语法：</span><br><span class="line">     mongorestore -h dbhost -d dbname --dir dbdirectory</span><br><span class="line">-h： 服务器地址</span><br><span class="line">-d： 需要恢复的数据库实例</span><br><span class="line">--dir： 备份数据所在位置</span><br><span class="line"></span><br><span class="line">mongorestore -h 192.168.196.128:27017 -d test2 --dir ~/Desktop/test1bak/test1</span><br></pre></td></tr></table></figure></div>



<h1 id="聚合和管道"><a href="#聚合和管道" class="headerlink" title="聚合和管道"></a>聚合和管道</h1><p>聚合 aggregate</p>
<p>管道：前面的输出是后面的输入</p>
<p>常用管道：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在mongodb中，⽂档处理完毕后， 通过管道进⾏下⼀次处理</span><br><span class="line">常用管道如下：</span><br><span class="line">$group： 将集合中的⽂档分组， 可⽤于统计结果</span><br><span class="line">$match： 过滤数据， 只输出符合条件的⽂档</span><br><span class="line">$project： 修改输⼊⽂档的结构， 如重命名、 增加、 删除字段、 创建计算结果</span><br><span class="line">$sort： 将输⼊⽂档排序后输出</span><br><span class="line">$limit： 限制聚合管道返回的⽂档数</span><br><span class="line">$skip： 跳过指定数量的⽂档， 并返回余下的⽂档</span><br><span class="line">$unwind： 将数组类型的字段进⾏拆分</span><br></pre></td></tr></table></figure></div>

<p>表达式：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">处理输⼊⽂档并输出</span><br><span class="line">语法：表达式:&#39;$列名&#39;</span><br><span class="line">常⽤表达式:</span><br><span class="line">$sum： 计算总和， $sum:1 表示以⼀倍计数，计算该文档条数</span><br><span class="line">$avg： 计算平均值</span><br><span class="line">$min： 获取最⼩值</span><br><span class="line">$max： 获取最⼤值</span><br><span class="line">$push： 在结果⽂档中插⼊值到⼀个数组中</span><br><span class="line">$first： 根据资源⽂档的排序获取第⼀个⽂档数据</span><br><span class="line">$last： 根据资源⽂档的排序获取最后⼀个⽂档数据</span><br></pre></td></tr></table></figure></div>



<ul>
<li><code>$group、$push、$project、$match</code></li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sh</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># $group</span></span><br><span class="line">将集合中的文档分组，用于统计结果</span><br><span class="line"><span class="comment"># _id表示分组依据</span></span><br><span class="line">例1:统计男生，女生总人数</span><br><span class="line">db.stu.aggregate(</span><br><span class="line">	&#123;<span class="variable">$group</span>:</span><br><span class="line">		&#123;</span><br><span class="line">            _id:<span class="string">'$gender'</span>,</span><br><span class="line">            counter:&#123;<span class="variable">$sum</span>:1&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">)</span><br><span class="line">输出：</span><br><span class="line">&#123;<span class="string">"id"</span>:<span class="literal">false</span>,<span class="string">"count"</span>:2&#125;</span><br><span class="line">&#123;<span class="string">"id"</span>:<span class="literal">true</span>,<span class="string">"count"</span>:5&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Group by null</span></span><br><span class="line"><span class="comment"># 求学生总人数、平均年龄</span></span><br><span class="line">db.stu.aggregate(</span><br><span class="line">	&#123;<span class="variable">$group</span>:</span><br><span class="line">		&#123;</span><br><span class="line">            _id:null,</span><br><span class="line">            counter:&#123;<span class="variable">$sum</span>:1&#125;,</span><br><span class="line">            avgAge:&#123;<span class="variable">$avg</span>:<span class="string">'$age'</span>&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># $project</span></span><br><span class="line"><span class="comment"># 查询学生年龄、姓名</span></span><br><span class="line">db.stu.aggregate(</span><br><span class="line">	&#123;<span class="variable">$project</span>:</span><br><span class="line">		&#123;</span><br><span class="line">            _id:0,</span><br><span class="line">            name:1,</span><br><span class="line">            age:1</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询男女生人数，输出人数</span></span><br><span class="line">db.stu.aggregate(</span><br><span class="line">	&#123;<span class="variable">$group</span>:</span><br><span class="line">		&#123;</span><br><span class="line">            _id:<span class="string">'$gender'</span>,</span><br><span class="line">            counter:&#123;<span class="variable">$sum</span>:1&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;<span class="variable">$project</span>:&#123;_id:0,counter:1&#125;&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># $match</span></span><br><span class="line"><span class="comment"># match是管道命令，能将结果交给后一个管道，但是find不可以</span></span><br><span class="line">db.stu.aggregate(</span><br><span class="line">	&#123;<span class="variable">$match</span>:&#123;age:&#123;<span class="variable">$gt</span>:20&#125;&#125;&#125;,</span><br><span class="line">	<span class="comment"># 下一个管道....</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># $push</span></span><br><span class="line"><span class="comment"># 统计不同性别的学生姓名</span></span><br><span class="line">db.stu.aggregate(</span><br><span class="line">	&#123;<span class="variable">$group</span>:</span><br><span class="line">		&#123;</span><br><span class="line">            _id:<span class="string">'$gender'</span>,</span><br><span class="line">            name:&#123;<span class="variable">$push</span>:<span class="string">'$name'</span>&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># $$ROOT：将文档内容加入到结果集的数组中</span></span><br><span class="line">db.stu.aggregate(</span><br><span class="line">	&#123;<span class="variable">$group</span>:</span><br><span class="line">		&#123;</span><br><span class="line">            _id:<span class="string">'$gender'</span>,</span><br><span class="line">            name:&#123;<span class="variable">$push</span>:<span class="string">'$$ROOT'</span>&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></div>



<ul>
<li><code>$sort、$limit、$skip：</code></li>
</ul>
<p>略</p>
<ul>
<li><code>$unwind</code></li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">将⽂档中的某⼀个数组类型字段拆分成多条， 每条包含数组中的⼀个值</span><br><span class="line"></span><br><span class="line">语法：db.集合名称.aggregate(&#123;$unwind:&#39;$字段名称&#39;&#125;)</span><br><span class="line"></span><br><span class="line">db.t2.insert(&#123;_id:1,item:&#39;t-shirt&#39;,size:[&#39;S&#39;,&#39;M&#39;,&#39;L&#39;]&#125;)</span><br><span class="line">db.t2.aggregate(&#123;$unwind:&#39;$size&#39;&#125;)</span><br><span class="line"></span><br><span class="line">结果如下：</span><br><span class="line">&#123; &quot;_id&quot; : 1, &quot;item&quot; : &quot;t-shirt&quot;, &quot;size&quot; : &quot;S&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : 1, &quot;item&quot; : &quot;t-shirt&quot;, &quot;size&quot; : &quot;M&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : 1, &quot;item&quot; : &quot;t-shirt&quot;, &quot;size&quot; : &quot;L&quot; &#125;</span><br></pre></td></tr></table></figure></div>





<h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><ul>
<li>创建索引</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">索引：以提升查询速度</span><br><span class="line"></span><br><span class="line">测试：插入10万条数据到数据库中</span><br><span class="line">for(i&#x3D;0;i&lt;100000;i++)&#123;db.t12.insert(&#123;name:&#39;test&#39;+i,age:i&#125;)&#125;</span><br><span class="line"></span><br><span class="line">db.t1.find(&#123;name:&#39;test10000&#39;&#125;)</span><br><span class="line">db.t1.find(&#123;name:&#39;test10000&#39;&#125;).explain(&#39;executionStats&#39;)</span><br><span class="line"># 52ms</span><br><span class="line"></span><br><span class="line">建立索引之后对比：</span><br><span class="line">语法：db.集合.ensureIndex(&#123;属性:1&#125;)，1表示升序， -1表示降序</span><br><span class="line">具体操作：db.t1.ensureIndex(&#123;name:1&#125;)</span><br><span class="line">db.t1.find(&#123;name:&#39;test10000&#39;&#125;).explain(&#39;executionStats&#39;)</span><br><span class="line"># 0ms</span><br></pre></td></tr></table></figure></div>



<ul>
<li>关于索引</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在默认情况下创建的索引均不是唯一索引。</span><br><span class="line">创建唯一索引:</span><br><span class="line">     db.t1.ensureIndex(&#123;&quot;name&quot;:1&#125;,&#123;&quot;unique&quot;:true&#125;)</span><br><span class="line">创建唯一索引并消除重复(name是唯一的，爬虫时用于数据去重)：</span><br><span class="line">     db.t1.ensureIndex(&#123;&quot;name&quot;:1&#125;,&#123;&quot;unique&quot;:true,&quot;dropDups&quot;:true&#125;)  </span><br><span class="line">建立联合索引(什么时候需要联合索引)：</span><br><span class="line">     db.t1.ensureIndex(&#123;name:1,age:1&#125;)</span><br><span class="line">查看当前集合的所有索引：</span><br><span class="line">     db.t1.getIndexes()</span><br><span class="line">删除索引：</span><br><span class="line">     db.t1.dropIndex(&#123;&#39;索引名称&#39;&#125;:1)</span><br></pre></td></tr></table></figure></div>



<ul>
<li>爬虫数据去重，实现增量式爬虫</li>
</ul>
<p>略</p>
<h1 id="与python交互"><a href="#与python交互" class="headerlink" title="与python交互"></a>与python交互</h1><p>设置mongodb远程访问</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sh</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关闭防火墙 firewalld\iptables</span></span><br><span class="line">systemctl stop firewalld.service <span class="comment">#停止firewall</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld.service <span class="comment">#禁止firewall开机启动</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置mongodb远程访问</span></span><br><span class="line"><span class="comment"># 编辑mongod.conf注释bindIp,并重启mongodb.(这句配置代表只能本机使用，所以需注释)</span></span><br><span class="line">vim /etc/mongod.conf</span><br><span class="line"></span><br><span class="line">systemctl restart mongod.service</span><br></pre></td></tr></table></figure></div>



<p>增删改查</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立连接</span></span><br><span class="line">client = MongoClient(host=<span class="string">"10.211.55.6"</span>, port=<span class="number">27017</span>)</span><br><span class="line"><span class="comment"># 集合</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入数据</span></span><br><span class="line">collection = client[<span class="string">"test02"</span>][<span class="string">"t003"</span>]</span><br><span class="line">collection.insert(&#123;<span class="string">"name"</span>: <span class="string">"mxx"</span>, <span class="string">"age"</span>: <span class="number">18</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入多条数据</span></span><br><span class="line">data_list = [&#123;<span class="string">"name"</span>: <span class="string">"test&#123;&#125;"</span>.format(i)&#125; <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line">collection.insert_many(data_list)</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询一个记录</span></span><br><span class="line"><span class="comment"># t = collection.find_one(&#123;"name":"xiaowang"&#125;)</span></span><br><span class="line"><span class="comment"># print(t)</span></span><br><span class="line"><span class="comment">#查询所有记录</span></span><br><span class="line">t = collection.find(&#123;<span class="string">"name"</span>:<span class="string">"xiaowang"</span>&#125;)</span><br><span class="line">print(t)</span><br><span class="line"></span><br><span class="line"><span class="comment"># for i in t:</span></span><br><span class="line"><span class="comment">#     print(i)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># for j in t:</span></span><br><span class="line"><span class="comment">#     print(j,"*"*100)</span></span><br><span class="line">print(list(t))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新</span></span><br><span class="line">collection.update_one(&#123;...&#125;)</span><br><span class="line">collection.update_many(&#123;...&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line">collection.delete_one(&#123;&#125;)</span><br><span class="line">collection.delete_many(&#123;&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不用断开连接，会自动断开</span></span><br></pre></td></tr></table></figure></div>

















]]></content>
      <categories>
        <category>数据库</category>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>python-杂项</title>
    <url>/2019/03/01/20190301201943239/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="将py程序加入环境变量"><a href="#将py程序加入环境变量" class="headerlink" title="将py程序加入环境变量"></a>将py程序加入环境变量</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sh</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 增加Shebang符号直接运行Python程序</span></span><br><span class="line"><span class="comment"># 查看py3位置</span></span><br><span class="line">$ <span class="built_in">which</span> python3</span><br><span class="line"><span class="comment"># 在文件头加</span></span><br><span class="line"><span class="comment">#! /usr/local/bin/python3</span></span><br><span class="line"><span class="comment"># 修改权限</span></span><br><span class="line">$ chmod +x cards_main.py</span><br><span class="line"><span class="comment"># linux 运行</span></span><br><span class="line">./cards_main.py</span><br><span class="line"><span class="comment"># mac 直接 cards_main.py</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将命令加入环境变量</span></span><br><span class="line">sudo vim ~/.bash_profile</span><br><span class="line"><span class="comment"># 然后在里面输入：你的待运行py路径</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/machine/myprog</span><br><span class="line"><span class="comment"># wq</span></span><br><span class="line"><span class="comment"># 重新加载生效</span></span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>python基础</tag>
      </tags>
  </entry>
  <entry>
    <title>python爬虫(2)-动态HTMl处理</title>
    <url>/2019/02/28/20190228113234928/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>本文档由脑图导出，地址：<a href="http://naotu.baidu.com/file/3adea0eca05e3c3f081290142732313d?token=b14e7b97ee7411e0" target="_blank" rel="noopener">Spider脑图</a></p>
<p>参考：heima</p>
</blockquote>
<p>[TOC]</p>
<h1 id="Spider"><a href="#Spider" class="headerlink" title="Spider"></a>Spider</h1><h2 id="动态HTML处理"><a href="#动态HTML处理" class="headerlink" title="动态HTML处理"></a>动态HTML处理</h2><h3 id="爬取动态HTML数据"><a href="#爬取动态HTML数据" class="headerlink" title="爬取动态HTML数据"></a>爬取动态HTML数据</h3><ul>
<li><p>后续爬虫代码建议</p>
<ul>
<li>减少请求次数</li>
<li>关注所有类型的页面</li>
<li>多伪装</li>
<li>多线程分布式</li>
</ul>
</li>
</ul>
<ul>
<li><p>动态HTML技术：略</p>
</li>
<li><p>Selenium和PhantomJS</p>
<p>Selenium</p>
<ul>
<li>Web的自动化测试工具，可以接收指令，让浏览器自动加载页面，获取需要的数据，甚至页面截屏</li>
</ul>
<p>PhantomJS</p>
<ul>
<li>“无界面”(headless)浏览器，它会把网站加载到内存并执行页面上的JavaScript</li>
</ul>
<p>demo: 模拟浏览器百度搜索</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> pprint</span><br><span class="line"><span class="comment"># 实例化浏览器</span></span><br><span class="line"><span class="comment"># 调用的是本地Chrome浏览器，如果是有界面浏览器，就会看到控制效果</span></span><br><span class="line"><span class="comment"># webdriver.PhantomJS()	 #无界面浏览器</span></span><br><span class="line">driver = webdriver.Chrome(<span class="string">"./chromedriver"</span>)</span><br><span class="line"><span class="comment"># 发送请求</span></span><br><span class="line">driver.get(<span class="string">"http://www.baidu.com"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入关键字</span></span><br><span class="line">driver.find_element_by_id(<span class="string">"kw"</span>).send_keys(<span class="string">"python"</span>)</span><br><span class="line"><span class="comment"># 点击搜索</span></span><br><span class="line">driver.find_element_by_id(<span class="string">"su"</span>).click()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取click之后的url</span></span><br><span class="line">new_url = driver.current_url</span><br><span class="line"><span class="comment"># 获取Cookie</span></span><br><span class="line">cookies = driver.get_cookies()</span><br><span class="line">print(cookies)</span><br><span class="line"><span class="comment"># 字典推导式</span></span><br><span class="line">cookies = &#123;i[<span class="string">"name"</span>]: i[<span class="string">"value"</span>] <span class="keyword">for</span> i <span class="keyword">in</span> cookies&#125;</span><br><span class="line">print(cookies)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取html字符串</span></span><br><span class="line">html_str = driver.page_source   <span class="comment"># 浏览器中elements的内容</span></span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line"><span class="comment"># 退出当前页面</span></span><br><span class="line">driver.close()</span><br><span class="line"><span class="comment"># 退出浏览器</span></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure></div>



</li>
</ul>
<h3 id="案例-网站模拟登录"><a href="#案例-网站模拟登录" class="headerlink" title="案例-网站模拟登录"></a>案例-网站模拟登录</h3><p><strong>模拟登录豆瓣网</strong></p>
<p>打码平台</p>
<p>验证码</p>
<ul>
<li>url不变，验证码不变</li>
<li>url不变，验证码会变<ul>
<li>使用session1请求，获取验证码地址（这时验证码已经被请了一次 c1）,这时后台的session1与c1绑定</li>
<li>使用session1请求验证码，识别（这是第二次 c2）, 这时session1与c2的验证码在后台绑定了</li>
<li>session1发送post请求，将c2发到后台。</li>
<li>如果：使用request会怎样？2次请求是不同的session，对应不起来</li>
<li>另一种方法，截屏，然后截取验证码模块交给打码接口识别</li>
</ul>
</li>
</ul>
<h3 id="selenium补充"><a href="#selenium补充" class="headerlink" title="selenium补充"></a>selenium补充</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">driver = webdriver.Chrome(<span class="string">"./chromedriver"</span>)</span><br><span class="line"></span><br><span class="line">driver.get(<span class="string">"http://www.baidu.com"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">driver.find_element_by_xpath(<span class="string">""</span>).text</span><br><span class="line">driver.find_element_by_xpath(<span class="string">""</span>).get_attribute(<span class="string">"href"</span>)</span><br><span class="line">driver.find_elements_by_xpath(<span class="string">""</span>)   <span class="comment"># 返回list</span></span><br><span class="line">driver.find_element_by_link_text(<span class="string">"下一页&gt;"</span>).get_attribute(<span class="string">"href"</span>)</span><br><span class="line"><span class="comment"># 文本链接包含"下一页"</span></span><br><span class="line">driver.find_element_by_partial_link_text(<span class="string">"下一页"</span>).get_attribute(<span class="string">"href"</span>)</span><br><span class="line">driver.find_element_by_tag_name(<span class="string">"div"</span>)</span><br><span class="line">driver.find_element_by_class_name(<span class="string">""</span>)</span><br><span class="line">driver.find_element_by_css_selector(<span class="string">""</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到iframe</span></span><br><span class="line"><span class="comment"># 如果页面中含有iframe, frame ,需要先切换</span></span><br><span class="line">driver.switch_to.frame(<span class="string">"login_frame"</span>)</span><br><span class="line">driver.find_element_by_id(<span class="string">"u"</span>).send_keys(<span class="string">"123456"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># selenium翻页之后不会等待加载完毕，会直接获取数据，这时会报错</span></span><br><span class="line"><span class="comment"># 解决：time.sleep(3)</span></span><br></pre></td></tr></table></figure></div>



<h3 id="Tesseract简要"><a href="#Tesseract简要" class="headerlink" title="Tesseract简要"></a>Tesseract简要</h3><p>Tesseract</p>
<ul>
<li><p>Tesseract是一个将图像翻译成文字的OCR库(光学文字识别，Optical Character Recognition)</p>
</li>
<li><p>安装：<code>sudo apt-get install tesseract-ocr</code></p>
</li>
<li><p>在python中调用Tesseract：<code>pip3 install pytesseract</code></p>
</li>
<li><p>终端：<code>tesseract test.jpg text</code></p>
</li>
<li><p>py代码：</p>
<ul>
<li><p>demo</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pytesseract</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">image = Image.open(jpg)</span><br><span class="line">pytesseract.image_to_string(image)</span><br></pre></td></tr></table></figure></div>




</li>
</ul>
</li>
</ul>
<h3 id="案例-使用selenium爬豆瓣小组"><a href="#案例-使用selenium爬豆瓣小组" class="headerlink" title="案例-使用selenium爬豆瓣小组"></a>案例-使用selenium爬豆瓣小组</h3><p>略</p>
]]></content>
      <categories>
        <category>python爬虫</category>
      </categories>
      <tags>
        <tag>python爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>python-多任务（线程&amp;进程&amp;协程）</title>
    <url>/2019/02/27/20190227105838589/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[TOC]</p>
<h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><blockquote>
<p> python的thread模块是比较底层的模块，python的threading模块是对thread做了一些包装的，可以更加方便的被使用</p>
</blockquote>
<h2 id="使用threading模块"><a href="#使用threading模块" class="headerlink" title="使用threading模块"></a>使用threading模块</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 单线程</span></span><br><span class="line"><span class="comment"># import time</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># def saySorry():</span></span><br><span class="line"><span class="comment">#     print("多线程")</span></span><br><span class="line"><span class="comment">#     time.sleep(1)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># if __name__ == "__main__":</span></span><br><span class="line"><span class="comment">#     for i in range(5):</span></span><br><span class="line"><span class="comment">#         saySorry()</span></span><br><span class="line"><span class="comment"># 花费约5s</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多线程</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">saySorry</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"对不起"</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        t = threading.Thread(target=saySorry)</span><br><span class="line">        t.start() <span class="comment">#启动线程，即让线程开始执行</span></span><br><span class="line"><span class="comment"># 花费约1s</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以明显看出使用了多线程并发的操作，花费时间要短很多</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看线程数</span></span><br><span class="line">length = len(threading.enumerate())</span><br><span class="line">print(<span class="string">'当前运行的线程数为：%d'</span>%length)</span><br></pre></td></tr></table></figure></div>



<h2 id="线程代码的封装"><a href="#线程代码的封装" class="headerlink" title="线程代码的封装"></a>线程代码的封装</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 只要继承threading.Thread就可以了，然后重写run方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            msg = <span class="string">"I'm "</span>+self.name+<span class="string">' @ '</span>+str(i) <span class="comment">#name属性中保存的是当前线程的名字</span></span><br><span class="line">            print(msg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    t = MyThread()</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure></div>



<h2 id="共享全局变量"><a href="#共享全局变量" class="headerlink" title="共享全局变量"></a>共享全局变量</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">g_num = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> g_num</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        g_num += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">"----in work1, g_num is %d---"</span>%g_num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> g_num</span><br><span class="line">    print(<span class="string">"----in work2, g_num is %d---"</span>%g_num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">"---线程创建之前g_num is %d---"</span>%g_num)</span><br><span class="line"></span><br><span class="line">t1 = Thread(target=work1)</span><br><span class="line">t1.start()</span><br><span class="line"></span><br><span class="line"><span class="comment">#延时一会，保证t1线程中的事情做完</span></span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">t2 = Thread(target=work2)</span><br><span class="line">t2.start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># but: 线程是对全局变量随意遂改可能造成多线程之间对全局变量的混乱（即线程非安全）</span></span><br></pre></td></tr></table></figure></div>



<h3 id="线程安全问题"><a href="#线程安全问题" class="headerlink" title="线程安全问题"></a>线程安全问题</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果多个线程同时对同一个全局变量操作，会出现资源竞争问题，从而数据结果会不正确</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">g_num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work1</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> g_num</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">        g_num += <span class="number">1</span></span><br><span class="line">    print(<span class="string">"----in work1, g_num is %d---"</span>%g_num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work2</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> g_num</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">        g_num += <span class="number">1</span></span><br><span class="line">    print(<span class="string">"----in work2, g_num is %d---"</span>%g_num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">"---线程创建之前g_num is %d---"</span>%g_num)</span><br><span class="line"></span><br><span class="line">t1 = threading.Thread(target=work1, args=(<span class="number">1000000</span>,))</span><br><span class="line">t1.start()</span><br><span class="line"></span><br><span class="line">t2 = threading.Thread(target=work2, args=(<span class="number">1000000</span>,))</span><br><span class="line">t2.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> len(threading.enumerate()) != <span class="number">1</span>:</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"2个线程对同一个全局变量操作之后的最终结果是:%s"</span> % g_num)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---线程创建之前g_num is 0---</span></span><br><span class="line"><span class="comment"># ----in work1, g_num is 1206170---</span></span><br><span class="line"><span class="comment"># ----in work2, g_num is 1403387---</span></span><br><span class="line"><span class="comment"># 2个线程对同一个全局变量操作之后的最终结果是:1403387</span></span><br></pre></td></tr></table></figure></div>



<h2 id="同步互斥"><a href="#同步互斥" class="headerlink" title="同步互斥"></a>同步互斥</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建锁</span></span><br><span class="line">mutex = threading.Lock()</span><br><span class="line"><span class="comment"># 锁定</span></span><br><span class="line">mutex.acquire()</span><br><span class="line"><span class="comment"># 释放</span></span><br><span class="line">mutex.release()</span><br></pre></td></tr></table></figure></div>

<p>demo</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">g_num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> g_num</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">        mutex.acquire()  <span class="comment"># 上锁</span></span><br><span class="line">        g_num += <span class="number">1</span></span><br><span class="line">        mutex.release()  <span class="comment"># 解锁</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">"---test1---g_num=%d"</span>%g_num)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> g_num</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">        mutex.acquire()  <span class="comment"># 上锁</span></span><br><span class="line">        g_num += <span class="number">1</span></span><br><span class="line">        mutex.release()  <span class="comment"># 解锁</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">"---test2---g_num=%d"</span>%g_num)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个互斥锁</span></span><br><span class="line"><span class="comment"># 默认是未上锁的状态</span></span><br><span class="line">mutex = threading.Lock()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建2个线程，让他们各自对g_num加1000000次</span></span><br><span class="line">p1 = threading.Thread(target=test1, args=(<span class="number">1000000</span>,))</span><br><span class="line">p1.start()</span><br><span class="line"></span><br><span class="line">p2 = threading.Thread(target=test2, args=(<span class="number">1000000</span>,))</span><br><span class="line">p2.start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等待计算完成</span></span><br><span class="line"><span class="keyword">while</span> len(threading.enumerate()) != <span class="number">1</span>:</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"2个线程对同一个全局变量操作之后的最终结果是:%s"</span> % g_num)</span><br><span class="line"><span class="comment"># 包含锁的某段代码实际上只能以单线程模式执行，效率就大大地下降了</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">---test2---g_num=1839708</span></span><br><span class="line"><span class="string">---test1---g_num=2000000</span></span><br><span class="line"><span class="string">2个线程对同一个全局变量操作之后的最终结果是:2000000</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure></div>



<p>ps: 要避免死锁问题</p>
<h1 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h1><h2 id="进程的创建-multiprocessing"><a href="#进程的创建-multiprocessing" class="headerlink" title="进程的创建-multiprocessing"></a>进程的创建-multiprocessing</h2><blockquote>
<p>multiprocessing模块就是跨平台版本的多进程模块，提供了一个Process类来代表一个进程对象，这个对象可以理解为是一个独立的进程，可以执行另外的事情</p>
</blockquote>
<p>demo</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_proc</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""子进程要执行的代码"""</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        print(<span class="string">"----2----"</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    p = Process(target=run_proc)</span><br><span class="line">    p.start()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        print(<span class="string">"----1----"</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure></div>



<h3 id="进程pid"><a href="#进程pid" class="headerlink" title="进程pid"></a>进程pid</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_proc</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""子进程要执行的代码"""</span></span><br><span class="line">    print(<span class="string">'子进程运行中，pid=%d...'</span> % os.getpid())  <span class="comment"># os.getpid获取当前进程的进程号</span></span><br><span class="line">    print(<span class="string">'子进程将要结束...'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">'父进程pid: %d'</span> % os.getpid())  <span class="comment"># os.getpid获取当前进程的进程号</span></span><br><span class="line">    p = Process(target=run_proc)</span><br><span class="line">    p.start()</span><br></pre></td></tr></table></figure></div>



<h3 id="Process语法结构"><a href="#Process语法结构" class="headerlink" title="Process语法结构"></a>Process语法结构</h3><p>Process([group [, target [, name [, args [, kwargs]]]]])</p>
<ul>
<li>target：如果传递了函数的引用，可以任务这个子进程就执行这里的代码</li>
<li>args：给target指定的函数传递的参数，以元组的方式传递</li>
<li>kwargs：给target指定的函数传递命名参数</li>
<li>name：给进程设定一个名字，可以不设定</li>
<li>group：指定进程组，大多数情况下用不到</li>
</ul>
<p>Process创建的实例对象的常用方法：</p>
<ul>
<li>start()：启动子进程实例（创建子进程）</li>
<li>is_alive()：判断进程子进程是否还在活着</li>
<li>join([timeout])：是否等待子进程执行结束，或等待多少秒</li>
<li>terminate()：不管任务是否完成，立即终止子进程</li>
</ul>
<p>Process创建的实例对象的常用属性：</p>
<ul>
<li>name：当前进程的别名，默认为Process-N，N为从1开始递增的整数</li>
<li>pid：当前进程的pid（进程号）</li>
</ul>
<h3 id="给子进程指定的函数传递参数"><a href="#给子进程指定的函数传递参数" class="headerlink" title="给子进程指定的函数传递参数"></a>给子进程指定的函数传递参数</h3><p>demo</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_proc</span><span class="params">(name, age, **kwargs)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        print(<span class="string">'子进程运行中，name= %s,age=%d ,pid=%d...'</span> % (name, age, os.getpid()))</span><br><span class="line">        print(kwargs)</span><br><span class="line">        sleep(<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    p = Process(target=run_proc, args=(<span class="string">'test'</span>,<span class="number">18</span>), kwargs=&#123;<span class="string">"m"</span>:<span class="number">20</span>&#125;)</span><br><span class="line">    p.start()</span><br><span class="line">    sleep(<span class="number">1</span>)  <span class="comment"># 1秒中之后，立即结束子进程</span></span><br><span class="line">    p.terminate()</span><br><span class="line">    p.join()	<span class="comment"># 等待子进程执行结束</span></span><br></pre></td></tr></table></figure></div>



<p>ps:     进程间不同享全局变量</p>
<p>线程 vs 进程 : 线程和进程在使用上各有优缺点：线程执行开销小，但不利于资源的管理和保护；而进程正相反。</p>
<h2 id="进程间通信-Queue"><a href="#进程间通信-Queue" class="headerlink" title="进程间通信-Queue"></a>进程间通信-Queue</h2><blockquote>
<p>可以使用multiprocessing模块的Queue实现多进程之间的数据传递，Queue本身是一个消息列队程序</p>
</blockquote>
<p>Queue的使用</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Queue</span><br><span class="line">q=Queue(<span class="number">3</span>) <span class="comment">#初始化一个Queue对象，最多可接收三条put消息</span></span><br><span class="line">q.put(<span class="string">"消息1"</span>) </span><br><span class="line">q.put(<span class="string">"消息2"</span>)</span><br><span class="line">print(q.full())  <span class="comment">#False</span></span><br><span class="line">q.put(<span class="string">"消息3"</span>)</span><br><span class="line">print(q.full()) <span class="comment">#True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#因为消息列队已满下面的try都会抛出异常，第一个try会等待2秒后再抛出异常，第二个Try会立刻抛出异常</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    q.put(<span class="string">"消息4"</span>,<span class="literal">True</span>,<span class="number">2</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">"消息列队已满，现有消息数量:%s"</span>%q.qsize())</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    q.put_nowait(<span class="string">"消息4"</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">"消息列队已满，现有消息数量:%s"</span>%q.qsize())</span><br><span class="line"></span><br><span class="line"><span class="comment">#推荐的方式，先判断消息列队是否已满，再写入</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> q.full():</span><br><span class="line">    q.put_nowait(<span class="string">"消息4"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#读取消息时，先判断消息列队是否为空，再读取</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> q.empty():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(q.qsize()):</span><br><span class="line">        print(q.get_nowait())</span><br></pre></td></tr></table></figure></div>



<p>说明：</p>
<p>初始化Queue()对象时（例如：q=Queue()），若括号中没有指定最大可接收的消息数量，或数量为负值，那么就代表可接受的消息数量没有上限（直到内存的尽头）；</p>
<ul>
<li><p>Queue.qsize()：返回当前队列包含的消息数量；</p>
</li>
<li><p>Queue.empty()：如果队列为空，返回True，反之False ；</p>
</li>
<li><p>Queue.full()：如果队列满了，返回True,反之False；</p>
</li>
<li><p>Queue.get([block[, timeout]])：获取队列中的一条消息，然后将其从列队中移除，block默认值为True；</p>
<p>1）如果block使用默认值，且没有设置timeout（单位秒），消息列队如果为空，此时程序将被阻塞（停在读取状态），直到从消息列队读到消息为止，如果设置了timeout，则会等待timeout秒，若还没读取到任何消息，则抛出”Queue.Empty”异常；</p>
<p>2）如果block值为False，消息列队如果为空，则会立刻抛出”Queue.Empty”异常；</p>
</li>
<li><p>Queue.get_nowait()：相当Queue.get(False)；</p>
</li>
<li><p>Queue.put(item,[block[, timeout]])：将item消息写入队列，block默认值为True；</p>
<p>1）如果block使用默认值，且没有设置timeout（单位秒），消息列队如果已经没有空间可写入，此时程序将被阻塞（停在写入状态），直到从消息列队腾出空间为止，如果设置了timeout，则会等待timeout秒，若还没空间，则抛出”Queue.Full”异常；</p>
<p>2）如果block值为False，消息列队如果没有空间可写入，则会立刻抛出”Queue.Full”异常；</p>
</li>
<li><p>Queue.put_nowait(item)：相当Queue.put(item, False)；</p>
</li>
</ul>
<p>demo</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在父进程中创建两个子进程，一个往Queue里写数据，一个从Queue里读数据：</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Queue</span><br><span class="line"><span class="keyword">import</span> os, time, random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写数据进程执行的代码:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">(q)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>]:</span><br><span class="line">        print(<span class="string">'Put %s to queue...'</span> % value)</span><br><span class="line">        q.put(value)</span><br><span class="line">        time.sleep(random.random())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读数据进程执行的代码:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(q)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> q.empty():</span><br><span class="line">            value = q.get(<span class="literal">True</span>)</span><br><span class="line">            print(<span class="string">'Get %s from queue.'</span> % value)</span><br><span class="line">            time.sleep(random.random())</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 父进程创建Queue，并传给各个子进程：</span></span><br><span class="line">    q = Queue()</span><br><span class="line">    pw = Process(target=write, args=(q,))</span><br><span class="line">    pr = Process(target=read, args=(q,))</span><br><span class="line">    <span class="comment"># 启动子进程pw，写入:</span></span><br><span class="line">    pw.start()    </span><br><span class="line">    <span class="comment"># 等待pw结束:</span></span><br><span class="line">    pw.join()</span><br><span class="line">    <span class="comment"># 启动子进程pr，读取:</span></span><br><span class="line">    pr.start()</span><br><span class="line">    pr.join()</span><br><span class="line">    <span class="comment"># pr进程里是死循环，无法等待其结束，只能强行终止:</span></span><br><span class="line">    print(<span class="string">''</span>)</span><br><span class="line">    print(<span class="string">'所有数据都写入并且读完'</span>)</span><br></pre></td></tr></table></figure></div>



<h2 id="进程池Pool"><a href="#进程池Pool" class="headerlink" title="进程池Pool"></a>进程池Pool</h2><blockquote>
<p>当有新的请求提交到Pool中时，如果池还没有满，那么就会创建一个新的进程用来执行该请求；但如果池中的进程数已经达到指定的最大值，那么该请求就会等待，直到池中有进程结束，才会用之前的进程来执行新的任务</p>
</blockquote>
<p>demo</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">import</span> os, time, random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">worker</span><span class="params">(msg)</span>:</span></span><br><span class="line">    t_start = time.time()</span><br><span class="line">    print(<span class="string">"%s开始执行,进程号为%d"</span> % (msg,os.getpid()))</span><br><span class="line">    <span class="comment"># random.random()随机生成0~1之间的浮点数</span></span><br><span class="line">    time.sleep(random.random()*<span class="number">2</span>)</span><br><span class="line">    t_stop = time.time()</span><br><span class="line">    print(msg,<span class="string">"执行完毕，耗时%0.2f"</span> % (t_stop-t_start))</span><br><span class="line"></span><br><span class="line">po = Pool(<span class="number">3</span>)  <span class="comment"># 定义一个进程池，最大进程数3</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="comment"># Pool().apply_async(要调用的目标,(传递给目标的参数元祖,))</span></span><br><span class="line">    <span class="comment"># 每次循环将会用空闲出来的子进程去调用目标</span></span><br><span class="line">    po.apply_async(worker,(i,))</span><br><span class="line"></span><br><span class="line">print(<span class="string">"----start----"</span>)</span><br><span class="line">po.close()  <span class="comment"># 关闭进程池，关闭后po不再接收新的请求</span></span><br><span class="line">po.join()  <span class="comment"># 等待po中所有子进程执行完成，必须放在close语句之后</span></span><br><span class="line">print(<span class="string">"-----end-----"</span>)</span><br></pre></td></tr></table></figure></div>



<p>multiprocessing.Pool常用函数解析：</p>
<ul>
<li>apply_async(func[, args[, kwds]]) ：使用非阻塞方式调用func（并行执行，堵塞方式必须等待上一个进程退出才能执行下一个进程），args为传递给func的参数列表，kwds为传递给func的关键字参数列表；</li>
<li>close()：关闭Pool，使其不再接受新的任务；</li>
<li>terminate()：不管任务是否完成，立即终止；</li>
<li>join()：主进程阻塞，等待子进程的退出， 必须在close或terminate之后使用；</li>
</ul>
<h3 id="进程池中的Queue"><a href="#进程池中的Queue" class="headerlink" title="进程池中的Queue"></a>进程池中的Queue</h3><blockquote>
<p>如果要使用Pool创建进程，就需要使用multiprocessing.Manager()中的Queue()，而不是multiprocessing.Queue()，否则会得到的错误信息</p>
</blockquote>
<p>demo</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改import中的Queue为Manager</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Manager,Pool</span><br><span class="line"><span class="keyword">import</span> os,time,random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reader</span><span class="params">(q)</span>:</span></span><br><span class="line">    print(<span class="string">"reader启动(%s),父进程为(%s)"</span> % (os.getpid(), os.getppid()))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(q.qsize()):</span><br><span class="line">        print(<span class="string">"reader从Queue获取到消息：%s"</span> % q.get(<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">writer</span><span class="params">(q)</span>:</span></span><br><span class="line">    print(<span class="string">"writer启动(%s),父进程为(%s)"</span> % (os.getpid(), os.getppid()))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">"itcast"</span>:</span><br><span class="line">        q.put(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    print(<span class="string">"(%s) start"</span> % os.getpid())</span><br><span class="line">    q = Manager().Queue()  <span class="comment"># 使用Manager中的Queue</span></span><br><span class="line">    po = Pool()</span><br><span class="line">    po.apply_async(writer, (q,))</span><br><span class="line"></span><br><span class="line">    time.sleep(<span class="number">1</span>)  <span class="comment"># 先让上面的任务向Queue存入数据，然后再让下面的任务开始从中取数据</span></span><br><span class="line"></span><br><span class="line">    po.apply_async(reader, (q,))</span><br><span class="line">    po.close()</span><br><span class="line">    po.join()</span><br><span class="line">    print(<span class="string">"(%s) End"</span> % os.getpid())</span><br></pre></td></tr></table></figure></div>



<h1 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h1><blockquote>
<p>协程切换时，因为它自带CPU上下文，只要这个过程中保存或恢复 CPU上下文那么程序还是可以运行的。</p>
<p>协程和线程差异：在实现多任务时, 线程切换从系统层面远不止保存和恢复 CPU上下文这么简单。 操作系统为了程序运行的高效性每个线程都有自己缓存Cache等等数据，操作系统还会帮你做这些数据的恢复操作。 所以线程的切换非常耗性能。但是协程的切换只是单纯的操作CPU的上下文，所以一秒钟切换个上百万次系统都抗的住。</p>
</blockquote>
<h2 id="yield"><a href="#yield" class="headerlink" title="yield"></a>yield</h2><p>实现切换</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        print(<span class="string">"----work1---"</span>)</span><br><span class="line">        <span class="keyword">yield</span></span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        print(<span class="string">"----work2---"</span>)</span><br><span class="line">        <span class="keyword">yield</span></span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    w1 = work1()</span><br><span class="line">    w2 = work2()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        next(w1)</span><br><span class="line">        next(w2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></div>



<h2 id="greenlet"><a href="#greenlet" class="headerlink" title="greenlet"></a>greenlet</h2><blockquote>
<p>为了更好使用协程来完成多任务，python中的greenlet模块对其封装，从而使得切换任务变的更加简单</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> greenlet <span class="keyword">import</span> greenlet</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        print(<span class="string">"---A--"</span>)</span><br><span class="line">        gr2.switch()</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        print(<span class="string">"---B--"</span>)</span><br><span class="line">        gr1.switch()</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">gr1 = greenlet(test1)</span><br><span class="line">gr2 = greenlet(test2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#切换到gr1中运行</span></span><br><span class="line">gr1.switch()</span><br></pre></td></tr></table></figure></div>



<h2 id="gevent"><a href="#gevent" class="headerlink" title="gevent"></a>gevent</h2><blockquote>
<p>greenlet已经实现了协程，但是这个还的人工切换。python还有一个比greenlet更强大的并且能够自动切换任务的模块<code>gevent</code></p>
<p>其原理是当一个greenlet遇到IO(指的是input output 输入输出，比如网络、文件操作等)操作时，比如访问网络，就自动切换到其他的greenlet，等到IO操作完成，再在适当的时候切换回来继续执行。</p>
<p>由于IO操作非常耗时，经常使程序处于等待状态，有了gevent为我们自动切换协程，就保证总有greenlet在运行，而不是等待IO</p>
</blockquote>
<p>gevent的使用</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        print(gevent.getcurrent(), i)</span><br><span class="line"></span><br><span class="line">g1 = gevent.spawn(f, <span class="number">5</span>)</span><br><span class="line">g2 = gevent.spawn(f, <span class="number">5</span>)</span><br><span class="line">g3 = gevent.spawn(f, <span class="number">5</span>)</span><br><span class="line">g1.join()</span><br><span class="line">g2.join()</span><br><span class="line">g3.join()</span><br><span class="line"><span class="comment"># 可以看到，3个greenlet是依次运行而不是交替运行</span></span><br></pre></td></tr></table></figure></div>



<h3 id="gevent切换执行"><a href="#gevent切换执行" class="headerlink" title="gevent切换执行"></a>gevent切换执行</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        print(gevent.getcurrent(), i)</span><br><span class="line">        <span class="comment">#用来模拟一个耗时操作，注意不是time模块中的sleep</span></span><br><span class="line">        <span class="comment"># 会自动切换</span></span><br><span class="line">        <span class="comment"># time.sleep(1)无法切换</span></span><br><span class="line">        <span class="comment"># time.sleep(1)</span></span><br><span class="line">        gevent.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">g1 = gevent.spawn(f, <span class="number">5</span>)</span><br><span class="line">g2 = gevent.spawn(f, <span class="number">5</span>)</span><br><span class="line">g3 = gevent.spawn(f, <span class="number">5</span>)</span><br><span class="line">g1.join()</span><br><span class="line">g2.join()</span><br><span class="line">g3.join()</span><br></pre></td></tr></table></figure></div>



<p>如果使用time.sleep(1)， 但是想切换怎么办？ 打补丁</p>
<h3 id="给程序打补丁"><a href="#给程序打补丁" class="headerlink" title="给程序打补丁"></a>给程序打补丁</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey</span><br><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 有耗时操作时需要，加这句就会自动切换</span></span><br><span class="line">monkey.patch_all()  <span class="comment"># 将程序中用到的耗时操作的代码，换为gevent中自己实现的模块</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">coroutine_work</span><span class="params">(coroutine_name)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        print(coroutine_name, i)</span><br><span class="line">        time.sleep(random.random())</span><br><span class="line"></span><br><span class="line">gevent.joinall([</span><br><span class="line">        gevent.spawn(coroutine_work, <span class="string">"work1"</span>),</span><br><span class="line">        gevent.spawn(coroutine_work, <span class="string">"work2"</span>)</span><br><span class="line">])</span><br></pre></td></tr></table></figure></div>



<h3 id="并发下载原理"><a href="#并发下载原理" class="headerlink" title="并发下载原理"></a>并发下载原理</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey</span><br><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"><span class="comment"># 有耗时操作时需要</span></span><br><span class="line">monkey.patch_all()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_downLoad</span><span class="params">(url)</span>:</span></span><br><span class="line">    print(<span class="string">'GET: %s'</span> % url)</span><br><span class="line">    resp = urllib.request.urlopen(url)	<span class="comment"># 这是一个耗时操作，会切换协程</span></span><br><span class="line">    data = resp.read()</span><br><span class="line">    print(<span class="string">'%d bytes received from %s.'</span> % (len(data), url))</span><br><span class="line"></span><br><span class="line">gevent.joinall([</span><br><span class="line">        gevent.spawn(my_downLoad, <span class="string">'http://www.baidu.com/'</span>),</span><br><span class="line">        gevent.spawn(my_downLoad, <span class="string">'http://www.itcast.cn/'</span>),</span><br><span class="line">        gevent.spawn(my_downLoad, <span class="string">'http://www.itheima.com/'</span>),</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="string">'''运行结果</span></span><br><span class="line"><span class="string">GET: http://www.baidu.com/</span></span><br><span class="line"><span class="string">GET: http://www.itcast.cn/</span></span><br><span class="line"><span class="string">GET: http://www.itheima.com/</span></span><br><span class="line"><span class="string">111327 bytes received from http://www.baidu.com/.</span></span><br><span class="line"><span class="string">172054 bytes received from http://www.itheima.com/.</span></span><br><span class="line"><span class="string">215035 bytes received from http://www.itcast.cn/.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">从上能够看到是先发送的获取baidu的相关信息，然后依次是itcast、itheima，但是收到数据的先后顺序不一定与发送顺序相同，这也就体现出了异步，即不确定什么时候会收到数据，顺序不一定</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>python基础</tag>
      </tags>
  </entry>
  <entry>
    <title>python-正则表达式re模块</title>
    <url>/2019/02/25/20190225153607290/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="匹配单个字符"><a href="#匹配单个字符" class="headerlink" title="匹配单个字符"></a>匹配单个字符</h1><table>
<thead>
<tr>
<th>字符</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>.</td>
<td>匹配任意1个字符（除了\n）</td>
</tr>
<tr>
<td>[ ]</td>
<td>匹配[ ]中列举的字符</td>
</tr>
<tr>
<td>\d</td>
<td>匹配数字，即0-9</td>
</tr>
<tr>
<td>\D</td>
<td>匹配非数字，即不是数字</td>
</tr>
<tr>
<td>\s</td>
<td>匹配空白，即 空格，tab键</td>
</tr>
<tr>
<td>\S</td>
<td>匹配非空白</td>
</tr>
<tr>
<td>\w</td>
<td>匹配单词字符，即a-z、A-Z、0-9、_</td>
</tr>
<tr>
<td>\W</td>
<td>匹配非单词字符</td>
</tr>
</tbody></table>
<p>demo</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 匹配任意字符</span></span><br><span class="line">ret = re.match(<span class="string">"t.o"</span>,<span class="string">"two"</span>)</span><br><span class="line"><span class="comment"># 提取数据</span></span><br><span class="line">print(ret.group())</span><br><span class="line">ret = re.match(<span class="string">"速度与激情\d"</span>, <span class="string">"速度与激情8910哈哈哈123"</span>)</span><br><span class="line">print(ret.group())  <span class="comment"># "速度与激情8"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配[ ]中列举的字符</span></span><br><span class="line"><span class="comment"># 大小写都可以</span></span><br><span class="line">ret = re.match(<span class="string">"[hH]"</span>,<span class="string">"hello Python"</span>)</span><br><span class="line">ret = re.match(<span class="string">"[hH]ello Python"</span>,<span class="string">"Hello Python"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配0到9第一种写法</span></span><br><span class="line">ret = re.match(<span class="string">"[0123456789]Hello Python"</span>,<span class="string">"7Hello Python"</span>)</span><br><span class="line">ret = re.match(<span class="string">"[0-9]Hello Python"</span>,<span class="string">"7Hello Python"</span>)</span><br><span class="line"><span class="comment"># 匹配不到4</span></span><br><span class="line">ret = re.match(<span class="string">"[0-35-9]Hello Python"</span>,<span class="string">"7Hello Python"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配数字，即0-9</span></span><br><span class="line">ret = re.match(<span class="string">"嫦娥\d号"</span>,<span class="string">"嫦娥3号发射成功"</span>)</span><br></pre></td></tr></table></figure></div>



<h1 id="匹配多个字符"><a href="#匹配多个字符" class="headerlink" title="匹配多个字符"></a>匹配多个字符</h1><table>
<thead>
<tr>
<th>字符</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>*</td>
<td>匹配前一个字符出现0次或者无限次，即可有可无</td>
</tr>
<tr>
<td>+</td>
<td>匹配前一个字符出现1次或者无限次，即至少有1次</td>
</tr>
<tr>
<td>?</td>
<td>匹配前一个字符出现1次或者0次，即要么有1次，要么没有</td>
</tr>
<tr>
<td>{m}</td>
<td>匹配前一个字符出现m次</td>
</tr>
<tr>
<td>{m,n}</td>
<td>匹配前一个字符出现从m到n次</td>
</tr>
</tbody></table>
<p>demo</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一个字符串第一个字母为大小字符，后面都是小写字母并且这些小写字母可有可无</span></span><br><span class="line">ret = re.match(<span class="string">"[A-Z][a-z]*"</span>,<span class="string">"Aabcdef"</span>)</span><br><span class="line"><span class="comment"># 变量名是否有效：字母或下划线开头，后面跟任意字母数字下划线</span></span><br><span class="line">ret = re.match(<span class="string">"[a-zA-Z_]+[\w]*"</span>,name)</span><br><span class="line"><span class="comment"># 匹配出，0到99之间的数字</span></span><br><span class="line">ret = re.match(<span class="string">"[1-9]?[0-9]"</span>,<span class="string">"7"</span>)</span><br><span class="line">ret = re.match(<span class="string">"[1-9]?\d"</span>,<span class="string">"33"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配出，8到20位的密码，可以是大小写英文字母、数字、下划线</span></span><br><span class="line">ret = re.match(<span class="string">"[a-zA-Z0-9_]&#123;8,20&#125;"</span>,<span class="string">"1ad12f23s34455ff66"</span>)</span><br><span class="line"><span class="comment"># 6位</span></span><br><span class="line">ret = re.match(<span class="string">"[a-zA-Z0-9_]&#123;6&#125;"</span>,<span class="string">"12a3g45678"</span>)</span><br><span class="line">print(ret.group())  <span class="comment"># 12a3g4</span></span><br></pre></td></tr></table></figure></div>



<h1 id="匹配开头结尾"><a href="#匹配开头结尾" class="headerlink" title="匹配开头结尾"></a>匹配开头结尾</h1><table>
<thead>
<tr>
<th>字符</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>^</td>
<td>匹配字符串开头</td>
</tr>
<tr>
<td>$</td>
<td>匹配字符串结尾</td>
</tr>
</tbody></table>
<p>demo</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 邮箱 必须com结尾</span></span><br><span class="line">ret = re.match(<span class="string">"[\w]&#123;4,20&#125;@163\.com$"</span>, email)</span><br></pre></td></tr></table></figure></div>



<h1 id="匹配分组"><a href="#匹配分组" class="headerlink" title="匹配分组"></a>匹配分组</h1><table>
<thead>
<tr>
<th>字符</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>|</td>
<td>匹配左右任意一个表达式</td>
</tr>
<tr>
<td>(ab)</td>
<td>将括号中字符作为一个分组</td>
</tr>
<tr>
<td><code>\num</code></td>
<td>引用分组num匹配到的字符串</td>
</tr>
<tr>
<td><code>(?P&lt;name&gt;)</code></td>
<td>分组起别名</td>
</tr>
<tr>
<td>(?P=name)</td>
<td>引用别名为name分组匹配到的字符串</td>
</tr>
</tbody></table>
<p>demo</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 需求：匹配出0-100之间的数字</span></span><br><span class="line">ret = re.match(<span class="string">"[1-9]?\d$|100"</span>,<span class="string">"78"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需求：匹配出163、126、qq邮箱</span></span><br><span class="line">ret = re.match(<span class="string">"\w&#123;4,20&#125;@(163|126|qq)\.com"</span>, <span class="string">"test@qq.com"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取括号的值</span></span><br><span class="line"><span class="comment"># 提取区号和电话号码</span></span><br><span class="line">ret = re.match(<span class="string">"([^-]*)-(\d+)"</span>, <span class="string">"010-12345678"</span>)</span><br><span class="line">print(ret.group())      <span class="comment"># 010-12345678</span></span><br><span class="line">print(ret.group(<span class="number">1</span>))     <span class="comment"># 010</span></span><br><span class="line">print(ret.group(<span class="number">2</span>))     <span class="comment"># 12345678</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Python中字符串前面加上 r 表示原生字符串，不用担心是不是漏写了反斜杠</span></span><br><span class="line"><span class="comment"># \num 引用分组num匹配到的字符串</span></span><br><span class="line">ret = re.match(<span class="string">r"&lt;([a-zA-Z]*)&gt;\w*&lt;/\1&gt;"</span>, <span class="string">"&lt;html&gt;hh&lt;/html&gt;"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># (?P&lt;name&gt;) 分组起别名</span></span><br><span class="line"><span class="comment"># (?P=name) 引用别名为name分组匹配到的字符串</span></span><br><span class="line">ret = re.match(<span class="string">r"&lt;(?P&lt;name1&gt;\w*)&gt;&lt;(?P&lt;name2&gt;\w*)&gt;.*&lt;/(?P=name2)&gt;&lt;/(?P=name1)&gt;"</span>, <span class="string">"&lt;html&gt;&lt;h1&gt;www.itcast.cn&lt;/h1&gt;&lt;/html&gt;"</span>)</span><br></pre></td></tr></table></figure></div>



<h1 id="re模块高级用法-search-findall-sub-split"><a href="#re模块高级用法-search-findall-sub-split" class="headerlink" title="re模块高级用法: search\findall\sub\split?"></a>re模块高级用法: search\findall\sub\split?</h1><p>demo</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># search</span></span><br><span class="line"><span class="comment"># 需求：匹配出文章阅读的次数</span></span><br><span class="line">ret = re.search(<span class="string">r"\d+"</span>, <span class="string">"阅读次数为 9999"</span>)</span><br><span class="line">print(ret.group())	<span class="comment"># 9999</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># findall</span></span><br><span class="line"><span class="comment"># 需求：统计出python、c、c++相应文章阅读的次数</span></span><br><span class="line">ret = re.findall(<span class="string">r"\d+"</span>, <span class="string">"python = 9999, c = 7890, c++ = 12345"</span>)</span><br><span class="line">print(ret)	<span class="comment"># ['9999', '7890', '12345']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sub 将匹配到的数据进行替换</span></span><br><span class="line">ret = re.sub(<span class="string">r"\d+"</span>, <span class="string">'998'</span>, <span class="string">"python = 997"</span>)</span><br><span class="line">print(ret)	<span class="comment"># python = 998</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># split 根据匹配进行切割字符串，并返回一个列表</span></span><br><span class="line">ret = re.split(<span class="string">r":| "</span>,<span class="string">"info:xiaoZhang 33 shandong"</span>)</span><br><span class="line">print(ret)	<span class="comment"># ['info', 'xiaoZhang', '33', 'shandong']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 非贪婪操作符“？”，这个操作符可以用在"*","+","?"的后面，要求正则匹配的越少越好</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.match(<span class="string">r"aa(\d+)"</span>,<span class="string">"aa2343ddd"</span>).group(<span class="number">1</span>)</span><br><span class="line"><span class="string">'2343'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.match(<span class="string">r"aa(\d+?)"</span>,<span class="string">"aa2343ddd"</span>).group(<span class="number">1</span>)</span><br><span class="line"><span class="string">'2'</span></span><br><span class="line"><span class="comment"># ------</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">"This is a number 234-235-22-423"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r=re.match(<span class="string">".+(\d+-\d+-\d+-\d+)"</span>,s)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.group(<span class="number">1</span>)</span><br><span class="line"><span class="string">'4-235-22-423'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r=re.match(<span class="string">".+?(\d+-\d+-\d+-\d+)"</span>,s)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.group(<span class="number">1</span>)</span><br><span class="line"><span class="string">'234-235-22-423'</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>python基础</tag>
      </tags>
  </entry>
  <entry>
    <title>python爬虫(1)-爬虫基础&amp;数据提取</title>
    <url>/2019/02/20/20190220155214243/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>本文档由脑图导出，地址：<a href="http://naotu.baidu.com/file/3adea0eca05e3c3f081290142732313d?token=b14e7b97ee7411e0" target="_blank" rel="noopener">Spider脑图</a></p>
<p>参考：heima</p>
</blockquote>
<p>[TOC]</p>
<h1 id="Spider"><a href="#Spider" class="headerlink" title="Spider"></a>Spider</h1><h2 id="爬虫原理与数据抓取"><a href="#爬虫原理与数据抓取" class="headerlink" title="爬虫原理与数据抓取"></a>爬虫原理与数据抓取</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><h4 id="通用爬虫和聚焦爬虫"><a href="#通用爬虫和聚焦爬虫" class="headerlink" title="通用爬虫和聚焦爬虫"></a>通用爬虫和聚焦爬虫</h4><h4 id="HTTP和HTTPS"><a href="#HTTP和HTTPS" class="headerlink" title="HTTP和HTTPS"></a>HTTP和HTTPS</h4><h4 id="str和bytes的区别"><a href="#str和bytes的区别" class="headerlink" title="str和bytes的区别"></a>str和bytes的区别</h4><h3 id="Requests库"><a href="#Requests库" class="headerlink" title="Requests库"></a>Requests库</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># requests简单实用</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">kw = &#123;<span class="string">'wd'</span>:<span class="string">'长城'</span>&#125;</span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># params 接收一个字典或者字符串的查询参数，字典类型自动转换为url编码，不需要urlencode()</span></span><br><span class="line">response = requests.get(<span class="string">"http://www.baidu.com/s?"</span>, params = kw, headers = headers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看响应内容，response.text 返回的是Unicode格式的数据</span></span><br><span class="line"><span class="comment"># print(response.text)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看响应内容，response.content返回的字节流数据</span></span><br><span class="line"><span class="comment"># print(response.content)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看完整url地址</span></span><br><span class="line">print(response.url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看响应头部字符编码</span></span><br><span class="line">print(response.encoding)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看响应码</span></span><br><span class="line">print(response.status_code)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">更推荐使用response.content.deocde()代替response.text</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 爬图片</span></span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO,StringIO</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">img_url = <span class="string">"http://imglf1.ph.126.net/pWRxzh6FRrG2qVL3JBvrDg==/6630172763234505196.png"</span></span><br><span class="line">response = requests.get(img_url)</span><br><span class="line">f = BytesIO(response.content)</span><br><span class="line">img = Image.open(f)</span><br><span class="line">print(img.size)</span><br></pre></td></tr></table></figure></div>

<h4 id="贴吧爬虫"><a href="#贴吧爬虫" class="headerlink" title="贴吧爬虫"></a>贴吧爬虫</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 功能：爬贴吧数据，存n页的html内容</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TiebaSpider</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, tieba_name)</span>:</span></span><br><span class="line">        self.tieba_name = tieba_name</span><br><span class="line">        self.url_temp = <span class="string">"http://tieba.baidu.com/f?kw="</span>+tieba_name+<span class="string">"&amp;ie=utf-8&amp;pn=&#123;&#125;"</span></span><br><span class="line">        self.headers = &#123;<span class="string">"User-Agent"</span> : <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.109 Safari/537.36"</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_url_list</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""构造url_list 1000页"""</span></span><br><span class="line">        <span class="comment"># url_list = []</span></span><br><span class="line">        <span class="comment"># for i in range(1000):</span></span><br><span class="line">        <span class="comment">#     url_list.append(self.url_temp.format(i*50))</span></span><br><span class="line">        <span class="comment"># return url_list</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> [self.url_temp.format(i * <span class="number">50</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_url</span><span class="params">(self, url)</span>:</span></span><br><span class="line">        <span class="string">"""请求，返回响应内容 content"""</span></span><br><span class="line">        print(url)</span><br><span class="line">        response = requests.get(url, headers=self.headers)</span><br><span class="line">        <span class="keyword">return</span> response.content.decode()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save_html</span><span class="params">(self, html_str, page_num)</span>:</span></span><br><span class="line">        <span class="string">"""保存文档"""</span></span><br><span class="line">        file_path = <span class="string">"&#123;&#125;-第&#123;&#125;页.html"</span>.format(self.tieba_name, page_num)</span><br><span class="line">        <span class="keyword">with</span> open(file_path, <span class="string">"w"</span>, encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(html_str)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 1 构造url_list 1000页</span></span><br><span class="line">        url_list = self.get_url_list()</span><br><span class="line">        <span class="comment"># 2 请求，返回响应内容 content</span></span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> url_list:</span><br><span class="line">            html_str = self.parse_url(url)</span><br><span class="line">            <span class="comment"># 3 保存文档</span></span><br><span class="line">            page_num = url_list.index(url) + <span class="number">1</span>  <span class="comment"># 页码</span></span><br><span class="line">            self.save_html(html_str, page_num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    tieba_spider = TiebaSpider(<span class="string">"java"</span>)</span><br><span class="line">    tieba_spider.run()</span><br><span class="line"></span><br><span class="line"><span class="string">"""note</span></span><br><span class="line"><span class="string">为什么需要在headers添加User-Agent？</span></span><br><span class="line"><span class="string">- 模拟一个真实的浏览器，以免被后台服务器认为是机器</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">range(10)</span></span><br><span class="line"><span class="string">- [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">列表推导式</span></span><br><span class="line"><span class="string">- [self.url_temp.format(i * 50) for i in range(1000)]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">with open(file_path, "w", encoding="utf-8") as f</span></span><br><span class="line"><span class="string">- 简化写法，避免每次读写文件都要在finally里面close()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">为什么返回结果出现大量注释，但是原网页可以看见界面？</span></span><br><span class="line"><span class="string">- 查看原网页的源码后，发现源码就注释了的</span></span><br><span class="line"><span class="string">- 可能是后台服务器解析html时手动去掉了注释 `&lt;!-- --&gt;`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure></div>

<h4 id="发送post请求"><a href="#发送post请求" class="headerlink" title="发送post请求"></a>发送post请求</h4><h4 id="使用代理"><a href="#使用代理" class="headerlink" title="使用代理"></a>使用代理</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用代理ip爬虫</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">proxies = &#123;<span class="string">"http"</span>: <span class="string">"http://117.191.11.72:8080"</span>&#125;</span><br><span class="line">url = <span class="string">"http://www.baidu.com"</span></span><br><span class="line">headers = &#123;<span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.109 Safari/537.36"</span>&#125;</span><br><span class="line">r = requests.get(url, headers=headers, proxies=proxies)</span><br><span class="line">print(r.status_code)</span><br><span class="line"></span><br><span class="line"><span class="string">"""note</span></span><br><span class="line"><span class="string">代理商网址：https://proxy.mimvp.com/freeopen.php</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">为什么爬虫要使用代理？</span></span><br><span class="line"><span class="string">- 让服务器以为不是同一个客户端</span></span><br><span class="line"><span class="string">- 防止真实地址被泄露</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">使用代理ip</span></span><br><span class="line"><span class="string">- 准备一堆ip地址，组成ip池</span></span><br><span class="line"><span class="string">- 如何随机选择ip。让使用次数少的ip地址有更大的可能性被用到</span></span><br><span class="line"><span class="string">    - &#123;"ip":"ip","times":0&#125;</span></span><br><span class="line"><span class="string">    - [&#123;&#125;,&#123;&#125;,&#123;&#125;]对列表按次数进行排序，选使用次数少的10个IP，从中随机选一个</span></span><br><span class="line"><span class="string">- 检测ip可用性</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure></div>

<h4 id="模拟登陆"><a href="#模拟登陆" class="headerlink" title="模拟登陆"></a>模拟登陆</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 登录人人网</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">session = requests.session()</span><br><span class="line">post_url = <span class="string">"http://www.renren.com/PLogin.do"</span></span><br><span class="line">post_data = &#123;<span class="string">"email"</span>:<span class="string">"XXX"</span>, <span class="string">"password"</span>:<span class="string">"XXX"</span>&#125;</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.84 Safari/537.36"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#使用session发送post请求，cookie保存在其中</span></span><br><span class="line">session.post(post_url,data=post_data,headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="comment">#在使用session进行请求登陆之后才能访问的地址</span></span><br><span class="line">r = session.get(<span class="string">"http://www.renren.com/327550029/profile"</span>,headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="comment">#保存页面</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"renren1.html"</span>,<span class="string">"w"</span>,encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(r.content.decode())</span><br><span class="line">    </span><br><span class="line"><span class="string">"""note</span></span><br><span class="line"><span class="string">爬虫携带cookie</span></span><br><span class="line"><span class="string">- 一堆cookie请求，组成cookie池</span></span><br><span class="line"><span class="string">    - 后台若判断同一个用户频繁请求，可能会拦截</span></span><br><span class="line"><span class="string">- 请求登陆后的网站需要携带cookie</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 请求登录后网站思路</span></span><br><span class="line"><span class="string">    - (1)</span></span><br><span class="line"><span class="string">    - 使用session发送请求，将返回的cookie保存在session中</span></span><br><span class="line"><span class="string">    - 再使用该session请求网站，session会自动携带cookie进行请求</span></span><br><span class="line"><span class="string">    - (2)</span></span><br><span class="line"><span class="string">    - 直接在headers里携带cookie进行登录</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 字典推导式</span></span><br><span class="line"><span class="string">    - `cookies = &#123;i.split("=")[0]:i.split("=")[1] for i in cookies.split("; ")&#125;`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 模拟登录三种方式</span></span><br><span class="line"><span class="string">    - 使用session发送post</span></span><br><span class="line"><span class="string">    - 在headers添加cookie键</span></span><br><span class="line"><span class="string">        headers = &#123;</span></span><br><span class="line"><span class="string">            "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.84 Safari/537.36",</span></span><br><span class="line"><span class="string">            "Cookie":"XXX"&#125;</span></span><br><span class="line"><span class="string">        r = requests.get("http://www.renren.com/327550029/profile",headers=headers)`</span></span><br><span class="line"><span class="string">    - 在请求方法中添加cookie参数</span></span><br><span class="line"><span class="string">        - r = requests.get("http://www.renren.com/327550029/profile",headers=headers,cookies=cookies)</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure></div>

<h4 id="保存图片"><a href="#保存图片" class="headerlink" title="保存图片"></a>保存图片</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 保存图片（二进制文件）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">r = requests.get(<span class="string">"https://www.baidu.com/img/bd_logo1.png"</span>)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"logo.png"</span>,<span class="string">"wb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(r.content)</span><br></pre></td></tr></table></figure></div>

<h4 id="requests的小技巧"><a href="#requests的小技巧" class="headerlink" title="requests的小技巧"></a>requests的小技巧</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""note</span></span><br><span class="line"><span class="string">- 处理HTTPS请求 SSL证书验证</span></span><br><span class="line"><span class="string">    - "你的链接不是私密链接" "SSLError"</span></span><br><span class="line"><span class="string">    - r = requests.get("https://www.12306.cn/mormhweb/", verify = False)</span></span><br><span class="line"><span class="string">- 设置超时</span></span><br><span class="line"><span class="string">    - r = requests.get(url, timeout = 10)</span></span><br><span class="line"><span class="string">- 请求异常的处理    </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 请求异常的处理 重试机制</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> retrying <span class="keyword">import</span> retry</span><br><span class="line"></span><br><span class="line">headers=&#123;<span class="string">"User-Agent"</span>:<span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.84 Safari/537.36"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@retry(stop_max_attempt_number=3)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_parse_url</span><span class="params">(url,method,data,proxies)</span>:</span></span><br><span class="line">    print(<span class="string">"*"</span>*<span class="number">20</span>)</span><br><span class="line">    <span class="keyword">if</span> method==<span class="string">"POST"</span>:</span><br><span class="line">        response = requests.post(url,data=data,headers=headers,proxies=proxies)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        response = requests.get(url,headers=headers,timeout=<span class="number">3</span>,proxies=proxies)</span><br><span class="line">    <span class="keyword">assert</span>  response.status_code == <span class="number">200</span></span><br><span class="line">    <span class="keyword">return</span> response.content.decode()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_url</span><span class="params">(url,method=<span class="string">"GET"</span>,data=None,proxies=&#123;&#125;)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        html_str = _parse_url(url,method,data,proxies)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        html_str = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> html_str</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    url = <span class="string">"www.baidu.com"</span></span><br><span class="line">    print(parse_url(url))</span><br></pre></td></tr></table></figure></div>

<h3 id="chrome抓包的技巧"><a href="#chrome抓包的技巧" class="headerlink" title="chrome抓包的技巧"></a>chrome抓包的技巧</h3><h2 id="爬虫数据提取"><a href="#爬虫数据提取" class="headerlink" title="爬虫数据提取"></a>爬虫数据提取</h2><h3 id="数据的分类"><a href="#数据的分类" class="headerlink" title="数据的分类"></a>数据的分类</h3><ul>
<li>结构化数据<ul>
<li>处理方法：正则、xpath</li>
</ul>
</li>
<li>非结构化数据<ul>
<li>处理方法：转化为python数据类型</li>
</ul>
</li>
</ul>
<h3 id="json数据处理"><a href="#json数据处理" class="headerlink" title="json数据处理"></a>json数据处理</h3><h4 id="类型转化"><a href="#类型转化" class="headerlink" title="类型转化"></a>类型转化</h4><ul>
<li><p>如何找到json的url</p>
</li>
<li><p>使用手机版</p>
</li>
<li><p>提取方法</p>
<ul>
<li><p>python数据类型 = json.loads(json字符串)</p>
</li>
<li><p>json字符串 = json.dumps(python数据类型)</p>
</li>
<li><p>python数据类型 = json.loads(包含json的类文件对象)</p>
</li>
<li><p>json字符串 = json.dumps(python数据类型)</p>
</li>
<li><p>ps: 具有read()或者write()方法的对象就是类文件对象<br> f = open(“a.txt”,”r”) f就是类文件对象</p>
</li>
</ul>
</li>
<li><p>demo</p>
  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> parse_url <span class="keyword">import</span> parse_url</span><br><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint</span><br><span class="line"></span><br><span class="line">url = <span class="string">"https://m.douban.com/rexxar/api/v2/subject_collection/movie_showing/items?start=0&amp;count=18&amp;loc_id=108288"</span></span><br><span class="line">html_str = parse_url(url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># json.loads把json字符串转化为python类型</span></span><br><span class="line">ret1 = json.loads(html_str)</span><br><span class="line"><span class="comment"># pprint(ret1)  # 格式化输出</span></span><br><span class="line"><span class="comment"># print(type(ret1))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># json.dumps能够把python类型转化为json字符串</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"douban.json"</span>,<span class="string">"w"</span>,encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="comment"># ensure_ascii 中文编码   indent 格式化json 4个空格</span></span><br><span class="line">    f.write(json.dumps(ret1,ensure_ascii=<span class="literal">False</span>,indent=<span class="number">4</span>))</span><br><span class="line">    <span class="comment"># f.write(str(ret1))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># with open("douban.json","r",encoding="utf-8") as f:</span></span><br><span class="line"><span class="comment">#     ret2 = f.read()</span></span><br><span class="line"><span class="comment">#     ret3 = json.loads(ret2)</span></span><br><span class="line"><span class="comment">#     print(ret3)</span></span><br><span class="line"><span class="comment">#     print(type(ret3)) </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用json.load提取类文件对象中的数据</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"douban.json"</span>,<span class="string">"r"</span>,encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    ret4 = json.load(f)</span><br><span class="line">    print(ret4)</span><br><span class="line">    print(type(ret4))</span><br><span class="line"></span><br><span class="line"><span class="comment">#json.dump能够把python类型放入类文件对象中</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"douban1.json"</span>,<span class="string">"w"</span>,encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    json.dump(ret1,f,ensure_ascii=<span class="literal">False</span>,indent=<span class="number">2</span>)</span><br></pre></td></tr></table></figure></div>

</li>
</ul>
<h4 id="正则过滤获取json"><a href="#正则过滤获取json" class="headerlink" title="正则过滤获取json"></a>正则过滤获取json</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> parse_url <span class="keyword">import</span> parse_url</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://36kr.com/"</span></span><br><span class="line">html_str = parse_url(url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正则匹配 </span></span><br><span class="line">ret = re.findall(<span class="string">"&lt;script&gt;var props=(.*?),locationnal="</span>,html_str)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"36kr.json"</span>,<span class="string">"w"</span>,encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(ret)</span><br><span class="line"></span><br><span class="line">ret = json.loads(ret)</span><br><span class="line">print(ret)</span><br></pre></td></tr></table></figure></div>

<h3 id="正则处理数据"><a href="#正则处理数据" class="headerlink" title="正则处理数据"></a>正则处理数据</h3><h4 id="正则表达式基础"><a href="#正则表达式基础" class="headerlink" title="正则表达式基础"></a>正则表达式基础</h4><ul>
<li>参考 <a href="https://machine4869.gitee.io/blog/2019/02/25/20190225153607290/">python-正则表达式re模块</a></li>
</ul>
<h4 id="案例-豆瓣小组爬虫"><a href="#案例-豆瓣小组爬虫" class="headerlink" title="案例-豆瓣小组爬虫"></a>案例-豆瓣小组爬虫</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 爬豆瓣某小组的讨论 title</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;a href="https://www.douban.com/group/topic/134170743/" title="广州演唱会是几号？"</span></span><br><span class="line"><span class="comment"># r"&lt;a href=\"https://www.douban.com/group/topic/.*?/\" title=\"(.*?)\""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DBXiaozuSpider</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.url_temp = <span class="string">"https://www.douban.com/group/649504/discussion?start=&#123;&#125;"</span></span><br><span class="line">        self.headers = &#123;</span><br><span class="line">            <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.109 Safari/537.36"</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_url</span><span class="params">(self, page_num)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.url_temp.format((page_num<span class="number">-1</span>) * <span class="number">25</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_url</span><span class="params">(self, url)</span>:</span></span><br><span class="line">        print(url)</span><br><span class="line">        r = requests.get(url, headers=self.headers)</span><br><span class="line">        <span class="keyword">return</span> r.content.decode()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_content_list</span><span class="params">(self, html_str)</span>:</span></span><br><span class="line">        title_list = re.findall(<span class="string">r"&lt;a href=\"https://www.douban.com/group/topic/.*?/\" title=\"(.*?)\""</span>, html_str)</span><br><span class="line">        <span class="keyword">return</span> title_list</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save_content_list</span><span class="params">(self, title_list, page_num)</span>:</span></span><br><span class="line">        <span class="comment"># a: 追加</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">"title_list.txt"</span>, <span class="string">"a"</span>, encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> title <span class="keyword">in</span> title_list:</span><br><span class="line">                index = (page_num<span class="number">-1</span>) * <span class="number">25</span> + title_list.index(title) + <span class="number">1</span></span><br><span class="line">                title_line = <span class="string">"&#123;&#125; &#123;&#125;"</span>.format(index, title)</span><br><span class="line">                f.write(title_line + <span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        page_num = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            page_num += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 1 start_url</span></span><br><span class="line">            url = self.start_url(page_num)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 2 parse_url</span></span><br><span class="line">            html_str = self.parse_url(url)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 3 get_content_list</span></span><br><span class="line">            title_list = self.get_content_list(html_str)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 4 save_content_list</span></span><br><span class="line">            self.save_content_list(title_list, page_num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    db_xiaozu_spider = DBXiaozuSpider()</span><br><span class="line">    db_xiaozu_spider.run()</span><br></pre></td></tr></table></figure></div>

<h3 id="xpath处理数据"><a href="#xpath处理数据" class="headerlink" title="xpath处理数据"></a>xpath处理数据</h3><h4 id="xpath"><a href="#xpath" class="headerlink" title="xpath"></a>xpath</h4><p>获取某贴吧的 标题 url 图片</p>
<ul>
<li><p>chrome工具：xpath helper</p>
</li>
<li><p>常用语法：</p>
<p>获取文本 <code>a/text()</code><br>获取属性 <code>a/@href</code><br>当前目录 <code>/.</code><br>上一级 <code>/..</code><br>不考虑位置 <code>//ul[@id=&quot;detail-list&quot;]/li</code><br>选列表中某一个<br>​    第一个 <code>//div[@id=&#39;page&#39;]/a[1]</code><br>​    最后一个 <code>//div[@id=&#39;page&#39;]/a[last()]</code><br>​    倒数第2个 <code>//div[@id=&#39;page&#39;]/a[last()-1]</code><br>​    前3个 <code>//div[@id=&#39;page&#39;]/a[position&lt;4]</code><br>任意节点<br>​    <code>//*[id=&#39;page&#39;]</code><br>​    <code>//node()[id=&#39;page&#39;]</code><br>或 <code>|</code><br>​    <code>//div[@id=&#39;page&#39;]/a[1] | //div[@id=&#39;page&#39;]/a[3]</code></p>
<p>包含</p>
<pre><code>class包含i的div `//div[contains(@class,&apos;i&apos;)]`</code></pre></li>
</ul>
<h4 id="lxml"><a href="#lxml" class="headerlink" title="lxml"></a>lxml</h4><p>lxml</p>
<ul>
<li><p>能自动修正格式不规范的html代码</p>
</li>
<li><p>demo</p>
  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">text = <span class="string">''' &lt;div&gt; &lt;ul&gt; </span></span><br><span class="line"><span class="string">        &lt;li class="item-1"&gt;&lt;a&gt;first item&lt;/a&gt;&lt;/li&gt; </span></span><br><span class="line"><span class="string">        &lt;li class="item-1"&gt;&lt;a href="link2.html"&gt;second item&lt;/a&gt;&lt;/li&gt; </span></span><br><span class="line"><span class="string">        &lt;li class="item-inactive"&gt;&lt;a href="link3.html"&gt;third item&lt;/a&gt;&lt;/li&gt; </span></span><br><span class="line"><span class="string">        &lt;li class="item-1"&gt;&lt;a href="link4.html"&gt;fourth item&lt;/a&gt;&lt;/li&gt; </span></span><br><span class="line"><span class="string">        &lt;li class="item-0"&gt;&lt;a href="link5.html"&gt;fifth item&lt;/a&gt;  </span></span><br><span class="line"><span class="string">        &lt;/ul&gt; &lt;/div&gt; '''</span></span><br><span class="line"></span><br><span class="line">html = etree.HTML(text)</span><br><span class="line">print(html)</span><br><span class="line"><span class="comment">#查看element对象中包含的字符串</span></span><br><span class="line"><span class="comment"># print(etree.tostring(html).decode())</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取class为item-1 li下的a的herf</span></span><br><span class="line">ret1 = html.xpath(<span class="string">"//li[@class='item-1']/a/@href"</span>)</span><br><span class="line">print(ret1)</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取class为item-1 li下的a的文本</span></span><br><span class="line">ret2 = html.xpath(<span class="string">"//li[@class='item-1']/a/text()"</span>)</span><br><span class="line">print(ret2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#每个li是一条新闻，把url和文本组成字典</span></span><br><span class="line"><span class="keyword">for</span> href <span class="keyword">in</span> ret1:</span><br><span class="line">    item = &#123;&#125;</span><br><span class="line">    item[<span class="string">"href"</span>] = href</span><br><span class="line">    item[<span class="string">"title"</span>] = ret2[ret1.index(href)]</span><br><span class="line">    print(item)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"*"</span>*<span class="number">100</span>)</span><br><span class="line"><span class="comment">#分组，根据li标签进行分组，对每一组继续写xpath</span></span><br><span class="line">ret3 = html.xpath(<span class="string">"//li[@class='item-1']"</span>)</span><br><span class="line">print(ret3)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ret3:</span><br><span class="line">    item=  &#123;&#125;</span><br><span class="line">    item[<span class="string">"title"</span>] = i.xpath(<span class="string">"a/text()"</span>)[<span class="number">0</span>] <span class="keyword">if</span> len(i.xpath(<span class="string">"./a/text()"</span>))&gt;<span class="number">0</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">    item[<span class="string">"href"</span>] = i.xpath(<span class="string">"./a/@href"</span>)[<span class="number">0</span>] <span class="keyword">if</span> len( i.xpath(<span class="string">"./a/@href"</span>))&gt;<span class="number">0</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">    print(item)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>用xpath改进豆瓣小组爬虫</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_content_list</span><span class="params">(self, html_str)</span>:</span></span><br><span class="line"><span class="comment"># 变成对象</span></span><br><span class="line">html = etree.HTML(html_str)</span><br><span class="line">title_list = html.xpath(<span class="string">"//table[@class='olt']//tr/td/a/@title"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> title_list</span><br></pre></td></tr></table></figure></div>




</li>
</ul>
<h2 id="通用爬虫案例"><a href="#通用爬虫案例" class="headerlink" title="通用爬虫案例"></a>通用爬虫案例</h2><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>贴吧爬虫</p>
<ul>
<li>保存 每条贴吧的 title\ url\ 每条贴吧里所有img的url</li>
<li>demo ：略</li>
</ul>
<p>糗百爬虫</p>
<ul>
<li>demo：略</li>
</ul>
<h3 id="爬虫思路总结"><a href="#爬虫思路总结" class="headerlink" title="爬虫思路总结"></a>爬虫思路总结</h3><p>实现爬虫的套路</p>
<ul>
<li><p>准备url</p>
<ul>
<li>准备start_url<ul>
<li>url地址规律不明显，总数不确定</li>
<li>通过代码提取下一页的url<ul>
<li>xpath</li>
<li>寻找url地址，部分参数在当前的响应中（比如，当前页码数和总的页码数在当前的响应中）</li>
</ul>
</li>
</ul>
</li>
<li>准备url_list<ul>
<li>页码总数明确</li>
<li>url地址规律明显</li>
</ul>
</li>
</ul>
</li>
<li><p>发送请求，获取响应</p>
<ul>
<li>添加随机的User-Agent,反反爬虫</li>
<li>添加随机的代理ip，反反爬虫</li>
<li>在对方判断出我们是爬虫之后，应该添加更多的headers字段，包括cookie</li>
<li>cookie的处理可以使用session来解决</li>
<li>准备一堆能用的cookie，组成cookie池<ul>
<li>如果不登录<ul>
<li>准备刚开始能够成功请求对方网站的cookie，即接收对方网站设置在response的cookie</li>
<li>下一次请求的时候，使用之前的列表中的cookie来请求</li>
</ul>
</li>
<li>如果登录<ul>
<li>准备多个账号</li>
<li>使用程序获取每个账号的cookie</li>
<li>之后请求登录之后才能访问的网站随机的选择cookie</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>提取数据</p>
<ul>
<li><p>确定数据的位置</p>
<ul>
<li><p>如果数据在当前的url地址中</p>
<ul>
<li>提取的是列表页的数据<ul>
<li>直接请求列表页的url地址，不用进入详情页</li>
</ul>
</li>
<li>提取的是详情页的数据<ul>
<li><ol>
<li>确定url</li>
</ol>
</li>
<li><ol start="2">
<li>发送请求</li>
</ol>
</li>
<li><ol start="3">
<li>提取数据</li>
</ol>
</li>
<li><ol start="4">
<li>返回</li>
</ol>
</li>
</ul>
</li>
</ul>
</li>
<li><p>如果数据不在当前的url地址中</p>
<ul>
<li>在其他的响应中，寻找数据的位置<ul>
<li><ol>
<li>从network中从上往下找</li>
</ol>
</li>
<li><ol start="2">
<li>使用chrome中的过滤条件，选择出了js,css,img之外的按钮</li>
</ol>
</li>
<li><ol start="3">
<li>使用chrome的search all file，搜索数字和英文</li>
</ol>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>数据的提取</p>
<ul>
<li>xpath,从html中提取整块的数据，先分组，之后每一组再提取</li>
<li>re，提取max_time,price,html中的json字符串</li>
<li>json</li>
</ul>
</li>
</ul>
</li>
<li><p>保存</p>
<ul>
<li>保存在本地，text,json,csv</li>
<li>保存在数据库</li>
</ul>
</li>
</ul>
<h3 id="多线程爬虫"><a href="#多线程爬虫" class="headerlink" title="多线程爬虫"></a>多线程爬虫</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 爬10页豆瓣某小组的内容，使用多线程</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DBSpider</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.url_temp = <span class="string">"http://www.douban.com/group/649504/discussion?start=&#123;&#125;"</span></span><br><span class="line">        self.headers = &#123;</span><br><span class="line">            <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.109 Safari/537.36"</span>&#125;</span><br><span class="line">        self.proxies = &#123;<span class="string">"http"</span>: <span class="string">"http://117.191.11.72:8080"</span>&#125;</span><br><span class="line">        self.url_queue = Queue()</span><br><span class="line">        self.html_queue = Queue()</span><br><span class="line">        self.content_queue = Queue()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_url_list</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">            url = self.url_temp.format(i * <span class="number">25</span>)</span><br><span class="line">            self.url_queue.put(url)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_url</span><span class="params">(self)</span>:</span>    <span class="comment"># 守护线程</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            url = self.url_queue.get()</span><br><span class="line">            print(<span class="string">"GET请求："</span>, url)</span><br><span class="line">            r = requests.get(url, headers=self.headers, proxies=self.proxies)</span><br><span class="line">            self.html_queue.put(r.content.decode())</span><br><span class="line">            self.url_queue.task_done()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_content_list</span><span class="params">(self)</span>:</span>  <span class="comment"># 守护线程</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            html_str = self.html_queue.get()</span><br><span class="line">            html = etree.HTML(html_str)</span><br><span class="line">            title_list = html.xpath(<span class="string">"//table[@class='olt']//tr/td/a/@title"</span>)</span><br><span class="line">            <span class="keyword">for</span> title <span class="keyword">in</span> title_list:</span><br><span class="line">                self.content_queue.put(title)</span><br><span class="line">            self.html_queue.task_done()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save_content_list</span><span class="params">(self)</span>:</span>    <span class="comment"># 守护线程</span></span><br><span class="line">        <span class="comment"># a: 追加</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            title = self.content_queue.get()</span><br><span class="line">            <span class="keyword">with</span> open(<span class="string">"title_list.txt"</span>, <span class="string">"a"</span>, encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(title + <span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line">            self.content_queue.task_done()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        thread_list = []</span><br><span class="line"></span><br><span class="line">        t_url = threading.Thread(target=self.get_url_list())</span><br><span class="line">        thread_list.append(t_url)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">            t_parse = threading.Thread(target=self.parse_url)</span><br><span class="line">            thread_list.append(t_parse)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>):</span><br><span class="line">            t_html = threading.Thread(target=self.get_content_list)</span><br><span class="line">            thread_list.append(t_html)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>):</span><br><span class="line">            t_save = threading.Thread(target=self.save_content_list)</span><br><span class="line">            thread_list.append(t_save)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> thread_list:</span><br><span class="line">            t.setDaemon(<span class="literal">True</span>)  <span class="comment"># 把子线程设置为守护线程，主线程结束，子线程结束</span></span><br><span class="line">            t.start()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 主线程何时结束？</span></span><br><span class="line">        <span class="keyword">for</span> q <span class="keyword">in</span> [self.url_queue, self.html_queue, self.content_queue]:</span><br><span class="line">            q.join()  <span class="comment"># 让主线程等待阻塞，等待队列的任务完成之后再完成</span></span><br><span class="line"></span><br><span class="line">        print(<span class="string">"主线程结束"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    db_spider = DBSpider()</span><br><span class="line"></span><br><span class="line">    time_start = time.time()</span><br><span class="line"></span><br><span class="line">    db_spider.run()</span><br><span class="line"></span><br><span class="line">    time_end = time.time()</span><br><span class="line">    print(<span class="string">'time cost'</span>, time_end - time_start, <span class="string">'s'</span>)</span><br><span class="line"><span class="comment"># 之前没加线程的代码是4s左右</span></span><br><span class="line"><span class="comment"># 增加请求url线程(并发请求) 1.32  1.48  1.37</span></span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>python爬虫</category>
      </categories>
      <tags>
        <tag>python爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>python 基础语法&amp;面向对象</title>
    <url>/2019/02/18/20190220151318384/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>本文档由脑图导出，地址：<a href="http://naotu.baidu.com/file/caceda5851ebccee143af9deeba8de86" target="_blank" rel="noopener">http://naotu.baidu.com/file/caceda5851ebccee143af9deeba8de86</a></p>
<p>参考：heima</p>
</blockquote>
<p>[TOC]</p>
<h1 id="python基础"><a href="#python基础" class="headerlink" title="python基础"></a>python基础</h1><h2 id="python-基础语法"><a href="#python-基础语法" class="headerlink" title="python-基础语法"></a>python-基础语法</h2><h3 id="认识-Python"><a href="#认识-Python" class="headerlink" title="认识 Python"></a>认识 Python</h3><h4 id="Python-的起源"><a href="#Python-的起源" class="headerlink" title="Python 的起源"></a>Python 的起源</h4><h5 id="解释器-科普"><a href="#解释器-科普" class="headerlink" title="解释器(科普)"></a>解释器(科普)</h5><h5 id="Python-的设计目标"><a href="#Python-的设计目标" class="headerlink" title="Python 的设计目标"></a>Python 的设计目标</h5><h5 id="Python-的设计哲学"><a href="#Python-的设计哲学" class="headerlink" title="Python 的设计哲学"></a>Python 的设计哲学</h5><h4 id="为什么选择-Python"><a href="#为什么选择-Python" class="headerlink" title="为什么选择 Python?"></a>为什么选择 Python?</h4><h4 id="Python-特点"><a href="#Python-特点" class="headerlink" title="Python 特点"></a>Python 特点</h4><h4 id="Python-的优缺点"><a href="#Python-的优缺点" class="headerlink" title="Python 的优缺点"></a>Python 的优缺点</h4><h3 id="第一个-Python-程序"><a href="#第一个-Python-程序" class="headerlink" title="第一个 Python 程序"></a>第一个 Python 程序</h3><h4 id="第一个-HelloPython-程序"><a href="#第一个-HelloPython-程序" class="headerlink" title="第一个 HelloPython 程序"></a>第一个 HelloPython 程序</h4><h5 id="常见BUG"><a href="#常见BUG" class="headerlink" title="常见BUG"></a>常见BUG</h5><h6 id="手误"><a href="#手误" class="headerlink" title="手误"></a>手误</h6><h6 id="将多条写在一行"><a href="#将多条写在一行" class="headerlink" title="将多条写在一行"></a>将多条写在一行</h6><h6 id="缩进错误"><a href="#缩进错误" class="headerlink" title="缩进错误"></a>缩进错误</h6><h6 id="python-2-x-默认不支持中文"><a href="#python-2-x-默认不支持中文" class="headerlink" title="python 2.x 默认不支持中文"></a>python 2.x 默认不支持中文</h6><h4 id="Python-2-x-与-3-x-版本简介"><a href="#Python-2-x-与-3-x-版本简介" class="headerlink" title="Python 2.x 与 3.x 版本简介"></a>Python 2.x 与 3.x 版本简介</h4><h4 id="执⾏-Python-程序的三种方式"><a href="#执⾏-Python-程序的三种方式" class="headerlink" title="执⾏ Python 程序的三种方式"></a>执⾏ Python 程序的三种方式</h4><h5 id="解释器-python-python3"><a href="#解释器-python-python3" class="headerlink" title="解释器 python / python3"></a>解释器 python / python3</h5><h5 id="交互式运行-Python-程序"><a href="#交互式运行-Python-程序" class="headerlink" title="交互式运行 Python 程序"></a>交互式运行 Python 程序</h5><h6 id="官方的解释器器"><a href="#官方的解释器器" class="headerlink" title="官方的解释器器"></a>官方的解释器器</h6><h6 id="IPython"><a href="#IPython" class="headerlink" title="IPython"></a>IPython</h6><h5 id="IDE-——-PyCharm"><a href="#IDE-——-PyCharm" class="headerlink" title="IDE —— PyCharm"></a>IDE —— PyCharm</h5><h3 id="PyCharm-的初始设置"><a href="#PyCharm-的初始设置" class="headerlink" title="PyCharm 的初始设置"></a>PyCharm 的初始设置</h3><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><h3 id="程序的注释和算术运算符"><a href="#程序的注释和算术运算符" class="headerlink" title="程序的注释和算术运算符"></a>程序的注释和算术运算符</h3><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><h5 id="单行注释："><a href="#单行注释：" class="headerlink" title="单行注释：#"></a>单行注释：#</h5><h5 id="多行注释：”””-“””"><a href="#多行注释：”””-“””" class="headerlink" title="多行注释：”””   “””"></a>多行注释：”””   “””</h5><h4 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h4><h5 id="算数运算符常用"><a href="#算数运算符常用" class="headerlink" title="算数运算符常用"></a>算数运算符常用</h5><h5 id="算数运算符的优先级"><a href="#算数运算符的优先级" class="headerlink" title="算数运算符的优先级"></a>算数运算符的优先级</h5><h3 id="程序执行原理"><a href="#程序执行原理" class="headerlink" title="程序执行原理"></a>程序执行原理</h3><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><h4 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h4><h5 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">qq_number = <span class="string">"123456"</span></span><br><span class="line">print(qq_number)</span><br><span class="line"></span><br><span class="line">price = <span class="number">8.5</span></span><br><span class="line">weight = <span class="number">7.5</span></span><br><span class="line">money = weight * price</span><br><span class="line">money = money - <span class="number">5</span></span><br><span class="line">print(money)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解释器自动推导数据类型</span></span><br><span class="line">name = <span class="string">"小明"</span>     <span class="comment"># str</span></span><br><span class="line">age = <span class="number">18</span>         <span class="comment"># int</span></span><br><span class="line">gender = <span class="literal">True</span>    <span class="comment"># bool</span></span><br><span class="line">height = <span class="number">1.75</span>    <span class="comment"># float</span></span><br><span class="line"></span><br><span class="line">age_str = input(<span class="string">"请输入你的年龄："</span>)</span><br><span class="line">age_int = int(age_str)</span><br><span class="line">print(type(age_int))</span><br><span class="line">print(age_int)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 简化</span></span><br><span class="line">age = float(input(<span class="string">"请输入你的分数："</span>))</span><br><span class="line">print(type(age))</span><br><span class="line">print(age)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式化输出</span></span><br><span class="line">name = <span class="string">"小明"</span></span><br><span class="line">print(<span class="string">"我叫%s"</span> % name)</span><br><span class="line">num = <span class="number">2</span></span><br><span class="line">print(<span class="string">"编号：d"</span> % num)      <span class="comment"># 06d% :显示6位 前面用0补齐</span></span><br><span class="line">print(<span class="string">"我叫%s,编号d"</span> % (name, num))</span><br><span class="line">print(<span class="string">"哈"</span> * <span class="number">10</span>)</span><br></pre></td></tr></table></figure></div>

<h5 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h5><h5 id="变量的类型"><a href="#变量的类型" class="headerlink" title="变量的类型"></a>变量的类型</h5><h6 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 数字型</span><br><span class="line">  - 整型 (int)</span><br><span class="line">  - 浮点型（float）</span><br><span class="line">  - 布尔型（bool） </span><br><span class="line">- 真 True 非 0 数 —— 非零即真</span><br><span class="line">- 假 False 0</span><br><span class="line">  - 复数型 (complex)</span><br><span class="line">- 主要用于科学计算，例如：平面场问题、波动问题、电感电容等问题</span><br><span class="line">- 非数字型</span><br><span class="line">  - 字符串</span><br><span class="line">  - 列表</span><br><span class="line">  - 元组</span><br><span class="line">  - 字典</span><br></pre></td></tr></table></figure></div>

<h6 id="不同类型变量之间的计算"><a href="#不同类型变量之间的计算" class="headerlink" title="不同类型变量之间的计算"></a>不同类型变量之间的计算</h6><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1) 数字型变量 之间可以直接计算</span><br><span class="line">2) 字符串变量 之间使用 + 拼接字符串</span><br><span class="line">3) 字符串变量 可以和 整数 使用 * 重复拼接相同的字符串</span><br><span class="line">4) 数字型变量 和 字符串 之间 不能进行其他计算</span><br></pre></td></tr></table></figure></div>

<h6 id="变量的输入"><a href="#变量的输入" class="headerlink" title="变量的输入"></a>变量的输入</h6><h6 id="变量的格式化输出"><a href="#变量的格式化输出" class="headerlink" title="变量的格式化输出"></a>变量的格式化输出</h6><h5 id="变量的命名"><a href="#变量的命名" class="headerlink" title="变量的命名"></a>变量的命名</h5><h4 id="变量进阶"><a href="#变量进阶" class="headerlink" title="变量进阶"></a>变量进阶</h4><h5 id="变量的引用"><a href="#变量的引用" class="headerlink" title="变量的引用"></a>变量的引用</h5><h5 id="可变和不可变类型"><a href="#可变和不可变类型" class="headerlink" title="可变和不可变类型"></a>可变和不可变类型</h5><h5 id="局部变量和全局变量"><a href="#局部变量和全局变量" class="headerlink" title="局部变量和全局变量"></a>局部变量和全局变量</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#  函数不能直接修改 全局变量的引用,需要使用 global 进行声明</span></span><br><span class="line">num = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo1</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">"demo1"</span> + <span class="string">"-"</span> * <span class="number">50</span>)</span><br><span class="line">    <span class="comment"># global 关键字，告诉 Python 解释器 num 是一个全局变量</span></span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    <span class="comment"># 如果不加global，只是定义了一个局部变量，不会修改到全局变量，只是变量名相同而已</span></span><br><span class="line">    num = <span class="number">100</span></span><br><span class="line">    print(num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo2</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">"demo2"</span> + <span class="string">"-"</span> * <span class="number">50</span>)</span><br><span class="line">    print(num)</span><br><span class="line"></span><br><span class="line">demo1()</span><br><span class="line">demo2()</span><br><span class="line"></span><br><span class="line">print(<span class="string">"over"</span>)</span><br><span class="line">​`</span><br></pre></td></tr></table></figure></div>

<h3 id="判断（if）语句"><a href="#判断（if）语句" class="headerlink" title="判断（if）语句"></a>判断（if）语句</h3><h4 id="demo-1"><a href="#demo-1" class="headerlink" title="demo"></a>demo</h4><p>​```python</p>
<h1 id="if"><a href="#if" class="headerlink" title="if"></a>if</h1><h1 id="or-and-not-elif"><a href="#or-and-not-elif" class="headerlink" title="or and not elif"></a>or and not elif</h1><p>age = 19<br>if age &gt;= 18 and age &lt; 30:<br>    print(“已成年”)<br>    print(“ha ha ha”)<br>else:<br>    print(“未成年”)<br>print(“喵”)</p>
<p>##<br>age = 17</p>
<p>if not age &gt; 18:<br>    print(“未成年”)</p>
<p>##<br>holiday_name = “平安夜”</p>
<p>if holiday_name == “情人节”:<br>    print(“买玫瑰”)<br>    print(“看电影”)<br>elif holiday_name == “平安夜”:<br>    print(“买苹果”)<br>    print(“吃大餐”)<br>elif holiday_name == “生日”:<br>    print(“买蛋糕”)<br>else:<br>    print(“每天都是节日啊……”)</p>
<h1 id="if-的嵌套"><a href="#if-的嵌套" class="headerlink" title="if 的嵌套"></a>if 的嵌套</h1><h1 id="定义布尔型变量-has-ticket-表示是否有车票"><a href="#定义布尔型变量-has-ticket-表示是否有车票" class="headerlink" title="定义布尔型变量 has_ticket 表示是否有车票"></a>定义布尔型变量 has_ticket 表示是否有车票</h1><p>has_ticket = True</p>
<h1 id="定义整数型变量-knife-length-表示刀的长度，单位：厘米"><a href="#定义整数型变量-knife-length-表示刀的长度，单位：厘米" class="headerlink" title="定义整数型变量 knife_length 表示刀的长度，单位：厘米"></a>定义整数型变量 knife_length 表示刀的长度，单位：厘米</h1><p>knife_length = 20</p>
<h1 id="首先检查是否有车票，如果有，才允许进行-安检"><a href="#首先检查是否有车票，如果有，才允许进行-安检" class="headerlink" title="首先检查是否有车票，如果有，才允许进行 安检"></a>首先检查是否有车票，如果有，才允许进行 安检</h1><p>if has_ticket:<br>    print(“有车票，可以开始安检…”)</p>
<pre><code># 安检时，需要检查刀的长度，判断是否超过 20 厘米
# 如果超过 20 厘米，提示刀的长度，不允许上车
if knife_length &gt;= 20:
    print(&quot;不允许携带 %d 厘米长的刀上车&quot; % knife_length)
# 如果不超过 20 厘米，安检通过
else:
    print(&quot;安检通过，祝您旅途愉快……&quot;)</code></pre><h1 id="如果没有车票，不允许进门"><a href="#如果没有车票，不允许进门" class="headerlink" title="如果没有车票，不允许进门"></a>如果没有车票，不允许进门</h1><p>else:<br>    print(“大哥，您要先买票啊”)</p>
<h1 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h1><p>import random</p>
<p>num = random.randint(10, 20)<br>print(num)</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#### if 语句体验</span><br><span class="line"></span><br><span class="line">#### 逻辑运算</span><br><span class="line"></span><br><span class="line">#### if 语句进阶</span><br><span class="line"></span><br><span class="line">##### elif</span><br><span class="line"></span><br><span class="line">##### if 的嵌套</span><br><span class="line"></span><br><span class="line">### 运算符</span><br><span class="line"></span><br><span class="line">#### 算数运算符</span><br><span class="line"></span><br><span class="line">#### 比较（关系）运算符</span><br><span class="line"></span><br><span class="line">#### 逻辑运算符</span><br><span class="line"></span><br><span class="line">#### 赋值运算符</span><br><span class="line"></span><br><span class="line">#### 运算符的优先级</span><br><span class="line"></span><br><span class="line">### 循环</span><br><span class="line"></span><br><span class="line">#### demo</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;python</span><br><span class="line"># 打印 5 遍 Hello Python</span><br><span class="line">i &#x3D; 1</span><br><span class="line">while i &lt;&#x3D; 5:</span><br><span class="line">    print(&quot;Hello Python&quot;)</span><br><span class="line">    i &#x3D; i + 1</span><br><span class="line">print(&quot;循环结束后的 i &#x3D; %d&quot; % i)</span><br><span class="line"></span><br><span class="line"># break 和 continue</span><br><span class="line">- break 某一条件满足时，退出循环，不再执行后续重复的代码</span><br><span class="line">- continue 某一条件满足时，不执行后续重复的代码</span><br></pre></td></tr></table></figure></div>


<h4 id="while-循环基本使用"><a href="#while-循环基本使用" class="headerlink" title="while 循环基本使用"></a>while 循环基本使用</h4><h4 id="break-和-continue"><a href="#break-和-continue" class="headerlink" title="break 和 continue"></a>break 和 continue</h4><h4 id="while-循环嵌套"><a href="#while-循环嵌套" class="headerlink" title="while 循环嵌套"></a>while 循环嵌套</h4><h5 id="九九乘法表"><a href="#九九乘法表" class="headerlink" title="九九乘法表"></a>九九乘法表</h5><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="函数基础"><a href="#函数基础" class="headerlink" title="函数基础"></a>函数基础</h4><h5 id="demo-2"><a href="#demo-2" class="headerlink" title="demo"></a>demo</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> m_01_hello</span><br><span class="line">m_01_hello.print_hello()</span><br><span class="line">print(m_01_hello.name)</span><br><span class="line"><span class="comment"># 函数上方保持2个空行</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""打招呼"""</span>       <span class="comment"># 函数注释方式</span></span><br><span class="line">    print(<span class="string">"hello 函数"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">say_hello()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数的参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_2_num</span><span class="params">(num1, num2)</span>:</span></span><br><span class="line">    result = num1 + num2</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"%d + %d = %d"</span> % (num1, num2, result))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sum_2_num(<span class="number">50</span>, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数的返回值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_2_num</span><span class="params">(num1, num2)</span>:</span></span><br><span class="line">    <span class="string">"""对两个数字的求和"""</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> num1 + num2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数，并使用 result 变量接收计算结果</span></span><br><span class="line">result = sum_2_num(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"计算结果是 %d"</span> % result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数的嵌套调用</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"*"</span> * <span class="number">50</span>)</span><br><span class="line">    print(<span class="string">"test 1"</span>)</span><br><span class="line">    print(<span class="string">"*"</span> * <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"-"</span> * <span class="number">50</span>)</span><br><span class="line">    print(<span class="string">"test 2"</span>)</span><br><span class="line"></span><br><span class="line">    test1()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"-"</span> * <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">test2()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用模块中的函数</span></span><br></pre></td></tr></table></figure></div>

<h5 id="快速体验"><a href="#快速体验" class="headerlink" title="快速体验"></a>快速体验</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># m_01_hello.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_hello</span><span class="params">()</span>:</span></span><br><span class="line">print(<span class="string">"hello"</span>)</span><br><span class="line">print(<span class="string">"python"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># m_04_函数.py</span></span><br><span class="line"><span class="keyword">import</span> m_01_hello</span><br><span class="line">m_01_hello.print_hello()</span><br></pre></td></tr></table></figure></div>

<h5 id="函数基本使用"><a href="#函数基本使用" class="headerlink" title="函数基本使用"></a>函数基本使用</h5><h6 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h6><h6 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h6><h6 id="函数的文档注释"><a href="#函数的文档注释" class="headerlink" title="函数的文档注释"></a>函数的文档注释</h6><h5 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h5><h6 id="函数参数的使用"><a href="#函数参数的使用" class="headerlink" title="函数参数的使用"></a>函数参数的使用</h6><h5 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h5><h5 id="函数的嵌套调用"><a href="#函数的嵌套调用" class="headerlink" title="函数的嵌套调用"></a>函数的嵌套调用</h5><h5 id="使用模块中的函数"><a href="#使用模块中的函数" class="headerlink" title="使用模块中的函数"></a>使用模块中的函数</h5><h5 id="Pyc-文件：模块速度优化"><a href="#Pyc-文件：模块速度优化" class="headerlink" title="Pyc 文件：模块速度优化"></a>Pyc 文件：模块速度优化</h5><h4 id="函数进阶"><a href="#函数进阶" class="headerlink" title="函数进阶"></a>函数进阶</h4><h5 id="demo-3"><a href="#demo-3" class="headerlink" title="demo"></a>demo</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">gl_num_list = [<span class="number">6</span>, <span class="number">3</span>, <span class="number">9</span>]</span><br><span class="line"><span class="comment"># 默认就是升序排序，因为这种应⽤用需求更更多</span></span><br><span class="line">gl_num_list.sort()</span><br><span class="line">print(gl_num_list)</span><br><span class="line"><span class="comment"># 只有当需要降序排序时，才需要传递 `reverse` 参数</span></span><br><span class="line">gl_num_list.sort(reverse=<span class="literal">True</span>)</span><br><span class="line">print(gl_num_list)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 缺省参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_info</span><span class="params">(name, gender=True)</span>:</span></span><br><span class="line">    gender_text = <span class="string">"男生"</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> gender:</span><br><span class="line">        gender_text = <span class="string">"女⽣"</span></span><br><span class="line">    print(<span class="string">"%s 是 %s"</span> % (name, gender_text))</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># print_info("小明")</span></span><br><span class="line"><span class="comment"># print_info("老王", title="班⻓长")</span></span><br><span class="line"><span class="comment"># print_info("⼩小美", gender=False)</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">1、必须保证 带有默认值的缺省参数 在参数列列表末尾</span></span><br><span class="line"><span class="string">2、在 调⽤用函数时，如果有 多个缺省参数，需要指定参数名，这样解释器器才能够知道参数的对应关 系!</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多值参数</span></span><br><span class="line"><span class="comment"># *是元祖  **是字典</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">(num, *args, **kwargs)</span>:</span></span><br><span class="line">    print(num)  <span class="comment"># 1</span></span><br><span class="line">    print(args)     <span class="comment"># (2,3,4,5)</span></span><br><span class="line">    print(kwargs)   <span class="comment"># &#123;'name': '⼩明', 'age': 18, 'gender': True&#125;</span></span><br><span class="line"></span><br><span class="line">demo(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, name=<span class="string">"⼩明"</span>, age=<span class="number">18</span>, gender=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多值参数案例例 —— 计算任意多个数字的和</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_numbers</span><span class="params">(*args)</span>:</span></span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 遍历 args 元组顺序求和</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> args:</span><br><span class="line">        num += n</span><br><span class="line">    <span class="keyword">return</span> num</span><br><span class="line">print(sum_numbers(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 元组和字典的拆包</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">    print(args)</span><br><span class="line">    print(kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要将一个元组变量/字典变量传递给函数对应的参数</span></span><br><span class="line">gl_nums = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">gl_xiaoming = &#123;<span class="string">"name"</span>: <span class="string">"小明"</span>, <span class="string">"age"</span>: <span class="number">18</span>&#125;</span><br><span class="line"><span class="comment"># 会把 num_tuple 和 xiaoming 作为元组传递个 args</span></span><br><span class="line"><span class="comment"># demo(gl_nums, gl_xiaoming)</span></span><br><span class="line">demo(*gl_nums, **gl_xiaoming)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数的递归</span></span><br></pre></td></tr></table></figure></div>

<h5 id="函数参数和返回值的作⽤用"><a href="#函数参数和返回值的作⽤用" class="headerlink" title="函数参数和返回值的作⽤用"></a>函数参数和返回值的作⽤用</h5><h5 id="函数的返回值-进阶"><a href="#函数的返回值-进阶" class="headerlink" title="函数的返回值 进阶"></a>函数的返回值 进阶</h5><h5 id="函数的参数-进阶"><a href="#函数的参数-进阶" class="headerlink" title="函数的参数 进阶"></a>函数的参数 进阶</h5><h6 id="不可变和可变的参数"><a href="#不可变和可变的参数" class="headerlink" title="不可变和可变的参数"></a>不可变和可变的参数</h6><h6 id="缺省参数"><a href="#缺省参数" class="headerlink" title="缺省参数"></a>缺省参数</h6><h6 id="多值参数"><a href="#多值参数" class="headerlink" title="多值参数"></a>多值参数</h6><h5 id="函数的递归"><a href="#函数的递归" class="headerlink" title="函数的递归"></a>函数的递归</h5><h3 id="高级变量类型"><a href="#高级变量类型" class="headerlink" title="高级变量类型"></a>高级变量类型</h3><h4 id="demo-4"><a href="#demo-4" class="headerlink" title="demo"></a>demo</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列表的定义</span></span><br><span class="line">name_list = [<span class="string">"zhangsan"</span>, <span class="string">"lisi"</span>, <span class="string">"wangwu"</span>]</span><br><span class="line"><span class="comment"># 列表常用操作</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">In [1]: name_list.</span></span><br><span class="line"><span class="string">name_list.append   name_list.count    name_list.insert   name_list.reverse</span></span><br><span class="line"><span class="string">name_list.clear    name_list.extend   name_list.pop      name_list.sort</span></span><br><span class="line"><span class="string">name_list.copy     name_list.index    name_list.remove </span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 循环遍历</span></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> name_list:</span><br><span class="line">    print(name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 元组的定义</span></span><br><span class="line">info_tuple = (<span class="string">"zhangsan"</span>, <span class="number">18</span>, <span class="number">1.75</span>)     <span class="comment"># 不能修改</span></span><br><span class="line">info_tuple = ()     <span class="comment"># 创建空元组</span></span><br><span class="line">info_tuple = (<span class="number">50</span>, )     <span class="comment"># 元组中 只包含一个元素 时，需要 在元素后面添加逗号</span></span><br><span class="line"><span class="comment"># 元组常用操作</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">info.count  info.index</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 循环遍历</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> info_tuple:</span><br><span class="line">    print(item)</span><br><span class="line"><span class="comment"># 应用场景</span></span><br><span class="line"><span class="comment"># 元组和列表之间的转换</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">list(元组) </span></span><br><span class="line"><span class="string">tuple(列表)</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">字典 是 无序 的对象集合</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 字典的定义</span></span><br><span class="line">xiaoming = &#123;<span class="string">"name"</span>: <span class="string">"小明"</span>,</span><br><span class="line">            <span class="string">"age"</span>: <span class="number">18</span>,</span><br><span class="line">            <span class="string">"gender"</span>: <span class="literal">True</span>,</span><br><span class="line">            <span class="string">"height"</span>: <span class="number">1.75</span>&#125;</span><br><span class="line"><span class="comment"># 字典常用操作</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">In [1]: xiaoming.</span></span><br><span class="line"><span class="string">xiaoming.clear       xiaoming.items       xiaoming.setdefault</span></span><br><span class="line"><span class="string">xiaoming.copy        xiaoming.keys        xiaoming.update</span></span><br><span class="line"><span class="string">xiaoming.fromkeys    xiaoming.pop         xiaoming.values</span></span><br><span class="line"><span class="string">xiaoming.get         xiaoming.popitem    </span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 循环遍历</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> xiaoming:</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"%s: %s"</span> % (k, xiaoming[k]))</span><br><span class="line"><span class="comment"># 应用场景</span></span><br><span class="line">card_list = [&#123;<span class="string">"name"</span>: <span class="string">"张三"</span>,</span><br><span class="line">              <span class="string">"qq"</span>: <span class="string">"12345"</span>,</span><br><span class="line">              <span class="string">"phone"</span>: <span class="string">"110"</span>&#125;,</span><br><span class="line">             &#123;<span class="string">"name"</span>: <span class="string">"李四"</span>,</span><br><span class="line">              <span class="string">"qq"</span>: <span class="string">"54321"</span>,</span><br><span class="line">              <span class="string">"phone"</span>: <span class="string">"10086"</span>&#125;</span><br><span class="line">             ]</span><br><span class="line"><span class="comment"># 字符串</span></span><br><span class="line"><span class="comment"># 字符串的定义</span></span><br><span class="line">string = <span class="string">"Hello Python"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> string:</span><br><span class="line">    print(c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串的常用操作</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">In [1]: hello_str.</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">判断类型</span></span><br><span class="line"><span class="string">查找和替换</span></span><br><span class="line"><span class="string">大小写转换</span></span><br><span class="line"><span class="string">文本对齐</span></span><br><span class="line"><span class="string">去除空白字符</span></span><br><span class="line"><span class="string">拆分和连接</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串的切片</span></span><br><span class="line">num_str = <span class="string">"0123456789"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 截取从 2 ~ 5 位置 的字符串</span></span><br><span class="line">print(num_str[<span class="number">2</span>:<span class="number">6</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 截取从 2 ~ `末尾` 的字符串</span></span><br><span class="line">print(num_str[<span class="number">2</span>:])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 截取从 `开始` ~ 5 位置 的字符串</span></span><br><span class="line">print(num_str[:<span class="number">6</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 截取完整的字符串</span></span><br><span class="line">print(num_str[:])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 从开始位置，每隔一个字符截取字符串</span></span><br><span class="line">print(num_str[::<span class="number">2</span>])</span><br><span class="line"><span class="comment"># 6. 从索引 1 开始，每隔一个取一个</span></span><br><span class="line">print(num_str[<span class="number">1</span>::<span class="number">2</span>])</span><br><span class="line"><span class="comment"># 倒序切片</span></span><br><span class="line"><span class="comment"># -1 表示倒数第一个字符</span></span><br><span class="line">print(num_str[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7. 截取从 2 ~ `末尾 - 1` 的字符串</span></span><br><span class="line">print(num_str[<span class="number">2</span>:<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 8. 截取字符串末尾两个字符</span></span><br><span class="line">print(num_str[<span class="number">-2</span>:])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 9. 字符串的逆序（面试题）</span></span><br><span class="line">print(num_str[::<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 公共方法</span></span><br><span class="line"><span class="comment"># Python 内置函数</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">len(item)   del(item)   </span></span><br><span class="line"><span class="string">max(item)   min(item)</span></span><br><span class="line"><span class="string">cmp(item1, item2)</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 切片</span></span><br><span class="line"><span class="comment"># 运算符</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">[1, 2] + [3, 4]         [1, 2, 3, 4]</span></span><br><span class="line"><span class="string">["Hi!"] * 4             ['Hi!', 'Hi!', 'Hi!', 'Hi!']</span></span><br><span class="line"><span class="string">3 in (1, 2, 3)          True</span></span><br><span class="line"><span class="string">4 not in (1, 2, 3)      True</span></span><br><span class="line"><span class="string">(1, 2, 3) &lt; (2, 2, 3)   True</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 完整的 for 循环语法</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">for 变量 in 集合:</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    循环体代码</span></span><br><span class="line"><span class="string">else:</span></span><br><span class="line"><span class="string">    没有通过 break 退出循环，循环结束后，会执行的代码</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure></div>

<h4 id="列表-List"><a href="#列表-List" class="headerlink" title="列表(List)"></a>列表(List)</h4><h5 id="列表的定义"><a href="#列表的定义" class="headerlink" title="列表的定义"></a>列表的定义</h5><h5 id="列表常用操作"><a href="#列表常用操作" class="headerlink" title="列表常用操作"></a>列表常用操作</h5><h5 id="循环遍历"><a href="#循环遍历" class="headerlink" title="循环遍历"></a>循环遍历</h5><h5 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h5><h4 id="元组-Tuple"><a href="#元组-Tuple" class="headerlink" title="元组(Tuple)"></a>元组(Tuple)</h4><h5 id="元组的定义"><a href="#元组的定义" class="headerlink" title="元组的定义"></a>元组的定义</h5><h5 id="元组常用操作"><a href="#元组常用操作" class="headerlink" title="元组常用操作"></a>元组常用操作</h5><h5 id="循环遍历-1"><a href="#循环遍历-1" class="headerlink" title="循环遍历"></a>循环遍历</h5><h5 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h5><h5 id="元组和列表之间的转换"><a href="#元组和列表之间的转换" class="headerlink" title="元组和列表之间的转换"></a>元组和列表之间的转换</h5><h4 id="字典-dictionary"><a href="#字典-dictionary" class="headerlink" title="字典(dictionary)"></a>字典(dictionary)</h4><h5 id="字典的定义"><a href="#字典的定义" class="headerlink" title="字典的定义"></a>字典的定义</h5><h5 id="字典常用操作"><a href="#字典常用操作" class="headerlink" title="字典常用操作"></a>字典常用操作</h5><h5 id="循环遍历-2"><a href="#循环遍历-2" class="headerlink" title="循环遍历"></a>循环遍历</h5><h5 id="应用场景-2"><a href="#应用场景-2" class="headerlink" title="应用场景"></a>应用场景</h5><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><h5 id="字符串的定义"><a href="#字符串的定义" class="headerlink" title="字符串的定义"></a>字符串的定义</h5><h5 id="字符串的常用操作"><a href="#字符串的常用操作" class="headerlink" title="字符串的常用操作"></a>字符串的常用操作</h5><h5 id="字符串的切片"><a href="#字符串的切片" class="headerlink" title="字符串的切片"></a>字符串的切片</h5><h4 id="公共方法"><a href="#公共方法" class="headerlink" title="公共方法"></a>公共方法</h4><h5 id="Python-内置函数"><a href="#Python-内置函数" class="headerlink" title="Python 内置函数"></a>Python 内置函数</h5><h5 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h5><h5 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h5><h5 id="完整的-for-循环语法"><a href="#完整的-for-循环语法" class="headerlink" title="完整的 for 循环语法"></a>完整的 for 循环语法</h5><h3 id="综合应用-——-名片管理系统"><a href="#综合应用-——-名片管理系统" class="headerlink" title="综合应用 —— 名片管理系统"></a>综合应用 —— 名片管理系统</h3><h2 id="python-面向对象"><a href="#python-面向对象" class="headerlink" title="python-面向对象"></a>python-面向对象</h2><h3 id="面向对象-OOP-基本概念"><a href="#面向对象-OOP-基本概念" class="headerlink" title="面向对象(OOP)基本概念"></a>面向对象(OOP)基本概念</h3><h3 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h3><h3 id="面相对象基础语法"><a href="#面相对象基础语法" class="headerlink" title="面相对象基础语法"></a>面相对象基础语法</h3><h4 id="demo-5"><a href="#demo-5" class="headerlink" title="demo"></a>demo</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># dir 内置函数（知道）</span></span><br><span class="line">print(dir(<span class="number">5</span>))</span><br><span class="line"><span class="comment"># 定义简单的类（只包含方法）</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">class 类名:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def 方法1(self, 参数列表):</span></span><br><span class="line"><span class="string">        pass</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    def 方法2(self, 参数列表):</span></span><br><span class="line"><span class="string">        pass</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">对象变量 = 类名()</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>:</span></span><br><span class="line">    <span class="string">"""这是一个猫类"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"小猫爱吃鱼"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">drink</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"小猫在喝水"</span>)</span><br><span class="line"></span><br><span class="line">tom = Cat()</span><br><span class="line">tom.drink()</span><br><span class="line">tom.eat()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法中的 self 参数</span></span><br><span class="line"><span class="comment"># self 就表示 当前调用方法的对象自己</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"%s 爱吃鱼"</span> % self.name)</span><br><span class="line"><span class="comment"># 不推荐在类的外部增加属性</span></span><br><span class="line">tom = Cat()</span><br><span class="line">tom.name = <span class="string">"Tom"</span></span><br><span class="line">tom.eat()</span><br><span class="line"></span><br><span class="line">lazy_cat = Cat()</span><br><span class="line">lazy_cat.name = <span class="string">"大懒猫"</span></span><br><span class="line">lazy_cat.eat()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化方法：在创建对象时自动调用</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>:</span></span><br><span class="line">    <span class="string">"""这是一个猫类"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"初始化方法"</span>)</span><br><span class="line"></span><br><span class="line">my_cat = Cat()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在初始化方法内部定义属性</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"这是一个初始化方法"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 定义用 Cat 类创建的猫对象都有一个 name 的属性</span></span><br><span class="line">        self.name = <span class="string">"Tom"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"%s 爱吃鱼"</span> % self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用类名()创建对象的时候，会自动调用初始化方法 __init__</span></span><br><span class="line">tom = Cat()</span><br><span class="line">tom.eat()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化的同时设置初始值</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        print(<span class="string">"初始化方法 %s"</span> % name)</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tom = Cat(<span class="string">"Tom"</span>)</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line">lazy_cat = Cat(<span class="string">"大懒猫"</span>)</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 内置方法和属性</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">__del__ </span></span><br><span class="line"><span class="string">    对象被从内存中销毁 前，会 自动 调用 __del__ 方法</span></span><br><span class="line"><span class="string">__str__ </span></span><br><span class="line"><span class="string">    希望使用 print 输出 对象变量 时，能够打印 自定义的内容，就可以利用 __str__ 这个内置方法了     </span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, new_name)</span>:</span></span><br><span class="line"></span><br><span class="line">        self.name = new_name</span><br><span class="line"></span><br><span class="line">        print(<span class="string">"%s 来了"</span> % self.name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        print(<span class="string">"%s 去了"</span> % self.name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"我是小猫：%s"</span> % self.name</span><br><span class="line"></span><br><span class="line">tom = Cat(<span class="string">"Tom--"</span>)</span><br><span class="line">print(tom)</span><br></pre></td></tr></table></figure></div>

<h4 id="dir-内置函数"><a href="#dir-内置函数" class="headerlink" title="dir 内置函数"></a>dir 内置函数</h4><h4 id="定义简单的类"><a href="#定义简单的类" class="headerlink" title="定义简单的类"></a>定义简单的类</h4><h4 id="方法中的-self-参数"><a href="#方法中的-self-参数" class="headerlink" title="方法中的 self 参数"></a>方法中的 self 参数</h4><h4 id="初始化方法"><a href="#初始化方法" class="headerlink" title="初始化方法"></a>初始化方法</h4><h4 id="内置方法和属性"><a href="#内置方法和属性" class="headerlink" title="内置方法和属性"></a>内置方法和属性</h4><h5 id="del"><a href="#del" class="headerlink" title="del"></a><strong>del</strong></h5><h5 id="str"><a href="#str" class="headerlink" title="str"></a><strong>str</strong></h5><h3 id="面向对象封装案例"><a href="#面向对象封装案例" class="headerlink" title="面向对象封装案例"></a>面向对象封装案例</h3><h4 id="身份运算符"><a href="#身份运算符" class="headerlink" title="身份运算符"></a>身份运算符</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># is 与 == 区别：</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">is 用于判断 两个变量 引用对象是否为同一个 </span></span><br><span class="line"><span class="string">== 用于判断 引用变量的值 是否相等</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">print(b <span class="keyword">is</span> a )</span><br><span class="line">print(b == a)</span><br></pre></td></tr></table></figure></div>

<h3 id="私有属性和私有方法"><a href="#私有属性和私有方法" class="headerlink" title="私有属性和私有方法"></a>私有属性和私有方法</h3><h4 id="demo-6"><a href="#demo-6" class="headerlink" title="demo"></a>demo</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 私有属性和私有方法</span></span><br><span class="line"><span class="comment"># 应用场景及定义方式</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">在 属性名或者方法名前 增加 两个下划线，定义的就是 私有 属性或方法</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Women</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line"></span><br><span class="line">        self.name = name</span><br><span class="line">        <span class="comment"># 不要问女生的年龄</span></span><br><span class="line">        self.__age = <span class="number">18</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__secret</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"我的年龄是 %d"</span> % self.__age)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xiaofang = Women(<span class="string">"小芳"</span>)</span><br><span class="line"><span class="comment"># 私有属性，外部不能直接访问</span></span><br><span class="line"><span class="comment"># print(xiaofang.__age)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 私有方法，外部不能直接调用</span></span><br><span class="line"><span class="comment"># xiaofang.__secret()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 伪私有属性和私有方法</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Python 中，并没有 真正意义 的 私有</span></span><br><span class="line"><span class="string">使用这种方式可以外部访问私有：在 名称 前面加上 _类名 =&gt; _类名__方法/属性名</span></span><br><span class="line"><span class="string">但 不推荐使用</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">xiaofang._Women__secret()</span><br></pre></td></tr></table></figure></div>

<h4 id="应用场景及定义方式"><a href="#应用场景及定义方式" class="headerlink" title="应用场景及定义方式"></a>应用场景及定义方式</h4><h4 id="伪私有属性和私有方法"><a href="#伪私有属性和私有方法" class="headerlink" title="伪私有属性和私有方法"></a>伪私有属性和私有方法</h4><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><h4 id="demo-7"><a href="#demo-7" class="headerlink" title="demo"></a>demo</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class 类名(父类名):</span><br><span class="line"></span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">class 子类名(父类名1, 父类名2...)</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure></div>

<h4 id="单继承"><a href="#单继承" class="headerlink" title="单继承"></a>单继承</h4><h5 id="继承的概念、语法和特点"><a href="#继承的概念、语法和特点" class="headerlink" title="继承的概念、语法和特点"></a>继承的概念、语法和特点</h5><h5 id="方法的重写"><a href="#方法的重写" class="headerlink" title="方法的重写"></a>方法的重写</h5><h5 id="父类的-私有属性-和-私有方法"><a href="#父类的-私有属性-和-私有方法" class="headerlink" title="父类的 私有属性 和 私有方法"></a>父类的 私有属性 和 私有方法</h5><h4 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h4><h5 id="多继承的使用注意事项"><a href="#多继承的使用注意事项" class="headerlink" title="多继承的使用注意事项"></a>多继承的使用注意事项</h5><h5 id="新式类与旧式（经典）类"><a href="#新式类与旧式（经典）类" class="headerlink" title="新式类与旧式（经典）类"></a>新式类与旧式（经典）类</h5><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">game</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"%s 蹦蹦跳跳的玩耍..."</span> % self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XiaoTianDog</span><span class="params">(Dog)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">game</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"%s 飞到天上去玩耍..."</span> % self.name)</span><br></pre></td></tr></table></figure></div>

<h3 id="类属性和类方法"><a href="#类属性和类方法" class="headerlink" title="类属性和类方法"></a>类属性和类方法</h3><h4 id="demo-8"><a href="#demo-8" class="headerlink" title="demo"></a>demo</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 类方法</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@classmethod</span></span><br><span class="line"><span class="string">def 类方法名(cls):</span></span><br><span class="line"><span class="string">    pass</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">由 哪一个类 调用的方法，方法内的 cls 就是 哪一个类的引用</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_tool_count</span><span class="params">(cls)</span>:</span></span><br><span class="line">    <span class="string">"""显示工具对象的总数"""</span></span><br><span class="line">    print(<span class="string">"工具对象的总数 %d"</span> % cls.count)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 静态方法</span></span><br><span class="line"><span class="comment"># 使用场合：不需要访问实例属性也不需要访问类属性的方法</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@staticmethod</span></span><br><span class="line"><span class="string">def 静态方法名():</span></span><br><span class="line"><span class="string">    pass</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法综合案例</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">需求</span></span><br><span class="line"><span class="string">1、设计一个 Game 类</span></span><br><span class="line"><span class="string">2、属性：</span></span><br><span class="line"><span class="string">    定义一个 类属性 top_score 记录游戏的 历史最高分</span></span><br><span class="line"><span class="string">    定义一个 实例属性 player_name 记录 当前游戏的玩家姓名</span></span><br><span class="line"><span class="string">3、方法：</span></span><br><span class="line"><span class="string">    静态方法 show_help 显示游戏帮助信息</span></span><br><span class="line"><span class="string">    类方法 show_top_score 显示历史最高分</span></span><br><span class="line"><span class="string">    实例方法 start_game 开始当前玩家的游戏</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># 游戏最高分，类属性</span></span><br><span class="line">    top_score = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod   # 静态方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_help</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">"帮助信息：让僵尸走进房间"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod    # 类方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_top_score</span><span class="params">(cls)</span>:</span></span><br><span class="line">        print(<span class="string">"游戏最高分是 %d"</span> % cls.top_score)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, player_name)</span>:</span></span><br><span class="line">        self.player_name = player_name  <span class="comment"># 实例属性</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_game</span><span class="params">(self)</span>:</span>   <span class="comment"># 实例方法</span></span><br><span class="line">        print(<span class="string">"[%s] 开始游戏..."</span> % self.player_name)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 使用类名.修改历史最高分</span></span><br><span class="line">        Game.top_score = <span class="number">999</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 查看游戏帮助</span></span><br><span class="line">Game.show_help()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 查看游戏最高分</span></span><br><span class="line">Game.show_top_score()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 创建游戏对象，开始游戏</span></span><br><span class="line">game = Game(<span class="string">"小明"</span>)</span><br><span class="line"></span><br><span class="line">game.start_game()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 游戏结束，查看游戏最高分</span></span><br><span class="line">Game.show_top_score()</span><br></pre></td></tr></table></figure></div>

<h4 id="类的结构"><a href="#类的结构" class="headerlink" title="类的结构"></a>类的结构</h4><h4 id="类属性和实例属性"><a href="#类属性和实例属性" class="headerlink" title="类属性和实例属性"></a>类属性和实例属性</h4><h4 id="类方法和静态方法"><a href="#类方法和静态方法" class="headerlink" title="类方法和静态方法"></a>类方法和静态方法</h4><h3 id="单例"><a href="#单例" class="headerlink" title="单例"></a>单例</h3><h4 id="demo-9"><a href="#demo-9" class="headerlink" title="demo"></a>demo</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Python 中的单例</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MusicPlayer</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义类属性记录单例对象引用</span></span><br><span class="line">    instance = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1. 判断类属性是否已经被赋值</span></span><br><span class="line">        <span class="keyword">if</span> cls.instance <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            cls.instance = super().__new__(cls)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 返回类属性的单例引用</span></span><br><span class="line">        <span class="keyword">return</span> cls.instance</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改进：让 初始化动作 只被 执行一次</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MusicPlayer</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 记录第一个被创建对象的引用</span></span><br><span class="line">    instance = <span class="literal">None</span></span><br><span class="line">    <span class="comment"># 记录是否执行过初始化动作</span></span><br><span class="line">    init_flag = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1. 判断类属性是否是空对象</span></span><br><span class="line">        <span class="keyword">if</span> cls.instance <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># 2. 调用父类的方法，为第一个对象分配空间</span></span><br><span class="line">            cls.instance = super().__new__(cls)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3. 返回类属性保存的对象引用</span></span><br><span class="line">        <span class="keyword">return</span> cls.instance</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> MusicPlayer.init_flag:</span><br><span class="line">            print(<span class="string">"初始化音乐播放器"</span>)</span><br><span class="line"></span><br><span class="line">            MusicPlayer.init_flag = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建多个对象</span></span><br><span class="line">player1 = MusicPlayer()</span><br><span class="line">print(player1)</span><br><span class="line"></span><br><span class="line">player2 = MusicPlayer()</span><br><span class="line">print(player2)</span><br></pre></td></tr></table></figure></div>

<h4 id="单例设计模式"><a href="#单例设计模式" class="headerlink" title="单例设计模式"></a>单例设计模式</h4><h4 id="new-方法"><a href="#new-方法" class="headerlink" title="new 方法"></a><strong>new</strong> 方法</h4><h4 id="Python-中的单例"><a href="#Python-中的单例" class="headerlink" title="Python 中的单例"></a>Python 中的单例</h4><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><h4 id="demo-10"><a href="#demo-10" class="headerlink" title="demo"></a>demo</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 简单的捕获异常语法</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">try:</span></span><br><span class="line"><span class="string">    尝试执行的代码</span></span><br><span class="line"><span class="string">except:</span></span><br><span class="line"><span class="string">    出现错误的处理</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 提示用户输入一个数字</span></span><br><span class="line">    num = int(input(<span class="string">"请输入数字："</span>))</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">"请输入正确的数字"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 错误类型捕获</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">try:</span></span><br><span class="line"><span class="string">    # 尝试执行的代码</span></span><br><span class="line"><span class="string">    pass</span></span><br><span class="line"><span class="string">except 错误类型1:</span></span><br><span class="line"><span class="string">    # 针对错误类型1，对应的代码处理</span></span><br><span class="line"><span class="string">    pass</span></span><br><span class="line"><span class="string">except 错误类型2:</span></span><br><span class="line"><span class="string">    # 针对错误类型2，对应的代码处理</span></span><br><span class="line"><span class="string">    pass</span></span><br><span class="line"><span class="string">except (错误类型3, 错误类型4):</span></span><br><span class="line"><span class="string">    # 针对错误类型3 和 4，对应的代码处理</span></span><br><span class="line"><span class="string">    pass</span></span><br><span class="line"><span class="string"># 如果希望程序 无论出现任何错误，都不会因为 Python 解释器 抛出异常而被终止，可以再增加一个 except</span></span><br><span class="line"><span class="string">except Exception as result:</span></span><br><span class="line"><span class="string">    # 打印错误信息</span></span><br><span class="line"><span class="string">    print(result)</span></span><br><span class="line"><span class="string"># else 只有在没有异常时才会执行的代码</span></span><br><span class="line"><span class="string">else:</span></span><br><span class="line"><span class="string">    # 没有异常才会执行的代码</span></span><br><span class="line"><span class="string">    pass</span></span><br><span class="line"><span class="string"># finally 无论是否有异常，都会执行的代码</span></span><br><span class="line"><span class="string">finally:</span></span><br><span class="line"><span class="string">    # 无论是否有异常，都会执行的代码</span></span><br><span class="line"><span class="string">    print("无论是否有异常，都会执行的代码")</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 异常的传递</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> int(input(<span class="string">"请输入一个整数："</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> demo1()</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(demo2())</span><br><span class="line"><span class="keyword">except</span> ValueError:</span><br><span class="line">    print(<span class="string">"请输入正确的整数"</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">    print(<span class="string">"未知错误 %s"</span> % result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 抛出 raise 异常</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">input_password</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1. 提示用户输入密码</span></span><br><span class="line">    pwd = input(<span class="string">"请输入密码："</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 判断密码长度，如果长度 &gt;= 8，返回用户输入的密码</span></span><br><span class="line">    <span class="keyword">if</span> len(pwd) &gt;= <span class="number">8</span>:</span><br><span class="line">        <span class="keyword">return</span> pwd</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. 密码长度不够，需要抛出异常</span></span><br><span class="line">    <span class="comment"># 1&gt; 创建异常对象 - 使用异常的错误信息字符串作为参数</span></span><br><span class="line">    ex = Exception(<span class="string">"密码长度不够"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2&gt; 抛出异常对象</span></span><br><span class="line">    <span class="comment"># raise 关键字 抛出 异常对象</span></span><br><span class="line">    <span class="keyword">raise</span> ex</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    user_pwd = input_password()</span><br><span class="line">    print(user_pwd)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">    print(<span class="string">"发现错误：%s"</span> % result)</span><br></pre></td></tr></table></figure></div>

<h4 id="异常的概念"><a href="#异常的概念" class="headerlink" title="异常的概念"></a>异常的概念</h4><h4 id="捕获异常"><a href="#捕获异常" class="headerlink" title="捕获异常"></a>捕获异常</h4><h4 id="异常的传递"><a href="#异常的传递" class="headerlink" title="异常的传递"></a>异常的传递</h4><h4 id="抛出-raise-异常"><a href="#抛出-raise-异常" class="headerlink" title="抛出 raise 异常"></a>抛出 raise 异常</h4><h3 id="模块和包"><a href="#模块和包" class="headerlink" title="模块和包"></a>模块和包</h3><h4 id="demo-11"><a href="#demo-11" class="headerlink" title="demo"></a>demo</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 模块</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">import 模块名1</span></span><br><span class="line"><span class="string">import 模块名2</span></span><br><span class="line"><span class="string">import 模块名1 as 模块别名</span></span><br><span class="line"><span class="string"># 通过 模块名. 使用 模块提供的工具 —— 全局变量、函数、类</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 从 模块 导入 某一个工具</span></span><br><span class="line"><span class="string">from 模块名1 import 工具名</span></span><br><span class="line"><span class="string"># 可以直接使用 模块提供的工具 —— 全局变量、函数、类</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">如果 两个模块,存在 同名的函数，那么 后导入模块的函数，会 覆盖掉先导入的函数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 从 模块 导入 所有工具</span></span><br><span class="line"><span class="string"># 这种方式不推荐使用，因为函数重名并没有任何的提示，出现问题不好排查</span></span><br><span class="line"><span class="string">from 模块名1 import *</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">__name__ 属性</span></span><br><span class="line"><span class="string">    __name__ 属性可以做到，测试模块的代码 只在测试情况下被运行，而在 被导入时不会被执行！</span></span><br><span class="line"><span class="string">    __name__ 是 Python 的一个内置属性，记录着一个 字符串</span></span><br><span class="line"><span class="string">    如果 是被其他文件导入的，__name__ 就是 模块名</span></span><br><span class="line"><span class="string">    如果 是当前执行的程序 __name__ 是 __main__</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 模块内部测试代码</span></span><br><span class="line"><span class="comment"># 导入模块</span></span><br><span class="line"><span class="comment"># 定义全局变量</span></span><br><span class="line"><span class="comment"># 定义类</span></span><br><span class="line"><span class="comment"># 定义函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在代码的最下方</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据 __name__ 判断是否执行下方代码</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 包</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">1、新建一个 hm_message 的 包</span></span><br><span class="line"><span class="string">2、在目录下，新建两个文件 send_message 和 receive_message</span></span><br><span class="line"><span class="string">3、在 send_message 文件中定义一个 send 函数</span></span><br><span class="line"><span class="string">4、在 receive_message 文件中定义一个 receive 函数</span></span><br><span class="line"><span class="string">5、在外部直接导入 hm_message 的包</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># __init__.py</span></span><br><span class="line"><span class="comment"># 从 当前目录 导入 模块列表</span></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> send_message</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> receive_message</span><br><span class="line"></span><br><span class="line"><span class="comment"># 要在外界使用 包 中的模块</span></span><br><span class="line"><span class="keyword">import</span> m_message</span><br><span class="line">m_message.receive_message.receive()</span><br><span class="line">m_message.send_message.send()</span><br></pre></td></tr></table></figure></div>

<h4 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h4><h4 id="包（Package）"><a href="#包（Package）" class="headerlink" title="包（Package）"></a>包（Package）</h4><h4 id="发布模块"><a href="#发布模块" class="headerlink" title="发布模块"></a>发布模块</h4><h5 id="制作发布压缩包步骤"><a href="#制作发布压缩包步骤" class="headerlink" title="制作发布压缩包步骤"></a>制作发布压缩包步骤</h5><h5 id="安装模块"><a href="#安装模块" class="headerlink" title="安装模块"></a>安装模块</h5><h5 id="pip-安装第三方模块"><a href="#pip-安装第三方模块" class="headerlink" title="pip 安装第三方模块"></a>pip 安装第三方模块</h5><h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><h4 id="demo-12"><a href="#demo-12" class="headerlink" title="demo"></a>demo</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 文件的基本操作</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">open,read,write,close</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">当执行了 read 方法后，文件指针 会移动到 读取内容的末尾</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">f = open("文件名", "访问方式")</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 读</span></span><br><span class="line"><span class="comment"># 1. 打开 - 文件名需要注意大小写</span></span><br><span class="line">file = open(<span class="string">"README"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 读取</span></span><br><span class="line">text = file.read()</span><br><span class="line">print(text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 关闭</span></span><br><span class="line">file.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写</span></span><br><span class="line"><span class="comment"># 打开文件</span></span><br><span class="line">f = open(<span class="string">"README"</span>, <span class="string">"w"</span>)  <span class="comment"># r是默认</span></span><br><span class="line"></span><br><span class="line">f.write(<span class="string">"hello python！\n"</span>)</span><br><span class="line">f.write(<span class="string">"今天天气真好"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭文件</span></span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 按行读</span></span><br><span class="line"><span class="comment"># 打开文件</span></span><br><span class="line">file = open(<span class="string">"README"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 读取一行内容</span></span><br><span class="line">    text = file.readline()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断是否读到内容</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> text:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 每读取一行的末尾已经有了一个 `\n`</span></span><br><span class="line">    print(text, end=<span class="string">""</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭文件</span></span><br><span class="line">file.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 小文件复制</span></span><br><span class="line"><span class="comment"># 1. 打开文件</span></span><br><span class="line">file_read = open(<span class="string">"README"</span>)</span><br><span class="line">file_write = open(<span class="string">"README[复件]"</span>, <span class="string">"w"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 读取并写入文件</span></span><br><span class="line">text = file_read.read()</span><br><span class="line">file_write.write(text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 关闭文件</span></span><br><span class="line">file_read.close()</span><br><span class="line">file_write.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 大文件复制：逐行</span></span><br><span class="line"><span class="comment"># 1. 打开文件</span></span><br><span class="line">file_read = open(<span class="string">"README"</span>)</span><br><span class="line">file_write = open(<span class="string">"README[复件]"</span>, <span class="string">"w"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 读取并写入文件</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 每次读取一行</span></span><br><span class="line">    text = file_read.readline()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断是否读取到内容</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> text:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    file_write.write(text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 关闭文件</span></span><br><span class="line">file_read.close()</span><br><span class="line">file_write.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件/目录的常用管理操作</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">创建、重命名、删除、改变路径、查看目录内容、……</span></span><br><span class="line"><span class="string">需要导入 os 模块</span></span><br><span class="line"><span class="string">例如：os.rename(源文件名, 目标文件名)</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure></div>

<h4 id="文件的概念"><a href="#文件的概念" class="headerlink" title="文件的概念"></a>文件的概念</h4><h4 id="文件的基本操作"><a href="#文件的基本操作" class="headerlink" title="文件的基本操作"></a>文件的基本操作</h4><h4 id="文件-目录的常用管理操作"><a href="#文件-目录的常用管理操作" class="headerlink" title="文件/目录的常用管理操作"></a>文件/目录的常用管理操作</h4><h4 id="文本文件的编码格式"><a href="#文本文件的编码格式" class="headerlink" title="文本文件的编码格式"></a>文本文件的编码格式</h4><h5 id="ASCII-编码和-UNICODE-编码"><a href="#ASCII-编码和-UNICODE-编码" class="headerlink" title="ASCII 编码和 UNICODE 编码"></a>ASCII 编码和 UNICODE 编码</h5><h5 id="Ptyhon-2-x-中如何使用中文"><a href="#Ptyhon-2-x-中如何使用中文" class="headerlink" title="Ptyhon 2.x 中如何使用中文"></a>Ptyhon 2.x 中如何使用中文</h5><h3 id="eval-函数"><a href="#eval-函数" class="headerlink" title="eval 函数"></a>eval 函数</h3><h4 id="demo-13"><a href="#demo-13" class="headerlink" title="demo"></a>demo</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># eval 函数</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">eval() 函数十分强大 —— 将字符串 当成 有效的表达式 来求值 并 返回计算结果</span></span><br><span class="line"><span class="string">eval("1 + 1")</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 案例 - 计算器</span></span><br><span class="line">input_str = input(<span class="string">"请输入一个算术题："</span>)</span><br><span class="line">print(eval(input_str))</span><br></pre></td></tr></table></figure></div>





]]></content>
      <categories>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>python基础</tag>
      </tags>
  </entry>
  <entry>
    <title>服务容错&amp;服务跟踪&amp;容器部署</title>
    <url>/2018/12/27/20181227220131330/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="第9章-服务容错"><a href="#第9章-服务容错" class="headerlink" title="第9章 服务容错"></a>第9章 服务容错</h1><h2 id="服务容错和Hystrix"><a href="#服务容错和Hystrix" class="headerlink" title="服务容错和Hystrix"></a>服务容错和Hystrix</h2><p>问题引出：</p>
<p>​    雪崩效应：A —&gt; B —&gt; C ，B调用C不可用，B一直重试，A调用B也不可用了，这样，资源耗尽，整个系统不可用</p>
<p>Spring Cloud Hystrix</p>
<ul>
<li>防雪崩利器</li>
<li>服务降级<ul>
<li>场景：“服务开小差，请稍后重试”</li>
<li>（在高流量场景下）优先核心服务，非核心服务不可用或弱可用</li>
<li>通过HystrixCommand注解指定</li>
<li>fallbackMethod中具体实现降级逻辑</li>
</ul>
</li>
<li>服务熔断</li>
<li>依赖隔离</li>
<li>监控（Hystrix Dashboard）</li>
</ul>
<h2 id="触发降级"><a href="#触发降级" class="headerlink" title="触发降级"></a>触发降级</h2><p>pom</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>启动类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringCloudApplication</span> <span class="comment">//代替以下3个</span></span><br><span class="line"><span class="comment">//@EnableCircuitBreaker</span></span><br><span class="line"><span class="comment">//@SpringBootApplication</span></span><br><span class="line"><span class="comment">//@EnableDiscoveryClient</span></span><br></pre></td></tr></table></figure></div>

<p>触发降级</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mxx.order.controller;</span><br><span class="line"><span class="keyword">import</span> com.netflix.hystrix.contrib.javanica.annotation.DefaultProperties;</span><br><span class="line"><span class="keyword">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;</span><br><span class="line"><span class="meta">@DefaultProperties</span>(defaultFallback = <span class="string">"defaultFallback"</span>)</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HystrixController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"fallback"</span>)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/getProductInfo"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getProductInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        抛异常，就会触发降级，跳转执行fallbackMetho</span></span><br><span class="line"><span class="comment">        若并发太高或数据库连接太多，可以手动抛异常，触发降级</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">       <span class="comment">/* if(true)</span></span><br><span class="line"><span class="comment">            throw new RuntimeException("主动抛异常");*/</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success : productInfo"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@HystrixCommand</span>     <span class="comment">//使用默认fallbackMethod</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/getProductInfo2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getProductInfo2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">true</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"主动抛异常"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success : productInfo2"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">fallback</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"太拥挤了，请稍后重试"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">defaultFallback</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"默认提示：太拥挤了，请稍后重试"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="超时设置"><a href="#超时设置" class="headerlink" title="超时设置"></a>超时设置</h2><p>超过指定时间还没有访问成功，就降级处理</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"fallback"</span>,</span><br><span class="line">        commandProperties = <span class="meta">@HystrixProperty</span>(</span><br><span class="line">    name = <span class="string">"execution.isolation.thread.timeoutInMilliseconds"</span>, value = <span class="string">"3000"</span></span><br><span class="line">))	<span class="comment">// 默认是1000ms</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/getProductInfo"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getProductInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success : productInfo"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p>依赖隔离？？</p>
<ul>
<li>线程池隔离</li>
<li>Hystrix自动实现了依赖隔离</li>
</ul>
<h2 id="服务熔断"><a href="#服务熔断" class="headerlink" title="服务熔断"></a>服务熔断</h2><p>探讨断路器模式</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Circuit Breaker：断路器（电流过大时会烧坏保险丝，保护电路）</span><br><span class="line">断路器模式：当某个服务发生故障，通过circuitBreaker的故障监控，切断原来的主逻辑（跳闸），返回错误</span><br></pre></td></tr></table></figure></div>



<p>断路器状态图：</p>
<p>![屏幕快照 2018-12-28 下午4.07.56](20181227220131330/屏幕快照 2018-12-28 下午4.07.56.png) </p>
<p>解释：</p>
<ul>
<li>熔断器开始处于close状态，当调用失败次数累计到了阈值（比例），就会启动熔断机制（open），此时对服务都返回错误，但设置了个时钟，到了时钟后进入半熔断状态(Half Open)，允许定量服务请求。</li>
<li>在Half Open下，若服务都调用成功（或者满足成功比例），则认为恢复了，就会关闭（closed），否则又回到open状态</li>
</ul>
<p>关键参数</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">circuitBreaker.enabled 	&#x2F;&#x2F;开启熔断服务</span><br><span class="line">circuitBreaker.requestVolumeThreshold	&#x2F;&#x2F;在滚动时间窗口中，断路器最小请求数。请求数达到后才计算。</span><br><span class="line">circuitBreaker.sleepWindowInMilliseconds	&#x2F;&#x2F;休眠时间窗口</span><br><span class="line">circuitBreaker.errorThresholdPercentage		&#x2F;&#x2F;断路器打开的错误百分比条件</span><br></pre></td></tr></table></figure></div>

<p>解释：</p>
<ul>
<li><p>当调用失败次数达到 “错误百分比条件” ，断路器从“closed”进入“half open”。</p>
</li>
<li><p>当断路器“open”后，Hysticx会启动“休眠时间窗口”，在这个时间内，降级逻辑（fallbackMethod）成为临时主逻辑，当时间到期，断路器进入“half open”，释放一次请求到原来的逻辑上，若此次请求返回正常，则断路器“close” ，主逻辑恢复。否则，断路器“open”，“休眠时间窗口”重置计时。</p>
</li>
</ul>
<hr>
<p>操作：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@HystrixCommand</span>(commandProperties = &#123;</span><br><span class="line">       <span class="meta">@HystrixProperty</span>(name = <span class="string">"circuitBreaker.enabled"</span>, value = <span class="string">"true"</span>),               <span class="comment">//设置熔断</span></span><br><span class="line">       <span class="meta">@HystrixProperty</span>(name = <span class="string">"circuitBreaker.requestVolumeThreshold"</span>, value = <span class="string">"10"</span>), <span class="comment">//请求数达到后才计算</span></span><br><span class="line">       <span class="meta">@HystrixProperty</span>(name = <span class="string">"circuitBreaker.sleepWindowInMilliseconds"</span>, value = <span class="string">"10000"</span>), <span class="comment">//休眠时间窗</span></span><br><span class="line">       <span class="meta">@HystrixProperty</span>(name = <span class="string">"circuitBreaker.errorThresholdPercentage"</span>, value = <span class="string">"60"</span>),   <span class="comment">//错误率</span></span><br><span class="line">&#125;)</span><br><span class="line">   <span class="meta">@RequestMapping</span>(<span class="string">"/getProductInfo"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getProductInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>改为 使用yml配置项：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">yaml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">execution:</span></span><br><span class="line">        <span class="attr">isolation:</span></span><br><span class="line">          <span class="attr">thread:</span></span><br><span class="line">            <span class="attr">timeoutInMilliseconds:</span> <span class="number">1000</span></span><br><span class="line">    <span class="attr">getProductInfo:</span></span><br><span class="line">      <span class="attr">execution:</span></span><br><span class="line">        <span class="attr">isolation:</span></span><br><span class="line">          <span class="attr">thread:</span></span><br><span class="line">            <span class="attr">timeoutInMilliseconds:</span> <span class="number">3000</span></span><br></pre></td></tr></table></figure></div>





<h2 id="hystrix-dashboard"><a href="#hystrix-dashboard" class="headerlink" title="hystrix-dashboard"></a>hystrix-dashboard</h2><p>pom</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>yml</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">yaml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">hystrix.stream</span></span><br></pre></td></tr></table></figure></div>

<p>启动类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@EnableHystrixDashboard</span><br></pre></td></tr></table></figure></div>

<p>访问：<a href="http://localhost:8081/hystrix" target="_blank" rel="noopener">http://localhost:8081/hystrix</a></p>
<p>dashboard：</p>
<p>![屏幕快照 2018-12-28 下午5.24.36](20181227220131330/屏幕快照 2018-12-28 下午5.24.36.png) </p>
<p>再看熔断器状态：</p>
<ul>
<li><p>closed –&gt; open：当请求数达到“断路器最小请求数”，且失败率大于“错误百分比条件”</p>
</li>
<li><p>closed –&gt; half open：当调用失败次数达到 “错误百分比条件” </p>
</li>
<li><p>open –&gt; half open：当断路器“open”后，Hysticx会启动“休眠时间窗口”，在这个时间内，降级逻辑（fallbackMethod）成为临时主逻辑，当时间到期，断路器进入“half open”</p>
</li>
<li><p>half open –&gt; closed：进入“half open”后，释放一次请求到原来的逻辑上，若此次请求返回正常，则断路器“close” ，主逻辑恢复</p>
</li>
<li><p>half open –&gt; open：进入“half open”后，释放一次请求到原来的逻辑上，若此次请求返回失败，则断路器“open” ，“休眠时间窗口”重置计时。</p>
</li>
</ul>
<h2 id="Zuul：超时配置"><a href="#Zuul：超时配置" class="headerlink" title="Zuul：超时配置"></a>Zuul：超时配置</h2><p>问题引出：通过zuul第一次访问服务容易超时</p>
<p>解释：由于懒加载配置，第一次访问时会加载很多类，导致超过默认时间</p>
<p>如何修改默认超时时间？zuul使用的是hystrix的超时组件</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">yaml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">execution:</span></span><br><span class="line">        <span class="attr">isolation:</span></span><br><span class="line">          <span class="attr">thread:</span></span><br><span class="line">            <span class="attr">timeoutInMilliseconds:</span> <span class="number">3000</span></span><br></pre></td></tr></table></figure></div>



<h1 id="第10章-服务跟踪"><a href="#第10章-服务跟踪" class="headerlink" title="第10章 服务跟踪"></a>第10章 服务跟踪</h1><h2 id="实操：Sleuth-Zipkin"><a href="#实操：Sleuth-Zipkin" class="headerlink" title="实操：Sleuth+Zipkin"></a>实操：Sleuth+Zipkin</h2><p>链路监控</p>
<ul>
<li><p>Spring Cloud Sleuth</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- order 和 product 都要包含--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-sleuth<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>可视化工具：zipkin</p>
<ul>
<li><a href="https://zipkin.io/" target="_blank" rel="noopener">https://zipkin.io/</a></li>
<li>使用docker：docker run -d -p 9411:9411 openzipkin/zipkin</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 包含以上两个依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>配置</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">yaml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># order</span></span><br><span class="line"><span class="attr">spring:</span>  </span><br><span class="line">  <span class="attr">zipkin:</span></span><br><span class="line">    <span class="attr">base-url:</span> <span class="number">10.211</span><span class="number">.55</span><span class="number">.6</span><span class="string">:9411</span></span><br><span class="line">    <span class="attr">sender:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">web</span></span><br><span class="line">  <span class="attr">sleuth:</span></span><br><span class="line">    <span class="attr">sampler:</span></span><br><span class="line">      <span class="attr">probability:</span> <span class="number">1</span>  <span class="comment"># 抽样比100%</span></span><br><span class="line"><span class="comment"># order | product</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">   <span class="attr">level:</span></span><br><span class="line">     <span class="attr">org.springframework.cloud.openfeign:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>ui展示</li>
</ul>
<p>![屏幕快照 2019-01-22 上午10.43.15](20181227220131330/屏幕快照 2019-01-22 上午10.43.15.png) </p>
<p>可查看某个调用链的请求时间都花在哪一步了。</p>
</li>
</ul>
<h2 id="理论：分布式追踪系统"><a href="#理论：分布式追踪系统" class="headerlink" title="理论：分布式追踪系统"></a>理论：分布式追踪系统</h2><p><strong>分布式追踪系统</strong></p>
<p>核心步骤</p>
<ul>
<li>数据采集</li>
<li>数据存储</li>
<li>查询展示</li>
</ul>
<p>说明</p>
<ul>
<li>不同系统api不兼容，改动起来工作量很大</li>
<li>OpenTracing：解决不同分布式系统api不兼容问题，是一种标准</li>
<li>Annotation：事件类型…</li>
<li>Zipkin：遵循OpenTracing的产品，Twitter开源</li>
</ul>
<p>zipkin原理图</p>
<p>![屏幕快照 2019-01-22 上午10.52.37](20181227220131330/屏幕快照 2019-01-22 上午10.52.37.png) </p>
<p>zipkin关键概念</p>
<ul>
<li>traceId</li>
<li>spanId</li>
<li>parentId</li>
</ul>
<h1 id="第11章-容器部署"><a href="#第11章-容器部署" class="headerlink" title="第11章 容器部署"></a>第11章 容器部署</h1><h2 id="Eureka使用Docker部署"><a href="#Eureka使用Docker部署" class="headerlink" title="Eureka使用Docker部署"></a>Eureka使用Docker部署</h2><p>Dockerfile</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FROM hub.c.163.com&#x2F;library&#x2F;java:8-alpine</span><br><span class="line"></span><br><span class="line">MAINTAINER XXX XXX@imooc.com</span><br><span class="line"></span><br><span class="line">ADD target&#x2F;*.jar app.jar</span><br><span class="line"></span><br><span class="line">EXPOSE 8761</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [&quot;java&quot;, &quot;-jar&quot;, &quot;&#x2F;app.jar&quot;]</span><br></pre></td></tr></table></figure></div>



<p>运行<code>$ docker build -t myspringcloud/eureka .</code>制作镜像</p>
<h2 id="rancher"><a href="#rancher" class="headerlink" title="rancher"></a>rancher</h2><ul>
<li><p>开源企业级全栈化容器部署及管理平台[更方便地管理Docker]</p>
</li>
<li><p><a href="https://www.cnrancher.com/" target="_blank" rel="noopener">https://www.cnrancher.com/</a></p>
</li>
<li><p>安装rancher <code>docker run -d --restart=unless-stopped -p 80:80 -p 443:443 rancher/rancher:stable</code></p>
</li>
<li><p>登录后主界面</p>
</li>
</ul>
<p>![屏幕快照 2019-01-22 上午11.42.29](20181227220131330/屏幕快照 2019-01-22 上午11.42.29.png) </p>
<p>课程推荐：[Docker+Kubernetes微服务容器化实践]</p>
<p>方法总结：rancher+docker+网易云远程仓库 实现分布式部署</p>
]]></content>
      <categories>
        <category>Spring</category>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>Spring Cloud微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>服务网关&amp;Zuul综合使用</title>
    <url>/2018/12/27/20181227111536420/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="第7章-服务网关"><a href="#第7章-服务网关" class="headerlink" title="第7章 服务网关"></a>第7章 服务网关</h1><h2 id="服务网关和Zuul"><a href="#服务网关和Zuul" class="headerlink" title="服务网关和Zuul"></a>服务网关和Zuul</h2><p>为什么需要网关服务？</p>
<ul>
<li>统一的request入口</li>
</ul>
<p>![屏幕快照 2018-12-27 上午11.21.51](20181227111536420/屏幕快照 2018-12-27 上午11.21.51.png) </p>
<p>服务网关的要素：</p>
<ul>
<li>稳定性、高可用</li>
<li>性能、并发性</li>
<li>安全性</li>
<li>扩展性</li>
<li>（很多非业务功能在这里完成）</li>
</ul>
<p>常用的网关方案：</p>
<ul>
<li>Nginx + Lua</li>
<li>Kong：（商业软件）</li>
<li>Tyk：开源，Go语言开发</li>
<li>Spring Cloud Zuul：以java技术栈为主构建微服务 适合使用zuul 快速上手 但性能比Nginx差</li>
</ul>
<p>Zuul的特点</p>
<ul>
<li>路由+过滤器 = Zuul</li>
<li>核心：一系列过滤器</li>
</ul>
<p>Zuul的四种过滤器API</p>
<ul>
<li>前置（Pre）</li>
<li>路由（Route）</li>
<li>后置（Post）</li>
<li>错误（Error）</li>
</ul>
<p>fillter之间通过RequestContext进行交互</p>
<p>![屏幕快照 2018-12-27 上午11.46.07](20181227111536420/屏幕快照 2018-12-27 上午11.46.07.png) </p>
<p>zuul http请求生命周期</p>
<p>![屏幕快照 2018-12-27 上午11.47.12](20181227111536420/屏幕快照 2018-12-27 上午11.47.12.png) </p>
<p>pre：参数校验..</p>
<p>routing：转发，重写http请求…</p>
<p>post：对结果进行加工</p>
<p>error：发生异常时会到达，做统一异常处理</p>
<p>customer：自定义过滤器</p>
<h2 id="Zuul：路由转发-amp-自定义-amp-排除"><a href="#Zuul：路由转发-amp-自定义-amp-排除" class="headerlink" title="Zuul：路由转发&amp;自定义&amp;排除"></a>Zuul：路由转发&amp;自定义&amp;排除</h2><p>0、新建项目：api-gateway</p>
<p>pom</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">config-client </span><br><span class="line">eureka-discovery</span><br><span class="line">zuul</span><br></pre></td></tr></table></figure></div>



<p><strong>1、路由转发</strong></p>
<p>启动类：@EnableZuulProxy</p>
<p>通过访问gateway，路由到product/list</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost:9000&#x2F;product&#x2F;product&#x2F;list	项目名&#x2F;路径</span><br></pre></td></tr></table></figure></div>



<p><strong>2、自定义路由</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">yaml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">config:</span> <span class="string">/myconfig/**</span></span><br></pre></td></tr></table></figure></div>

<p>访问：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">都可以</span><br><span class="line">http:&#x2F;&#x2F;localhost:9000&#x2F;myconfig&#x2F;order-dev.yml</span><br><span class="line">http:&#x2F;&#x2F;localhost:9000&#x2F;config&#x2F;order-dev.yml</span><br></pre></td></tr></table></figure></div>



<p><strong>3、禁止路由</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">yaml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">ignored-patterns:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/**/product/list</span></span><br></pre></td></tr></table></figure></div>



<h2 id="Zuul：Cookie-amp-动态路由"><a href="#Zuul：Cookie-amp-动态路由" class="headerlink" title="Zuul：Cookie&amp;动态路由"></a>Zuul：Cookie&amp;动态路由</h2><p><strong>1、Cookie</strong></p>
<p>使用zuul后，默认Cookie是不传递的，配置使Cookie不被过滤掉</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">yaml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/myconfig/**</span></span><br><span class="line">      <span class="attr">serviceId:</span> <span class="string">config</span></span><br><span class="line">      <span class="comment"># 将set集合置null，就不会过滤掉Cookie</span></span><br><span class="line">      <span class="attr">sensitiveHeaders:</span></span><br></pre></td></tr></table></figure></div>



<p><strong>2、动态路由</strong></p>
<p>改路由配置后动态生效，不用重启gateway</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">思路</span><br><span class="line">1、只需要使用统一配置中心，把zuul节点的配置放在git端就可以动态更新yml了</span><br><span class="line">2、yml动态更新了，配置类也需要动态注入，使用@RefreshScope（一旦yml变化了，新配置就重新注入类）</span><br></pre></td></tr></table></figure></div>

<p>在启动类添加：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(<span class="string">"zuul"</span>)</span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ZuulProperties <span class="title">zuulProperties</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> ZuulProperties();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>





<h2 id="Zuul：路由和高可用小结"><a href="#Zuul：路由和高可用小结" class="headerlink" title="Zuul：路由和高可用小结"></a>Zuul：路由和高可用小结</h2><p>典型应用场景</p>
<p>pre：限流、鉴权、参数校验、请求转发…</p>
<p>post：统计、日志</p>
<p>Zuul高可用</p>
<ul>
<li>多个节点注册到Eureka Server 实现高可用</li>
<li>内部：a调用b 可以变成 a &gt; zuul服务 &gt; b</li>
<li>外部：Nginx+Zuul “混搭”，取长补短</li>
</ul>
<p>下章节探讨zuul过滤器相关</p>
<h1 id="第8章-Zuul综合使用"><a href="#第8章-Zuul综合使用" class="headerlink" title="第8章 Zuul综合使用"></a>第8章 Zuul综合使用</h1><h2 id="Zuul：Pre和Post过滤器"><a href="#Zuul：Pre和Post过滤器" class="headerlink" title="Zuul：Pre和Post过滤器"></a>Zuul：Pre和Post过滤器</h2><p>客户端 &gt; Nginx(负载均衡) &gt; Zuul &gt; …</p>
<p><strong>1、Pre过滤器</strong></p>
<p>应用场景：统一在Zuul做权限校验</p>
<p>场景细节：希望所有经过zuul的请求 带 token参数 且 不为null（实际业务中需要结合数据库进行更多校验）；如果不带参，则校验不通过，返回401（权限不足）。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// FilterConstants</span></span><br><span class="line"><span class="keyword">package</span> com.mxx.apigateway.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.netflix.zuul.ZuulFilter;</span><br><span class="line"><span class="keyword">import</span> com.netflix.zuul.context.RequestContext;</span><br><span class="line"><span class="keyword">import</span> com.netflix.zuul.exception.ZuulException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.cloud.netflix.zuul.filters.support.FilterConstants.PRE_DECORATION_FILTER_ORDER;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.cloud.netflix.zuul.filters.support.FilterConstants.PRE_TYPE;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TokenFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// FilterConstants</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> PRE_TYPE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 越小越前执行</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> PRE_DECORATION_FILTER_ORDER - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 过滤逻辑写在这</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">        RequestContext requestContext = RequestContext.getCurrentContext();</span><br><span class="line">        HttpServletRequest request = requestContext.getRequest();</span><br><span class="line">        String token = request.getParameter(<span class="string">"token"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isEmpty(token))&#123;</span><br><span class="line">            requestContext.setSendZuulResponse(<span class="keyword">false</span>);<span class="comment">//zuul 不通过</span></span><br><span class="line">            requestContext.setResponseStatusCode(HttpStatus.UNAUTHORIZED.value());<span class="comment">//401 没权限</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>测试</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost:9000&#x2F;myconfig&#x2F;order-dev.yml?token&#x3D;123	# 可以</span><br><span class="line">http:&#x2F;&#x2F;localhost:9000&#x2F;myconfig&#x2F;order-dev.yml?token&#x3D;		# 不行</span><br><span class="line">http:&#x2F;&#x2F;localhost:9000&#x2F;myconfig&#x2F;order-dev.yml			# 不行</span><br></pre></td></tr></table></figure></div>



<p><strong>2、Post过滤器</strong></p>
<p>应用场景：统一请求结束后做处理</p>
<p>场景细节：加个header参数</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mxx.apigateway.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.netflix.zuul.ZuulFilter;</span><br><span class="line"><span class="keyword">import</span> com.netflix.zuul.context.RequestContext;</span><br><span class="line"><span class="keyword">import</span> com.netflix.zuul.exception.ZuulException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.cloud.netflix.zuul.filters.support.FilterConstants.POST_TYPE;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.cloud.netflix.zuul.filters.support.FilterConstants.SEND_RESPONSE_FILTER_ORDER;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddResponseHeaderFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> POST_TYPE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SEND_RESPONSE_FILTER_ORDER -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">        RequestContext requestContext = RequestContext.getCurrentContext();</span><br><span class="line">        HttpServletResponse response = requestContext.getResponse();</span><br><span class="line">        response.setHeader(<span class="string">"X-Foo"</span>, UUID.randomUUID().toString());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>测试：浏览器控制台 &gt; …</p>
<h2 id="Zuul：限流"><a href="#Zuul：限流" class="headerlink" title="Zuul：限流"></a>Zuul：限流</h2><p><strong>1、限流</strong></p>
<ul>
<li><p>限制客户端请求速率</p>
</li>
<li><p>时机：请求转发前调用（放在前置过滤器最靠前的地方：pre里有限流、鉴权，则限流改早于鉴权）</p>
</li>
<li><p>方案：比如令牌桶限流（参考我的【高并发专题】）</p>
</li>
</ul>
<h2 id="Zuul：鉴权-amp-添加用户服务"><a href="#Zuul：鉴权-amp-添加用户服务" class="headerlink" title="Zuul：鉴权&amp;添加用户服务"></a>Zuul：鉴权&amp;添加用户服务</h2><p>业务需求：</p>
<ul>
<li>order/create    只能买家访问</li>
<li>order/finish  只能卖家访问</li>
<li>product/list  都可以访问</li>
</ul>
<p>所以过滤器要区分买家/卖家…如何区分？… header cokkie …先完成登录才会看到信息 … 先把用户服务建起来</p>
<p><strong>1、添加用户服务</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">数据库</span><br><span class="line">新建项目：user</span><br><span class="line">业务：模拟买家卖家登录功能实现</span><br><span class="line">业务：完结订单接口开发</span><br></pre></td></tr></table></figure></div>





<p><strong>2、权限校验</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">业务：完成权限校验</span><br><span class="line">优化场景：硬编码到filer不适合 权限特别多&#x2F;经常变动的场合</span><br><span class="line">优化方案：分开写买家卖家的权限类，在是否需要拦截的方法里判断用户类型，决定是否放行，以后有新角色只需要加类就行</span><br><span class="line">注意：api-gateway不要连数据库或者直接api调用服务，建议都利用redis做中间</span><br></pre></td></tr></table></figure></div>



<p>方案：</p>
<ul>
<li>pre</li>
<li>分布式session Vs OAuth2</li>
</ul>
<h2 id="Zuul：跨域"><a href="#Zuul：跨域" class="headerlink" title="Zuul：跨域"></a>Zuul：跨域</h2><ul>
<li><p>ajax跨域问题</p>
</li>
<li><p>解决方案：在类或方法上加@CrossOrigin (不推荐)</p>
</li>
<li><p>解决方案：在Zuul里增加CorsFilter过滤器（就是将CorsFilter配置好后注入就行）</p>
</li>
</ul>
<p>具体代码：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">config&#x2F;CorsConfig</span><br><span class="line">略</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>Spring</category>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>Spring Cloud微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>统一配置中心&amp;消息和异步</title>
    <url>/2018/12/20/20181220150109873/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="第5章-统一配置中心"><a href="#第5章-统一配置中心" class="headerlink" title="第5章 统一配置中心"></a>第5章 统一配置中心</h1><h2 id="统一配置中心概述"><a href="#统一配置中心概述" class="headerlink" title="统一配置中心概述"></a>统一配置中心概述</h2><p>出现的问题</p>
<ul>
<li>不方便维护（多人开发）</li>
<li>配置内容的安全与权限（数据库密码）</li>
<li>更新配置后需要重启（文案）</li>
</ul>
<p>统一配置中心</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">配置都放在git上(方便版本控制) ---&gt; config-server &lt;——&gt;本地git</span><br><span class="line">									|</span><br><span class="line">									|</span><br><span class="line">								   \|&#x2F;</span><br><span class="line">				product、order从config-server拿配置</span><br></pre></td></tr></table></figure></div>



<h2 id="Config-Server"><a href="#Config-Server" class="headerlink" title="Config Server"></a>Config Server</h2><p>创建config项目</p>
<p>创建远程git私有项目config-repo</p>
<p>pom</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>yml</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">yml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://gitee.com/machine4869/config-repo.git</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">hhdwwt@163.com</span></span><br><span class="line">          <span class="attr">password:</span> <span class="string">XXXXXXX</span></span><br><span class="line">          <span class="comment"># git本地存在哪</span></span><br><span class="line">          <span class="attr">basedir:</span> <span class="string">/machine/codding/springcloud/config/src/main/resources/basedir</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure></div>

<p>启动类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span></span><br></pre></td></tr></table></figure></div>

<p>说明：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">访问http:&#x2F;&#x2F;localhost:8080&#x2F;order-dev.yml	可以查看从远程拉取的配置</span><br><span class="line"></span><br><span class="line">1、关于路径格式</span><br><span class="line">&#123;name&#125;-&#123;profiles&#125;.yml</span><br><span class="line">&#x2F;&#123;lable&#125;&#x2F;&#123;name&#125;-&#123;profiles&#125;.yml</span><br><span class="line">name 服务名</span><br><span class="line">lable 分支(brunch 默认master)</span><br><span class="line">	</span><br><span class="line">访问路径：localhost:8080&#x2F;release&#x2F;order-dev.yml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、配置格式变化</span><br><span class="line">&#x2F;order-a.yml</span><br><span class="line">&#x2F;order-a.properties</span><br><span class="line">&#x2F;order-a.json</span><br><span class="line"></span><br><span class="line">3、加载顺序</span><br><span class="line">order-dev.yml 会加载order.yml	再加载order-dev.yml（重复的内容会覆盖）</span><br><span class="line">order.yml放公用配置</span><br></pre></td></tr></table></figure></div>



<h2 id="Config-Client"><a href="#Config-Client" class="headerlink" title="Config Client"></a>Config Client</h2><p>pom</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.pivotal.spring.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-services-starter-config-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>



<p>先后？先载入本项目的配置：bootstrp.yml</p>
<p>yml</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">yaml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">order</span></span><br><span class="line">    <span class="comment"># 使用远程配置的内容</span></span><br><span class="line"><span class="comment">#  datasource:</span></span><br><span class="line"><span class="comment">#    driver-class-name: com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="comment">#    username: machine</span></span><br><span class="line"><span class="comment">#    password: 4869</span></span><br><span class="line"><span class="comment">#    url: jdbc:mysql://10.211.55.6:3306/SpringCloud_Sell?characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">  <span class="comment"># 使用统一配置中心</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">service-id:</span> <span class="string">config</span></span><br><span class="line"><span class="comment">#      label: 默认使用master</span></span><br><span class="line"><span class="comment">#      name: 默认使用order</span></span><br><span class="line"><span class="comment">#      profile:	默认没有使用</span></span><br></pre></td></tr></table></figure></div>

<p>验证远程配置已经拿到？注释掉了本地配置数据库的信息，但是仍然能从远程拿到数据库配置，正确启动。</p>
<h2 id="Spring-Cloud-Bus自动更新配置"><a href="#Spring-Cloud-Bus自动更新配置" class="headerlink" title="Spring Cloud Bus自动更新配置"></a>Spring Cloud Bus自动更新配置</h2><p>不需要重启应用？改了远程git就动态刷新？怎么做？</p>
<p><strong>理论</strong></p>
<p>![屏幕快照 2018-12-20 下午4.19.38](20181220150109873/屏幕快照 2018-12-20 下午4.19.38.png) </p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bus:总线</span><br><span class="line"></span><br><span class="line">1、关键：</span><br><span class="line">git远程修改配置后 --&gt; config-server能通知order</span><br><span class="line"></span><br><span class="line">2、怎么通知？</span><br><span class="line">消息队列：使用RabbitMQ</span><br><span class="line"></span><br><span class="line">config-server使用Spring Cloud Bus后，对外暴露&#x2F;bus-refresh接口</span><br><span class="line">访问该接口config-server就会把更新信息发送到MQ</span><br><span class="line"></span><br><span class="line">3、谁来访问接口？</span><br><span class="line">git来访问最合适--webhook	只需要配置接口地址</span><br></pre></td></tr></table></figure></div>



<hr>
<p><strong>实操</strong></p>
<p>1、打通config和order的rabbitMQ</p>
<p>order、config项目都要改：</p>
<p>pom</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>yml</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">yaml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">	<span class="attr">rabbitmq:</span></span><br><span class="line">    	<span class="attr">host:</span> <span class="number">10.211</span><span class="number">.55</span><span class="number">.6</span></span><br><span class="line">    	<span class="comment"># 其他都是默认值</span></span><br></pre></td></tr></table></figure></div>

<p>此时，rabbitMQ界面的Queues会出现2条</p>
<p>2、访问/bus-refresh触发 config通知 —rabbit—&gt; order更新</p>
<p>yml</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">yaml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 暴露/bus-refresh接口</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">"*"</span></span><br></pre></td></tr></table></figure></div>

<p>测试：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;girl.name&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String girlName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/getGirl"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getGirl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"girlName:"</span> + girlName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>解释</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查看日志：Mapped &quot;&#123;[&#x2F;actuator&#x2F;bus-refresh],methods&#x3D;[POST]&#125;&quot; </span><br><span class="line"></span><br><span class="line">访问 POST &#x2F;actuator&#x2F;bus-refresh	代表通知更新：git通知 -&gt; config通知 -&gt; order更新</span><br></pre></td></tr></table></figure></div>

<p>测试：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;girl.name&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String girlName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/getGirl"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getGirl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"girlName:"</span> + girlName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//git修改 》 /bus-refresh触发  》 ...</span></span><br></pre></td></tr></table></figure></div>



<p>3、使用git的web-hook 触发接口</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、使用github提供的WebHooks</span><br><span class="line"></span><br><span class="line">使用https:&#x2F;&#x2F;www.ngrok.cc提供的内网穿透</span><br><span class="line"></span><br><span class="line">content-type 选 application&#x2F;json	其他默认</span><br><span class="line">config为webhook提供了专用接口 &#x2F;monitor</span><br><span class="line"></span><br><span class="line">2、</span><br><span class="line">添加如下</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-config-monitor&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;此时 git修改 即可实时在order看到变化</span><br></pre></td></tr></table></figure></div>



<h1 id="第6章-消息和异步"><a href="#第6章-消息和异步" class="headerlink" title="第6章 消息和异步"></a>第6章 消息和异步</h1><h2 id="异步和消息"><a href="#异步和消息" class="headerlink" title="异步和消息"></a>异步和消息</h2><p>异步：客户端请求不会阻塞进程，服务端的响应可以是非即时的</p>
<p>异步的常形态：</p>
<ul>
<li>通知</li>
<li>请求/异步响应</li>
<li>消息（发布订阅模式）</li>
</ul>
<p>MQ应用场景：</p>
<ul>
<li>异步处理（发短信）</li>
<li>流量削峰（秒杀：流量过大，通常加入消息队列控制活动人数，若消息队列长度超过最大数量，就抛弃请求）</li>
<li>日志处理（kafka、大数据）</li>
<li>应用解耦（用户下单后，订单服务通知商品系统[消息写入队列]，商品服务订阅消息）</li>
</ul>
<h2 id="RabbitMQ基本使用"><a href="#RabbitMQ基本使用" class="headerlink" title="RabbitMQ基本使用"></a>RabbitMQ基本使用</h2><p>pom</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>order \ message\MqReceiver</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mxx.order.message;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.Exchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.QueueBinding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MqReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1、@RabbitListener(queues = "myQueue")</span></span><br><span class="line">    <span class="comment">// 2、自动新建队列 @RabbitListener(queuesToDeclare = @Queue("myQueue"))</span></span><br><span class="line">    <span class="comment">// 3、队列和exchange绑定</span></span><br><span class="line">    <span class="meta">@RabbitListener</span>(bindings = <span class="meta">@QueueBinding</span>(</span><br><span class="line">            value = <span class="meta">@Queue</span>(<span class="string">"myQueue"</span>),</span><br><span class="line">            exchange = <span class="meta">@Exchange</span>(<span class="string">"myExchange"</span>)</span><br><span class="line">    ))</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(String massage)</span></span>&#123;</span><br><span class="line">        log.info(<span class="string">"MqReceiver: &#123;&#125;"</span>,massage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4、分组发送消息（订单消息分别发给：数码供应商、水果供应商）</span></span><br><span class="line">    <span class="meta">@RabbitListener</span>(bindings = <span class="meta">@QueueBinding</span>(</span><br><span class="line">            exchange = <span class="meta">@Exchange</span>(<span class="string">"myOrder"</span>),</span><br><span class="line">            key = <span class="string">"computer"</span>,</span><br><span class="line">            value = <span class="meta">@Queue</span>(<span class="string">"computerOrder"</span>)</span><br><span class="line">    ))</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processComputer</span><span class="params">(String massage)</span></span>&#123;</span><br><span class="line">        log.info(<span class="string">"MqReceiver-processComputer: &#123;&#125;"</span>,massage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener</span>(bindings = <span class="meta">@QueueBinding</span>(</span><br><span class="line">            exchange = <span class="meta">@Exchange</span>(<span class="string">"myOrder"</span>),</span><br><span class="line">            key = <span class="string">"fruit"</span>,</span><br><span class="line">            value = <span class="meta">@Queue</span>(<span class="string">"fruitOrder"</span>)</span><br><span class="line">    ))</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processFruit</span><span class="params">(String massage)</span></span>&#123;</span><br><span class="line">        log.info(<span class="string">"MqReceiver-processComputer: &#123;&#125;"</span>,massage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>发送测试</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">MqSendTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AmqpTemplate amqpTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span></span>&#123;</span><br><span class="line">        amqpTemplate.convertAndSend(<span class="string">"myQueue"</span>,<span class="string">"now "</span>+<span class="keyword">new</span> Date());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendComputer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        amqpTemplate.convertAndSend(<span class="string">"myOrder"</span>,<span class="string">"computer"</span>,<span class="string">"now "</span>+<span class="keyword">new</span> Date());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="Spring-Cloud-Stream"><a href="#Spring-Cloud-Stream" class="headerlink" title="Spring Cloud Stream"></a>Spring Cloud Stream</h2><p>理论：</p>
<ul>
<li>为微服务应用构建消息驱动能力的框架</li>
<li>应用程序通过input\output与binder交互，binder与中间件交互</li>
<li>优势：对消息中间件进一步封装，可做到代码层面无感知\切换中间件</li>
<li>局限：目前只支持rabbitMQ和kafka</li>
</ul>
<p>![屏幕快照 2018-12-24 下午4.45.50](20181220150109873/屏幕快照 2018-12-24 下午4.45.50.png)</p>
<p>实操：</p>
<p>pom</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-stream-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>



<ol start="0">
<li><strong>快速开始</strong></li>
</ol>
<p>message\StreamReceiver</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.cloud.stream.annotation.EnableBinding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.stream.annotation.StreamListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.stream.messaging.Sink;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@EnableBinding</span>(Sink<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">Slf4j</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">StreamReceiver</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 消费MQ的消息</span></span><br><span class="line">    <span class="meta">@StreamListener</span>(Sink.INPUT)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"StreamReceiver :"</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>发送测试:</p>
<p> rabbit &gt; queue &gt; input.anonymous.L92bTj6FRTyOC0QE-Pl0HA &gt; publish message &gt; payload处输入一个<code>hello world</code>，点Publlish message发送一个消息</p>
<ol>
<li><strong>自定义消息发送接收</strong></li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mxx.order.message;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.stream.annotation.Input;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.stream.annotation.Output;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.MessageChannel;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.SubscribableChannel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StreamClient</span> </span>&#123;</span><br><span class="line">    String INPUT = <span class="string">"mxxInput"</span>;</span><br><span class="line">    String OUTPUT = <span class="string">"mxxOutput"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Input</span>(StreamClient.INPUT)</span><br><span class="line">    <span class="function">SubscribableChannel <span class="title">input</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Output</span>(StreamClient.OUTPUT)</span><br><span class="line">    <span class="function">MessageChannel <span class="title">output</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>yml 、把输入输出流绑定到rabbit的同一个exchanges(topic)</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">yaml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span>    </span><br><span class="line">    <span class="attr">cloud:</span></span><br><span class="line">      <span class="attr">stream:</span></span><br><span class="line">        <span class="attr">bindings:</span></span><br><span class="line">          <span class="attr">mxxInput:</span></span><br><span class="line">            <span class="attr">destination:</span> <span class="string">mxxMessage</span></span><br><span class="line">          <span class="attr">mxxOutput:</span></span><br><span class="line">            <span class="attr">destination:</span> <span class="string">mxxMessage</span></span><br></pre></td></tr></table></figure></div>

<p>启动后，<strong>默认是会创建一个临时队列，临时队列绑定的exchange为</strong> “mxxMessage”</p>
<p>测试output</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mxx.order.controller;</span><br><span class="line"><span class="keyword">import</span> com.mxx.order.message.StreamClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.stream.annotation.EnableBinding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.stream.messaging.Source;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.MessageChannel;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.support.MessageBuilder;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableBinding</span>(StreamClient<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StreamClient streamClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"sendMessage"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//发送消息到MQ</span></span><br><span class="line">        streamClient.output().send(MessageBuilder.withPayload(<span class="string">"now "</span>+<span class="keyword">new</span> Date()).build());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>







<ol start="2">
<li><strong>分组与持久化</strong></li>
</ol>
<p>问题引出：同一应用中只需有一个实例消费该消息，但是不同实例现在都在消费“mxxMessage”里的消息</p>
<p>解释：默认创建的临时队列，程序关闭的时候，队列也会消失。我们需要一个持久化的队列，并且指定一个分组。<strong>当一个应用程序不同实例放置在一个具有竞争关系的消费组中，组里面的实例中只有一个能够消费消息</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">yaml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">	<span class="attr">cloud:</span></span><br><span class="line">        <span class="attr">stream:</span></span><br><span class="line">          <span class="attr">bindings:</span></span><br><span class="line">            <span class="attr">input:</span></span><br><span class="line">              <span class="attr">group:</span> <span class="string">group-1</span></span><br></pre></td></tr></table></figure></div>



<p>改进：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">yaml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span>    </span><br><span class="line">   <span class="attr">cloud:</span></span><br><span class="line">     <span class="attr">stream:</span></span><br><span class="line">       <span class="attr">bindings:</span></span><br><span class="line">         <span class="attr">mxxInput:</span></span><br><span class="line">           <span class="attr">destination:</span> <span class="string">mxxMessage</span></span><br><span class="line">           <span class="attr">group:</span> <span class="string">order</span>	<span class="comment"># </span></span><br><span class="line">         <span class="attr">mxxOutput:</span></span><br><span class="line">           <span class="attr">destination:</span> <span class="string">mxxMessage</span></span><br><span class="line">           <span class="attr">group:</span> <span class="string">order</span>	<span class="comment">#</span></span><br></pre></td></tr></table></figure></div>

<p>不同实例只会有一个在消费消息，默认轮训方式</p>
<ol start="3">
<li><strong>传递对象</strong></li>
</ol>
<p>发送</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// orderDTO是一个对象类型</span></span><br><span class="line">streamClient.output().send(MessageBuilder.withPayload(orderDTO).build());</span><br></pre></td></tr></table></figure></div>

<p>接收</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 消费MQ的消息</span></span><br><span class="line"><span class="meta">@StreamListener</span>(StreamClient.INPUT)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(OrderDTO message)</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">"StreamReceiver: &#123;&#125;"</span> ,message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>为了在rabbit页面方便调试，指定输出格式</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">yaml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">	<span class="attr">cloud:</span></span><br><span class="line">        <span class="attr">stream:</span></span><br><span class="line">          <span class="attr">bindings:</span></span><br><span class="line">            <span class="attr">mxxInput:</span></span><br><span class="line">              <span class="attr">contentType:</span> <span class="string">application/json</span>	<span class="comment"># 默认值也是这个</span></span><br></pre></td></tr></table></figure></div>

<p>点击“Get Messages”按钮可以查看消息</p>
<ol start="4">
<li><strong>消费完后回应</strong></li>
</ol>
<p>关键： @SendTo</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@StreamListener</span>(StreamClient.INPUT)</span><br><span class="line"><span class="meta">@SendTo</span>(StreamClient.OUTPUT)	<span class="comment">// 将返回值发送到OUTPUT对应的MQ</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">processInput</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">"StreamReceiver input: &#123;&#125;"</span> ,message);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"完成消费"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p>stream简化了消息队列的开发：不需要关注exchange…啥的</p>
<h2 id="业务：商品和订单服务中使用MQ"><a href="#业务：商品和订单服务中使用MQ" class="headerlink" title="业务：商品和订单服务中使用MQ"></a>业务：商品和订单服务中使用MQ</h2><p><strong>业务分析</strong></p>
<p>订单 &lt;—库存变化— 消息队列 &lt;—库存变化— 商品</p>
<ul>
<li><p>订单拿到库存变化消息后，将数据记录到redis里</p>
</li>
<li><p>库存变化场景：</p>
<ul>
<li>第一次录入商品</li>
<li>补货</li>
<li>扣库存</li>
</ul>
</li>
<li><p>以扣库存为例使用消息队列</p>
</li>
</ul>
<hr>
<p><strong>实操</strong></p>
<p>1、改成统一配置中心</p>
<p>2、在product 扣库存的地方发送消息</p>
<p>pom</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>service</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AmqpTemplate amqpTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">decreaseStock</span><span class="params">(List&lt;DecreaseStockInput&gt; decreaseStockInputList)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//扣库存</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//发消息</span></span><br><span class="line">    amqpTemplate.convertAndSend(<span class="string">"productInfoOutputList"</span>, JsonUtil.toJson(productInfoOutputList));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>yml ：配置mq​    </p>
<p>测试：在rabbit创建队列观察</p>
<p>3、在order 接收消息，将消息存到redis</p>
<p>使用docker安装redis</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run -d -p 6379:6379 hub.c.163.com/library/redis:latest</span><br></pre></td></tr></table></figure></div>

<p>pom</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>yml：redis配置</p>
<p>message/ProductInfoReceiver</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mxx.order.message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductInfoReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PRODUCT_STOCK_TEMPLATE = <span class="string">"product_stock_%s"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener</span>(queuesToDeclare = <span class="meta">@Queue</span>(<span class="string">"productInfoOutputList"</span>))</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        List&lt;ProductInfoOutput&gt; productInfoOutputList = (List&lt;ProductInfoOutput&gt;)JsonUtil</span><br><span class="line">                .fromJson(message, <span class="keyword">new</span> TypeReference&lt;List&lt;ProductInfoOutput&gt;&gt;()&#123;&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//存到redis</span></span><br><span class="line">        <span class="keyword">for</span> (ProductInfoOutput productInfoOutput : productInfoOutputList)&#123;</span><br><span class="line"></span><br><span class="line">            stringRedisTemplate.opsForValue().set(</span><br><span class="line">                    String.format(PRODUCT_STOCK_TEMPLATE,productInfoOutput.getProductId()),</span><br><span class="line">                    String.valueOf(productInfoOutput.getProductStock()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="业务：异步扣库存分析"><a href="#业务：异步扣库存分析" class="headerlink" title="业务：异步扣库存分析"></a>业务：异步扣库存分析</h2><p><strong>保证数据一致性！</strong></p>
<ul>
<li>可靠的消息投递</li>
<li>用户体验变化</li>
<li>改为异步需要考虑很多细节问题来保证一致性！如果高并发需求不大慎用！</li>
</ul>
<p>（高并发场景的业务方案：秒杀等，结合redis，缓存，事务，分布式事务，一致性）</p>
]]></content>
      <categories>
        <category>Spring</category>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>Spring Cloud微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker</title>
    <url>/2018/12/18/20181218225336118/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>参考：imooc 《第一个docker化的java应用》</p>
</blockquote>
<h1 id="docker概念"><a href="#docker概念" class="headerlink" title="docker概念"></a>docker概念</h1><p>服务弹性伸缩、部署简单、解放运维、节省机器资源</p>
<p>应用：京东、阿里、腾讯</p>
<h2 id="docker历史"><a href="#docker历史" class="headerlink" title="docker历史"></a>docker历史</h2><ul>
<li>2010 dotCloud PAAS</li>
<li>2013 docker开源</li>
<li>2014.6 Docker 1.0</li>
<li>至今…</li>
</ul>
<h2 id="docker是什么"><a href="#docker是什么" class="headerlink" title="docker是什么"></a>docker是什么</h2><ul>
<li>一个用来装应用的容器</li>
<li>官网：<a href="https://www.docker.com/" target="_blank" rel="noopener">https://www.docker.com/</a></li>
<li>跨平台</li>
</ul>
<h1 id="docker理解"><a href="#docker理解" class="headerlink" title="docker理解"></a>docker理解</h1><h2 id="docker思想"><a href="#docker思想" class="headerlink" title="docker思想"></a>docker思想</h2><p>![屏幕快照 2018-12-18 下午11.15.41](20181218225336118/屏幕快照 2018-12-18 下午11.15.41.png) </p>
<ul>
<li>集装箱（解决零散问题、货物就是程序）</li>
<li>标准化<ul>
<li>运输方式：由鲸鱼统一运输（超级码头）</li>
<li>存储方式：不需关心应用存在哪，用docker管理/运行</li>
<li>api接口：执行同样的命令控制所有应用</li>
</ul>
</li>
<li>隔离：理解为虚拟机</li>
</ul>
<h2 id="docker解决了什么问题"><a href="#docker解决了什么问题" class="headerlink" title="docker解决了什么问题"></a>docker解决了什么问题</h2><ul>
<li><p>我本地运行没问题啊？？（javaweb依赖：操作系统、jdk、tomcat、代码、配置文件）</p>
<ul>
<li>docker把这些环境统统打包装箱</li>
</ul>
</li>
<li><p>系统好卡（内存不够、服务变慢、别的应用疯狂吃cpu）</p>
<ul>
<li>docker隔离性：限定本应用的cpu\内存\硬盘，违规就杀掉自己</li>
</ul>
</li>
<li><p>双11来了，服务器撑不住</p>
<ul>
<li>一年就那么关键几天并发量特高、按最高标准准备服务器对平时是浪费，所以在节日前临时扩展机器，过节完把节点下线：运维工作量巨大</li>
<li>docker标准化：让快速扩展、弹性伸缩变得简单</li>
</ul>
</li>
</ul>
<h1 id="docker技术"><a href="#docker技术" class="headerlink" title="docker技术"></a>docker技术</h1><h2 id="docker核心技术"><a href="#docker核心技术" class="headerlink" title="docker核心技术"></a>docker核心技术</h2><p>核心词汇：</p>
<ul>
<li>镜像（集装箱）</li>
<li>仓库（超级码头）</li>
<li>容器（运行程序的地方）</li>
</ul>
<p>用docker运行一个程序的过程：去仓库把镜像拉到本地，然后用一条命令把镜像运行起来，变成容器</p>
<p>核心词汇：</p>
<ul>
<li><p>Build：构建镜像</p>
</li>
<li><p>Ship：运输镜像</p>
</li>
<li><p>Run：运行镜像（运行的镜像就是容器）</p>
</li>
</ul>
<h2 id="docker镜像"><a href="#docker镜像" class="headerlink" title="docker镜像"></a>docker镜像</h2><p>镜像（image）就是集装箱</p>
<p>镜像就是一系列的文件，它可以包括我们应用程序的文件，也可以包括应用环境的文件。Docker会把这些文件保存到本地，存储方式采用Linux中的联合文件系统的分层概念方式。</p>
<p>联合文件系统：将不同文件夹的内容挂在到同一层目录下</p>
<p>存储方式见下图：</p>
<p>![屏幕快照 2018-12-18 下午11.49.28](20181218225336118/屏幕快照 2018-12-18 下午11.49.28.png)</p>
<p>由下而上： </p>
<ol>
<li>操作系统的引导</li>
<li>具体的Linux操作系统</li>
<li>相关软件：tomcat、jdk等</li>
<li>应用代码</li>
<li>顶层为可写层（属于容器）</li>
</ol>
<p>docker镜像每一层（除了顶层容器）都是只读的，每一层加载完后，这些文件被看作同一个目录，相当于只有一个文件系统。</p>
<p>（参考其他文章：镜像可以用来创建Docker容器的。一个镜像可以包含一个完整的操作系统环境和用户需要的其它应用程序。在docker hub 里面有大量现成的镜像提供下载。docker的镜像是只可读的，一个镜像可以创建多个容器,每个容器之间相互不干扰。）</p>
<h2 id="docker容器"><a href="#docker容器" class="headerlink" title="docker容器"></a>docker容器</h2><ul>
<li><p>运行程序之地</p>
</li>
<li><p>容器本质是一个进程，和虚拟机的理解相似</p>
</li>
<li><p>最顶层容器为什么可写：程序运行起来，会写入日志文件等</p>
</li>
<li><p>容器是镜像创建的实例。它可以被启动、开始、停止、删除。每个容器都是 相互隔离的、保证安全的平台。</p>
</li>
</ul>
<h2 id="docker仓库"><a href="#docker仓库" class="headerlink" title="docker仓库"></a>docker仓库</h2><p>1、镜像构建来干嘛？</p>
<p>​    为了搬运到其他环境上运行</p>
<p>2、所以镜像如何传输？</p>
<p>​    先把镜像从运输起点传到docker仓库，再由运输终点（目的地）去docker仓库拉镜像。仓库是集中存放镜像文件的场所</p>
<p>3、谁提供了docker仓库？</p>
<p>​    ~ docker自己 hub.docker.com(国内被墙|慢)</p>
<p>​    ~ 国内：<a href="https://c.163yun.com/hub#/m/home" target="_blank" rel="noopener">https://c.163yun.com/hub#/m/home</a></p>
<p>​    ~ 这些仓库是别人提供好的，我们可以把镜像传过去</p>
<p>​    ~ 如果出于安全等因素考虑，docker支持自己搭建镜像中心（比如在内网搭建公司自己的docker仓库，类似于maven的理解）</p>
<h1 id="docker实践"><a href="#docker实践" class="headerlink" title="docker实践"></a>docker实践</h1><h2 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h2><p>版本说明：</p>
<ul>
<li>CentOS Linux release 7.4.1708</li>
<li></li>
</ul>
<p>docker是用ubunto开发的(支持好些)</p>
<p><a href="http://www.imooc.com/article/16448" target="_blank" rel="noopener">在centos和redhat上安装docker</a></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动docker</span></span><br><span class="line">$ systemctl start docker.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看版本</span></span><br><span class="line">$ docker version</span><br></pre></td></tr></table></figure></div>



<h2 id="docker体验hello-world"><a href="#docker体验hello-world" class="headerlink" title="docker体验hello world"></a>docker体验hello world</h2><p>第一个docker镜像</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker pull [OPTIONS] NAME[:TAG]</span></span><br><span class="line"><span class="comment"># docker images [OPTIONS]	查看本机所有镜像</span></span><br><span class="line"></span><br><span class="line">$ docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line"><span class="comment"># 默认从docker官网提供的仓库拉取镜像 hub.docker.com</span></span><br><span class="line">$ docker pull hello-world</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/hello-world</span><br><span class="line">d1725b59e92d: Pull complete </span><br><span class="line">Digest: sha256:0add3ace90ecb4adbf7777e9aacf18357296e799f81cabc9fde470971e499788</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> hello-world:latest</span><br><span class="line">$ docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">hello-world         latest              4ab4c602aa5e        3 months ago        1.84kB</span><br></pre></td></tr></table></figure></div>



<p>第一个docker容器</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker run [OPTIONS] IMAGE[:TAG] [COMMAND] [ARG...]</span></span><br><span class="line"></span><br><span class="line">$ docker run hello-world</span><br><span class="line">...</span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line"><span class="comment"># 一个docker容器运行起来经历的步骤</span></span><br><span class="line">To generate this message, Docker took the following steps:</span><br><span class="line"> 1. The Docker client contacted the Docker daemon.</span><br><span class="line"> 2. The Docker daemon pulled the <span class="string">"hello-world"</span> image from the Docker Hub.</span><br><span class="line">    (amd64)</span><br><span class="line"> 3. The Docker daemon created a new container from that image <span class="built_in">which</span> runs the</span><br><span class="line">    executable that produces the output you are currently reading.</span><br><span class="line"> 4. The Docker daemon streamed that output to the Docker client, <span class="built_in">which</span> sent it</span><br><span class="line">    to your terminal.</span><br><span class="line">...</span><br></pre></td></tr></table></figure></div>



<p>图解执行流程：</p>
<p>![屏幕快照 2018-12-19 上午11.16.42](20181218225336118/屏幕快照 2018-12-19 上午11.16.42.png) </p>
<p>从左至右分别为 Client、Host、Registry。前两个属于本机，Registry在hello-world例子中相当于远程仓库，整个流程为：</p>
<ol>
<li><p>docker pull 过程</p>
<ul>
<li>先向 docker daemon（在Host中）发送拉取镜像请求</li>
<li>daemon先在本机查找是否由符合版本要求的镜像，如果有，则不会做其他操作；<br>没有的话，daemon就去 Registry中查找，Registry返回相应镜像到本地。</li>
</ul>
</li>
<li><p>docker run 过程</p>
<ul>
<li><p>先向 docker daemon发送请求，镜像不存在则再执行一次 docker pull过程。</p>
</li>
<li><p>然后通过一定方式把镜象变成容器</p>
</li>
</ul>
</li>
</ol>
<h2 id="docker运行Nginx静态网站"><a href="#docker运行Nginx静态网站" class="headerlink" title="docker运行Nginx静态网站"></a>docker运行Nginx静态网站</h2><p><strong>运行nginx镜像</strong></p>
<p>前奏</p>
<ul>
<li>持久运行的容器</li>
<li>前台挂起 &amp; 后台运行</li>
<li>进入容器内部</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker pull hub.c.163.com/library/nginx:latest</span><br><span class="line"><span class="comment"># 前台运行nginx</span></span><br><span class="line">$ docker run hub.c.163.com/library/nginx</span><br><span class="line"><span class="comment"># 查看正在运行的docker容器</span></span><br><span class="line">$ docker ps</span><br><span class="line">$ docker run --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 后台运行</span></span><br><span class="line">$ docker run -d hub.c.163.com/library/nginx</span><br><span class="line"><span class="comment"># 容器id</span></span><br><span class="line">cbafcbc3b313ccabca6ee604fe5ae27d165cdbea50a27635894a8ad67c350406</span><br><span class="line"><span class="comment"># 进入容器</span></span><br><span class="line">$ docker <span class="built_in">exec</span> -it cba bash</span><br><span class="line"><span class="comment"># 退出容器</span></span><br><span class="line">$ <span class="built_in">exit</span></span><br></pre></td></tr></table></figure></div>



<hr>
<p><strong>docker网络</strong></p>
<p>如何访问到nginx？</p>
<ul>
<li>网络类型：<ul>
<li>Bridge（默认）<br>  bridge模式是Docker默认的网络设置，此模式会为每一个容器 分配Network Namespace、设置IP等，并将一个主机上的Docker容器连接到一个虚拟网桥上。</li>
<li>Host<br>  不会创建独立的network namespace。Docker容器中的进程处于宿主机的网络环境中，相当于Docker容器和宿主机共同用一个network namespace，使用宿主机的网卡、IP和端口等信息。<br>   但是，容器的其他方面，如文件系统、进程列表等还是和宿主机隔离的。</li>
<li>None<br>  没有网络，Docker不会和外界进行通讯。Docker容器拥有自己的Network Namespace，但是，并不为Docker容器进行任何网络配置。也就是说，这个Docker容器没有网卡、IP、路由等信息。需要我们自己为Docker容器添加网卡、配置IP等。</li>
<li>Container<br>  Container模式指定新创建的容器和已经存在的一个容器共享一个Network Namespace，而不是和宿主机共享。新创建的容器不会创建自己的网卡，配置自己的IP，而是和一个指定的容器共享IP、端口范围等。同样，两个容器除了网络方面，其他的如文件系统、进程列表等还是隔离的。两个容器的进程可以通过lo网卡设备通信。</li>
<li>端口映射<br>​    使容器的端口在主机上访问到，采用端口映射，Docker可以将容器里面的端口与主机的端口进行映射，这样就可以通过访问主机端口去访问容器端口。</li>
</ul>
</li>
</ul>
<p>![屏幕快照 2018-12-19 下午1.41.07](20181218225336118/屏幕快照 2018-12-19 下午1.41.07.png) </p>
<hr>
<p><strong>访问nginx</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认桥接 端口映射</span></span><br><span class="line">$ docker run -d -p 8080:80 hub.c.163.com/library/nginx</span><br><span class="line"><span class="comment"># 浏览器访问nginx</span></span><br><span class="line">http://10.211.55.6:8080/</span><br><span class="line"></span><br><span class="line"><span class="comment"># -P : 开放容器内所有端口，并映射到容器外随机端口</span></span><br><span class="line">$ docker run -d -P 8080:80 hub.c.163.com/library/nginx</span><br></pre></td></tr></table></figure></div>



<h2 id="docker运行java-web应用"><a href="#docker运行java-web应用" class="headerlink" title="docker运行java web应用"></a>docker运行java web应用</h2><p><strong>制作自己的镜像</strong></p>
<ul>
<li>Dockerfile（文本文件）</li>
<li>docker build( docker 命令)</li>
<li>Jpress：<a href="http://www.jpress.io/" target="_blank" rel="noopener">http://www.jpress.io/</a></li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi Dockerfile</span><br><span class="line"></span><br><span class="line">-------------</span><br><span class="line">//继承基础镜像,tomcat镜像包括了jdk</span><br><span class="line">from hub.c.163.com/library/tomcat</span><br><span class="line"></span><br><span class="line">//关于作者</span><br><span class="line">MAINTAINER mxx hhdwwt@163.com</span><br><span class="line"></span><br><span class="line">//项目代码（在本配置文件的当前路径）</span><br><span class="line">COPY jpress.war /usr/<span class="built_in">local</span>/tomcat/webapps</span><br><span class="line"></span><br><span class="line">-------------</span><br><span class="line"></span><br><span class="line">docker build -t jpress:latest .</span><br></pre></td></tr></table></figure></div>



<hr>
<p>运行自己的容器</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8888:8080 jpress</span><br><span class="line"></span><br><span class="line">netstat -na|grep 8888</span><br><span class="line">&#x2F;&#x2F; 开放8888端口</span><br><span class="line">10.211.55.6:8888&#x2F;jpress</span><br></pre></td></tr></table></figure></div>









]]></content>
      <categories>
        <category>大数据分布式</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title>服务拆分&amp;应用通信</title>
    <url>/2018/12/17/20181217200059093/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="第3章-服务拆分"><a href="#第3章-服务拆分" class="headerlink" title="第3章 服务拆分"></a>第3章 服务拆分</h1><h2 id="微服务拆分的起点"><a href="#微服务拆分的起点" class="headerlink" title="微服务拆分的起点"></a>微服务拆分的起点</h2><p>起点？</p>
<ul>
<li>既有架构的形态</li>
</ul>
<p>终点？</p>
<ul>
<li>好的架构不是设计出来的，而是进化来的</li>
<li>一直在演进…</li>
</ul>
<p>适合微服务吗？</p>
<p>业务形态不适合的：</p>
<ul>
<li>系统包含很多很多强事物场景</li>
<li>业务相对稳定，迭代周期长</li>
<li>访问压力不大，可用性要求不高（中小企业内部oa系统）</li>
</ul>
<hr>
<p> 康威定律和微服务</p>
<p>康威定律</p>
<p>微服务和团队结构：</p>
<p>![屏幕快照 2018-12-05 下午2.33.01](20181217200059093/屏幕快照 2018-12-05 下午2.33.01.png) </p>
<hr>
<h2 id="点餐业务服务拆分分析"><a href="#点餐业务服务拆分分析" class="headerlink" title="点餐业务服务拆分分析"></a>点餐业务服务拆分分析</h2><p>如何拆分？</p>
<ul>
<li>手机端、PC端？</li>
<li>订单、商品、支付？</li>
</ul>
<p>看实际情况</p>
<p>服务拆分方法论</p>
<p>扩展立方模型</p>
<ul>
<li>X轴 水平复制（副本扩展，负载均衡）</li>
<li>Z轴 数据分区（每个服务器负责一个数据子集，运行的代码一样）</li>
<li>Y轴 功能解耦（将不同职责的模块分成不同服务）</li>
</ul>
<p>如何拆“功能”？</p>
<ul>
<li>单一职责、松耦合、高内聚</li>
<li>关注点分离<ul>
<li>按职责（业务）</li>
<li>按通用性（基础组件：消息、用户）</li>
<li>按粒度级别</li>
</ul>
</li>
</ul>
<p>服务和数据的关系</p>
<ul>
<li>先考虑业务功能、再考虑数据</li>
<li>无状态服务（一个数据需要多个业务共享就是有状态）</li>
</ul>
<p>点餐业务拆分</p>
<p>![屏幕快照 2018-12-05 下午2.54.39](20181217200059093/屏幕快照 2018-12-05 下午2.54.39.png)</p>
<ul>
<li>业务高速发展背景下<ul>
<li>新增支付渠道（目前只支持微信、以后扩展支付宝等）</li>
<li>短信、日志(作为基础服务单独抽离，如用户、redis缓存)</li>
<li>积分、优惠券…</li>
</ul>
</li>
</ul>
<p>接下来实现商品、订单业务</p>
<h2 id="商品服务"><a href="#商品服务" class="headerlink" title="商品服务"></a>商品服务</h2><p>知识点：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- API的格式定义</span><br><span class="line">- 持久层：spring-boot-starter-data-jpa的使用</span><br><span class="line">- VO层：数据构造</span><br><span class="line">- springcloud下一个MVC的开发流程</span><br></pre></td></tr></table></figure></div>

<p><strong>API和SQL介绍</strong></p>
<p>api</p>
<p>导入类目/商品表</p>
<hr>
<p><strong>编码实现</strong></p>
<p>配置一个eureka client，工程名为product</p>
<p><strong>持久层：</strong></p>
<p>pom</p>
<p>dataobject\ProductInfo</p>
<p>repository\ProductInfoRepository</p>
<p>test</p>
<p>dataobject\ProductCategory</p>
<p>repository\ProductCategoryRepository</p>
<p><strong>服务层</strong></p>
<p>ProductInfo：</p>
<p>service\ProductInfoService</p>
<p>service\impl\ProductInfoServiceImpl</p>
<p>enums\ProductStatusEnum</p>
<p>test</p>
<p>ProductCategory：</p>
<p>…</p>
<p><strong>控制层</strong></p>
<p>定义api对应的VO对象    vo\ …</p>
<p>最外层：vo\ResultVO</p>
<p>utils\ResultVOUtils</p>
<h2 id="订单服务"><a href="#订单服务" class="headerlink" title="订单服务"></a>订单服务</h2><p>知识点：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 参数校验</span><br><span class="line">- 自定义异常类</span><br><span class="line">- VO层：数据构造</span><br><span class="line">- springcloud下一个MVC的开发流程</span><br></pre></td></tr></table></figure></div>



<p>api    sql</p>
<p>业务逻辑</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">创建订单：</span><br><span class="line">1. 参数校验</span><br><span class="line">2. 根据id查询商品信息(远程调用商品)</span><br><span class="line">3. 查库存，做判断，计算总价</span><br><span class="line">4. 扣库存（远程调用商品）</span><br><span class="line">5. 订单入库</span><br></pre></td></tr></table></figure></div>



<p><strong>编码</strong></p>
<p>新建一个order项目</p>
<p>持久层</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dataobject</span><br><span class="line">respository	save</span><br><span class="line">测试save</span><br><span class="line">enum&#x2F;OrderStatus	PayStatus</span><br></pre></td></tr></table></figure></div>

<p>业务层</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dto</span><br><span class="line">...</span><br></pre></td></tr></table></figure></div>



<p>controller</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">converter</span><br><span class="line">form</span><br><span class="line">...</span><br></pre></td></tr></table></figure></div>



<h2 id="再看“拆数据”"><a href="#再看“拆数据”" class="headerlink" title="再看“拆数据”"></a>再看“拆数据”</h2><p>如何拆数据：</p>
<ul>
<li>每个微服务都有单独的数据存储（单独数据库）</li>
<li>依据服务特点选择不同结构的数据库类型</li>
<li>难点在确定边界<ul>
<li>针对边界设计API</li>
<li>依据边界权衡数据冗余</li>
</ul>
</li>
</ul>
<h1 id="第4章-应用通信"><a href="#第4章-应用通信" class="headerlink" title="第4章 应用通信"></a>第4章 应用通信</h1><h2 id="HTTP-vs-RPC"><a href="#HTTP-vs-RPC" class="headerlink" title="HTTP vs RPC"></a>HTTP vs RPC</h2><p>应用间通信方式</p>
<ul>
<li><p>Dubbo：RPC框架</p>
</li>
<li><p>Spring Cloud：微服务架构下的一站式解决方案，微服务之间使用http restful方式</p>
<ul>
<li>http restful：轻量易用，跨平台跨语言</li>
</ul>
</li>
</ul>
<p>SpringCloud中服务间2种restful调用方式</p>
<ul>
<li>RestTemplate</li>
<li>Feign</li>
</ul>
<h2 id="RestTemplate"><a href="#RestTemplate" class="headerlink" title="RestTemplate"></a>RestTemplate</h2><p>RestTemplate：Http客户端，功能上类似于HttpClient</p>
<p>订单服务 –&gt; 调用 –&gt; 商品服务</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">商品：server</span><br><span class="line">订单：client</span><br></pre></td></tr></table></figure></div>

<p>RestTemplate的三种使用方式</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mxx.order.controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.ServiceInstance;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalancerClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/order"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoadBalancerClient loadBalancerClient;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/getProductMsg"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getProductMsg</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 1、直接使用RestTemplate，url写死</span></span><br><span class="line">        <span class="comment">// 缺点：不知道ip/对方有多个服务地址：负载均衡</span></span><br><span class="line"><span class="comment">//        RestTemplate restTemplate = new RestTemplate();</span></span><br><span class="line"><span class="comment">//        String result = restTemplate.getForObject("http://localhost:8080/product/msg", String.class);</span></span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 2、通过loadBalancerClient通过应用名获取url,解决了url硬编码</span></span><br><span class="line">        <span class="comment">// 缺点：写一堆</span></span><br><span class="line"><span class="comment">//        ServiceInstance product = loadBalancerClient.choose("PRODUCT");</span></span><br><span class="line"><span class="comment">//        String url = String.format("http://%s:%s/product/msg", product.getHost(), product.getPort());</span></span><br><span class="line"><span class="comment">//        RestTemplate restTemplate = new RestTemplate();</span></span><br><span class="line"><span class="comment">//        String result = restTemplate.getForObject(url, String.class);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、利用@LoadBalanced，简化</span></span><br><span class="line">        String result = restTemplate.getForObject(<span class="string">"http://PRODUCT/product/msg"</span>, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p>RestTemplateConfig</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mxx.order.config;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalanced;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestTemplateConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="负载均衡器：Ribbon"><a href="#负载均衡器：Ribbon" class="headerlink" title="负载均衡器：Ribbon"></a>负载均衡器：Ribbon</h2><p>Eureka：客户端发现</p>
<p>客户端负载均衡器：Ribbon</p>
<ul>
<li>RestTemplate</li>
<li>Feign</li>
<li>Zuul</li>
</ul>
<p>@LoadBalanced会自动使用Ribbon基于某种规则（轮训、随机链接）去连接目标服务，从而使用Ribbon实现自定义负载均衡算法</p>
<p>Ribbon实现软负载均衡核心</p>
<ul>
<li>服务发现（发现服务列表）</li>
<li>服务选择规则（如何从多个服务中选择有效服务）</li>
<li>服务监听（检测失效服务，高效剔除）</li>
</ul>
<p>Ribbon主要组件</p>
<ul>
<li>ServerList</li>
<li>IRule</li>
<li>SererListFilter</li>
</ul>
<p>流程：ServerList获取所有可用服务列表，SererListFilter过滤部分地址，在剩下地址中通过IRule选择一个实例作为结果</p>
<p><strong>追踪源码自定义负载均衡策略</strong></p>
<p>源码追踪</p>
<p>…</p>
<p>自定义负载均衡策略</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">yml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改负载均衡的策略：由默认的轮寻改为随机</span></span><br><span class="line"><span class="attr">PRODUCT:</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RandomRule</span></span><br></pre></td></tr></table></figure></div>



<h2 id="Feign"><a href="#Feign" class="headerlink" title="Feign"></a>Feign</h2><p><strong>使用</strong></p>
<p>pom</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>启动类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@EnableFeignClients</span><br></pre></td></tr></table></figure></div>

<p>定义好要调用的接口 client</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mxx.order.client;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"product"</span>)  <span class="comment">//调用服务的名称</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProductClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"product/msg"</span>)  <span class="comment">//服务url</span></span><br><span class="line">    <span class="function">String <span class="title">productMsg</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p>使用</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/getProductMsg"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getProductMsg</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> productClient.productMsg();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p>Feign</p>
<ul>
<li>声明式REST客户端（伪RPC）<ul>
<li>感知不到http调用，使用的时候像本地方法一样</li>
</ul>
</li>
<li>采用了基于接口的注解</li>
<li>内部也使用Ribbon做负载均衡</li>
</ul>
<h2 id="业务开发：打通下单流程"><a href="#业务开发：打通下单流程" class="headerlink" title="业务开发：打通下单流程"></a>业务开发：打通下单流程</h2><p>知识点：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RequestBody只能用 @PostMapping</span><br><span class="line">无参、单个参数（@RequestParam）、@PathVariable可以用@GetMapping</span><br></pre></td></tr></table></figure></div>



<p><strong>获取商品列表、扣库存(Feign)</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">product</span><br><span class="line">- 通过id list 查询商品列表</span><br><span class="line">- 扣库存</span><br><span class="line">order</span><br><span class="line">- 调用</span><br></pre></td></tr></table></figure></div>



<p><strong>整合接口打通下单流程(Feign)</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">OrderServiceImpl&#x2F;create</span><br><span class="line">OrderController&#x2F;create</span><br></pre></td></tr></table></figure></div>



<h2 id="项目改造成多模块"><a href="#项目改造成多模块" class="headerlink" title="项目改造成多模块"></a>项目改造成多模块</h2><p>改进：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、不要暴露全部ProductInfo，重新封装ProductInfoOutput</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;ProductInfo&gt; <span class="title">listForOrder</span><span class="params">(@RequestBody List&lt;String&gt; productIdList)</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 2、重复定义的类</span></span></span><br><span class="line"><span class="function"><span class="comment">//自己业务，重新封装自己的类，如product将CartDTO改成了DecreaseStockInput、</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="comment">// 3、ProductClient应该放在product项目里（自己定义的接口自己暴露出去）</span></span></span><br></pre></td></tr></table></figure></div>

<p>多模块：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">product-server	业务逻辑(依赖common)</span><br><span class="line">product-client	对外暴露接口(依赖common)</span><br><span class="line">product-common	公用对象（外部服务需要使用这里的对象）</span><br><span class="line"></span><br><span class="line">order也一样</span><br></pre></td></tr></table></figure></div>



<h2 id="同步or异步"><a href="#同步or异步" class="headerlink" title="同步or异步"></a>同步or异步</h2><p>服务间的通信分为同步 和 异步</p>
<p> 异步：消息队列</p>
<p>适合异步的服务：短信服务、邮件服务</p>
<p>订单服务改为异步方式：</p>
<p>![屏幕快照 2018-12-18 下午10.41.41](20181217200059093/屏幕快照 2018-12-18 下午10.41.41.png) 、</p>
<p>消息中间件的选择：</p>
<ul>
<li><strong>RabbitMQ</strong></li>
<li>Kafka</li>
<li>ActiveMQ</li>
</ul>
<h2 id="RabbitMQ的安装"><a href="#RabbitMQ的安装" class="headerlink" title="RabbitMQ的安装"></a>RabbitMQ的安装</h2><p>官网：<a href="http://www.rabbitmq.com/" target="_blank" rel="noopener">http://www.rabbitmq.com/</a></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 15762: 管理界面</span></span><br><span class="line">$ docker run -d --hostname my-rabbit -p 5672:5672 -p 15672:15672 hub.c.163.com/library/rabbitmq:3.6.11-management</span><br><span class="line"><span class="comment"># 10.211.55.6:15762</span></span><br><span class="line"><span class="comment"># 登录 guest/guest</span></span><br></pre></td></tr></table></figure></div>



<h2 id="Docker和DevOps"><a href="#Docker和DevOps" class="headerlink" title="Docker和DevOps"></a>Docker和DevOps</h2><p>微服务和docker代表的容器技术：天生一对</p>
<ul>
<li>从系统环境开始，自底而上打包应用</li>
<li>轻量级、隔离</li>
<li>可复用，版本化</li>
</ul>
<p>Microservice、Docker、Devops紧密相连</p>
<blockquote>
<p> DevOps 是一个完整的面向IT运维的工作流，以 IT 自动化以及持续集成（CI）、持续部署（CD）为基础，来优化程式开发、测试、系统运维等所有环节</p>
<p>Development和Operations</p>
<p>软件开发人员和运维人员的沟通合作</p>
<p>一种理念：快速高质量交付</p>
</blockquote>
]]></content>
      <categories>
        <category>Spring</category>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>Spring Cloud微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>Java8新特性</title>
    <url>/2018/12/07/20181207190201298/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>参考：itheima</p>
<p>我的代码：<a href="https://gitee.com/machine4869/example-code/tree/master/note_java8new" target="_blank" rel="noopener">https://gitee.com/machine4869/example-code/tree/master/note_java8new</a></p>
</blockquote>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="课程介绍"><a href="#课程介绍" class="headerlink" title="课程介绍"></a>课程介绍</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Java8(2014年3月发布)，更新力度很大，代表性为Lambda(函数式编程)</span><br><span class="line">Java9(2017年9月)，Jigsaw(模块化)</span><br><span class="line">- Lambda表达式、函数式接口（Lamda的基础）</span><br><span class="line">- 方法引用、常用函数式接口</span><br><span class="line">- Stream流式处理API、模块化系统（Java9）</span><br></pre></td></tr></table></figure></div>



<h2 id="Java版本特性更新历史"><a href="#Java版本特性更新历史" class="headerlink" title="Java版本特性更新历史"></a>Java版本特性更新历史</h2><table>
<thead>
<tr>
<th>版本号</th>
<th>年份/代号</th>
<th>新特性（部分举例）</th>
</tr>
</thead>
<tbody><tr>
<td>1.0</td>
<td>1996</td>
<td></td>
</tr>
<tr>
<td>1.1</td>
<td>1997</td>
<td>JDBC</td>
</tr>
<tr>
<td>1.2</td>
<td>1998, Playground</td>
<td>集合、字符串常量池</td>
</tr>
<tr>
<td>1.3</td>
<td>2000, Kestrel</td>
<td>性能优化</td>
</tr>
<tr>
<td>1.4</td>
<td>2004, Merlin</td>
<td>xml、正则、JDBC3.0、断言（Assert）、NIO</td>
</tr>
<tr>
<td>5.0</td>
<td>2004, Tiger</td>
<td>泛型、注解、可变参数、枚举</td>
</tr>
<tr>
<td>6.0</td>
<td>2006, Mustang</td>
<td>脚本、JDBC4.0</td>
</tr>
<tr>
<td>7.0</td>
<td>2011, Dolphin</td>
<td>NIO.2、try-with-resources</td>
</tr>
<tr>
<td>8.0</td>
<td>2014.03</td>
<td><strong>接口更新、Lamda表达式、方法引用、Stream API、函数式接口</strong>、Hashorn、JavaFX、DateTime</td>
</tr>
<tr>
<td>9.0</td>
<td>2017.09</td>
<td>Jigsaw(模块化)、JShell、接口小更新</td>
</tr>
</tbody></table>
<h1 id="函数式编程思想（Lambda）"><a href="#函数式编程思想（Lambda）" class="headerlink" title="函数式编程思想（Lambda）"></a>函数式编程思想（Lambda）</h1><h2 id="Lamda表达式"><a href="#Lamda表达式" class="headerlink" title="Lamda表达式"></a>Lamda表达式</h2><p>面向对象的Runnable接口写法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在某些情况下，面向对象语法复杂</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 匿名内部类</span></span><br><span class="line">        Runnable task = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"多线程任务执行啦～"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(task).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>编程思想转换，使用Lambda</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、面向对象强调“一切皆对象”，要做事需要先找对象</span></span><br><span class="line"><span class="comment"> * 2、函数式编程思想强调“做什么”，而不是怎么做</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Lambda</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; System.out.println(<span class="string">"多线程任务执行啦～"</span>)).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * () -&gt; System.out.println("多线程任务执行啦～")</span></span><br><span class="line"><span class="comment"> * 1. ()代表不需要任何参数条件，即可执行</span></span><br><span class="line"><span class="comment"> * 2. 箭头指向后面要做的事情</span></span><br><span class="line"><span class="comment"> * 3. 箭头后面就是方法体大括号，代表具体要做的内容</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Lambda表达式的标准格式</span></span><br><span class="line"><span class="comment"> * （参数类型 参数名称） -&gt; &#123;一些代码&#125;</span></span><br><span class="line"><span class="comment"> * 1. 参数有多个，逗号分隔；参数没有，留空</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></div>

<p>带参数和返回值</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05SortLamda</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person[] array = &#123;</span><br><span class="line">                <span class="keyword">new</span> Person(<span class="string">"Tony"</span>, <span class="number">20</span>),</span><br><span class="line">                <span class="keyword">new</span> Person(<span class="string">"Jay"</span>, <span class="number">18</span>),</span><br><span class="line">                <span class="keyword">new</span> Person(<span class="string">"Mary"</span>, <span class="number">19</span>)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"排序前："</span> + Arrays.toString(array));</span><br><span class="line"></span><br><span class="line">        Arrays.sort(array, (Person p1, Person p2) -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> p1.getAge() - p2.getAge();</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"排序后："</span> + Arrays.toString(array));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>Lambda表达式的省略格式</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Lambda表达式省略规则：</span></span><br><span class="line"><span class="comment"> * 1. 参数类型可以省略(只能同时省略所有参数类型)</span></span><br><span class="line"><span class="comment"> * 2. 如果有且仅有一个参数，小括号可以省略</span></span><br><span class="line"><span class="comment"> * 3. 如果大括号内语句有且仅有一个，那么无论是否有返回值，return、大括号、分号，都可以省略</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo06LambdaFormat</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        method( (a,b) -&gt; a+b);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(Calculator calculator)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = calculator.sum(<span class="number">111</span>, <span class="number">222</span>);</span><br><span class="line">        System.out.println(<span class="string">"结果："</span>+result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>Lambda的使用前提</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 一个接口，有且仅有一个抽象方法</span><br><span class="line">2. 必须具有上下文环境，才能推导</span><br></pre></td></tr></table></figure></div>



<h2 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h2><p>定义</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 函数式接口：接口中有且仅有一个抽象方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@FunctionalInterface</span>注解：用来检测一个接口是不是函数式接口</span></span><br><span class="line"><span class="comment"> * 编译时，写上这个注解：</span></span><br><span class="line"><span class="comment"> * 1. 如果是函数式接口，则编译通过</span></span><br><span class="line"><span class="comment"> * 2. 如果不是，则编译失败</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@FunctionalInterface</span>是可选的，和<span class="doctag">@Overise</span>类似，他是编译时用于检错的注解</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>使用</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01FunctionalInterfaceUsage</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//函数式接口，使用Lambda表达式</span></span><br><span class="line">        MyInterface myInterface = () -&gt; System.out.println(<span class="string">"Lambda表达式"</span>);</span><br><span class="line"></span><br><span class="line">        myInterface.method();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="Lambda与匿名内部类的区别"><a href="#Lambda与匿名内部类的区别" class="headerlink" title="Lambda与匿名内部类的区别"></a>Lambda与匿名内部类的区别</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Lambda表达式并不是匿名内部类的“语法糖”</span><br><span class="line">语法糖：代码更简洁，但其实原理不变</span><br><span class="line">例如：</span><br><span class="line">1）方法中的可变参数（底层仍然是数组）</span><br><span class="line">2）增强for循环（底层仍然是迭代器）</span><br><span class="line">3）自动装箱\拆箱（底层仍然是new对象）</span><br><span class="line"></span><br><span class="line">但是！Lambda表达式和匿名内部类存在根本区别</span><br><span class="line"></span><br><span class="line">------------------------------------------------</span><br><span class="line"></span><br><span class="line">1. 所需类型不同</span><br><span class="line">2. 使用限制不同</span><br><span class="line">Lamda表达式必须要求函数式接口，匿名内部类可以是普通接口、抽象类、普通类</span><br><span class="line"></span><br><span class="line">3. 实现原理不同</span><br><span class="line">匿名内部类：其实就是一个类，编译后产生单独的.class文件（XXX$1.class、XXX$2.class）</span><br><span class="line">Lamda表达式：编译后没有单独.class文件，对应的字节码会在运行的时候才会动态生成</span><br></pre></td></tr></table></figure></div>



<h1 id="接口的组成更新"><a href="#接口的组成更新" class="headerlink" title="接口的组成更新"></a>接口的组成更新</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">接口组成部分：</span><br><span class="line">1. 常量（public static final）</span><br><span class="line">2. 抽象方法</span><br><span class="line">3. 默认方法（Java 8）</span><br><span class="line">4. 静态方法（Java 8）</span><br><span class="line">5. 私有方法（Java 9）</span><br></pre></td></tr></table></figure></div>

<h2 id="接口默认方法"><a href="#接口默认方法" class="headerlink" title="接口默认方法"></a>接口默认方法</h2><p>定义</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接口升级：本来是2个抽象方法，升级变成3个</span></span><br><span class="line"><span class="comment"> * 问题出现：那么已实现且投入使用的类会报错，因为必须实现全部接口</span></span><br><span class="line"><span class="comment"> * 解决：</span></span><br><span class="line"><span class="comment"> * 1. 设计模式中的开闭原则：对扩展开放，对修改关闭</span></span><br><span class="line"><span class="comment"> * 2. 从java 8开始，接口中允许定义default默认方法</span></span><br><span class="line"><span class="comment"> * 常量修饰符：public static final(都可省略)</span></span><br><span class="line"><span class="comment"> * 抽象方法修饰符：public abstract(都可省略)</span></span><br><span class="line"><span class="comment"> * 默认方法修饰符：public default(public可以省略，default不能省)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 默认方法可以有方法体实现</span></span><br><span class="line"><span class="comment"> * 默认方法可以不重写，也可以进行覆盖重写</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//升级后的新接口</span></span><br><span class="line">    <span class="comment">//void methodNew();</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">methodNew</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"接口的默认方法执行"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>MyInterfaceImplA</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterfaceImplA</span> <span class="keyword">implements</span> <span class="title">MyInterface</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodNew</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"可以重写接口的默认方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>使用：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Usage</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyInterface objA = <span class="keyword">new</span> MyInterfaceImplA();</span><br><span class="line">        objA.method1();</span><br><span class="line">        <span class="comment">//会继承默认方法</span></span><br><span class="line">        objA.methodNew();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="接口静态方法"><a href="#接口静态方法" class="headerlink" title="接口静态方法"></a>接口静态方法</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Java 8开始，接口允许定义静态方法：</span></span><br><span class="line"><span class="comment">修饰符：public static(public可以省略)</span></span><br><span class="line"><span class="comment">ps: public abstract都可以省略</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">应用场合：</span></span><br><span class="line"><span class="comment">静态方法起到接口屏蔽的作用，当实现类变化（cat变dog)时，只需要改接口，</span></span><br><span class="line"><span class="comment">不需要改动具体的使用类 Animal animal = Animal.getAnimal();</span></span><br><span class="line"><span class="comment">"工厂模式"：让main方法和Cat,Dog解耦</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> Animal <span class="title">getAnimal</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Cat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">implements</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"猫吃XX"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">左边是接口类型，我只关心Animal，不关心是猫是狗</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        Animal animal = new Cat();</span></span><br><span class="line"><span class="comment">//        animal.eat();</span></span><br><span class="line">        Animal animal = Animal.getAnimal();</span><br><span class="line">        animal.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="接口私有方法"><a href="#接口私有方法" class="headerlink" title="接口私有方法"></a>接口私有方法</h2><p>是java9引入的，见java9</p>
<h1 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h1><h2 id="通过方法引用改进代码"><a href="#通过方法引用改进代码" class="headerlink" title="通过方法引用改进代码"></a>通过方法引用改进代码</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * --通过方法引用改进代码</span></span><br><span class="line"><span class="comment"> * Java 8引入了全新运算符，方法引用符（"::"）</span></span><br><span class="line"><span class="comment"> * 方法引用的本质和Lambda完全一样，目的就是为了简化Lambda的写法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 可推导即可省略：lambda的参数拿到之后，原封不动的给了方法调用，那该lambda就是多余的，于是lambda可以省去</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Lambda:      s -&gt; System.out.println(s)</span></span><br><span class="line"><span class="comment"> * 方法引用写法:  System.out::println</span></span><br><span class="line"><span class="comment"> * 2种方法等效</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></div>

<h2 id="常见的方法引用"><a href="#常见的方法引用" class="headerlink" title="常见的方法引用"></a>常见的方法引用</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * --常见的方法引用写法：</span></span><br><span class="line"><span class="comment"> * 1、通过对象名引用成员方法    对象名称::方法名称</span></span><br><span class="line"><span class="comment"> * 2、通过类名称引用静态方法</span></span><br><span class="line"><span class="comment"> * 3、通过super引用父类方法	    super::父类方法名称</span></span><br><span class="line"><span class="comment"> * 4、通过this引用本类方法     this::本类方法名称</span></span><br><span class="line"><span class="comment"> * 5、构造器引用              类名称::new</span></span><br><span class="line"><span class="comment"> * 6、数组的构造器引用         元素类型::new</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></div>

<p>demo</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Printer</span> <span class="keyword">extends</span> <span class="title">PrinterSuper</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// lambda表达式的写法</span></span><br><span class="line">        method((s) -&gt; System.out.println(s) , <span class="string">"hello"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 使用方法引用符</span></span><br><span class="line"><span class="comment">         * System.out是一个对象, println是方法,不用println(String str)参数，因为参数可推导（void print(String str);）</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        method(System.out::println,<span class="string">"hello"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1、通过对象名引用成员方法</span></span><br><span class="line">        StrPrinter sp = <span class="keyword">new</span> StrPrinter();</span><br><span class="line">        method(sp::printStrUper,<span class="string">"hello world"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、通过类名称引用静态方法</span></span><br><span class="line">        <span class="comment">//method( (str -&gt; StrPrinter.staticMethod(str)),"hello"); //lambda写法</span></span><br><span class="line">        method(StrPrinter::staticMethod,<span class="string">"hello"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、通过super引用父类方法</span></span><br><span class="line">        Demo01Printer dp = <span class="keyword">new</span> Demo01Printer();</span><br><span class="line">        dp.sayHello();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4、通过this引用本类方法</span></span><br><span class="line">        dp.beHappy();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5、构造器引用</span></span><br><span class="line">        <span class="comment">//method( (str -&gt; new Person(str)),"Tony");</span></span><br><span class="line">        method(Person::<span class="keyword">new</span>,<span class="string">"Tony"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beHappy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//method( (str -&gt; this.buy(str)),"hello");</span></span><br><span class="line">        method( <span class="keyword">this</span>::buy,<span class="string">"hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//method( (str -&gt; super.fatherMathod(str)),"hello");  //lambda</span></span><br><span class="line">        method(<span class="keyword">super</span>::fatherMathod ,<span class="string">"hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"本类方法-"</span>+str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(Printer printer,String str)</span></span>&#123;</span><br><span class="line">        printer.print(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mxx.methodref;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 6、数组的构造器引用</span></span><br><span class="line"><span class="comment"> * 数组也是一个对象，他有构造器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02MethodRefArray</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//method((length -&gt; new int[length]));</span></span><br><span class="line">        method(<span class="keyword">int</span>[]::<span class="keyword">new</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(ArrayBuilder arrayBuilder)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] array = arrayBuilder.build(<span class="number">10</span>);</span><br><span class="line">        System.out.println(<span class="string">"数组长度为："</span>+array.length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="Lambda的延迟执行"><a href="#Lambda的延迟执行" class="headerlink" title="Lambda的延迟执行"></a>Lambda的延迟执行</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Lambda的延迟执行</span></span><br><span class="line"><span class="comment"> * 使用场景：日志性能浪费</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03Logger</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String msgA = <span class="string">"hello"</span>;</span><br><span class="line">        String msgB = <span class="string">"world"</span>;</span><br><span class="line">        String msgC = <span class="string">"java"</span>;</span><br><span class="line"></span><br><span class="line">        logger(<span class="number">1</span>,() -&gt; &#123;</span><br><span class="line">            <span class="comment">//如果level==2，那么此lambda表达式不会执行，省去了msgA+msgB+msgC的计算浪费</span></span><br><span class="line">            <span class="comment">//只有执行抽象方法msgBuilder.buildMsg()时，此处才会触发执行</span></span><br><span class="line">            System.out.println(<span class="string">"lambda执行啦"</span>);</span><br><span class="line">            <span class="keyword">return</span> msgA+msgB+msgC;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">logger</span><span class="params">(<span class="keyword">int</span> level, MsgBuilder msgBuilder)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(level == <span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(msgBuilder.buildMsg());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="使用Lambda作为方法参数-返回值"><a href="#使用Lambda作为方法参数-返回值" class="headerlink" title="使用Lambda作为方法参数/返回值"></a>使用Lambda作为方法参数/返回值</h2><p>使用Lambda作为方法参数=使用函数式接口作为参数</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// method((s) -&gt; System.out.println(s) , "hello");</span></span><br><span class="line">method(System.out::println,<span class="string">"hello"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(Printer printer,String str)</span></span>&#123;</span><br><span class="line">    printer.print(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>使用Lambda作为方法返回值=使用函数式接口作为方法返回值</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04LambdaReturn</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] array = &#123;<span class="string">"11"</span>,<span class="string">"111"</span>,<span class="string">"1"</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Arrays.sort(array,(s1, s2) -&gt; s1.length()-s2.length());</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//lambda表达式是一个接口实例</span></span><br><span class="line">        Comparator&lt;String&gt; comp = (s1, s2) -&gt; s1.length() - s2.length();</span><br><span class="line">        Arrays.sort(array,comp);</span><br><span class="line"></span><br><span class="line">        System.out.println(Arrays.toString(array));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="Lambda使用局部变量的要求"><a href="#Lambda使用局部变量的要求" class="headerlink" title="Lambda使用局部变量的要求"></a>Lambda使用局部变量的要求</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果lambda需要使用外部局部变量，局部变量必须是有效final的。（和匿名内部类要求一样）</span><br><span class="line">可以不写final，但该变量不能发生改变</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String msgA = <span class="string">"hello"</span>;</span><br><span class="line">String msgB = <span class="string">"world"</span>;</span><br><span class="line">String msgC = <span class="string">"java"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不能改变</span></span><br><span class="line"><span class="comment">//msgC=null;</span></span><br><span class="line"></span><br><span class="line">logger(<span class="number">1</span>,() -&gt; msgA+msgB+msgC);</span><br></pre></td></tr></table></figure></div>



<h2 id="JDK常用函数式接口"><a href="#JDK常用函数式接口" class="headerlink" title="JDK常用函数式接口"></a>JDK常用函数式接口</h2><h3 id="Supplier接口"><a href="#Supplier接口" class="headerlink" title="Supplier接口"></a>Supplier接口</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.function.Supplier;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">JDK内置了很多函数式接口，在java.util.function包</span></span><br><span class="line"><span class="comment">java.util.function.Supplier&lt;T&gt;	: 向外提供一个数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Supplier</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        method(() -&gt; <span class="string">"hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(Supplier&lt;String&gt; supplier)</span></span>&#123;</span><br><span class="line">        String str = supplier.get();</span><br><span class="line">        System.out.println(<span class="string">"内容："</span>+str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>Supplier接口源码</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Supplier</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function">T <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="Consumer接口"><a href="#Consumer接口" class="headerlink" title="Consumer接口"></a>Consumer接口</h3><p>接口源码</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//默认方法不会影响抽象方法的唯一性</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Consumer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(T t)</span></span>;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//前后拼接2个lambda</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Consumer&lt;T&gt; <span class="title">andThen</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; after)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(after);</span><br><span class="line">        <span class="keyword">return</span> (T t) -&gt; &#123; accept(t); after.accept(t); &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>抽象方法使用</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Consumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//method((s) -&gt; System.out.println(s));</span></span><br><span class="line">        method(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(Consumer&lt;String&gt; consumer)</span></span>&#123;</span><br><span class="line">        <span class="comment">//消费一个对象</span></span><br><span class="line">        consumer.accept(<span class="string">"hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>默认方法使用</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"><span class="comment">//函数模型拼接</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03ConsumerAndThen</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//先打印大写，再打印小写，消费的是同一个数据</span></span><br><span class="line">        method((s) -&gt; System.out.println(s.toUpperCase()),</span><br><span class="line">                (s) -&gt; System.out.println(s.toLowerCase()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(Consumer&lt;String&gt; one, Consumer&lt;String&gt; two)</span></span>&#123;</span><br><span class="line">        <span class="comment">//先做one,再做two操作 : 函数模型拼接</span></span><br><span class="line">        <span class="comment">//one先消费"hello",two再消费"hello",消费的是同一个"hello"</span></span><br><span class="line">        one.andThen(two).accept(<span class="string">"Hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="Predicate接口"><a href="#Predicate接口" class="headerlink" title="Predicate接口"></a>Predicate接口</h3><p>接口源码</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Predicate</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">test</span><span class="params">(T t)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Predicate&lt;T&gt; <span class="title">and</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> T&gt; other)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(other);</span><br><span class="line">        <span class="keyword">return</span> (t) -&gt; test(t) &amp;&amp; other.test(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Predicate&lt;T&gt; <span class="title">negate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (t) -&gt; !test(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Predicate&lt;T&gt; <span class="title">or</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> T&gt; other)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(other);</span><br><span class="line">        <span class="keyword">return</span> (t) -&gt; test(t) || other.test(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &lt;T&gt; <span class="function">Predicate&lt;T&gt; <span class="title">isEqual</span><span class="params">(Object targetRef)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">null</span> == targetRef)</span><br><span class="line">                ? Objects::isNull</span><br><span class="line">                : object -&gt; targetRef.equals(object);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>抽象方法使用</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.function.Predicate;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">java.util.function.Predicate&lt;T&gt;</span></span><br><span class="line"><span class="comment">作用：对指定类型对象进行操作，得到一个boolean值。条件判断</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04Predicate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//判断字符串长度</span></span><br><span class="line">        method(s -&gt; s.length() &gt; <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(Predicate&lt;String&gt; predicate)</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> hello = predicate.test(<span class="string">"hello"</span>);</span><br><span class="line">        System.out.println(<span class="string">"判断结果："</span>+hello);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>默认方法使用</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Predicate接口有3个常用默认方法（函数模型拼接）</span></span><br><span class="line"><span class="comment">and or negate(去反)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">只有调用test,拼接好的模型才会执行：lambda延迟执行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05PredicateDefault</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// and</span></span><br><span class="line">        methodAnd(s -&gt; s.contains(<span class="string">"H"</span>),</span><br><span class="line">                s -&gt; s.contains(<span class="string">"w"</span>));</span><br><span class="line">        <span class="comment">// or</span></span><br><span class="line">        methodOr(s -&gt; s.contains(<span class="string">"H"</span>),</span><br><span class="line">                s -&gt; s.contains(<span class="string">"w"</span>));</span><br><span class="line">        <span class="comment">// negate</span></span><br><span class="line">        methodNegate(s -&gt; s.contains(<span class="string">"H"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">methodAnd</span><span class="params">(Predicate&lt;String&gt; one, Predicate&lt;String&gt; two)</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> ret = one.and(two).test(<span class="string">"HelloWorld"</span>);</span><br><span class="line">        System.out.println(<span class="string">"判断结果："</span>+ret);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">methodOr</span><span class="params">(Predicate&lt;String&gt; one, Predicate&lt;String&gt; two)</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> ret = one.or(two).test(<span class="string">"HelloWorld"</span>);</span><br><span class="line">        System.out.println(<span class="string">"判断结果："</span>+ret);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">methodNegate</span><span class="params">(Predicate&lt;String&gt; predicate)</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> ret = predicate.negate().test(<span class="string">"HelloWorld"</span>);</span><br><span class="line">        System.out.println(<span class="string">"判断结果："</span>+ret);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="Function接口"><a href="#Function接口" class="headerlink" title="Function接口"></a>Function接口</h3><p>接口源码</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Function</span>&lt;<span class="title">T</span>, <span class="title">R</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">R <span class="title">apply</span><span class="params">(T t)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">default</span> &lt;V&gt; <span class="function">Function&lt;V, R&gt; <span class="title">compose</span><span class="params">(Function&lt;? <span class="keyword">super</span> V, ? extends T&gt; before)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(before);</span><br><span class="line">        <span class="keyword">return</span> (V v) -&gt; apply(before.apply(v));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> &lt;V&gt; <span class="function">Function&lt;T, V&gt; <span class="title">andThen</span><span class="params">(Function&lt;? <span class="keyword">super</span> R, ? extends V&gt; after)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(after);</span><br><span class="line">        <span class="keyword">return</span> (T t) -&gt; after.apply(apply(t));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &lt;T&gt; <span class="function">Function&lt;T, T&gt; <span class="title">identity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t -&gt; t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>抽象方法使用</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">java.util.function.Function&lt;T,R&gt;</span></span><br><span class="line"><span class="comment">T：代表参数类型</span></span><br><span class="line"><span class="comment">R：代表返回值类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo06Function</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//判断字符串长度</span></span><br><span class="line">        method(Integer::parseInt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数据类型转换</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(Function&lt;String,Integer&gt; function)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = function.apply(<span class="string">"20"</span>);</span><br><span class="line">        num+=<span class="number">30</span>;</span><br><span class="line">        System.out.println(<span class="string">"计算结果："</span>+num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>默认方法使用</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Function接口有2个默认方法：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">andThen:    先做自己，再做其他</span></span><br><span class="line"><span class="comment">compose:    先做其他，再做自己</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">应用场景：</span></span><br><span class="line"><span class="comment">String --&gt; split --&gt; String --&gt; Integer.parseInt --&gt; int</span></span><br><span class="line"><span class="comment">"大王,20"             "20"                            20</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo07FunctionDefault</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//判断字符串长度</span></span><br><span class="line">        methodAndThen(s -&gt; s.split(<span class="string">","</span>)[<span class="number">1</span>],</span><br><span class="line">                Integer::parseInt);</span><br><span class="line"></span><br><span class="line">        methodCompose(s -&gt; s.split(<span class="string">","</span>)[<span class="number">1</span>],</span><br><span class="line">                Integer::parseInt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//one做split ,  two做parseInt</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">methodAndThen</span><span class="params">(Function&lt;String, String&gt; one, Function&lt;String, Integer&gt; two)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> age = one.andThen(two).apply(<span class="string">"大王,20"</span>);</span><br><span class="line">        age += <span class="number">1</span>;</span><br><span class="line">        System.out.println(<span class="string">"年龄："</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">methodCompose</span><span class="params">(Function&lt;String, String&gt; one, Function&lt;String, Integer&gt; two)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> age = two.compose(one).apply(<span class="string">"大王,20"</span>);</span><br><span class="line">        age += <span class="number">1</span>;</span><br><span class="line">        System.out.println(<span class="string">"年龄："</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="Stream-API"><a href="#Stream-API" class="headerlink" title="Stream API"></a>Stream API</h1><p>概况</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java 8中Lambda的衍生物</span><br><span class="line">和IO流无关。IO流：数据流</span><br><span class="line">Stream：跟集合相关，流式处理思想</span><br></pre></td></tr></table></figure></div>

<h2 id="体验Stream的更优写法"><a href="#体验Stream的更优写法" class="headerlink" title="体验Stream的更优写法"></a>体验Stream的更优写法</h2><p>传统集合的多步循环遍历及其弊端</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Collection</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//把姓张的三字答应出来</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        list.add(<span class="string">"赵一"</span>);</span><br><span class="line">        list.add(<span class="string">"钱一"</span>);</span><br><span class="line">        list.add(<span class="string">"孙一"</span>);</span><br><span class="line">        list.add(<span class="string">"李一"</span>);</span><br><span class="line">        list.add(<span class="string">"张一"</span>);</span><br><span class="line">        list.add(<span class="string">"张二二"</span>);</span><br><span class="line">        list.add(<span class="string">"张三二"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用for做过滤语义不好：for循环是形式不是目的（是how不是what）</span></span><br><span class="line">        <span class="keyword">for</span> (String name : list)&#123;</span><br><span class="line">            <span class="keyword">if</span> (name != <span class="keyword">null</span> &amp;&amp; name.length() == <span class="number">3</span> &amp;&amp; name.startsWith(<span class="string">"张"</span>))&#123;</span><br><span class="line">                System.out.println(name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//语义优化：可以拆3步，用三个for：1、过滤三字  2、过滤姓张  3、打印</span></span><br><span class="line">        <span class="comment">//这样容易理解，但是代码很多</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>体验Stream的更优写法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 流式思想概述：理解为流水线</span></span><br><span class="line"><span class="comment"> 将要处理的元素集合看作一种流， 流在管道中传输， 并且可以在管道的节点上进行处理， 比如筛选， 排序，聚合等。 </span></span><br><span class="line"><span class="comment">+--------------------+       +------+   +------+   +---+   +-------+</span></span><br><span class="line"><span class="comment">| stream of elements +-----&gt; |filter+-&gt; |sorted+-&gt; |map+-&gt; |collect|</span></span><br><span class="line"><span class="comment">+--------------------+       +------+   +------+   +---+   +-------+</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03Stream</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//把姓张的三字答应出来</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        list.add(<span class="string">"赵一"</span>);</span><br><span class="line">        list.add(<span class="string">"钱一"</span>);</span><br><span class="line">        list.add(<span class="string">"孙一"</span>);</span><br><span class="line">        list.add(<span class="string">"李一"</span>);</span><br><span class="line">        list.add(<span class="string">"张一"</span>);</span><br><span class="line">        list.add(<span class="string">"张二二"</span>);</span><br><span class="line">        list.add(<span class="string">"张三二"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1、过滤三字  2、过滤姓张  3、打印</span></span><br><span class="line">        list.stream()</span><br><span class="line">                .filter(s -&gt; s.length() ==<span class="number">3</span>)</span><br><span class="line">                .filter(s -&gt; s.startsWith(<span class="string">"张"</span>))</span><br><span class="line">            	<span class="comment">//void forEach(Consumer&lt;? super T&gt; action);</span></span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="获取流的多种方式"><a href="#获取流的多种方式" class="headerlink" title="获取流的多种方式"></a>获取流的多种方式</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.stream.IntStream;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">java 8 Stream API核心接口：</span></span><br><span class="line"><span class="comment">java.util.stream.Stream&lt;T&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">获取流的常用3种方式</span></span><br><span class="line"><span class="comment">1. 通过Collection</span></span><br><span class="line"><span class="comment">2. 通过Map        :不能直接获取，转成集合后再湖区</span></span><br><span class="line"><span class="comment">3. 通过数组        :Arrays.stream(array) 或 Stream.of(array)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03GetStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1. 通过Collection</span></span><br><span class="line">        Collection&lt;String&gt; collection = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        Stream&lt;String&gt; stream1 = collection.stream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 通过Map</span></span><br><span class="line">        Map&lt;String,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="comment">//获取所有key对应的流</span></span><br><span class="line">        Stream&lt;String&gt; streamKey = map.keySet().stream();</span><br><span class="line">        <span class="comment">//获取所有value对应的流</span></span><br><span class="line">        Stream&lt;Integer&gt; streamValue = map.values().stream();</span><br><span class="line">        <span class="comment">//获取所有key/value键值对对应的流</span></span><br><span class="line">        Stream&lt;Map.Entry&lt;String, Integer&gt;&gt; streamEntry = map.entrySet().stream();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 通过数组</span></span><br><span class="line">        String[] array = &#123;<span class="string">"王1"</span>,<span class="string">"王2"</span>,<span class="string">"王3"</span>&#125;;</span><br><span class="line">        <span class="comment">//推荐使用</span></span><br><span class="line">        Stream&lt;String&gt; streamArray = Arrays.stream(array);</span><br><span class="line"></span><br><span class="line">        Stream&lt;String&gt; streamArray2 = Stream.of(array);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//是基本类型数组，不是对象数组</span></span><br><span class="line">        <span class="keyword">int</span>[] arrayInt = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">        IntStream streamInt = Arrays.stream(arrayInt);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="Stream的常用方法："><a href="#Stream的常用方法：" class="headerlink" title="Stream的常用方法："></a>Stream的常用方法：</h2><h3 id="过滤filter"><a href="#过滤filter" class="headerlink" title="过滤filter"></a>过滤filter</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">每次调用方法后都返回一个全新的Stream接口实例</span></span><br><span class="line"><span class="comment">filter方法：按条件过滤元素</span></span><br><span class="line"><span class="comment">参数：Predicate&lt;T&gt;</span></span><br><span class="line"><span class="comment">返回：Stream&lt;T&gt; </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04StreamFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">"hello1"</span>);</span><br><span class="line">        list.add(<span class="string">"world"</span>);</span><br><span class="line">        list.add(<span class="string">"java"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Stream&lt;String&gt; stream = list.stream();</span></span><br><span class="line">        <span class="comment">// Stream&lt;T&gt; filter(Predicate&lt;? super T&gt; predicate);</span></span><br><span class="line">        <span class="comment">//Stream&lt;String&gt; streamResult = stream.filter(s -&gt; s.contains("o"));</span></span><br><span class="line">        <span class="comment">//stream只能使用一次</span></span><br><span class="line">        <span class="comment">// java.lang.IllegalStateException: stream has already been operated upon or closed</span></span><br><span class="line">        <span class="comment">//Stream&lt;String&gt; streamResult2 = stream.filter(s -&gt; s.contains("o"));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用链式写法</span></span><br><span class="line">        Stream&lt;String&gt; stream = list.stream().filter(s -&gt; s.contains(<span class="string">"o"</span>)).filter(s -&gt; s.length() == <span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="统计个数count"><a href="#统计个数count" class="headerlink" title="统计个数count"></a>统计个数count</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * count方法：Stream中统计元素个数，返回一个数字</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05StreamCount</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">"hello1"</span>);</span><br><span class="line">        list.add(<span class="string">"world"</span>);</span><br><span class="line">        list.add(<span class="string">"java"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> count = list.stream().filter(s -&gt; s.length() &lt;= <span class="number">5</span>).count();</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="取用前几个limit"><a href="#取用前几个limit" class="headerlink" title="取用前几个limit"></a>取用前几个limit</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * limit方法：Stream中只希望取前n个</span></span><br><span class="line"><span class="comment"> * 参数：取用元素个数（前n个）</span></span><br><span class="line"><span class="comment"> * 返回：Stream&lt;&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo06StreamLimit</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            list.add(<span class="string">"STR-"</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// long count = list.stream().limit(10).count();</span></span><br><span class="line">        <span class="comment">// System.out.println(count);</span></span><br><span class="line">        list.stream().limit(<span class="number">10</span>).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="跳过前几个skip"><a href="#跳过前几个skip" class="headerlink" title="跳过前几个skip"></a>跳过前几个skip</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> skip方法：Stream中跳过前n个元素</span></span><br><span class="line"><span class="comment"> 参数：需要跳过的元素个数（前n个）</span></span><br><span class="line"><span class="comment"> 返回：Stream&lt;&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05StreamSkip</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            list.add(<span class="string">"STR-"</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        long count = list.stream().skip(10).count();</span></span><br><span class="line"><span class="comment">//        System.out.println(count);</span></span><br><span class="line">        </span><br><span class="line">        list.stream().skip(<span class="number">10</span>).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="映射map"><a href="#映射map" class="headerlink" title="映射map"></a>映射map</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mxx.stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * map方法：Stream中进行映射操作</span></span><br><span class="line"><span class="comment"> * 参数：Function&lt;T,R&gt;</span></span><br><span class="line"><span class="comment"> * 返回：Stream&lt;&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo08StreamMap</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//应用：数据类型转换</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">"10"</span>);</span><br><span class="line">        list.add(<span class="string">"20"</span>);</span><br><span class="line">        list.add(<span class="string">"30"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将"10"转成10，然后加1000，最终得到&lt;Integer&gt;</span></span><br><span class="line">        list.stream()</span><br><span class="line">                .map(Integer::parseInt)</span><br><span class="line">                .map(i -&gt; i + <span class="number">1000</span>)</span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="组合concat"><a href="#组合concat" class="headerlink" title="组合concat"></a>组合concat</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mxx.stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">contact方法：将2个流合并为一个整体</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">contact方法是Stream中的静态方法，可以静态调用。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo09StreamContact</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//应用：数据类型转换</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] array1 = &#123;<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>&#125;;</span><br><span class="line"></span><br><span class="line">        String[] array2 = &#123;<span class="string">"d"</span>,<span class="string">"e"</span>,<span class="string">"f"</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Stream&lt;String&gt; stream1 = Arrays.stream(array1);</span><br><span class="line">        Stream&lt;String&gt; stream2 = Arrays.stream(array2);</span><br><span class="line">        Stream&lt;String&gt; stream = Stream.concat(stream1, stream2);</span><br><span class="line">        stream.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="逐一消费forEach"><a href="#逐一消费forEach" class="headerlink" title="逐一消费forEach"></a>逐一消费forEach</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mxx.stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">forEach方法：对流中的元素进行逐一消费</span></span><br><span class="line"><span class="comment">参数：Consumer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo10StreamForEach</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//应用：数据类型转换</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] array = &#123;<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>&#125;;</span><br><span class="line"></span><br><span class="line">        Arrays.stream(array).forEach(System.out::println);</span><br><span class="line">        Arrays.stream(array).forEach(Demo10StreamForEach::myPrint);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">myPrint</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"myPrint:"</span>+str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="小节：链式方法与终结方法"><a href="#小节：链式方法与终结方法" class="headerlink" title="小节：链式方法与终结方法"></a>小节：链式方法与终结方法</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Stream中方法分两类：</span></span><br><span class="line"><span class="comment">1. 链式方法：返回Stream接口自身，支持链式调用，只是在进行函数模型拼接</span></span><br><span class="line"><span class="comment">2. 终结方法：返回值不再是Stream接口，不支持链式调用，会将所有操作全部触发执行</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Stream不是集合，不存储任何元素，本身是一个函数模型</span></span><br><span class="line"><span class="comment">调用链式方法时，就是在拼接函数模型</span></span><br><span class="line"><span class="comment">Stream和Lambda一样，也有延迟执行的效果</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></div>



<h3 id="并发流"><a href="#并发流" class="headerlink" title="并发流"></a>并发流</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">如何获取并发流：</span></span><br><span class="line"><span class="comment">1. 直接获取并发流： parallelStream</span></span><br><span class="line"><span class="comment">2. 先获取普通流，然后变成并发流   stream.parallel</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">并发流背后使用的是：Fork/Join框架</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01ParallelStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;++i)&#123;</span><br><span class="line">            list.add(<span class="string">"STR-"</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//1. 直接获取并发流</span></span><br><span class="line">        <span class="comment">//不会按序打印：线程抢着执行</span></span><br><span class="line"><span class="comment">//        list.parallelStream().forEach(System.out::println);</span></span><br><span class="line">        <span class="comment">//2. 先获取普通流，然后变成并发流</span></span><br><span class="line">        list.stream().parallel().forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="收集Stream结果"><a href="#收集Stream结果" class="headerlink" title="收集Stream结果"></a>收集Stream结果</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01StreamCollect</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1、到数组</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//泛型擦除，泛型是一个编译器工具，运行时是没有泛型的</span></span><br><span class="line">        Object[] array = Stream.of(<span class="string">"AA"</span>, <span class="string">"BB"</span>, <span class="string">"CC"</span>).toArray();</span><br><span class="line">        <span class="comment">//解决泛型数组的限制</span></span><br><span class="line">        String[] array1 = Stream.of(<span class="string">"AA"</span>, <span class="string">"BB"</span>, <span class="string">"CC"</span>).toArray(String[]::<span class="keyword">new</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、到List</span></span><br><span class="line">        List&lt;String&gt; list = Stream.of(<span class="string">"AA"</span>, <span class="string">"BB"</span>, <span class="string">"CC"</span>).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、到Set</span></span><br><span class="line">        Set&lt;String&gt; set = Stream.of(<span class="string">"AA"</span>, <span class="string">"BB"</span>, <span class="string">"CC"</span>).collect(Collectors.toSet());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h1 id="Java9"><a href="#Java9" class="headerlink" title="??Java9"></a>??Java9</h1><h2 id="模块化思想"><a href="#模块化思想" class="headerlink" title="模块化思想"></a>模块化思想</h2><h2 id="接口组成更新：私有方法"><a href="#接口组成更新：私有方法" class="headerlink" title="接口组成更新：私有方法"></a>接口组成更新：私有方法</h2>]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>JavaSE</tag>
      </tags>
  </entry>
  <entry>
    <title>枚举Enum</title>
    <url>/2018/12/07/20181207163113462/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. 使用enum定义的枚举类默认继承java.lang.Enum类</span></span><br><span class="line"><span class="comment"> * 2. 枚举类的构造器只能使用private访问控制符，如果省略了其构造器的访问控制符，则默认使用private修饰</span></span><br><span class="line"><span class="comment"> * 3. 枚举类的所有实例必须在枚举类中显示的列出，否则这个枚举类将永远都不能产生实例。列出这些实例时，系统会自动添加public static final修饰，无须显示添加</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> SeasonEnum &#123;</span><br><span class="line">    SPRING(<span class="number">0</span>,<span class="string">"春天"</span>),</span><br><span class="line">    SUMMER(<span class="number">1</span>,<span class="string">"夏天"</span>),</span><br><span class="line">    AUTUMN(<span class="number">2</span>,<span class="string">"秋天"</span>),</span><br><span class="line">    WINTER(<span class="number">3</span>,<span class="string">"冬天"</span>)</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    SeasonEnum(Integer code, String msg) &#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//使用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Integer code = SeasonEnum.SPRING.getCode();</span><br><span class="line">        String msg = SeasonEnum.SPRING.getMsg();</span><br><span class="line">        System.out.println(code+<span class="string">"-"</span>+msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>JavaSE</tag>
      </tags>
  </entry>
  <entry>
    <title>概述&amp;服务注册发现</title>
    <url>/2018/12/04/20181204191721530/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>参考imooc【Spring Cloud微服务实战】</p>
<p>我的代码：<a href="https://gitee.com/machine4869/example-code/tree/master/note_springcloud" target="_blank" rel="noopener">note_springcloud</a></p>
</blockquote>
<h1 id="第1章-微服务介绍"><a href="#第1章-微服务介绍" class="headerlink" title="第1章 微服务介绍"></a>第1章 微服务介绍</h1><p><strong>微服务架构</strong></p>
<p>Spring Framework &gt; Spring Boot &gt; Spring Cloud</p>
<p>什么是微服务</p>
<ul>
<li>微服务是一种架构风格（restful是一种架构风格）</li>
<li>一系列微小服务，跑在自己的进程里</li>
<li>每个服务为独立的业务开发，独立部署</li>
<li>分布式管理</li>
</ul>
<p>架构演进</p>
<p>ORM–MVC–RPC–SOA</p>
<p>单体架构</p>
<p>优点：</p>
<ul>
<li>容易测试</li>
<li>容易部署</li>
</ul>
<p>缺点：</p>
<ul>
<li>开发效率低</li>
<li>代码维护困难</li>
<li>部署不灵活（构建时间长）</li>
<li>稳定性不高</li>
<li>扩展性不够（不满足高并发业务需求）</li>
</ul>
<p>微服务架构</p>
<ul>
<li>服务注册发现（微服务内部相互调用与通信）</li>
<li>服务网关（Service Gateway）（外界访问，如手机，浏览器）<ul>
<li>对外屏蔽后台服务细节</li>
<li>路由：将外部请求反向路由到内部某个微服务</li>
<li>限流、容错</li>
<li>监控、日志</li>
<li>安全性：用户认证、授权、反爬虫</li>
</ul>
</li>
<li>后端通用服务（中间层服务） <ul>
<li>在启动时将地址信息注册到服务注册表</li>
</ul>
</li>
<li>前端服务（边缘服务）<ul>
<li>通过查询注册表发现、调用后端服务</li>
<li>对后端服务做必要的聚合、裁剪后暴露给外部不同设备<ul>
<li>聚合：对多个api调用进行聚合，从而减少客户端请求数</li>
<li>裁剪：pc端和手机端，需要的数据可能不同（pc通常需要更为详细的数据）</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>微服务架构图</p>
<p>![屏幕快照 2018-12-04 下午8.05.34](20181204191721530/屏幕快照 2018-12-04 下午8.05.34.png)</p>
<p>微服务内部的“配方”</p>
<ul>
<li><p>阿里系：</p>
<ul>
<li>Dubbo：服务化治理</li>
<li>Zookeeper：服务注册中心</li>
<li>SpringMVC or SpringBoot</li>
</ul>
</li>
<li><p>Spring Cloud全家桶：</p>
<ul>
<li><p>SpringCloud、Netflix、Eureka</p>
</li>
<li><p>SpringBoot</p>
</li>
</ul>
</li>
</ul>
<hr>
<p>Spring Cloud是什么</p>
<ul>
<li><p>Spring Cloud是一个开发工具集，包含众多开源项目</p>
<ul>
<li>利用Spring Boot的开发便利<ul>
<li>服务注册与发现、负载均衡、数据监控、RestAPI发布</li>
<li>主要是对Netflix开源组件的进一步封装</li>
</ul>
</li>
</ul>
</li>
<li><p>Spring Cloud简化了分布式开发</p>
</li>
</ul>
<h1 id="第2章-服务注册与发现"><a href="#第2章-服务注册与发现" class="headerlink" title="第2章 服务注册与发现"></a>第2章 服务注册与发现</h1><h2 id="Spring-Cloud-Eureka"><a href="#Spring-Cloud-Eureka" class="headerlink" title="Spring Cloud Eureka"></a>Spring Cloud Eureka</h2><ul>
<li><p>基于Netflix Eureka做了二次封装</p>
</li>
<li><p>两个组件组成：</p>
<ul>
<li><p>Eureka Server 注册中心</p>
</li>
<li><p>Eureka Client 简化与Server的交互（轮询负载均衡器，提供服务的故障切换支持）</p>
</li>
</ul>
</li>
</ul>
<hr>
<p>版本</p>
<p>spring boot：2.0.7.RELEASE</p>
<p>spring cloud：Finchley.SR2</p>
<h2 id="Eureka-Server"><a href="#Eureka-Server" class="headerlink" title="Eureka Server"></a>Eureka Server</h2><p>\pom</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Finchley.SR2<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>\application.yml</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">yml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8761</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka</span></span><br><span class="line"><span class="comment"># 注册服务（自己注册自己）</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment"># 不要注册自己</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">enable-self-preservation:</span> <span class="literal">false</span>   <span class="comment"># 关闭自我保护，不要在生产环境使用该配置</span></span><br></pre></td></tr></table></figure></div>

<p>\boot</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mxx.eureka;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//加注解</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(EurekaApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<hr>
<h2 id="Eureka-Client"><a href="#Eureka-Client" class="headerlink" title="Eureka Client"></a>Eureka Client</h2><p>\pom</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>\application.yml</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">yml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">client</span></span><br><span class="line"><span class="comment"># 注册服务</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span></span><br><span class="line"><span class="comment">#  instance:</span></span><br><span class="line"><span class="comment">#    hostname: clientName   # 自定义链接</span></span><br></pre></td></tr></table></figure></div>

<p>\boot</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//注解</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(ClientApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<hr>
<h2 id="Eureka的高可用"><a href="#Eureka的高可用" class="headerlink" title="Eureka的高可用"></a>Eureka的高可用</h2><p>将2个Eureka互相注册，注册信息会同步</p>
<p>![屏幕快照 2018-12-05 上午9.08.24](20181204191721530/屏幕快照 2018-12-05 上午9.08.24.png) </p>
<p>将client注册到每一个server中，保证每次注册都成功（某个server可能挂掉）</p>
<p>3台eureka两两注册</p>
<p>![屏幕快照 2018-12-05 上午9.15.58](20181204191721530/屏幕快照 2018-12-05 上午9.15.58.png) </p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">yml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Eureka1</span></span><br><span class="line"><span class="comment"># VM -Dserver.port=8761</span></span><br><span class="line"><span class="attr">defaultZone:</span> <span class="string">http://localhost:8762/eureka/,http://localhost:8763/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Eureka2</span></span><br><span class="line"><span class="comment"># VM -Dserver.port=8762</span></span><br><span class="line"><span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/,http://localhost:8763/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Eureka3</span></span><br><span class="line"><span class="comment"># VM -Dserver.port=8763</span></span><br><span class="line"><span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/,http://localhost:8762/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># client</span></span><br><span class="line"><span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/,http://localhost:8762/eureka/,http://localhost:8763/eureka/</span></span><br></pre></td></tr></table></figure></div>



<p>小结</p>
<ul>
<li>心跳检测、健康检查、负载均衡</li>
<li>Eureka的高可用，建议在生产中至少2台</li>
</ul>
<hr>
<h2 id="分布式下服务注册"><a href="#分布式下服务注册" class="headerlink" title="分布式下服务注册"></a>分布式下服务注册</h2><p>分布式系统为什么需要服务发现?</p>
<p>根据流量大小调整服务数量</p>
<p>![屏幕快照 2018-12-05 上午11.23.56](20181204191721530/屏幕快照 2018-12-05 上午11.23.56.png) </p>
<p>引入注册中心：</p>
<p>![屏幕快照 2018-12-05 下午1.53.46](20181204191721530/屏幕快照 2018-12-05 下午1.53.46.png) </p>
<p>注册中心是分布式系统的基础</p>
<p>A如何调用B？</p>
<p>客户端发现：轮询、随机、hash ,也就是负载均衡机制</p>
<ul>
<li>缺点：客户端需要自己实现发现逻辑</li>
<li>Eureka</li>
</ul>
<p>服务端发现：代理帮a挑出一个B</p>
<ul>
<li>b和注册中心对a透明，a只需要找代理</li>
<li>Nginx(http反向代理服务器\负载均衡器，服务发现负载均衡器)</li>
<li>zookeeper</li>
<li>kubernetes</li>
</ul>
<p>![屏幕快照 2018-12-05 下午1.57.16](20181204191721530/屏幕快照 2018-12-05 下午1.57.16.png) </p>
<p>微服务特点：异构</p>
<ul>
<li>不用语言、不同数据库</li>
</ul>
<p>Spring Cloud的服务调用方式</p>
<ul>
<li>REST(Eureka) or RPC</li>
<li>Node.js的eureka-js-client</li>
</ul>
]]></content>
      <categories>
        <category>Spring</category>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>Spring Cloud微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>基于zookeeper的应用：分布式锁</title>
    <url>/2018/11/27/20181127102931065/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>代码地址：<a href="https://gitee.com/machine4869/example-code/tree/master/springboot-dubbo" target="_blank" rel="noopener">springboot-dubbo</a> </p>
</blockquote>
<h1 id="第9章-分布式锁"><a href="#第9章-分布式锁" class="headerlink" title="第9章 分布式锁"></a>第9章 分布式锁</h1><h2 id="9-1-分布式锁的引入"><a href="#9-1-分布式锁的引入" class="headerlink" title="9-1 分布式锁的引入"></a>9-1 分布式锁的引入</h2><ul>
<li><p>死锁与活锁的概念</p>
</li>
<li><p>分布式锁的概念</p>
</li>
</ul>
<p>多个系统共享数据，并发下，不加锁，会导致数据不一致</p>
<p>![屏幕快照 2018-11-27 上午10.57.37](20181127102931065/屏幕快照 2018-11-27 上午10.57.37.png) </p>
<p>所以引出zookeeper分布式锁</p>
<p>目的：数据最终一致性（数据库）</p>
<h2 id="9-2-curator与springboot整合"><a href="#9-2-curator与springboot整合" class="headerlink" title="9-2 curator与springboot整合"></a>9-2 curator与springboot整合</h2><p>之前：用curator工厂类创建客户端，然后.start启动</p>
<p>结合spring：在web应用下，curator随spring容器启动</p>
<p>\configure</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CrutorConf</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//zk地址</span></span><br><span class="line">    <span class="keyword">private</span> String zkServerPath = <span class="string">"10.211.55.6:2181"</span>;</span><br><span class="line">    <span class="comment">//重试策略-次数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> retryN = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">//重试策略-时间间隔</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> retryT = <span class="number">5000</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//连接zk 重试策略</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RetryPolicy <span class="title">getRetryPolicy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        RetryPolicy retryPolicy = <span class="keyword">new</span> RetryNTimes(retryN, retryT);</span><br><span class="line">        <span class="keyword">return</span> retryPolicy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//zk客户端:crutor</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CuratorFramework <span class="title">getClient</span><span class="params">()</span></span>&#123;</span><br><span class="line">        CuratorFramework client = CuratorFrameworkFactory.builder()</span><br><span class="line">                .connectString(zkServerPath)</span><br><span class="line">                .sessionTimeoutMs(<span class="number">10000</span>)    <span class="comment">//会话超时时间</span></span><br><span class="line">                .connectionTimeoutMs(<span class="number">5000</span>)  <span class="comment">//创建连接超时时间</span></span><br><span class="line">                .retryPolicy(<span class="keyword">this</span>.getRetryPolicy())</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        client.start();</span><br><span class="line">        <span class="comment">//返回已启动的client</span></span><br><span class="line">        <span class="keyword">return</span> client;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在spring启动时，初始化crutor，启动client，并交给spring容器</span></span><br><span class="line"><span class="comment">     * bean name : 默认方法名"zKCrutor"</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ZKCrutor <span class="title">zKCrutor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ZKCrutor zKCrutor = <span class="keyword">new</span> ZKCrutor(<span class="keyword">this</span>.getClient());</span><br><span class="line">        zKCrutor.init();</span><br><span class="line">        <span class="keyword">return</span> zKCrutor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>\utils</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZKCrutor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> CuratorFramework client = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//命名空间</span></span><br><span class="line">    <span class="keyword">private</span> String namespace = <span class="string">"workspace"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ZKCrutor</span><span class="params">(CuratorFramework client)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.client = client;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化操作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        client.usingNamespace(namespace);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAlive</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> client.isStarted();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>\controller</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testZKCrutor"</span>)</span><br><span class="line"><span class="function">String <span class="title">testZKCrutor</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> isAlive = zkCrutor.isAlive();</span><br><span class="line">    <span class="keyword">return</span> isAlive?<span class="string">"连接"</span>:<span class="string">"断开"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p>改进：一个session(浏览器)对应一个zKcrutor，而不是整个容器(application)共用一个zkClient。浏览器第一次连接，就创建zKcrutor，然后放进session，之后同一个session访问就返回该zkClient。</p>
<h2 id="9-3-开发分布式锁"><a href="#9-3-开发分布式锁" class="headerlink" title="9-3 开发分布式锁"></a>9-3 开发分布式锁</h2><p><strong>分布式锁的流程</strong></p>
<p>![屏幕快照 2018-11-27 下午2.46.58](20181127102931065/屏幕快照 2018-11-27 下午2.46.58.png) </p>
<p><strong>开发分布式锁</strong></p>
<p>\utils</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DistributedLock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    CuratorFramework client = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//挂起当前请求，等待上一个分布式锁释放</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CountDownLatch zkLocklatch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//分布式锁 总节点名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ZK_LOCK_PROJECT = <span class="string">"mxx-locks"</span>;</span><br><span class="line">    <span class="comment">//分布式 锁节点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DISTRIBUTED_LOCK = <span class="string">"distributed_lock"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DistributedLock</span><span class="params">(CuratorFramework client)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.client = client;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        client = client.usingNamespace(<span class="string">"ZKLocks-Namespace"</span>);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 创建节点</span></span><br><span class="line"><span class="comment">         * ZKLocks-Namespace</span></span><br><span class="line"><span class="comment">         *  |</span></span><br><span class="line"><span class="comment">         *   —— mxx-locks</span></span><br><span class="line"><span class="comment">         *       |</span></span><br><span class="line"><span class="comment">         *        —— distributed_lock</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(client.checkExists().forPath(<span class="string">"/"</span>+ ZK_LOCK_PROJECT) == <span class="keyword">null</span>)&#123;</span><br><span class="line">                client.create()</span><br><span class="line">                        .creatingParentsIfNeeded()</span><br><span class="line">                        .withMode(CreateMode.PERSISTENT)</span><br><span class="line">                        .withACL(ZooDefs.Ids.OPEN_ACL_UNSAFE)</span><br><span class="line">                        .forPath(<span class="string">"/"</span>+ ZK_LOCK_PROJECT);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            addWatcherToLock(<span class="string">"/"</span>+ ZK_LOCK_PROJECT);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            log.error(<span class="string">"客户端连接zookeeper错误，请重试..."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getLock</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//当上一个锁释放，且当前锁获取成功，才跳出循环</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="comment">//创建当前业务节点</span></span><br><span class="line">                client.create()</span><br><span class="line">                        .creatingParentsIfNeeded()</span><br><span class="line">                        <span class="comment">//使用临时节点，会话消失，节点就消失</span></span><br><span class="line">                        .withMode(CreateMode.EPHEMERAL)</span><br><span class="line">                        .withACL(ZooDefs.Ids.OPEN_ACL_UNSAFE)</span><br><span class="line">                        .forPath(<span class="string">"/"</span>+ ZK_LOCK_PROJECT+<span class="string">"/"</span>+DISTRIBUTED_LOCK);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//log.info("获取分布式锁成功...");</span></span><br><span class="line">                <span class="comment">//跳出循环</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                <span class="comment">//如果以上路径存在（改锁被占用），会抛出异常</span></span><br><span class="line">                <span class="comment">//log.info("获取分布式锁失败...");</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//==0表示资源已被用掉（锁已经释放），重置同步资源值</span></span><br><span class="line">                    <span class="keyword">if</span>(zkLocklatch.getCount()&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">                        zkLocklatch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//挂起当前线程，等待锁释放</span></span><br><span class="line">                    zkLocklatch.await();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e1) &#123;</span><br><span class="line">                    e1.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">releaseLock</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除当前业务节点</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">if</span>(client.checkExists().forPath(<span class="string">"/"</span>+ ZK_LOCK_PROJECT+<span class="string">"/"</span>+DISTRIBUTED_LOCK)!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            client.delete().forPath(<span class="string">"/"</span>+ ZK_LOCK_PROJECT+<span class="string">"/"</span>+DISTRIBUTED_LOCK);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//log.info("分布式锁释放完毕");</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addWatcherToLock</span><span class="params">(String path)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//监听 "/mxx-locks"</span></span><br><span class="line">        <span class="keyword">final</span> PathChildrenCache chche = <span class="keyword">new</span> PathChildrenCache(client,path,<span class="keyword">true</span>);</span><br><span class="line">        chche.start(PathChildrenCache.StartMode.POST_INITIALIZED_EVENT);</span><br><span class="line">        chche.getListenable().addListener(<span class="keyword">new</span> PathChildrenCacheListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">childEvent</span><span class="params">(CuratorFramework client, PathChildrenCacheEvent event)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//删除业务节点</span></span><br><span class="line">                <span class="keyword">if</span>(event.getType().equals(PathChildrenCacheEvent.Type.CHILD_REMOVED))&#123;</span><br><span class="line">                    String path = event.getData().getPath();</span><br><span class="line">                    <span class="comment">//log.info("上一个会话已释放锁，节点路径为："+path);</span></span><br><span class="line">                    <span class="keyword">if</span>(path.contains(DISTRIBUTED_LOCK))&#123;</span><br><span class="line">                        <span class="comment">//log.info("释放计数器，唤醒等待线程");</span></span><br><span class="line">                        zkLocklatch.countDown();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>\configure</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分布式锁</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DistributedLock <span class="title">distributedLock</span><span class="params">()</span></span>&#123;</span><br><span class="line">    DistributedLock distributedLock = <span class="keyword">new</span> DistributedLock(<span class="keyword">this</span>.getClient());</span><br><span class="line">    distributedLock.init();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> distributedLock;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>\controller</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/buy"</span>)</span><br><span class="line"><span class="function">String <span class="title">buy</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//count是全局常量，初始值为0</span></span><br><span class="line">    UserPojo.count = UserPojo.count+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"ok"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/buyWithLock"</span>)</span><br><span class="line"><span class="function">String <span class="title">buyWithLock</span><span class="params">()</span></span>&#123;</span><br><span class="line">    distributedLock.getLock();</span><br><span class="line"></span><br><span class="line">    UserPojo.count = UserPojo.count+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    distributedLock.releaseLock();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"ok"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p>情景推理：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>成功创建（锁了）</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、<span class="number">3</span>同时进入失败，挂起</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>释放锁（删除节点，触发监听，countdown使得count=<span class="number">0</span>）</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、<span class="number">3</span>同时被重新启动，重新进入死循环，尝试获取锁</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、<span class="number">3</span>有一个成功了，有一个失败了</span><br><span class="line"></span><br><span class="line">比如<span class="number">3</span>失败，他进入<span class="keyword">catch</span>，重置CountDownLatch，然后等着，直到<span class="number">2</span>用完释放</span><br></pre></td></tr></table></figure></div>



<p><strong>测试分布式锁</strong></p>
<p>ab -n 1000 -c 50 <a href="http://localhost:8081/user/buy" target="_blank" rel="noopener">http://localhost:8081/user/buy</a>        # count无法达到1000</p>
<p>ab -n 1000 -c 50 <a href="http://localhost:8081/user/buyWithLock" target="_blank" rel="noopener">http://localhost:8081/user/buyWithLock</a>    #count每次都为1000</p>
<p>改进：crutor/分布式锁的代码，正常情况下该放在 produce里面，consumer只完成controller的任务。</p>
]]></content>
      <categories>
        <category>ZooKeeper分布式专题</category>
      </categories>
      <tags>
        <tag>ZooKeeper分布式专题</tag>
      </tags>
  </entry>
  <entry>
    <title>基于zookeeper的应用：Dubbo</title>
    <url>/2018/11/22/20181122215242450/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>代码地址：<a href="https://gitee.com/machine4869/example-code/tree/master/springboot-dubbo" target="_blank" rel="noopener">springboot-dubbo</a> </p>
</blockquote>
<h1 id="第8章-Dubbo入门到重构服务"><a href="#第8章-Dubbo入门到重构服务" class="headerlink" title="第8章 Dubbo入门到重构服务"></a>第8章 Dubbo入门到重构服务</h1><h2 id="8-1-架构演变过程"><a href="#8-1-架构演变过程" class="headerlink" title="8-1 架构演变过程"></a>8-1 架构演变过程</h2><p><strong>基于zookeeper的应用</strong></p>
<ul>
<li><p>分布式协调服务dubbo</p>
</li>
<li><p>分布式锁</p>
</li>
</ul>
<p><strong>基于服务的架构演变过程</strong></p>
<p>单一应用（一个war包，一个数据库，放在一台服务器上）–&gt; MVC分层</p>
<p>多个c和多个s –&gt; 对s进行整合（Dubbo）</p>
<p>图例1:</p>
<p>![屏幕快照 2018-11-22 下午4.48.43](20181122215242450/屏幕快照 2018-11-22 下午4.48.43.png) </p>
<p>图例2:</p>
<p>![屏幕快照 2018-11-22 下午10.11.58](20181122215242450/屏幕快照 2018-11-22 下午10.11.58.png) </p>
<p><strong>系统之间的调用方式</strong></p>
<ul>
<li><p>Webservice - wsdl(很老，算是被淘汰了)</p>
</li>
<li><p>httpclient</p>
</li>
<li><p>rpc通信（dubbo）/restful（springcloud）</p>
</li>
</ul>
<h2 id="8-2-dubbo-入门简介"><a href="#8-2-dubbo-入门简介" class="headerlink" title="8-2 dubbo 入门简介"></a>8-2 dubbo 入门简介</h2><ul>
<li>官网 dubbo.io    <a href="http://dubbo.apache.org/zh-cn/" target="_blank" rel="noopener">http://dubbo.apache.org/zh-cn/</a></li>
<li>国产（阿里巴巴）的优秀框架</li>
<li>京东、当当（dubbox）都在使用</li>
<li>最大程度解耦，降低系统耦合性</li>
<li>生产者/消费者模式</li>
<li>zk注册中心，admin监控中心，协议支持</li>
</ul>
<p><strong>高性能Java RPC框架</strong></p>
<blockquote>
<p>Apache Dubbo (incubating) |ˈdʌbəʊ| 是一款高性能、轻量级的开源Java RPC框架，它提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。</p>
</blockquote>
<p><a href="/2018/11/22/20181122215242450/architecture.png" data-fancybox="group" data-caption="architecture" class="fancybox"><img alt="architecture" title="architecture" data-src="/2018/11/22/20181122215242450/architecture.png" class="lazyload"></a> </p>
<p>调用关系说明</p>
<ol>
<li>服务容器负责启动，加载，运行服务提供者。</li>
<li>服务提供者在启动时，向注册中心注册自己提供的服务。</li>
<li>服务消费者在启动时，向注册中心订阅自己所需的服务。</li>
<li>注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。</li>
<li>服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</li>
<li>服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。</li>
</ol>
<p>pom</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>



<p>单体到分层模式</p>
<p>![屏幕快照 2018-11-23 上午11.52.07](20181122215242450/屏幕快照 2018-11-23 上午11.52.07.png) </p>
<p>利用maven进行项目拆分</p>
<h2 id="8-3-duboo使用：生产者-消费者模式"><a href="#8-3-duboo使用：生产者-消费者模式" class="headerlink" title="8-3 duboo使用：生产者/消费者模式"></a>8-3 duboo使用：生产者/消费者模式</h2><p>使用springboot+dubbo实现生产者/消费者</p>
<p>maven聚合工程的结构：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">springboot-dubbo</span><br><span class="line">	springboot-dubbo-common	(基本的maven坐标、工具类)</span><br><span class="line">	springboot-dubbo-producer	(依赖api)</span><br><span class="line">		service.impl	(业务实现)</span><br><span class="line">	springboot-dubbo-consumer	(依赖api)</span><br><span class="line">		controller	（调用api接口）</span><br><span class="line">	springboot-dubbo-api</span><br><span class="line">		service	(抽象服务)</span><br><span class="line">		domain (实体)</span><br></pre></td></tr></table></figure></div>



<p>版本：</p>
<p>springboot    2.1.0.RELEASE</p>
<p>dubbo-spring-boot-starter    0.2.0</p>
<p>dubbo    2.6.2</p>
<p>核心代码：</p>
<p><strong>dubbo-api</strong></p>
<p>\service</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> machine.sbd.api.service;</span><br><span class="line"><span class="keyword">import</span> machine.sbd.api.domain.User;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p><strong>dubbo-producer</strong></p>
<p>\pom</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- dubbo starter--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>\application.properties</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">properties</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">## Dubbo 服务提供者配置</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务名称</span></span><br><span class="line"><span class="meta">dubbo.application.name</span> = <span class="string">sbd-provider</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注册中心地址：使用zk作为注册中心</span></span><br><span class="line"><span class="meta">dubbo.registry.address</span> = <span class="string">zookeeper://10.211.55.6:2181</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认值</span></span><br><span class="line"><span class="comment"># 监控中心：使用注册中心(registry)去发现监控中心</span></span><br><span class="line"><span class="meta">dubbo.monitor.protocol</span> = <span class="string">registry</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露服务使用的协议：dobbo协议</span></span><br><span class="line"><span class="meta">dubbo.protocol.name</span> = <span class="string">dubbo</span></span><br><span class="line"><span class="meta">dubbo.protocol.port</span> = <span class="string">20880</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 扫描dubbo的@service注解，注册服务</span></span><br><span class="line"><span class="meta">dubbo.scan.basePackages</span> = <span class="string">machine.sbd.producer.service.impl</span></span><br></pre></td></tr></table></figure></div>

<p>\servie.impl</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> machine.sbd.producer.service.impl;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Service;</span><br><span class="line"><span class="keyword">import</span> machine.sbd.api.domain.User;</span><br><span class="line"><span class="keyword">import</span> machine.sbd.api.service.UserService;</span><br><span class="line"></span><br><span class="line"><span class="comment">//dubbo的@Service注解：将服务注册到dubbo（zk节点上）</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"保存对象："</span>+ user.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>\启动服务</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootDubboProducerApplication</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//没有springboot-web-start，启动的是非web应用</span></span><br><span class="line">SpringApplication.run(SpringbootDubboProducerApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p><strong>dubbo-consumer</strong></p>
<p>\application.properties</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">properties</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span> = <span class="string">8081</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Dubbo 服务消费者配置</span></span><br><span class="line"><span class="meta">dubbo.application.name</span> = <span class="string">sbd-consumer</span></span><br><span class="line"><span class="meta">dubbo.registry.address</span> = <span class="string">zookeeper://10.211.55.6:2181</span></span><br><span class="line"><span class="comment"># 默认值</span></span><br><span class="line"><span class="meta">dubbo.monitor.protocol</span> = <span class="string">registry</span></span><br></pre></td></tr></table></figure></div>

<p>\controller</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用在dubbo注册的服务接口</span></span><br><span class="line">    <span class="meta">@Reference</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/add"</span>)</span><br><span class="line">    <span class="function">String <span class="title">addUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setName(<span class="string">"大王"</span>);</span><br><span class="line">        user.setAge(<span class="number">20</span>);</span><br><span class="line">        userService.saveUser(user);</span><br><span class="line">        String ret = <span class="string">"用户添加成功："</span>+user.toString();</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>\启动</p>
<p><strong>启动</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 启动zk</span><br><span class="line">- 启动producer</span><br><span class="line">- 启动consumer</span><br></pre></td></tr></table></figure></div>



<h2 id="8-4-dubbo使用：dubbo监控"><a href="#8-4-dubbo使用：dubbo监控" class="headerlink" title="8-4 dubbo使用：dubbo监控"></a>8-4 dubbo使用：dubbo监控</h2><ul>
<li>dubbo提供监控服务，启动运行后可对 服务提供方 以及 消费者进行监控，查看被调用次数、成功失败次数、并发数</li>
<li>下载dubbo源码并编译，提取 监控服务 的安装包 运行</li>
</ul>
<p><strong>编译dubbo源码</strong></p>
<p>从2.6.1开始，将<a href="https://github.com/apache/incubator-dubbo-ops" target="_blank" rel="noopener">Dubbo Admin</a> 单独抽取出来了，这里采用2.6.0版本</p>
<p>下载与项目对应版本的源码：<a href="https://github.com/apache/incubator-dubbo/tree/dubbo-2.6.0" target="_blank" rel="noopener">https://github.com/apache/incubator-dubbo/tree/dubbo-2.6.0</a></p>
<p>项目导入idea &gt; maven pakage 打包dubbo-simple\dubbo-monitor-simple</p>
<p>生成dubbo-monitor-simple-2.6.0-assembly.tar.gz ，解压</p>
<p>修改conf\dubbo.properties</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">properties</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">dubbo.container</span>=<span class="string">log4j,spring,registry,jetty</span></span><br><span class="line"><span class="meta">dubbo.application.name</span>=<span class="string">simple-monitor</span></span><br><span class="line"><span class="meta">dubbo.application.owner</span>=<span class="string"></span></span><br><span class="line"><span class="comment">#dubbo.registry.address=multicast://224.5.6.7:1234</span></span><br><span class="line"><span class="comment"># 1、</span></span><br><span class="line"><span class="meta">dubbo.registry.address</span>=<span class="string">zookeeper://10.211.55.6:2181</span></span><br><span class="line"><span class="comment">#dubbo.registry.address=redis://127.0.0.1:6379</span></span><br><span class="line"><span class="comment">#dubbo.registry.address=dubbo://127.0.0.1:9090</span></span><br><span class="line"><span class="meta">dubbo.protocol.port</span>=<span class="string">7070</span></span><br><span class="line"><span class="comment"># 2、使用的是jetty服务器</span></span><br><span class="line"><span class="meta">dubbo.jetty.port</span>=<span class="string">8082</span></span><br><span class="line"><span class="comment">#dubbo.jetty.directory=$&#123;user.home&#125;/monitor</span></span><br><span class="line"><span class="meta">dubbo.jetty.directory</span>=<span class="string">mxx/monitor</span></span><br><span class="line"><span class="meta">dubbo.charts.directory</span>=<span class="string">$&#123;dubbo.jetty.directory&#125;/charts</span></span><br><span class="line"><span class="meta">dubbo.statistics.directory</span>=<span class="string">$&#123;user.home&#125;/monitor/statistics</span></span><br><span class="line"><span class="meta">dubbo.log4j.file</span>=<span class="string">logs/dubbo-monitor-simple.log</span></span><br><span class="line"><span class="meta">dubbo.log4j.level</span>=<span class="string">WARN</span></span><br></pre></td></tr></table></figure></div>



<p>运行bin\start.sh、访问<a href="http://localhost:8082/" target="_blank" rel="noopener">http://localhost:8082/</a></p>
<p>运行provider 和 consumer </p>
<p>点击service，界面如下：</p>
<p>![屏幕快照 2018-11-24 下午8.25.28](20181122215242450/屏幕快照 2018-11-24 下午8.25.28.png) </p>
<hr>
<p><strong>监控服务使用\测试</strong></p>
<ul>
<li>监控有延时，每分钟会修改一次</li>
<li>并发测试：ab -n 1000 -c 50 <a href="http://localhost:8081/user/add" target="_blank" rel="noopener">http://localhost:8081/user/add</a></li>
</ul>
<p>![屏幕快照 2018-11-24 下午8.42.18](20181122215242450/屏幕快照 2018-11-24 下午8.42.18.png) </p>
<p>图表：</p>
<p>![屏幕快照 2018-11-24 下午8.43.43](20181122215242450/屏幕快照 2018-11-24 下午8.43.43.png) </p>
<h2 id="8-5-关于版本"><a href="#8-5-关于版本" class="headerlink" title="8-5 关于版本"></a>8-5 关于版本</h2><ul>
<li><p>2012年停止更新，版本停留在2.5.3，5年后恢复更新</p>
</li>
<li><p>当当基于此（2.5.3），开发了dubbox</p>
</li>
<li><p>2017年开始重新更新</p>
</li>
<li><p>截止2018-11-24，更新到2.6.4，<a href="https://github.com/apache/incubator-dubbo-ops" target="_blank" rel="noopener">Dubbo Admin</a> 正在重构</p>
</li>
</ul>
]]></content>
      <categories>
        <category>ZooKeeper分布式专题</category>
      </categories>
      <tags>
        <tag>ZooKeeper分布式专题</tag>
      </tags>
  </entry>
  <entry>
    <title>ZooKeeper专题（5）：Apache Curator</title>
    <url>/2018/11/20/20181120104828229/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>代码地址：<a href="https://gitee.com/machine4869/example-code/tree/master/note_zookeeper" target="_blank" rel="noopener">note_zookeeper</a> </p>
</blockquote>
<h1 id="第7章-Apache-Curator客户端的使用"><a href="#第7章-Apache-Curator客户端的使用" class="headerlink" title="第7章 Apache Curator客户端的使用"></a>第7章 Apache Curator客户端的使用</h1><h2 id="7-1-curator简介与客户端之间的异同点"><a href="#7-1-curator简介与客户端之间的异同点" class="headerlink" title="7-1 curator简介与客户端之间的异同点"></a>7-1 curator简介与客户端之间的异同点</h2><p>常用的zk java客户端</p>
<ul>
<li>zk原生api</li>
<li>zkclient</li>
<li>Apache curator(常用)</li>
</ul>
<p>原生api的不足</p>
<ul>
<li>超时重连，不支持自动，需要手动操作</li>
<li>Watch注册一次后会失效</li>
<li>不支持递归创建节点</li>
</ul>
<p>Apache curator</p>
<ul>
<li>Apache的开源项目</li>
<li>解决watch的注册一次就失效</li>
<li>Api更加简单易用</li>
<li>提供更多解决方案且实现简单：比如 分布式锁</li>
<li>提供常用的Zookeeper工具类</li>
<li>编程风格好</li>
</ul>
<h2 id="7-2-curator基本操作"><a href="#7-2-curator基本操作" class="headerlink" title="7-2 curator基本操作"></a>7-2 curator基本操作</h2><p>1、会话连接与关闭(RetryPolicy：重试机制)</p>
<p>2、节点的增删改查（namespace）</p>
<p>3、watcher监听（usingWatcher、nodeCache、PathChildrenCache）</p>
<p>pom</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-framework<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-recipes<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>



<p>示例代码</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> machine.example.zookeeper.curator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.curator.RetryPolicy;</span><br><span class="line"><span class="keyword">import</span> org.apache.curator.framework.CuratorFramework;</span><br><span class="line"><span class="keyword">import</span> org.apache.curator.framework.CuratorFrameworkFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.curator.framework.recipes.cache.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.curator.retry.ExponentialBackoffRetry;</span><br><span class="line"><span class="keyword">import</span> org.apache.curator.retry.RetryNTimes;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.CreateMode;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooDefs;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.data.Stat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CuratorOperator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> CuratorFramework client = <span class="keyword">null</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String zkServerPath = <span class="string">"10.211.55.6:2181"</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 实例化zk客户端</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">CuratorOperator</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//	RetryPolicy：重试机制</span></span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * 1、</span></span><br><span class="line"><span class="comment">		 * 同步创建zk示例，原生api是异步的</span></span><br><span class="line"><span class="comment">		 * </span></span><br><span class="line"><span class="comment">		 * curator链接zookeeper的策略:ExponentialBackoffRetry</span></span><br><span class="line"><span class="comment">		 * baseSleepTimeMs：初始sleep的时间</span></span><br><span class="line"><span class="comment">		 * maxRetries：最大重试次数</span></span><br><span class="line"><span class="comment">		 * maxSleepMs：最大重试时间</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line"><span class="comment">//		RetryPolicy retryPolicy = new ExponentialBackoffRetry(1000, 5);</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * 2、</span></span><br><span class="line"><span class="comment">		 * 推荐使用</span></span><br><span class="line"><span class="comment">		 *</span></span><br><span class="line"><span class="comment">		 * curator链接zookeeper的策略:RetryNTimes</span></span><br><span class="line"><span class="comment">		 * n：重试的次数</span></span><br><span class="line"><span class="comment">		 * sleepMsBetweenRetries：每次重试间隔的时间</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		RetryPolicy retryPolicy = <span class="keyword">new</span> RetryNTimes(<span class="number">3</span>, <span class="number">5000</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * 3、</span></span><br><span class="line"><span class="comment">		 * curator链接zookeeper的策略:RetryOneTime</span></span><br><span class="line"><span class="comment">		 * sleepMsBetweenRetry:每次重试间隔的时间</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line"><span class="comment">//		RetryPolicy retryPolicy2 = new RetryOneTime(3000);</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * 4、</span></span><br><span class="line"><span class="comment">		 * 永远重试，不推荐使用</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line"><span class="comment">//		RetryPolicy retryPolicy3 = new RetryForever(retryIntervalMs)</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * 5、</span></span><br><span class="line"><span class="comment">		 * curator链接zookeeper的策略:RetryUntilElapsed</span></span><br><span class="line"><span class="comment">		 * maxElapsedTimeMs:最大重试时间</span></span><br><span class="line"><span class="comment">		 * sleepMsBetweenRetries:每次重试间隔</span></span><br><span class="line"><span class="comment">		 * 重试时间超过maxElapsedTimeMs后，就不再重试</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line"><span class="comment">//		RetryPolicy retryPolicy4 = new RetryUntilElapsed(2000, 3000);</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//编程风格良好</span></span><br><span class="line">		client = CuratorFrameworkFactory.builder()</span><br><span class="line">				.connectString(zkServerPath)</span><br><span class="line">				.sessionTimeoutMs(<span class="number">10000</span>).retryPolicy(retryPolicy)</span><br><span class="line">				.namespace(<span class="string">"workspace"</span>)</span><br><span class="line">				.build();</span><br><span class="line">		client.start();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@Description</span>: 关闭zk客户端连接</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">closeZKClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (client != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">this</span>.client.close();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//1、会话连接与关闭(RetryPolicy：重试机制)</span></span><br><span class="line"></span><br><span class="line">		CuratorOperator cto = <span class="keyword">new</span> CuratorOperator();</span><br><span class="line">		<span class="keyword">boolean</span> isZkCuratorStarted = cto.client.isStarted();</span><br><span class="line">		System.out.println(<span class="string">"当前客户的状态："</span> + (isZkCuratorStarted ? <span class="string">"连接中"</span> : <span class="string">"已关闭"</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="comment">//2、节点的增删改查（namespace）</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// 创建节点</span></span><br><span class="line">		String nodePath = <span class="string">"/super/mxx"</span>;		<span class="comment">// /workspace/super/mxx</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">		byte[] data = "superme".getBytes();</span></span><br><span class="line"><span class="comment">		cto.client.create().creatingParentsIfNeeded()	//递归创建节点</span></span><br><span class="line"><span class="comment">				.withMode(CreateMode.PERSISTENT)</span></span><br><span class="line"><span class="comment">				.withACL(ZooDefs.Ids.OPEN_ACL_UNSAFE)</span></span><br><span class="line"><span class="comment">				.forPath(nodePath, data);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// 更新节点数据</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">		byte[] newData = "batman".getBytes();</span></span><br><span class="line"><span class="comment">		cto.client.setData().withVersion(0).forPath(nodePath, newData);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// 删除节点</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">		cto.client.delete()</span></span><br><span class="line"><span class="comment">				  .guaranteed()					// 可选，如果删除失败，那么在后端还是继续会删除，直到成功（网络抖动,操作在服务器成功，但在返回客户端时连接中断，response会顺利返回客户端）</span></span><br><span class="line"><span class="comment">				  .deletingChildrenIfNeeded()	// 可选，如果有子节点，就删除（若路径为/super/mxx，则删除的是mxx及mxx的子节点）</span></span><br><span class="line"><span class="comment">				  .withVersion(0)</span></span><br><span class="line"><span class="comment">				  .forPath(nodePath);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// 读取节点数据</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">		Stat stat = new Stat();</span></span><br><span class="line"><span class="comment">		byte[] data = cto.client.getData()</span></span><br><span class="line"><span class="comment">				.storingStatIn(stat)	//可选，会填充状态信息到stat</span></span><br><span class="line"><span class="comment">				.forPath(nodePath);</span></span><br><span class="line"><span class="comment">		System.out.println("节点" + nodePath + "的数据为: " + new String(data));</span></span><br><span class="line"><span class="comment">		System.out.println("该节点的版本号为: " + stat.getVersion());</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="comment">// 查询子节点</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">		List&lt;String&gt; childNodes = cto.client.getChildren()</span></span><br><span class="line"><span class="comment">											.forPath(nodePath);</span></span><br><span class="line"><span class="comment">		System.out.println("开始打印子节点：");</span></span><br><span class="line"><span class="comment">		for (String s : childNodes) &#123;</span></span><br><span class="line"><span class="comment">			System.out.println(s);</span></span><br><span class="line"><span class="comment">		&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">		<span class="comment">// 判断节点是否存在,如果不存在则为空,存在则返回Stat</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">		Stat statExist = cto.client.checkExists().forPath(nodePath + "/abc");</span></span><br><span class="line"><span class="comment">		System.out.println(statExist);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="comment">//3、watcher监听</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * 3.1.1</span></span><br><span class="line"><span class="comment">		 * 单次触发(usingWatcher)</span></span><br><span class="line"><span class="comment">		 * 当使用usingWatcher的时候，监听只会触发一次，监听完毕后就销毁</span></span><br><span class="line"><span class="comment">		 * MyCuratorWatcher：实现Curator提供的api</span></span><br><span class="line"><span class="comment">		 * MyWatcher：实现原生api</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">		cto.client.getData().usingWatcher(new MyCuratorWatcher()).forPath(nodePath);</span></span><br><span class="line"><span class="comment">//		cto.client.getData().usingWatcher(new MyWatcher()).forPath(nodePath);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * 3.1.2</span></span><br><span class="line"><span class="comment">		 * 重复触发（NodeCache）</span></span><br><span class="line"><span class="comment">		 *</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">		final NodeCache nodeCache = new NodeCache(cto.client, nodePath);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">		// buildInitial : 初始化的时候获取node的值并且缓存</span></span><br><span class="line"><span class="comment">		nodeCache.start(true);</span></span><br><span class="line"><span class="comment">		if (nodeCache.getCurrentData() != null) &#123;</span></span><br><span class="line"><span class="comment">			System.out.println("节点初始化数据为：" + new String(nodeCache.getCurrentData().getData()));</span></span><br><span class="line"><span class="comment">		&#125; else &#123;</span></span><br><span class="line"><span class="comment">			System.out.println("节点初始化数据为空...");</span></span><br><span class="line"><span class="comment">		&#125;</span></span><br><span class="line"><span class="comment">		//节点修改会触发Listener，删除操作会触发 "空指针异常"</span></span><br><span class="line"><span class="comment">		nodeCache.getListenable().addListener(new NodeCacheListener() &#123;</span></span><br><span class="line"><span class="comment">			public void nodeChanged() throws Exception &#123;</span></span><br><span class="line"><span class="comment">				if (nodeCache.getCurrentData() == null) &#123;</span></span><br><span class="line"><span class="comment">					System.out.println("空");</span></span><br><span class="line"><span class="comment">					return;</span></span><br><span class="line"><span class="comment">				&#125;</span></span><br><span class="line"><span class="comment">				String data = new String(nodeCache.getCurrentData().getData());</span></span><br><span class="line"><span class="comment">				System.out.println("节点路径：" + nodeCache.getCurrentData().getPath() + "数据：" + data);</span></span><br><span class="line"><span class="comment">			&#125;</span></span><br><span class="line"><span class="comment">		&#125;);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * 3.2</span></span><br><span class="line"><span class="comment">		 * 为子节点添加watcher</span></span><br><span class="line"><span class="comment">		 *</span></span><br><span class="line"><span class="comment">		 * NodeCache只能监听到数据变动，不能监听具体的增删改操作</span></span><br><span class="line"><span class="comment">		 * 所以使用PathChildrenCache</span></span><br><span class="line"><span class="comment">		 * PathChildrenCache: 监听数据节点的增删改，会触发事件</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		String childNodePathCache =  nodePath;</span><br><span class="line">		<span class="comment">// cacheData: 设置缓存节点的数据状态</span></span><br><span class="line">		<span class="keyword">final</span> PathChildrenCache childrenCache = <span class="keyword">new</span> PathChildrenCache(cto.client, childNodePathCache, <span class="keyword">true</span>);</span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * StartMode: 初始化方式</span></span><br><span class="line"><span class="comment">		 * POST_INITIALIZED_EVENT：异步初始化，初始化之后会触发事件</span></span><br><span class="line"><span class="comment">		 * NORMAL：异步初始化</span></span><br><span class="line"><span class="comment">		 * BUILD_INITIAL_CACHE：同步初始化</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		childrenCache.start(PathChildrenCache.StartMode.POST_INITIALIZED_EVENT);</span><br><span class="line"></span><br><span class="line">		<span class="comment">//打印子节点</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">		List&lt;ChildData&gt; childDataList = childrenCache.getCurrentData();</span></span><br><span class="line"><span class="comment">		System.out.println("当前数据节点的子节点数据列表：");</span></span><br><span class="line"><span class="comment">		for (ChildData cd : childDataList) &#123;</span></span><br><span class="line"><span class="comment">			String childData = new String(cd.getData());</span></span><br><span class="line"><span class="comment">			System.out.println(childData);</span></span><br><span class="line"><span class="comment">		&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//异步初始化回调</span></span><br><span class="line">		childrenCache.getListenable().addListener(<span class="keyword">new</span> PathChildrenCacheListener() &#123;</span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">childEvent</span><span class="params">(CuratorFramework client, PathChildrenCacheEvent event)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">				<span class="comment">//INITIALIZED：子节点初始化事件</span></span><br><span class="line">				<span class="keyword">if</span>(event.getType().equals(PathChildrenCacheEvent.Type.INITIALIZED))&#123;</span><br><span class="line">					System.out.println(<span class="string">"子节点初始化ok..."</span>);</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(event.getType().equals(PathChildrenCacheEvent.Type.CHILD_ADDED))&#123;</span><br><span class="line">					String path = event.getData().getPath();</span><br><span class="line">					<span class="keyword">if</span> (path.equals(ADD_PATH)) &#123;</span><br><span class="line">						System.out.println(<span class="string">"添加子节点:"</span> + event.getData().getPath());</span><br><span class="line">						System.out.println(<span class="string">"子节点数据:"</span> + <span class="keyword">new</span> String(event.getData().getData()));</span><br><span class="line">					&#125; <span class="keyword">else</span> <span class="keyword">if</span> (path.equals(<span class="string">"/super/imooc/e"</span>)) &#123;</span><br><span class="line">						System.out.println(<span class="string">"添加不正确..."</span>);</span><br><span class="line">					&#125;</span><br><span class="line"></span><br><span class="line">				&#125;<span class="keyword">else</span> <span class="keyword">if</span>(event.getType().equals(PathChildrenCacheEvent.Type.CHILD_REMOVED))&#123;</span><br><span class="line">					System.out.println(<span class="string">"删除子节点:"</span> + event.getData().getPath());</span><br><span class="line">				&#125;<span class="keyword">else</span> <span class="keyword">if</span>(event.getType().equals(PathChildrenCacheEvent.Type.CHILD_UPDATED))&#123;</span><br><span class="line">					System.out.println(<span class="string">"修改子节点路径:"</span> + event.getData().getPath());</span><br><span class="line">					System.out.println(<span class="string">"修改子节点数据:"</span> + <span class="keyword">new</span> String(event.getData().getData()));</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="comment">//关闭</span></span><br><span class="line"><span class="comment">//		Thread.sleep(3000);</span></span><br><span class="line">		Thread.sleep(<span class="number">100000</span>);</span><br><span class="line">		cto.closeZKClient();</span><br><span class="line">		<span class="keyword">boolean</span> isZkCuratorStarted2 = cto.client.isStarted();</span><br><span class="line">		System.out.println(<span class="string">"当前客户的状态："</span> + (isZkCuratorStarted2 ? <span class="string">"连接中"</span> : <span class="string">"已关闭"</span>));</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String ADD_PATH = <span class="string">"/super/mxx/d"</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="7-3-zk-watcher实例：统一更新N台节点的配置文件"><a href="#7-3-zk-watcher实例：统一更新N台节点的配置文件" class="headerlink" title="7-3 zk-watcher实例：统一更新N台节点的配置文件"></a>7-3 zk-watcher实例：统一更新N台节点的配置文件</h2><p>![屏幕快照 2018-11-22 下午4.48.43](20181120104828229/屏幕快照 2018-11-22 下午4.48.43.png) </p>
<p>思路：新的配置动作会组成json串，set到zk节点，client监听到节点数据变化后，就下载更新新的配置文件</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> CuratorFramework client = <span class="keyword">null</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String zkServerPath = <span class="string">"10.211.55.6:2181"</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Client1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		RetryPolicy retryPolicy = <span class="keyword">new</span> RetryNTimes(<span class="number">3</span>, <span class="number">5000</span>);</span><br><span class="line">		client = CuratorFrameworkFactory.builder()</span><br><span class="line">				.connectString(zkServerPath)</span><br><span class="line">				.sessionTimeoutMs(<span class="number">10000</span>).retryPolicy(retryPolicy)</span><br><span class="line">				.namespace(<span class="string">"workspace"</span>).build();</span><br><span class="line">		client.start();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">closeZKClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (client != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">this</span>.client.close();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line"><span class="comment">//	public final static String CONFIG_NODE = "/super/imooc/redis-config";</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String CONFIG_NODE_PATH = <span class="string">"/super/imooc"</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String SUB_PATH = <span class="string">"/redis-config"</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> CountDownLatch countDown = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		Client1 cto = <span class="keyword">new</span> Client1();</span><br><span class="line">		System.out.println(<span class="string">"client1 启动成功..."</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">final</span> PathChildrenCache childrenCache = <span class="keyword">new</span> PathChildrenCache(cto.client, CONFIG_NODE_PATH, <span class="keyword">true</span>);</span><br><span class="line">		childrenCache.start(StartMode.BUILD_INITIAL_CACHE);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 添加监听事件</span></span><br><span class="line">		<span class="comment">//set /workspace/super/imooc/redis-config &#123;"type":"add","url":"ftp://192.168.10.123/config/redis.xml","remark":"add"&#125;</span></span><br><span class="line">		childrenCache.getListenable().addListener(<span class="keyword">new</span> PathChildrenCacheListener() &#123;</span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">childEvent</span><span class="params">(CuratorFramework client, PathChildrenCacheEvent event)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">				<span class="comment">// 监听节点变化</span></span><br><span class="line">				<span class="keyword">if</span>(event.getType().equals(PathChildrenCacheEvent.Type.CHILD_UPDATED))&#123;</span><br><span class="line">					String configNodePath = event.getData().getPath();</span><br><span class="line">					<span class="keyword">if</span> (configNodePath.equals(CONFIG_NODE_PATH + SUB_PATH)) &#123;</span><br><span class="line">						System.out.println(<span class="string">"监听到配置发生变化，节点路径为:"</span> + configNodePath);</span><br><span class="line">						</span><br><span class="line">						<span class="comment">// 读取节点数据</span></span><br><span class="line">						String jsonConfig = <span class="keyword">new</span> String(event.getData().getData());</span><br><span class="line">						System.out.println(<span class="string">"节点"</span> + CONFIG_NODE_PATH + <span class="string">"的数据为: "</span> + jsonConfig);</span><br><span class="line">						</span><br><span class="line">						<span class="comment">// 从json转换配置</span></span><br><span class="line">						RedisConfig redisConfig = <span class="keyword">null</span>;</span><br><span class="line">						<span class="keyword">if</span> (StringUtils.isNotBlank(jsonConfig)) &#123;</span><br><span class="line">							redisConfig = JsonUtils.jsonToPojo(jsonConfig, RedisConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">						&#125;</span><br><span class="line">						</span><br><span class="line">						<span class="comment">// 配置不为空则进行相应操作</span></span><br><span class="line">						<span class="keyword">if</span> (redisConfig != <span class="keyword">null</span>) &#123;</span><br><span class="line">							String type = redisConfig.getType();</span><br><span class="line">							String url = redisConfig.getUrl();</span><br><span class="line">							String remark = redisConfig.getRemark();</span><br><span class="line">							<span class="comment">// 判断事件</span></span><br><span class="line">							<span class="keyword">if</span> (type.equals(<span class="string">"add"</span>)) &#123;</span><br><span class="line">								System.out.println(<span class="string">"监听到新增的配置，准备下载..."</span>);</span><br><span class="line">								<span class="comment">// ... 连接ftp服务器，根据url找到相应的配置</span></span><br><span class="line">								Thread.sleep(<span class="number">500</span>);</span><br><span class="line">								System.out.println(<span class="string">"开始下载新的配置文件，下载路径为&lt;"</span> + url + <span class="string">"&gt;"</span>);</span><br><span class="line">								<span class="comment">// ... 下载配置到你指定的目录</span></span><br><span class="line">								Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">								System.out.println(<span class="string">"下载成功，已经添加到项目中"</span>);</span><br><span class="line">								<span class="comment">// ... 拷贝文件到项目目录</span></span><br><span class="line">							&#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(<span class="string">"update"</span>)) &#123;</span><br><span class="line">								System.out.println(<span class="string">"监听到更新的配置，准备下载..."</span>);</span><br><span class="line">								<span class="comment">// ... 连接ftp服务器，根据url找到相应的配置</span></span><br><span class="line">								Thread.sleep(<span class="number">500</span>);</span><br><span class="line">								System.out.println(<span class="string">"开始下载配置文件，下载路径为&lt;"</span> + url + <span class="string">"&gt;"</span>);</span><br><span class="line">								<span class="comment">// ... 下载配置到你指定的目录</span></span><br><span class="line">								Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">								System.out.println(<span class="string">"下载成功..."</span>);</span><br><span class="line">								System.out.println(<span class="string">"删除项目中原配置文件..."</span>);</span><br><span class="line">								Thread.sleep(<span class="number">100</span>);</span><br><span class="line">								<span class="comment">// ... 删除原文件</span></span><br><span class="line">								System.out.println(<span class="string">"拷贝配置文件到项目目录..."</span>);</span><br><span class="line">								<span class="comment">// ... 拷贝文件到项目目录</span></span><br><span class="line">							&#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(<span class="string">"delete"</span>)) &#123;</span><br><span class="line">								System.out.println(<span class="string">"监听到需要删除配置"</span>);</span><br><span class="line">								System.out.println(<span class="string">"删除项目中原配置文件..."</span>);</span><br><span class="line">							&#125;</span><br><span class="line">							</span><br><span class="line">							<span class="comment">// TODO 视情况统一重启服务</span></span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">		</span><br><span class="line">		countDown.await();</span><br><span class="line">		</span><br><span class="line">		cto.closeZKClient();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="7-4-acl权限"><a href="#7-4-acl权限" class="headerlink" title="7-4 acl权限"></a>7-4 acl权限</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CuratorAcl</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> CuratorFramework client = <span class="keyword">null</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String zkServerPath = <span class="string">"10.211.55.6:2181"</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">CuratorAcl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		RetryPolicy retryPolicy = <span class="keyword">new</span> RetryNTimes(<span class="number">3</span>, <span class="number">5000</span>);</span><br><span class="line">		client = CuratorFrameworkFactory.builder().authorization(<span class="string">"digest"</span>, <span class="string">"mxx:123456"</span>.getBytes())</span><br><span class="line">				.connectString(zkServerPath)</span><br><span class="line">				.sessionTimeoutMs(<span class="number">10000</span>).retryPolicy(retryPolicy)</span><br><span class="line">				.namespace(<span class="string">"workspace"</span>).build();</span><br><span class="line">		client.start();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">closeZKClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (client != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">this</span>.client.close();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="comment">// 实例化</span></span><br><span class="line">		CuratorAcl cto = <span class="keyword">new</span> CuratorAcl();</span><br><span class="line">		<span class="keyword">boolean</span> isZkCuratorStarted = cto.client.isStarted();</span><br><span class="line">		System.out.println(<span class="string">"当前客户的状态："</span> + (isZkCuratorStarted ? <span class="string">"连接中"</span> : <span class="string">"已关闭"</span>));</span><br><span class="line">		</span><br><span class="line"><span class="comment">//		String nodePath = "/acl/father/child/sub";</span></span><br><span class="line">		String nodePath = <span class="string">"/acl/mxx"</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//权限list</span></span><br><span class="line">		List&lt;ACL&gt; acls = <span class="keyword">new</span> ArrayList&lt;ACL&gt;();</span><br><span class="line">		Id imooc1 = <span class="keyword">new</span> Id(<span class="string">"digest"</span>, AclUtils.getDigestUserPwd(<span class="string">"imooc1:123456"</span>));</span><br><span class="line">		Id imooc2 = <span class="keyword">new</span> Id(<span class="string">"digest"</span>, AclUtils.getDigestUserPwd(<span class="string">"imooc2:123456"</span>));</span><br><span class="line">		acls.add(<span class="keyword">new</span> ACL(Perms.ALL, imooc1));</span><br><span class="line">		acls.add(<span class="keyword">new</span> ACL(Perms.READ, imooc2));</span><br><span class="line">		acls.add(<span class="keyword">new</span> ACL(Perms.DELETE | Perms.CREATE, imooc2));</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 1、创建节点，给权限</span></span><br><span class="line">		<span class="keyword">byte</span>[] data = <span class="string">"spiderman"</span>.getBytes();</span><br><span class="line">		cto.client.create()</span><br><span class="line">				.creatingParentsIfNeeded()</span><br><span class="line">				.withMode(CreateMode.PERSISTENT)</span><br><span class="line">				.withACL(acls, <span class="keyword">true</span>)		<span class="comment">//true（不常用）：递归赋权限（father、child、sub都赋了权限）</span></span><br><span class="line">				.forPath(nodePath, data);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 2、修改已有节点的权限</span></span><br><span class="line"><span class="comment">//		cto.client.setACL().withACL(acls).forPath("/");</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 更新节点数据</span></span><br><span class="line"><span class="comment">//		byte[] newData = "batman".getBytes();</span></span><br><span class="line"><span class="comment">//		cto.client.setData().withVersion(0).forPath(nodePath, newData);</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 删除节点</span></span><br><span class="line"><span class="comment">//		cto.client.delete().guaranteed().deletingChildrenIfNeeded().withVersion(0).forPath(nodePath);</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 读取节点数据</span></span><br><span class="line"><span class="comment">//		Stat stat = new Stat();</span></span><br><span class="line"><span class="comment">//		byte[] data = cto.client.getData().storingStatIn(stat).forPath(nodePath);</span></span><br><span class="line"><span class="comment">//		System.out.println("节点" + nodePath + "的数据为: " + new String(data));</span></span><br><span class="line"><span class="comment">//		System.out.println("该节点的版本号为: " + stat.getVersion());</span></span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		cto.closeZKClient();</span><br><span class="line">		<span class="keyword">boolean</span> isZkCuratorStarted2 = cto.client.isStarted();</span><br><span class="line">		System.out.println(<span class="string">"当前客户的状态："</span> + (isZkCuratorStarted2 ? <span class="string">"连接中"</span> : <span class="string">"已关闭"</span>));</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>ZooKeeper分布式专题</category>
      </categories>
      <tags>
        <tag>ZooKeeper分布式专题</tag>
      </tags>
  </entry>
  <entry>
    <title>ZooKeeper专题（4）：zk原生Java API的使用</title>
    <url>/2018/11/16/20181116180322040/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>代码地址：<a href="https://gitee.com/machine4869/example-code/tree/master/note_zookeeper" target="_blank" rel="noopener">note_zookeeper</a> </p>
</blockquote>
<h1 id="第6章-使用ZooKeeper原生Java-API进行客户端开发"><a href="#第6章-使用ZooKeeper原生Java-API进行客户端开发" class="headerlink" title="第6章 使用ZooKeeper原生Java API进行客户端开发"></a>第6章 使用ZooKeeper原生Java API进行客户端开发</h1><h2 id="6-1-建立客户端与zk服务端的连接"><a href="#6-1-建立客户端与zk服务端的连接" class="headerlink" title="6-1 建立客户端与zk服务端的连接"></a>6-1 建立客户端与zk服务端的连接</h2><p>zk与原生Java api的使用</p>
<ul>
<li><p>会话连接与恢复</p>
</li>
<li><p>节点的增删改查</p>
</li>
<li><p>watch与acl相关操作</p>
</li>
</ul>
<p>pom</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.apache.zookeeper&lt;&#x2F;groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;zookeeper&lt;&#x2F;artifactId&gt;</span><br><span class="line">	&lt;version&gt;3.4.11&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></div>

<p>会话连接</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZKConnect</span> <span class="keyword">implements</span> <span class="title">Watcher</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String zkServerPath = <span class="string">"10.211.55.6:2181"</span>;</span><br><span class="line"><span class="comment">//	public static final String zkServerPath = "192.168.1.111:2181,192.168.1.111:2182,192.168.1.111:2183";</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer timeout = <span class="number">5000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * public ZooKeeper(String connectString, int sessionTimeout, Watcher watcher, long sessionId, byte[] sessionPasswd, boolean canBeReadOnly)</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * sessionTimeout：超时时间，心跳收不到了，那就超时</span></span><br><span class="line"><span class="comment">         * watcher：通知事件，如果有对应的事件触发，则会收到一个通知；如果不需要，那就设置为null</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 当会话丢失后，可以依据 sessionId 和 sessionPasswd 重新获取会话</span></span><br><span class="line"><span class="comment">         * sessionId：会话的id</span></span><br><span class="line"><span class="comment">         * sessionPasswd：会话密码</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        ZooKeeper zk = <span class="keyword">new</span> ZooKeeper(zkServerPath, timeout, <span class="keyword">new</span> ZKConnect());</span><br><span class="line">        log.info(<span class="string">"客户端开始连接zookeeper服务器..."</span>);</span><br><span class="line">        log.info(<span class="string">"连接状态：&#123;&#125;"</span>, zk.getState());</span><br><span class="line">        <span class="keyword">new</span> Thread().sleep(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"连接状态：&#123;&#125;"</span>, zk.getState());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent event)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"接受到watch通知：&#123;&#125;"</span>,event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="6-2-zk会话重连机制"><a href="#6-2-zk会话重连机制" class="headerlink" title="6-2 zk会话重连机制"></a>6-2 zk会话重连机制</h2><p>会话恢复</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: zookeeper 恢复之前的会话连接demo演示</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZKConnectSessionWatcher</span> <span class="keyword">implements</span> <span class="title">Watcher</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String zkServerPath = <span class="string">"10.211.55.6:2181"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer timeout = <span class="number">5000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">        ZooKeeper zk = <span class="keyword">new</span> ZooKeeper(zkServerPath, timeout, <span class="keyword">new</span> ZKConnectSessionWatcher());</span><br><span class="line">        log.info(<span class="string">"客户端开始连接zookeeper服务器..."</span>);</span><br><span class="line">        log.info(<span class="string">"连接状态：&#123;&#125;"</span>, zk.getState());</span><br><span class="line">        <span class="keyword">new</span> Thread().sleep(<span class="number">2000</span>);</span><br><span class="line">        log.info(<span class="string">"连接状态：&#123;&#125;"</span>, zk.getState());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> sessionId = zk.getSessionId();</span><br><span class="line">        <span class="keyword">byte</span>[] sessionPassword = zk.getSessionPasswd();</span><br><span class="line">        String ssid = <span class="string">"0x"</span> + Long.toHexString(sessionId);</span><br><span class="line">        System.out.println(ssid);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开始会话重连</span></span><br><span class="line">        log.info(<span class="string">"开始会话重连..."</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用sessionId、sessionPassword恢复上次会话</span></span><br><span class="line">        ZooKeeper zkSession = <span class="keyword">new</span> ZooKeeper(zkServerPath,</span><br><span class="line">                timeout,</span><br><span class="line">                <span class="keyword">new</span> ZKConnectSessionWatcher(),</span><br><span class="line">                sessionId,</span><br><span class="line">                sessionPassword);</span><br><span class="line">        log.info(<span class="string">"重新连接状态zkSession：&#123;&#125;"</span>, zkSession.getState());</span><br><span class="line">        <span class="keyword">new</span> Thread().sleep(<span class="number">1000</span>);</span><br><span class="line">        log.info(<span class="string">"重新连接状态zkSession：&#123;&#125;"</span>, zkSession.getState());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> sessionId2 = zkSession.getSessionId();</span><br><span class="line">        String ssid2 = <span class="string">"0x"</span> + Long.toHexString(sessionId2);</span><br><span class="line">        System.out.println(ssid2);<span class="comment">//两次的id一致</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent event)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"接受到watch通知：&#123;&#125;"</span>,event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="6-3-同步-异步-创建-修改-删除zk节点"><a href="#6-3-同步-异步-创建-修改-删除zk节点" class="headerlink" title="6-3 同步/异步 创建/修改/删除zk节点"></a>6-3 同步/异步 创建/修改/删除zk节点</h2><p>同步/异步 创建/修改/删除zk节点</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZKNodeOperator</span> <span class="keyword">implements</span> <span class="title">Watcher</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ZooKeeper zookeeper = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String zkServerPath = <span class="string">"10.211.55.6:2181"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer timeout = <span class="number">5000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ZKNodeOperator</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ZKNodeOperator</span><span class="params">(String connectString)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            zookeeper = <span class="keyword">new</span> ZooKeeper(connectString, timeout, <span class="keyword">new</span> ZKNodeOperator());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">if</span> (zookeeper != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    zookeeper.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e1) &#123;</span><br><span class="line">                    e1.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ZooKeeper <span class="title">getZookeeper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> zookeeper;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setZookeeper</span><span class="params">(ZooKeeper zookeeper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.zookeeper = zookeeper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent event)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 创建zk节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createZKNode</span><span class="params">(String path, <span class="keyword">byte</span>[] data, List&lt;ACL&gt; acls)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String result = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 同步或者异步创建节点，都不支持子节点的递归创建，异步有一个callback函数</span></span><br><span class="line"><span class="comment">             * 参数：</span></span><br><span class="line"><span class="comment">             * path：创建的路径</span></span><br><span class="line"><span class="comment">             * data：存储的数据的byte[]</span></span><br><span class="line"><span class="comment">             * acl：控制权限策略</span></span><br><span class="line"><span class="comment">             * 			Ids.OPEN_ACL_UNSAFE --&gt; world:anyone:cdrwa</span></span><br><span class="line"><span class="comment">             * 			CREATOR_ALL_ACL --&gt; auth:user:password:cdrwa</span></span><br><span class="line"><span class="comment">             * createMode：节点类型, 是一个枚举</span></span><br><span class="line"><span class="comment">             * 			PERSISTENT：持久节点</span></span><br><span class="line"><span class="comment">             * 			PERSISTENT_SEQUENTIAL：持久顺序节点</span></span><br><span class="line"><span class="comment">             * 			EPHEMERAL：临时节点</span></span><br><span class="line"><span class="comment">             * 			EPHEMERAL_SEQUENTIAL：临时顺序节点</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//同步创建节点</span></span><br><span class="line"><span class="comment">//          result = zookeeper.create(path, data, acls, CreateMode.PERSISTENT);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//异步创建节点</span></span><br><span class="line">			String ctx = <span class="string">"&#123;'create':'success'&#125;"</span>;</span><br><span class="line">			zookeeper.create(path, data, acls, CreateMode.PERSISTENT, <span class="keyword">new</span> CreateCallBack(), ctx);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"创建节点：\t"</span> + result + <span class="string">"\t成功..."</span>);</span><br><span class="line">            <span class="keyword">new</span> Thread().sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ZKNodeOperator zkServer = <span class="keyword">new</span> ZKNodeOperator(zkServerPath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1、创建zk节点（同步、异步；临时、永久）</span></span><br><span class="line"><span class="comment">//		zkServer.createZKNode("/testnode", "testnode".getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 参数：</span></span><br><span class="line"><span class="comment">         * path：节点路径</span></span><br><span class="line"><span class="comment">         * data：数据</span></span><br><span class="line"><span class="comment">         * version：数据状态</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、修改节点数据（同步、异步）</span></span><br><span class="line"><span class="comment">//		Stat status  = zkServer.getZookeeper().setData("/testnode", "xyz".getBytes(), 0);</span></span><br><span class="line"><span class="comment">//		System.out.println(status.getVersion());</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、删除节点(同步、异步)</span></span><br><span class="line">        zkServer.createZKNode(<span class="string">"/test-delete-node"</span>, <span class="string">"123"</span>.getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE);</span><br><span class="line"><span class="comment">//		zkServer.getZookeeper().delete("/test-delete-node", 0);</span></span><br><span class="line"></span><br><span class="line">        String ctx = <span class="string">"&#123;'delete':'success'&#125;"</span>;</span><br><span class="line">        zkServer.getZookeeper().delete(<span class="string">"/test-delete-node"</span>, <span class="number">0</span>, <span class="keyword">new</span> DeleteCallBack(), ctx);</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>CreateCallBack</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.zookeeper.AsyncCallback.StringCallback;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateCallBack</span> <span class="keyword">implements</span> <span class="title">StringCallback</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processResult</span><span class="params">(<span class="keyword">int</span> rc, String path, Object ctx, String name)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"创建节点: "</span> + path);</span><br><span class="line">		System.out.println((String)ctx);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>DeleteCallBack</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.zookeeper.AsyncCallback.VoidCallback;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeleteCallBack</span> <span class="keyword">implements</span> <span class="title">VoidCallback</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processResult</span><span class="params">(<span class="keyword">int</span> rc, String path, Object ctx)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"删除节点"</span> + path);</span><br><span class="line">		System.out.println((String)ctx);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="6-4-获取zk节点数据"><a href="#6-4-获取zk节点数据" class="headerlink" title="6-4 获取zk节点数据"></a>6-4 获取zk节点数据</h2><p>使用CountDownLatch做节点查询</p>
<ul>
<li>获取（父节点）节点数据</li>
<li>获取子节点数据</li>
<li>判断节点是否存在</li>
</ul>
<p><a href="https://machine4869.gitee.io/blog/2018/10/27/20181027234153307/">CountDownLatch知识点</a> </p>
<p>获取节点数据</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: zookeeper 获取节点数据的demo演示</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZKGetNodeData</span> <span class="keyword">implements</span> <span class="title">Watcher</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//只监听一次</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> CountDownLatch countDown = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">	</span><br><span class="line">		ZKGetNodeData zkServer = <span class="keyword">new</span> ZKGetNodeData(zkServerPath);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * 参数：</span></span><br><span class="line"><span class="comment">		 * path：节点路径</span></span><br><span class="line"><span class="comment">		 * watch：true或者false，注册一个watch事件</span></span><br><span class="line"><span class="comment">		 * stat：状态</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="keyword">byte</span>[] resByte = zkServer.getZookeeper().getData(<span class="string">"/names"</span>, <span class="keyword">true</span>, stat);</span><br><span class="line">		String result = <span class="keyword">new</span> String(resByte);</span><br><span class="line">		System.out.println(<span class="string">"当前值:"</span> + result);</span><br><span class="line"></span><br><span class="line">		<span class="comment">//等待监听事件（process）结束</span></span><br><span class="line">		countDown.await();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent event)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">if</span>(event.getType() == EventType.NodeDataChanged)&#123;</span><br><span class="line">				ZKGetNodeData zkServer = <span class="keyword">new</span> ZKGetNodeData(zkServerPath);</span><br><span class="line">				<span class="keyword">byte</span>[] resByte = zkServer.getZookeeper().getData(<span class="string">"/names"</span>, <span class="keyword">false</span>, stat);</span><br><span class="line">				String result = <span class="keyword">new</span> String(resByte);</span><br><span class="line">				System.out.println(<span class="string">"更改后的值:"</span> + result);</span><br><span class="line">				System.out.println(<span class="string">"版本号变化dversion："</span> + stat.getVersion());</span><br><span class="line">				countDown.countDown();</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span>(event.getType() == EventType.NodeCreated) &#123;</span><br><span class="line">				</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span>(event.getType() == EventType.NodeChildrenChanged) &#123;</span><br><span class="line">				</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span>(event.getType() == EventType.NodeDeleted) &#123;</span><br><span class="line">				</span><br><span class="line">			&#125; </span><br><span class="line">		&#125; <span class="keyword">catch</span> (KeeperException e) &#123; </span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="6-5-获取zk子节点列表"><a href="#6-5-获取zk子节点列表" class="headerlink" title="6-5 获取zk子节点列表"></a>6-5 获取zk子节点列表</h2><p>获取子节点数据</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: zookeeper 获取子节点数据的demo演示</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZKGetChildrenList</span> <span class="keyword">implements</span> <span class="title">Watcher</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//...</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> CountDownLatch countDown = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">	</span><br><span class="line">		ZKGetChildrenList zkServer = <span class="keyword">new</span> ZKGetChildrenList(zkServerPath);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * 参数：</span></span><br><span class="line"><span class="comment">		 * path：父节点路径</span></span><br><span class="line"><span class="comment">		 * watch：true或者false，注册一个watch事件</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//同步调用</span></span><br><span class="line"><span class="comment">//		List&lt;String&gt; strChildList = zkServer.getZookeeper().getChildren("/names", true);</span></span><br><span class="line"><span class="comment">//		for (String s : strChildList) &#123;</span></span><br><span class="line"><span class="comment">//			System.out.println(s);</span></span><br><span class="line"><span class="comment">//		&#125;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 异步调用</span></span><br><span class="line">		String ctx = <span class="string">"&#123;'callback':'ChildrenCallback'&#125;"</span>;</span><br><span class="line"><span class="comment">//		zkServer.getZookeeper().getChildren("/names", true, new ChildrenCallBack(), ctx);</span></span><br><span class="line">		zkServer.getZookeeper().getChildren(<span class="string">"/names"</span>, <span class="keyword">true</span>, <span class="keyword">new</span> Children2CallBack(), ctx);</span><br><span class="line">		</span><br><span class="line">		countDown.await();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent event)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">if</span>(event.getType()==EventType.NodeChildrenChanged)&#123;</span><br><span class="line">				System.out.println(<span class="string">"NodeChildrenChanged"</span>);</span><br><span class="line">				ZKGetChildrenList zkServer = <span class="keyword">new</span> ZKGetChildrenList(zkServerPath);</span><br><span class="line">				List&lt;String&gt; strChildList = zkServer.getZookeeper().getChildren(event.getPath(), <span class="keyword">false</span>);</span><br><span class="line">				<span class="keyword">for</span> (String s : strChildList) &#123;</span><br><span class="line">					System.out.println(s);</span><br><span class="line">				&#125;</span><br><span class="line">				countDown.countDown();</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span>(event.getType() == EventType.NodeCreated) &#123;</span><br><span class="line">				System.out.println(<span class="string">"NodeCreated"</span>);</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span>(event.getType() == EventType.NodeDataChanged) &#123;</span><br><span class="line">				System.out.println(<span class="string">"NodeDataChanged"</span>);</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span>(event.getType() == EventType.NodeDeleted) &#123;</span><br><span class="line">				System.out.println(<span class="string">"NodeDeleted"</span>);</span><br><span class="line">			&#125; </span><br><span class="line">		&#125; <span class="keyword">catch</span> (KeeperException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>ChildrenCallBack</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChildrenCallBack</span> <span class="keyword">implements</span> <span class="title">ChildrenCallback</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processResult</span><span class="params">(<span class="keyword">int</span> rc, String path, Object ctx, List&lt;String&gt; children)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (String s : children) &#123;</span><br><span class="line">			System.out.println(s);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">"ChildrenCallback:"</span> + path);</span><br><span class="line">		System.out.println((String)ctx);	</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>Children2Callback</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Children2CallBack</span> <span class="keyword">implements</span> <span class="title">Children2Callback</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processResult</span><span class="params">(<span class="keyword">int</span> rc, String path, Object ctx, List&lt;String&gt; children, Stat stat)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (String s : children) &#123;</span><br><span class="line">			System.out.println(s);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">"ChildrenCallback:"</span> + path);</span><br><span class="line">		System.out.println((String)ctx);</span><br><span class="line">		<span class="comment">//Children2Callback多了一个stat</span></span><br><span class="line">		System.out.println(stat.toString());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="6-6-判断zk节点是否存在"><a href="#6-6-判断zk节点是否存在" class="headerlink" title="6-6 判断zk节点是否存在"></a>6-6 判断zk节点是否存在</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: zookeeper 判断阶段是否存在demo</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZKNodeExist</span> <span class="keyword">implements</span> <span class="title">Watcher</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    </span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> CountDownLatch countDown = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">	</span><br><span class="line">		ZKNodeExist zkServer = <span class="keyword">new</span> ZKNodeExist(zkServerPath);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * 参数：</span></span><br><span class="line"><span class="comment">		 * path：节点路径</span></span><br><span class="line"><span class="comment">		 * watch：watch</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		Stat stat = zkServer.getZookeeper().exists(<span class="string">"/names-fake"</span>, <span class="keyword">true</span>);</span><br><span class="line">		<span class="keyword">if</span> (stat != <span class="keyword">null</span>) &#123;</span><br><span class="line">			System.out.println(<span class="string">"查询的节点版本为dataVersion："</span> + stat.getVersion());</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			System.out.println(<span class="string">"该节点不存在..."</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		countDown.await();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent event)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//该节点不存在，也可以监听创建情况</span></span><br><span class="line">		<span class="keyword">if</span> (event.getType() == EventType.NodeCreated) &#123;</span><br><span class="line">			System.out.println(<span class="string">"节点创建"</span>);</span><br><span class="line">			countDown.countDown();</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.getType() == EventType.NodeDataChanged) &#123;</span><br><span class="line">			System.out.println(<span class="string">"节点数据改变"</span>);</span><br><span class="line">			countDown.countDown();</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.getType() == EventType.NodeDeleted) &#123;</span><br><span class="line">			System.out.println(<span class="string">"节点删除"</span>);</span><br><span class="line">			countDown.countDown();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="6-7-acl-默认匿名权限-自定义用户权限-ip权限"><a href="#6-7-acl-默认匿名权限-自定义用户权限-ip权限" class="headerlink" title="6-7 acl - 默认匿名权限/自定义用户权限/ip权限"></a>6-7 acl - 默认匿名权限/自定义用户权限/ip权限</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: zookeeper 操作节点acl演示</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZKNodeAcl</span> <span class="keyword">implements</span> <span class="title">Watcher</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">	</span><br><span class="line">		ZKNodeAcl zkServer = <span class="keyword">new</span> ZKNodeAcl(zkServerPath);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * ======================  创建node start  ======================  </span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//1、默认匿名权限</span></span><br><span class="line">		<span class="comment">// acl 任何人都可以访问('world,'anyone': cdrwa)</span></span><br><span class="line"><span class="comment">//		zkServer.createZKNode("/acl-node", "test".getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="comment">//2、自定义用户权限</span></span><br><span class="line">		<span class="comment">// 自定义用户认证访问</span></span><br><span class="line"><span class="comment">//		List&lt;ACL&gt; acls = new ArrayList&lt;ACL&gt;();</span></span><br><span class="line"><span class="comment">//		Id usr1 = new Id("digest", AclUtils.getDigestUserPwd("usr1:123456"));</span></span><br><span class="line"><span class="comment">//		Id usr2 = new Id("digest", AclUtils.getDigestUserPwd("usr2:123456"));</span></span><br><span class="line"><span class="comment">//		acls.add(new ACL(Perms.ALL, usr1));</span></span><br><span class="line"><span class="comment">//		acls.add(new ACL(Perms.READ, usr2));</span></span><br><span class="line"><span class="comment">//		acls.add(new ACL(Perms.DELETE | Perms.CREATE, usr2));</span></span><br><span class="line"><span class="comment">//		zkServer.createZKNode("/acl-node/testdigest", "testdigest".getBytes(), acls);</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//权限测试</span></span><br><span class="line">		<span class="comment">// 注册过的用户必须通过addAuthInfo才能操作节点，参考命令行 addauth</span></span><br><span class="line"><span class="comment">//		zkServer.getZookeeper().addAuthInfo("digest", "usr1:123456".getBytes());</span></span><br><span class="line">		<span class="comment">//如果没有注册，就没有权限，会报错：NoAuth for /acl-node/testdigest/test</span></span><br><span class="line"><span class="comment">//		zkServer.createZKNode("/acl-node/testdigest/childtest", "childtest".getBytes(), ZooDefs.Ids.CREATOR_ALL_ACL);</span></span><br><span class="line"><span class="comment">//		Stat stat = new Stat();</span></span><br><span class="line"><span class="comment">//		byte[] data = zkServer.getZookeeper().getData("/acl-node/testdigest", false, stat);</span></span><br><span class="line"><span class="comment">//		System.out.println(new String(data));</span></span><br><span class="line">		<span class="comment">//使用usr2进行修改操作，失败</span></span><br><span class="line"><span class="comment">//		zkServer.getZookeeper().setData("/acl-node/testdigest", "now".getBytes(), 0);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="comment">//3、ip权限</span></span><br><span class="line">		<span class="comment">// ip方式的acl</span></span><br><span class="line">		List&lt;ACL&gt; aclsIP = <span class="keyword">new</span> ArrayList&lt;ACL&gt;();</span><br><span class="line">		Id ipId1 = <span class="keyword">new</span> Id(<span class="string">"ip"</span>, <span class="string">"127.0.0.1"</span>);</span><br><span class="line">		aclsIP.add(<span class="keyword">new</span> ACL(Perms.ALL, ipId1));</span><br><span class="line">		zkServer.createZKNode(<span class="string">"/acl-node/iptest"</span>, <span class="string">"iptest"</span>.getBytes(), aclsIP);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 验证ip是否有权限</span></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>ZooKeeper分布式专题</category>
      </categories>
      <tags>
        <tag>ZooKeeper分布式专题</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM：关于方法区、永久代、常量池、String的intern()</title>
    <url>/2018/11/14/20181114220123030/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>方法区和永久代</strong></p>
<p>方法区：是JVM的一种规范，存放类信息、常量、静态变量、即时编译器编译后的代码等；</p>
<p>永久代：是HotSpot的一种具体实现，实际指的就是方法区</p>
<p><strong>常量池和永久代</strong></p>
<p>jdk1.6及之前版本：常量池分配在永久代中</p>
<p>jdk1.7之后：常量池分配在java堆中</p>
<p><a href="/2018/11/14/20181114220123030/001.png" data-fancybox="group" data-caption="001" class="fancybox"><img alt="001" title="001" data-src="/2018/11/14/20181114220123030/001.png" class="lazyload"></a> </p>
<p><strong>String#intern()方法</strong></p>
<p>intern方法会先去查询常量池中是否有字符串已经存在，如果存在，则返回常量池中的引用，这一点jdk1.6、jdk1.7一样</p>
<p>区别在于，如果在常量池找不到对应的字符串：</p>
<p>jdk1.6 会再将字符串拷贝到常量池，返回指向常量池的引用。</p>
<p>jdk1.7 则不会再将字符串拷贝到常量池，而只是在常量池中生成一个对原字符串（java堆中）的引用。</p>
<p>简单的说，就是往常量池放的东西变了：原来在常量池中找不到时，复制一个副本放到常量池，1.7后则是将在堆上的地址引用复制到常量池。 </p>
<p><strong>String对象与常量池</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*String s1 = new String(“abc”)做了如下事情：</span></span><br><span class="line"><span class="comment">	1、在常量池中创建了“abc”</span></span><br><span class="line"><span class="comment">	2、在java堆中创建了new String(“abc”)对象，该对象指向常量池的“abc”</span></span><br><span class="line"><span class="comment">	3、在java栈中创建了s1引用，指向java堆中的对象</span></span><br><span class="line"><span class="comment">	如下图</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div>

<p><a href="/2018/11/14/20181114220123030/002.png" data-fancybox="group" data-caption="002" class="fancybox"><img alt="002" title="002" data-src="/2018/11/14/20181114220123030/002.png" class="lazyload"></a> </p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StrTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">        String s1 = "abc";</span></span><br><span class="line"><span class="comment">        String s2 = "abc";</span></span><br><span class="line"><span class="comment">        System.out.println(s1 == s2);   //true，均指向常量池中对象</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">        String s1 = new String("abc");</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        String s2 = new String("abc");</span></span><br><span class="line"><span class="comment">        System.out.println(s1 == s2);   //false，两个引用指向堆中的不同对象</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">        String s1 = "abc";</span></span><br><span class="line"><span class="comment">        String s2 = "a";</span></span><br><span class="line"><span class="comment">        String s3 = "bc";</span></span><br><span class="line"><span class="comment">        String s4 = s2 + s3;</span></span><br><span class="line"><span class="comment">        String s5 = s2 + s3;</span></span><br><span class="line"><span class="comment">        System.out.println(s1 == s4);   //false，因为s2+s3实际上是使用StringBuilder.append来完成，会生成不同的对象</span></span><br><span class="line"><span class="comment">        System.out.println(s4 == s5);   //false，StringBuilder.append在堆中生成不同的对象</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">        String s1 = "abc";</span></span><br><span class="line"><span class="comment">        final String s2 = "a";</span></span><br><span class="line"><span class="comment">        final String s3 = "bc";</span></span><br><span class="line"><span class="comment">        String s4 = s2 + s3;</span></span><br><span class="line"><span class="comment">        System.out.println(s1 == s4);   //true，因为final变量在编译后会直接替换成对应的值，所以实际上等于s4=”a”+”bc”，而这种情况下，编译器会直接合并为s4=”abc”，所以最终s1==s4</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">        String s = new String("abc");</span></span><br><span class="line"><span class="comment">        String s1 = "abc";</span></span><br><span class="line"><span class="comment">        String s2 = new String("abc");</span></span><br><span class="line"><span class="comment">        System.out.println(s == s1.intern());   //false，"abc"在常量池中已存在，s1.intern()指向常量池的字符串。而s指向堆中的字符串对象</span></span><br><span class="line"><span class="comment">        System.out.println(s == s2.intern());   //false，同理</span></span><br><span class="line"><span class="comment">        System.out.println(s1 == s2.intern());  //true，</span></span><br><span class="line"><span class="comment">        */</span>    </span><br><span class="line">		</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        String str1 = new StringBuilder("a").append("bc").toString();   //会在常量池生成"a"、"bc"，在堆区生成"abc"对象，返回给str1</span></span><br><span class="line"><span class="comment">        System.out.println(str1.intern() == str1);//true,str1.intern()在常量池中没找到"abc",jdk1.7之后会在常量池生成一个引用指向堆区的"abc"对象</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        String str2 = new StringBuilder("ja").append("va").toString();//在堆区生成"java"对象</span></span><br><span class="line"><span class="comment">        String str3 = new StringBuilder("ja").append("va").toString();</span></span><br><span class="line"><span class="comment">        System.out.println(str2 == str3);//false</span></span><br><span class="line"><span class="comment">        System.out.println(str2.intern() == str2);//false。str2.intern()在常量池中找到了"java"，则str2.intern()指向的是常量池的"java"</span></span><br><span class="line"><span class="comment">        //常量池中为什么会存在"java"这样的字符串?</span></span><br><span class="line"><span class="comment">        //类加载等操作使"java"字符串加入到了常量池中</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>





]]></content>
      <categories>
        <category>深入理解Java虚拟机</category>
      </categories>
      <tags>
        <tag>深入理解Java虚拟机</tag>
      </tags>
  </entry>
  <entry>
    <title>ZooKeeper专题（3）：zk的集群安装</title>
    <url>/2018/11/14/20181114115703812/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="第5章-选举模式和ZooKeeper的集群安装"><a href="#第5章-选举模式和ZooKeeper的集群安装" class="headerlink" title="第5章 选举模式和ZooKeeper的集群安装"></a>第5章 选举模式和ZooKeeper的集群安装</h1><h2 id="5-1-集群的一些基本概念"><a href="#5-1-集群的一些基本概念" class="headerlink" title="5-1 集群的一些基本概念"></a>5-1 集群的一些基本概念</h2><p><strong>zk集群搭建</strong></p>
<ul>
<li>zk集群，主从节点，心跳机制（选举模式）</li>
</ul>
<p>选举模式图例：</p>
<p>![屏幕快照 2018-11-16 上午10.35.09](20181114115703812/屏幕快照 2018-11-16 上午10.35.09.png) </p>
<p>最少的集群需要3个节点，以此类推3、5、7、9…</p>
<ul>
<li><p>配置数据文件myid 1/2/3 对应 server.1/2/3</p>
</li>
<li><p>通过./zkCli.sh -server [ip]:[port] 检测集群是否配置成功</p>
</li>
</ul>
<h2 id="5-2-单机伪分布式安装zookeeper集群"><a href="#5-2-单机伪分布式安装zookeeper集群" class="headerlink" title="5-2 单机伪分布式安装zookeeper集群"></a>5-2 单机伪分布式安装zookeeper集群</h2><p>单机下的集群，就是zk的port不一样</p>
<p>配置伪分布式：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对zookeeper进行copy</span></span><br><span class="line">$ cp zookeeper zookeeper02 -rf</span><br><span class="line">$ cp zookeeper zookeeper03 -rf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改3个zookeeper目录的 conf/zoo.conf</span></span><br><span class="line"><span class="comment">#---------vim start---------------</span></span><br><span class="line">clientPort=2181		<span class="comment"># 依次改为2182、2183</span></span><br><span class="line">dataDir=/usr/<span class="built_in">local</span>/zookeeper/dataDir	<span class="comment">#依次改为zookeeper02、zookeeper03</span></span><br><span class="line">dataLogDir=/usr/<span class="built_in">local</span>/zookeeper/dataLogDir	<span class="comment">#依次改为zookeeper02、zookeeper03</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3个文件都要添加如下：</span></span><br><span class="line"><span class="comment"># 2888:3888 为同步和选举的端口号</span></span><br><span class="line">server.1=localhost:2888:3888</span><br><span class="line">server.2=localhost:2889:3889</span><br><span class="line">server.3=localhost:2890:3890</span><br><span class="line"><span class="comment">#---------vim end---------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在三个zookeeper实例的dataDir目录下新增myid文件，文件内容分别为1、2、3</span></span><br></pre></td></tr></table></figure></div>



<p>测试：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 把3台zkServer都打开</span></span><br><span class="line">$ sudo ./zookeeper/bin/zkServer.sh restart</span><br><span class="line">$ sudo ./zookeeper02/bin/zkServer.sh restart</span><br><span class="line">$ sudo ./zookeeper03/bin/zkServer.sh restart</span><br><span class="line"></span><br><span class="line"><span class="comment"># zkCli连接2181端口的zkServer</span></span><br><span class="line">$ zkCli.sh -server localhost:2181</span><br><span class="line"><span class="comment"># 在第一个server创建一个节点</span></span><br><span class="line">$ create /node01 data-01</span><br><span class="line"><span class="comment"># 退出，登进2182端口的server</span></span><br><span class="line">$ zkCli.sh -server localhost:2182</span><br><span class="line">$ ls /</span><br><span class="line"><span class="comment"># - 发现3台server的数据同步了，说明伪分布式的集群搭建成功</span></span><br><span class="line">[node01, zookeeper]</span><br></pre></td></tr></table></figure></div>



<h2 id="5-3-三台物理机-虚拟机-安装zookeeper集群"><a href="#5-3-三台物理机-虚拟机-安装zookeeper集群" class="headerlink" title="5-3 三台物理机(虚拟机)安装zookeeper集群"></a>5-3 三台物理机(虚拟机)安装zookeeper集群</h2><p>真实环境下：ip不同，端口号可以保持一致</p>
<p>搭建步骤：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 建3台虚拟机</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改3台zk的conf/zoo.cfg</span></span><br><span class="line"><span class="comment">#---------vim start---------------</span></span><br><span class="line">clientPort=2181		<span class="comment"># 3台机子的port可以保持一致</span></span><br><span class="line">dataDir=/usr/<span class="built_in">local</span>/zookeeper/dataDir	</span><br><span class="line">dataLogDir=/usr/<span class="built_in">local</span>/zookeeper/dataLogDir</span><br><span class="line"></span><br><span class="line"><span class="comment">#3个文件都要添加如下：</span></span><br><span class="line">server.1=10.211.55.6:2888:3888</span><br><span class="line">server.2=10.211.55.12:2888:3888</span><br><span class="line">server.3=10.211.55.13:2888:3888</span><br><span class="line"><span class="comment">#---------vim end---------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把3台机子的myid分别改为1、2、3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把3台机子的2181、2888、3888端口打开</span></span><br></pre></td></tr></table></figure></div>



<p>测试：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 分别启动3台机子的zkserver</span></span><br><span class="line">$ ./bin/zkServer.sh restart</span><br><span class="line"><span class="comment"># 查看3台机子的状态</span></span><br><span class="line">$ ./bin/zkServer.sh status</span><br><span class="line"><span class="comment"># 第一台</span></span><br><span class="line">Mode: follower</span><br><span class="line"><span class="comment"># 第二台</span></span><br><span class="line">Mode: leader</span><br><span class="line"><span class="comment"># 第三台</span></span><br><span class="line">Mode: follower</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在leader里面修改数据</span></span><br><span class="line">$ ./bin/zkCli.sh -server 10.211.55.12:2181</span><br><span class="line">$  create /node02 data-02</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看follower是否同步</span></span><br><span class="line">$ ./bin/zkCli.sh -server 10.211.55.6:2181</span><br><span class="line">$ ls /</span><br><span class="line">[node01, zookeeper, node02]</span><br><span class="line"><span class="comment"># - 发现修改leader，follower都会同步</span></span><br></pre></td></tr></table></figure></div>



<h2 id="5-4-测试集群角色以及选举"><a href="#5-4-测试集群角色以及选举" class="headerlink" title="5-4 测试集群角色以及选举"></a>5-4 测试集群角色以及选举</h2><p>上一节测试了同步，接下来验证选举</p>
<p>master挂掉，slave会竞争选举，成为新的master</p>
<p>测试：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关闭掉leader节点的server</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看另2台的status，发现第三台 经过选举后 变成了leader</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新恢复关掉的节点2，发现他重新加入集群，变成了follower</span></span><br></pre></td></tr></table></figure></div>



<p>选举算法？？？</p>
]]></content>
      <categories>
        <category>ZooKeeper分布式专题</category>
      </categories>
      <tags>
        <tag>ZooKeeper分布式专题</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解Java虚拟机（2）：Java内存区域与内存溢出异常</title>
    <url>/2018/11/13/20181113130255132/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>第二部分：自动内存管理机制。包括2-5章</p>
</blockquote>
<h1 id="第2章-Java内存区域与内存溢出异常"><a href="#第2章-Java内存区域与内存溢出异常" class="headerlink" title="第2章　Java内存区域与内存溢出异常"></a>第2章　Java内存区域与内存溢出异常</h1><h2 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1　概述"></a>2.1　概述</h2><p>– 虚拟机自动内存管理机制</p>
<p>– Java程序员把内存控制的权力交给了Java虚拟机</p>
<p>本章从概念上介绍Java虚拟机内存的各个区域</p>
<h2 id="2-2-运行时数据区域"><a href="#2-2-运行时数据区域" class="headerlink" title="2.2　运行时数据区域"></a>2.2　运行时数据区域</h2><p>Java虚拟机运行时数据区：</p>
<p>![屏幕快照 2018-11-13 下午1.10.09](20181113130255132/屏幕快照 2018-11-13 下午1.10.09.png) </p>
<p>1、程序计数器</p>
<p>行号指示器；线程私有；没有规定任何OutOfMemoryError情况的区域</p>
<p>2、Java虚拟机栈</p>
<p>线程私有；</p>
<p>描述的是Java方法执行的内存模型：创建一个栈帧（Stack Frame，用于存储局部变量表、操作数栈、动态链接、方法出口 等信息）。每一个方法从调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中入栈到出 栈的过程；</p>
<p>虚拟机栈中<strong>局部变量表</strong>存放了</p>
<ul>
<li><p>各种基本数据类型</p>
</li>
<li><p>对象引用</p>
</li>
<li><p>returnAddress类型（指向了一条字节码指令的地址）</p>
</li>
</ul>
<p>局部变量表所需的内存空间在编译期间完成分配，局部变量空间是完全确定的，不会改变。</p>
<p>该区域有2种异常：</p>
<ul>
<li>StackOverflowError：线程请求的栈深度大于虚 拟机所允许的深度</li>
<li>OutOfMemoryError：虚拟机栈扩展时无法申请到足够的内存</li>
</ul>
<p>​    </p>
<p>3、本地方法栈</p>
<p>与虚拟机栈所发挥的作用是非常相似；</p>
<p>本地方法栈则为虚 拟机使用到的Native方法服务；</p>
<p>也会抛出StackOverflowError和OutOfMemoryError异常；</p>
<p>4、Java堆</p>
<p>线程共享，在虚拟机启动时创建；</p>
<p>目的：存放对象实例；</p>
<p>也被称做“GC堆”（Garbage Collected Heap），是垃圾收集器管理的主要区域；</p>
<p>Java堆中可能划分出多个线程私有的分配缓冲区（Thread Local Allocation Buffer,TLAB）；</p>
<p>5、方法区</p>
<p>线程共享；</p>
<p>用于：存储已被虚 拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</p>
<p>别名叫做Non-Heap（非堆）；</p>
<p>当方法区无法满足内存分配需求时，将抛出 OutOfMemoryError异常</p>
<p><strong>运行时常量池</strong>: （Runtime Constant Pool）是方法区的一部分</p>
<p>用于 : Class文件常量池存放编译期生成的各种 字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常 量池中存放;</p>
<p>运行时常量池相对于Class文件常量池的另外一个重要特征是具备动态性;</p>
<p>受到方法区内存的限制，当常量池无法再申 请到内存时会抛出OutOfMemoryError异常;</p>
<p>6、直接内存</p>
<p>并不是虚拟机运行时数据区的一部分；</p>
<p>使用Native函数库直接分配堆外内存（NIO（New Input/Output）类）；</p>
<p>动态扩展时出现OutOfMemoryError异常（经常忽略 直接内存，使得各个内存区域总和大于物理内存限制）；</p>
<h2 id="2-3-HotSpot虚拟机对象探秘"><a href="#2-3-HotSpot虚拟机对象探秘" class="headerlink" title="2.3　HotSpot虚拟机对象探秘"></a>2.3　HotSpot虚拟机对象探秘</h2><p>虚拟机中对象的创建过程（new指令）：</p>
<p>1、确保常量池中存放的是已解释的类</p>
<p>2、确保对象所属类型已经经过初始化阶段（否则必须先执行相应的类加载过程）</p>
<p>3、为新对象分配内存</p>
<p>​    如何划分可用空间？</p>
<p>​    –内存规整：指针碰撞</p>
<p>​    –内存不规整：空闲列表</p>
<p>​    如何保证并发下的线程安全？</p>
<p>​    –同步处理：CAS+失败重试保证原子性</p>
<p>​    –本地线程分配缓冲（Thread Local Allocation Buffer,TLAB）：按照线程划分在不同的空间</p>
<p>4、为对象初始化零值</p>
<p>5、设置对象头信息</p>
<p>6、将对象引用入栈</p>
<p>7、执行new指令之后(所有的字段都还为零)会接着 执行＜init＞方法(把对象按照程序员的意愿进行初始化)</p>
<p>​    </p>
]]></content>
      <categories>
        <category>深入理解Java虚拟机</category>
      </categories>
      <tags>
        <tag>深入理解Java虚拟机</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解Java虚拟机（1）：走进Java</title>
    <url>/2018/11/12/20181112170354239/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>本专题基于本人阅读《深入理解Java虚拟机（第二版）》一书，做出笔记整理</p>
<p>第一部：走进Java。共一章</p>
</blockquote>
<h1 id="第1章-走近Java"><a href="#第1章-走近Java" class="headerlink" title="第1章　走近Java"></a>第1章　走近Java</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1　概述"></a>1.1　概述</h2><p>1、java技术广泛应用</p>
<p>2、java优点</p>
<ul>
<li>一次编写，到处运行</li>
<li>相对安全的内存管理和访问机制</li>
<li>热点代码检测和运行时编译及优化</li>
<li>一套完善的应用程序接口</li>
</ul>
<p>这些技术特性是如何实现的？本书将分析Java技术中最重要的那些特性的实现原理</p>
<h2 id="1-2-Java技术体系"><a href="#1-2-Java技术体系" class="headerlink" title="1.2　Java技术体系"></a>1.2　Java技术体系</h2><p>Java技术体系包括 以下几个组成部分：</p>
<ul>
<li><p>Java程序设计语言</p>
</li>
<li><p>各种硬件平台上的Java虚拟机</p>
</li>
<li><p>Class文件格式</p>
</li>
<li><p>Java API类库</p>
</li>
</ul>
<p>JDK：（Java Development Kit），包括Java程序设计语言、Java虚拟机、Java API类库</p>
<p>JRE：（Java Runtime Environment），包括把Java API类库中的Java SE API子集、Java虚拟机</p>
<p>Java技术体系所包含的内容：</p>
<p>![屏幕快照 2018-11-12 下午5.21.51](20181112170354239/屏幕快照 2018-11-12 下午5.21.51.png) </p>
<hr>
<p>Java技术体系可以分为4个平台：</p>
<ul>
<li><p>Java Card：小内存设备（如智能卡）上的平台。</p>
</li>
<li><p>Java ME（Micro Edition）：移动终端（手机、PDA）上的平台</p>
</li>
<li><p>Java SE（Standard Edition）：桌面级应用（如Windows下的应用程序）的Java</p>
</li>
</ul>
<p>平台。</p>
<ul>
<li><p>Java EE（Enterprise Edition）：企业应用（如ERP、CRM应用）的Java平台。</p>
<p>（这些扩展一般以javax.*作为包名）</p>
</li>
</ul>
<h2 id="1-3-Java发展史"><a href="#1-3-Java发展史" class="headerlink" title="1.3　Java发展史"></a>1.3　Java发展史</h2><p>…</p>
<h2 id="1-4-Java虚拟机发展史"><a href="#1-4-Java虚拟机发展史" class="headerlink" title="1.4　Java虚拟机发展史"></a>1.4　Java虚拟机发展史</h2><p>Sun Classic VM ：世界上第一款商用Java虚拟机</p>
<p>Sun HotSpot VM：目前使用范围最广的Java虚拟机</p>
<p>…</p>
<h2 id="1-5-展望Java技术的未来"><a href="#1-5-展望Java技术的未来" class="headerlink" title="1.5　展望Java技术的未来"></a>1.5　展望Java技术的未来</h2><ul>
<li><p>模块化</p>
</li>
<li><p>混合语言</p>
</li>
<li><p>多核并行</p>
</li>
<li><p>进一步丰富语法</p>
</li>
<li><p>64位虚拟机</p>
</li>
</ul>
<p>…</p>
<h2 id="1-6-实战：自己编译JDK"><a href="#1-6-实战：自己编译JDK" class="headerlink" title="1.6　实战：自己编译JDK"></a>1.6　实战：自己编译JDK</h2><p>Sun系列的JDK是现在使用得最广泛的JDK版本</p>
<p>OpenJDK和Sun/OracleJDK的关系</p>
<ul>
<li>OpenJDK开源</li>
<li>OracleJDK商用</li>
<li>代码都差不多</li>
</ul>
<p>OpenJDK 6、OpenJDK 7、OpenJDK 7u、OpenJDK 8之间的关系</p>
<p>![屏幕快照 2018-11-12 下午6.23.11](20181112170354239/屏幕快照 2018-11-12 下午6.23.11.png) </p>
<hr>
<p>在centOS上编译OpenJDK 7：</p>
<blockquote>
<p>参考:<a href="https://blog.csdn.net/tjiyu/article/details/53725247" target="_blank" rel="noopener">https://blog.csdn.net/tjiyu/article/details/53725247</a></p>
</blockquote>
<ul>
<li><p>下载</p>
<p><a href="https://download.java.net/openjdk/jdk7u75/ri/openjdk-7u75-src-b13-18_dec_2014.zip" target="_blank" rel="noopener">https://download.java.net/openjdk/jdk7u75/ri/openjdk-7u75-src-b13-18_dec_2014.zip</a></p>
</li>
<li><p>11</p>
</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ unzip openjdk-7u75-src-b13-18_dec_2014.zip</span><br><span class="line">$ <span class="built_in">cd</span> openjdk</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>深入理解Java虚拟机</category>
      </categories>
      <tags>
        <tag>深入理解Java虚拟机</tag>
      </tags>
  </entry>
  <entry>
    <title>ZooKeeper专题（2）：zk的客户端命令行</title>
    <url>/2018/11/12/20181112164832926/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="第4章-ZK基本特性与基于Linux的ZK客户端命令行学习"><a href="#第4章-ZK基本特性与基于Linux的ZK客户端命令行学习" class="headerlink" title="第4章 ZK基本特性与基于Linux的ZK客户端命令行学习"></a>第4章 ZK基本特性与基于Linux的ZK客户端命令行学习</h1><h2 id="4-1-zookeeper常用命令行操作"><a href="#4-1-zookeeper常用命令行操作" class="headerlink" title="4-1 zookeeper常用命令行操作"></a>4-1 zookeeper常用命令行操作</h2><ul>
<li><p>ls与ls2</p>
</li>
<li><p>get与stat</p>
</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开客户端</span></span><br><span class="line">$ zkCli.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># ls与ls2命令</span></span><br><span class="line"><span class="comment"># - ls path [watch]		ls2 path [watch]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## ls：查看节点</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 1] ls /</span><br><span class="line">[zookeeper]</span><br><span class="line">[zk: localhost:2181(CONNECTED) 2] ls /zookeeper</span><br><span class="line">[quota]</span><br><span class="line">[zk: localhost:2181(CONNECTED) 3] </span><br><span class="line"></span><br><span class="line"><span class="comment">## ls2：相当于ls+stat命令 的整合</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 3] ls2 /</span><br><span class="line">[zookeeper]</span><br><span class="line"><span class="comment"># - 以下是一些状态信息</span></span><br><span class="line">cZxid = 0x0</span><br><span class="line">ctime = Thu Jan 01 08:00:00 CST 1970</span><br><span class="line">mZxid = 0x0</span><br><span class="line">mtime = Thu Jan 01 08:00:00 CST 1970</span><br><span class="line">pZxid = 0x0</span><br><span class="line">cversion = -1</span><br><span class="line">dataVersion = 0</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x0</span><br><span class="line">dataLength = 0</span><br><span class="line">numChildren = 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># get与stat命令</span></span><br><span class="line"><span class="comment">## stat（查看状态）</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 4] <span class="built_in">stat</span> /</span><br><span class="line">cZxid = 0x0</span><br><span class="line">ctime = Thu Jan 01 08:00:00 CST 1970</span><br><span class="line">mZxid = 0x0</span><br><span class="line">mtime = Thu Jan 01 08:00:00 CST 1970</span><br><span class="line">pZxid = 0x0</span><br><span class="line">cversion = -1</span><br><span class="line">dataVersion = 0</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x0</span><br><span class="line">dataLength = 0</span><br><span class="line">numChildren = 1</span><br><span class="line"></span><br><span class="line"><span class="comment">## get：查看节点数据</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 5] get /</span><br><span class="line">		<span class="comment"># 次数该节点数据为null</span></span><br><span class="line">cZxid = 0x0		<span class="comment"># zk为该节点分配的id</span></span><br><span class="line">ctime = Thu Jan 01 08:00:00 CST 1970	<span class="comment"># 节点创建的时间</span></span><br><span class="line">mZxid = 0x0		<span class="comment"># 修改后的zk分配的id  ??</span></span><br><span class="line">mtime = Thu Jan 01 08:00:00 CST 1970	<span class="comment"># 节点修改的时间</span></span><br><span class="line">pZxid = 0x0		<span class="comment"># 子节点id</span></span><br><span class="line">cversion = -1	<span class="comment"># 子节点的版本号</span></span><br><span class="line">dataVersion = 0 <span class="comment"># 当前节点数据的版本号（数据修改，版本号会累加1）</span></span><br><span class="line">aclVersion = 0	<span class="comment"># 权限版本号（后面讲）</span></span><br><span class="line">ephemeralOwner = 0x0	<span class="comment"># （后面讲）</span></span><br><span class="line">dataLength = 0	<span class="comment"># 数据长度</span></span><br><span class="line">numChildren = 1	<span class="comment"># 子节点个数</span></span><br></pre></td></tr></table></figure></div>





<h2 id="4-2-session的基本原理与create命令的使用"><a href="#4-2-session的基本原理与create命令的使用" class="headerlink" title="4-2 session的基本原理与create命令的使用"></a>4-2 session的基本原理与create命令的使用</h2><p><strong>session的基本原理</strong></p>
<ul>
<li>客户端与服务端之间的连接，称为 会话（session）</li>
<li>每个session都可以设置超时时间（超时session就销毁了）</li>
<li>心跳结束（存活指令），session过期</li>
<li>session过期，则临时节点znode会被抛弃</li>
<li>心跳机制：客户端向服务端的ping包请求（表示客户端存活）</li>
</ul>
<p><strong>create命令</strong></p>
<ul>
<li>创建 非顺序、持久化 节点</li>
<li>创建/删除 临时节点。</li>
<li>创建顺序节点</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># create命令</span></span><br><span class="line"><span class="comment"># - 语法 ：create [-s] [-e] path data acl</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 创建非顺序、持久化 节点</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 9] create /newnode node-data</span><br><span class="line">Created /newnode</span><br><span class="line">[zk: localhost:2181(CONNECTED) 10] get /newnode</span><br><span class="line">node-data	<span class="comment"># 节点数据</span></span><br><span class="line">cversion = 0</span><br><span class="line">...</span><br><span class="line">dataLength = 9	<span class="comment"># 数据长度变了（“node-data”的长度）</span></span><br><span class="line">numChildren = 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># ------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 创建临时节点</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 11] create -e /newnode/tmp tmp-data</span><br><span class="line">Created /newnode/tmp</span><br><span class="line"></span><br><span class="line">[zk: localhost:2181(CONNECTED) 13] get /newnode</span><br><span class="line">node-data</span><br><span class="line">...</span><br><span class="line">cversion = 1	<span class="comment"># 子节点做了一次更新，版本号+1</span></span><br><span class="line">dataVersion = 0</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x0</span><br><span class="line">dataLength = 9</span><br><span class="line">numChildren = 1</span><br><span class="line"></span><br><span class="line">[zk: localhost:2181(CONNECTED) 12] get /newnode/tmp</span><br><span class="line">tmp-data</span><br><span class="line">...</span><br><span class="line">ephemeralOwner = 0x1000d1f9e2a0001	<span class="comment"># 0x0代表持久节点，否则就是临时节点</span></span><br><span class="line">dataLength = 8</span><br><span class="line">numChildren = 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 删除临时节点</span></span><br><span class="line"><span class="comment"># - 心跳机制，客户端挂了，临时节点自动删除</span></span><br><span class="line">control+c 断开连接后重新连进去</span><br><span class="line">[zk: localhost:2181(CONNECTED) 0] ls /newnode</span><br><span class="line">[tmp]	<span class="comment"># 为什么还存在？： 时效性，session断开之后还有一段时间心跳机制。心跳断开之后才会删除tmp</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># - 再次尝试</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 1] ls /newnode</span><br><span class="line">[]	<span class="comment"># tmp节点消失了</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建顺序节点</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 2] create -s /newnode/sec seq-data</span><br><span class="line">Created /newnode/sec0000000001	<span class="comment"># 重命名了</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 3] create -s /newnode/sec seq-data</span><br><span class="line">Created /newnode/sec0000000002	<span class="comment"># 文件名的编号累加</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 4] ls /newnode</span><br><span class="line">[sec0000000001, sec0000000002]	<span class="comment"># 产生了2个顺序节点</span></span><br></pre></td></tr></table></figure></div>



<h2 id="4-3-set与delete命令的使用"><a href="#4-3-set与delete命令的使用" class="headerlink" title="4-3 set与delete命令的使用"></a>4-3 set与delete命令的使用</h2><ul>
<li>set<ul>
<li>直接值覆盖</li>
<li>使用版本号更新数据</li>
</ul>
</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># set：修改节点</span></span><br><span class="line"><span class="comment"># - 语法：set path data [version]</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 6] get /newnode</span><br><span class="line">node-data</span><br><span class="line">...</span><br><span class="line">dataVersion = 0		<span class="comment"># 数据还没被修改</span></span><br><span class="line">...</span><br><span class="line"><span class="comment"># - 修改节点值</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 7] <span class="built_in">set</span> /newnode node-data1</span><br><span class="line">...</span><br><span class="line">[zk: localhost:2181(CONNECTED) 8] get /newnode</span><br><span class="line">node-data1	<span class="comment"># 值变化</span></span><br><span class="line">...</span><br><span class="line">dataVersion = 1		<span class="comment"># 数据版本号+1</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改指定版本号的数据(乐观锁的使用方式)</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 9] <span class="built_in">set</span> /newnode node-data2 1</span><br><span class="line">...</span><br><span class="line">dataVersion = 2</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># - 再次修改相同版本号</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 10] <span class="built_in">set</span> /newnode node-data2 1</span><br><span class="line">version No is not valid : /newnode	<span class="comment"># 非法操作</span></span><br><span class="line"><span class="comment"># - 必须使用最新的版本号更新</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 11] <span class="built_in">set</span> /newnode node-data3 2</span><br><span class="line">...</span><br><span class="line">dataVersion = 3</span><br><span class="line">...</span><br></pre></td></tr></table></figure></div>



<ul>
<li>delete<ul>
<li>直接删除节点</li>
<li>使用版本号删除</li>
</ul>
</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># delete：删除节点</span></span><br><span class="line"><span class="comment"># - 语法：delete path [version]</span></span><br><span class="line"><span class="comment"># 如果指定版本号，会删除对应版本号；不指定的话，直接删除该节点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 直接删除节点</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 13] ls /newnode</span><br><span class="line">[sec0000000001, sec0000000002]</span><br><span class="line">[zk: localhost:2181(CONNECTED) 14] delete /newnode/sec0000000001</span><br><span class="line">[zk: localhost:2181(CONNECTED) 15] ls /newnode</span><br><span class="line">[sec0000000002]</span><br><span class="line"></span><br><span class="line"><span class="comment">## 删除指定版本号</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 16] <span class="built_in">set</span> /newnode/sec0000000002 data-111</span><br><span class="line">...</span><br><span class="line">dataVersion = 1		<span class="comment"># 更新了版本号</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">## - 尝试删除旧版本号</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 17] delete /newnode/sec0000000002 0</span><br><span class="line">version No is not valid : /newnode/sec0000000002	<span class="comment"># 非法，必须要最新的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## - 删除最新的版本号</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 18] delete /newnode/sec0000000002 1</span><br><span class="line">[zk: localhost:2181(CONNECTED) 19] ls /newnode</span><br><span class="line">[]	<span class="comment"># 没数据了</span></span><br></pre></td></tr></table></figure></div>



<ul>
<li>结论：使用set和delete命令时尽量带版本号，这样可以做到乐观锁的效果（能够保证并发下的数据安全，因为不支持操作旧版本号）</li>
</ul>
<h2 id="4-4-zk特性-–-理解watcher机制"><a href="#4-4-zk特性-–-理解watcher机制" class="headerlink" title="4-4 zk特性 – 理解watcher机制"></a>4-4 zk特性 – 理解watcher机制</h2><p><strong>watcher机制的理解</strong></p>
<ul>
<li><p>针对每个节点的操作，都会有一个监督者 -&gt; wathcer</p>
</li>
<li><p>当监控的某个对象（znode）发生变化（增删改），就会触发wathcer事件（理解为触发器）</p>
</li>
<li><p>zk的watcher是一次性的，触发后立即销毁（有的第三方客户端工具可以设置为永久性）</p>
</li>
<li><p>a节点的父、子节点的 增删改 都能触发a节点的wathcer</p>
</li>
<li><p>针对不同操作，触发的watcher事件也不同：</p>
<ol>
<li>（子）节点创建事件</li>
<li>（子）节点删除事件</li>
<li>（子）节点数据变化事件</li>
</ol>
</li>
</ul>
<h2 id="4-5-父节点watcher事件"><a href="#4-5-父节点watcher事件" class="headerlink" title="4-5 父节点watcher事件"></a>4-5 父节点watcher事件</h2><p>通过get path [watch] 设置watcher    (或者用ls、set)</p>
<p>get、stat 设置父节点触发</p>
<p><strong>wathcer事件类型</strong></p>
<ul>
<li>创建父节点触发（当没有节点时去创建普通节点）：NodeCreated</li>
<li>修改父节点数据触发：NodeDataChanged</li>
<li>删除父节点触发：NodeDelete</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># NodeCreated</span></span><br><span class="line"><span class="comment"># - 语法：stat path [watch]、get path [watch]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 给node2绑定一个watch</span></span><br><span class="line">$ <span class="built_in">stat</span> /node2 watch</span><br><span class="line">Node does not exist: /node2	<span class="comment"># 节点还没创建，但是watch会监听node2</span></span><br><span class="line">$ create /node2 data-1</span><br><span class="line"></span><br><span class="line">WATCHER::</span><br><span class="line"><span class="comment"># - NodeCreated事件被触发了</span></span><br><span class="line">WatchedEvent state:SyncConnected <span class="built_in">type</span>:NodeCreated path:/node2</span><br><span class="line">Created /node2</span><br><span class="line"></span><br><span class="line"><span class="comment"># ------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># NodeDataChanged</span></span><br><span class="line">$ <span class="built_in">set</span> /node2 data-2</span><br><span class="line">... <span class="comment"># 并没有触发，因为没绑定（watch一旦触发就会被销毁）</span></span><br><span class="line"><span class="comment"># - 先绑定</span></span><br><span class="line">$ get /node2 watch    </span><br><span class="line">...</span><br><span class="line"><span class="comment"># 再修改节点值</span></span><br><span class="line">$ <span class="built_in">set</span> /node2 data-3      </span><br><span class="line"></span><br><span class="line">WATCHER::</span><br><span class="line">cZxid = 0x12</span><br><span class="line"><span class="comment"># - NodeDataChanged事件被触发了</span></span><br><span class="line">WatchedEvent state:SyncConnected <span class="built_in">type</span>:NodeDataChanged path:/node2</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># ------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># NodeDelete</span></span><br><span class="line">$ get /node2 watch</span><br><span class="line">...</span><br><span class="line">$ delete /node2</span><br><span class="line"></span><br><span class="line">WATCHER::</span><br><span class="line"><span class="comment"># - NodeDeleted事件被触发了</span></span><br><span class="line">WatchedEvent state:SyncConnected <span class="built_in">type</span>:NodeDeleted path:/node2</span><br></pre></td></tr></table></figure></div>



<h2 id="4-6-子节点watcher事件"><a href="#4-6-子节点watcher事件" class="headerlink" title="4-6 子节点watcher事件"></a>4-6 子节点watcher事件</h2><p>ls设置子节点触发</p>
<p><strong>wathcer事件类型</strong></p>
<ul>
<li>ls为父节点设置watcher，创建子节点触发：NodeChildrenChanged</li>
<li>ls为父节点设置watcher，删除子节点触发：NodeChildrenChanged</li>
<li>ls为父节点设置watcher，修改子节点不触发事件</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建子节点触发：NodeChildrenChanged</span></span><br><span class="line">$ ls /newnode watch</span><br><span class="line">[]</span><br><span class="line">$ create /newnode/abc data-1</span><br><span class="line"></span><br><span class="line">WATCHER::</span><br><span class="line"><span class="comment"># - 触发NodeChildrenChanged</span></span><br><span class="line">WatchedEvent state:SyncConnected <span class="built_in">type</span>:NodeChildrenChanged path:/newnode</span><br><span class="line">Created /newnode/abc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除子节点触发：NodeChildrenChanged</span></span><br><span class="line">$ ls /newnode watch         </span><br><span class="line">[abc]</span><br><span class="line">$ delete /newnode/abc</span><br><span class="line"></span><br><span class="line">WATCHER::</span><br><span class="line"></span><br><span class="line">WatchedEvent state:SyncConnected <span class="built_in">type</span>:NodeChildrenChanged path:/newnode</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改子节点不触发事件</span></span><br><span class="line">$ ls /newnode watch </span><br><span class="line">[aaa]</span><br><span class="line">$ <span class="built_in">set</span> /newnode/aaa data-2</span><br><span class="line"><span class="comment"># - 没有事件触发，可以使用get绑定去触发NodeDataChanged</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure></div>



<h2 id="4-7-watcher常用使用场景"><a href="#4-7-watcher常用使用场景" class="headerlink" title="4-7 watcher常用使用场景"></a>4-7 watcher常用使用场景</h2><ul>
<li><p>统一资源配置</p>
<p>分布式下主从节点的信息保持一致性</p>
</li>
</ul>
<h2 id="4-8-权限acl详解，acl的构成-scheme与id"><a href="#4-8-权限acl详解，acl的构成-scheme与id" class="headerlink" title="4-8 权限acl详解，acl的构成-scheme与id"></a>4-8 权限acl详解，acl的构成-scheme与id</h2><p>ACL(access control lists)权限控制</p>
<ul>
<li>针对节点可以设置相关读写等权限，目的为了保障数据安全性</li>
<li>权限permissions可以指定不同的权限范围以及角色（类比shiro）</li>
</ul>
<p>ACL命令行</p>
<ul>
<li>getAcl：获取某个节点的acl权限信息</li>
<li>setAcl：设置某个节点的acl权限信息</li>
<li>addauth：输入认证授权信息，注册时输入明文密码（登录），在zk里密码以加密形式存储</li>
</ul>
<p>ACL的构成</p>
<ul>
<li><p>zk的acl通过 [scheme: id: permissions] 来构成权限列表</p>
<p>scheme：代表采用的某种权限机制</p>
<p>id：代表允许访问的用户</p>
<p>permissions：权限组合字符串</p>
</li>
</ul>
<p>scheme的类型</p>
<ul>
<li><p>world：world下只有一个id，即只有一个用户，该用户是anyone。</p>
<p>写法为 world:anyone:[permissions]</p>
</li>
<li><p>auth：代表认证登录，需要注册用户有权限就可以，</p>
<p>写法为 auth:user:password:[permissions]</p>
</li>
<li><p>digest：类似auth，但需要对密码加密才能访问(多采用digest而不是auth )</p>
<p>写法为 digest:username:BASE64(SHA1(password)):[permissions]</p>
</li>
<li><p>ip：限制ip进行访问</p>
<p>写法为 ip:192.168.1.1:[permissions]</p>
</li>
<li><p>super：代表超级管理员，拥有所有的权限（运维、总监）</p>
</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># - 语法：setAcl path acl 、getAcl path、addauth scheme auth</span></span><br><span class="line">$ getAcl /newnode/aaa</span><br><span class="line"><span class="string">'world,'</span>anyone	<span class="comment"># 创建节点的默认权限</span></span><br><span class="line">: cdrwa</span><br></pre></td></tr></table></figure></div>



<h2 id="4-9-acl的构成-permissions"><a href="#4-9-acl的构成-permissions" class="headerlink" title="4-9 acl的构成-permissions"></a>4-9 acl的构成-permissions</h2><p>权限字符串缩写 crdwa</p>
<ul>
<li><p>create： 创建子节点</p>
</li>
<li><p>read： 获取节点/子节点</p>
</li>
<li><p>write： 设置节点数据</p>
</li>
<li><p>delete： 删除子节点</p>
</li>
<li><p>admin： 设置权限</p>
</li>
</ul>
<h2 id="4-10-acl命令行world"><a href="#4-10-acl命令行world" class="headerlink" title="4-10 acl命令行world"></a>4-10 acl命令行world</h2><ul>
<li>world:anyone:cdrwa</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认权限</span></span><br><span class="line">$ getAcl /newnode/aaa	</span><br><span class="line"><span class="string">'world,'</span>anyone</span><br><span class="line">: cdrwa</span><br><span class="line"><span class="comment"># 设置权限</span></span><br><span class="line">$ setAcl /newnode/aaa world:anyone:crwa</span><br><span class="line">...</span><br><span class="line">$ getAcl /newnode/aaa                  </span><br><span class="line"><span class="string">'world,'</span>anyone</span><br><span class="line">: crwa	<span class="comment"># 少了删除子节点权限d</span></span><br><span class="line">$ create /newnode/aaa/xyz data-1</span><br><span class="line">Created /newnode/aaa/xyz</span><br><span class="line">$ delete /newnode/aaa/xyz</span><br><span class="line"><span class="comment"># 删除失败</span></span><br><span class="line">Authentication is not valid : /newnode/aaa/xyz</span><br></pre></td></tr></table></figure></div>



<h2 id="4-11-acl命令行auth"><a href="#4-11-acl命令行auth" class="headerlink" title="4-11 acl命令行auth"></a>4-11 acl命令行auth</h2><ul>
<li>auth:user:password:[permissions]</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ getAcl /names/aaa</span><br><span class="line"><span class="string">'world,'</span>anyone</span><br><span class="line">: cdrwa</span><br><span class="line">$ setAcl /names/aaa auth:mxx:123:cdrwa <span class="comment"># mxx:123  用户名：密码</span></span><br><span class="line"><span class="comment"># 非法，需要先登录再使用</span></span><br><span class="line">Acl is not valid : /names/aaa</span><br><span class="line"><span class="comment"># 登录用户</span></span><br><span class="line">$ addauth digest mxx:123</span><br><span class="line">$ setAcl /names/aaa auth:mxx:123:cdrwa</span><br><span class="line">...</span><br><span class="line">$ getAcl /names/aaa   </span><br><span class="line"><span class="comment"># 权限设置成功，密码以密文形式存储</span></span><br><span class="line"><span class="string">'digest,'</span>mxx:qSAyqpu3y3SZ5+XU1kLf17wYN9o=</span><br><span class="line">: cdrwa</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果重新设置用户名</span></span><br><span class="line">$ setAcl /names/aaa auth:mmm:456:cdrwa</span><br><span class="line">...</span><br><span class="line">$ getAcl /names/aaa</span><br><span class="line"><span class="comment"># 会发现无效，用户名和密码都是第一次的值</span></span><br><span class="line"><span class="string">'digest,'</span>mxx:qSAyqpu3y3SZ5+XU1kLf17wYN9o=</span><br><span class="line">: cdrwa</span><br><span class="line"><span class="comment"># 此写法代表使用默认用户名（第一次设置的那个）进行权限操作</span></span><br><span class="line">$ setAcl /names/aaa auth::cdrwa    </span><br><span class="line">...</span><br><span class="line">$ getAcl /names/aaa                   </span><br><span class="line"><span class="string">'digest,'</span>mxx:qSAyqpu3y3SZ5+XU1kLf17wYN9o=</span><br><span class="line">: cdrwa</span><br></pre></td></tr></table></figure></div>



<h2 id="4-12-acl命令行digest"><a href="#4-12-acl命令行digest" class="headerlink" title="4-12 acl命令行digest"></a>4-12 acl命令行digest</h2><ul>
<li>digest:username:BASE64(SHA1(password)):[permissions]</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先control+c 退出当前用户（mxx的用户）,重新进入</span></span><br><span class="line">$ create /names/bbb d-bbb</span><br><span class="line">Created /names/bbb</span><br><span class="line">$ getAcl /names/bbb</span><br><span class="line"><span class="string">'world,'</span>anyone</span><br><span class="line">: cdrwa</span><br><span class="line"><span class="comment"># digest使用密文形式</span></span><br><span class="line">$ setAcl /names/bbb digest:mxx:qSAyqpu3y3SZ5+XU1kLf17wYN9o=:cdra</span><br><span class="line">...</span><br><span class="line">$ getAcl /names/bbb</span><br><span class="line"><span class="string">'digest,'</span>mxx:qSAyqpu3y3SZ5+XU1kLf17wYN9o=</span><br><span class="line">: cdra</span><br><span class="line"></span><br><span class="line"><span class="comment"># 区别：使用auth写的明文，保存的密文；使用digest使用密文，保存密文。</span></span><br><span class="line"></span><br><span class="line">$ get /names/bbb</span><br><span class="line"><span class="comment"># 非法，因为没登录</span></span><br><span class="line">Authentication is not valid : /names/bbb</span><br><span class="line"><span class="comment"># 登录，不管auth和digest 登录密码都用铭文</span></span><br><span class="line">$ addauth digest mxx:123</span><br><span class="line">$ get /names/bbb </span><br><span class="line">...	<span class="comment"># 登录成功后就能获取数据了</span></span><br><span class="line">$ <span class="built_in">set</span> /names/bbb 111</span><br><span class="line"><span class="comment"># 没有w权限</span></span><br><span class="line">Authentication is not valid : /names/bbb</span><br></pre></td></tr></table></figure></div>



<h2 id="4-13-acl命令行ip"><a href="#4-13-acl命令行ip" class="headerlink" title="4-13 acl命令行ip"></a>4-13 acl命令行ip</h2><ul>
<li>ip:192.168.1.1:[permissions]</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ create /names/ccc d-ccc</span><br><span class="line">Created /names/ccc</span><br><span class="line">$ getAcl /names/ccc</span><br><span class="line"><span class="string">'world,'</span>anyone</span><br><span class="line">: cdrwa</span><br><span class="line"><span class="comment"># ip是mac的ip</span></span><br><span class="line">$ setAcl /names/ccc ip:10.6.104.28:cdwra</span><br><span class="line">...</span><br><span class="line">$ getAcl /names/ccc</span><br><span class="line"><span class="string">'ip,'</span>10.6.104.28</span><br><span class="line">: cdrwa</span><br><span class="line">$ get /names/ccc</span><br><span class="line"><span class="comment"># 非法，只有特定ip可以进行操作（之后通过java代码讲）</span></span><br><span class="line">Authentication is not valid : /names/ccc</span><br></pre></td></tr></table></figure></div>



<h2 id="4-14-acl之super超级管理员"><a href="#4-14-acl之super超级管理员" class="headerlink" title="4-14 acl之super超级管理员"></a>4-14 acl之super超级管理员</h2><p>超级权限可以增删改查任何节点</p>
<ul>
<li><p>Super</p>
<p>1、修改zkServer.sh 增加super管理员</p>
<p>2、重启zkServer.sh</p>
</li>
</ul>
<p>1、配置</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim zkServer.sh</span><br><span class="line"><span class="comment"># 搜索nohup</span></span><br><span class="line"><span class="comment"># 添加"-Dzookeeper.DigestAuthenticationProvider.superDigest=mxx:qSAyqpu3y3SZ5+XU1kLf17wYN9o="到图中位置</span></span><br></pre></td></tr></table></figure></div>



<p>![屏幕快照 2018-11-14 上午10.47.29](20181112164832926/屏幕快照 2018-11-14 上午10.47.29.png) </p>
<p>2、使用</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重启</span></span><br><span class="line">$ zkServer.sh restart</span><br><span class="line">$ zkCli.sh</span><br><span class="line">$ ls /names/ccc</span><br><span class="line"><span class="comment"># 没有权限</span></span><br><span class="line">Authentication is not valid : /names/ccc</span><br><span class="line">$ getAcl /names/ccc</span><br><span class="line"><span class="string">'ip,'</span>10.6.104.28</span><br><span class="line">: cdrwa</span><br><span class="line"><span class="comment"># 登录超级管理员</span></span><br><span class="line">$ addauth digest mxx:123</span><br><span class="line"><span class="comment"># 有权限了</span></span><br><span class="line">$ ls /names/ccc</span><br><span class="line">[]</span><br><span class="line">$ get /names/ccc</span><br><span class="line">...</span><br></pre></td></tr></table></figure></div>



<h2 id="4-15-acl的常用使用场景"><a href="#4-15-acl的常用使用场景" class="headerlink" title="4-15 acl的常用使用场景"></a>4-15 acl的常用使用场景</h2><ul>
<li><p>开发/测试环境分离，开发者无权操作测试库的节点，只能看。</p>
<p>（命名空间）</p>
</li>
<li><p>生产环境上控制指定ip的服务可以访问相关节点，防止混乱。</p>
<p>弊端：客户端是动态ip</p>
</li>
</ul>
<h2 id="4-16-zk四字命令"><a href="#4-16-zk四字命令" class="headerlink" title="4-16 zk四字命令"></a>4-16 zk四字命令</h2><p>Four Letter Words</p>
<ul>
<li>zk可以通过它自身提供的简写命名和服务器进行交互</li>
<li>需要使用到nc命令，安装：yum install nc</li>
<li><code>echo [commond] | nc [ip] [port]</code></li>
</ul>
<p>命令参考官方文档：<a href="http://zookeeper.apache.org/doc/r3.4.13/zookeeperAdmin.html#sc_zkCommands" target="_blank" rel="noopener">http://zookeeper.apache.org/doc/r3.4.13/zookeeperAdmin.html#sc_zkCommands</a></p>
<p>stat、ruok、dump、conf、cons、envi</p>
<p>mntr、 wchs(wchc、wchp)</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum install nc</span><br><span class="line"></span><br><span class="line"><span class="comment"># [stat] 查看zk的状态信息，以及mode</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="built_in">stat</span> | nc 10.211.55.6 2181</span><br><span class="line">Zookeeper version: 3.4.11-37e277162d567b55a07d1755f0b31c32e93c01a0, built on 11/01/2017 18:06 GMT</span><br><span class="line">Clients:</span><br><span class="line"> /10.211.55.6:59494[0](queued=0,recved=1,sent=0)</span><br><span class="line">...</span><br><span class="line">Mode: standalone	<span class="comment"># 单机运行</span></span><br><span class="line">Node count: 10</span><br><span class="line"></span><br><span class="line"><span class="comment"># [ruok] 查看zkserver是否启动，返回imok</span></span><br><span class="line">$ <span class="built_in">echo</span> ruok | nc 10.211.55.6 2181</span><br><span class="line">imok</span><br><span class="line"></span><br><span class="line"><span class="comment"># [dump] 列出未经处理的会话和临时节点</span></span><br><span class="line"><span class="comment"># - 登录cli创建临时节点</span></span><br><span class="line">$ create -e /names/tmp-dump 111</span><br><span class="line"><span class="comment"># - 返回命令行使用如下命令</span></span><br><span class="line">$ <span class="built_in">echo</span> dump | nc localhost 2181</span><br><span class="line">SessionTracker dump:</span><br><span class="line">Session Sets (3):</span><br><span class="line">0 expire at Thu Jan 01 17:19:10 CST 1970:</span><br><span class="line">0 expire at Thu Jan 01 17:19:20 CST 1970:</span><br><span class="line">1 expire at Thu Jan 01 17:19:30 CST 1970:</span><br><span class="line">	0x10001e1e9430001	<span class="comment"># session的id</span></span><br><span class="line">ephemeral nodes dump:</span><br><span class="line">Sessions with Ephemerals (1):</span><br><span class="line">0x10001e1e9430001:</span><br><span class="line">	/names/tmp-dump	<span class="comment"># 列出临时节点的目录</span></span><br><span class="line">	</span><br><span class="line"><span class="comment"># [conf] 查看服务器配置</span></span><br><span class="line">$ <span class="built_in">echo</span> conf | nc localhost 2181</span><br><span class="line">clientPort=2181</span><br><span class="line">dataDir=/usr/<span class="built_in">local</span>/zookeeper/dataDir/version-2</span><br><span class="line">dataLogDir=/usr/<span class="built_in">local</span>/zookeeper/dataLogDir/version-2</span><br><span class="line">tickTime=2000</span><br><span class="line">maxClientCnxns=60</span><br><span class="line">minSessionTimeout=4000</span><br><span class="line">maxSessionTimeout=40000</span><br><span class="line">serverId=0</span><br><span class="line"></span><br><span class="line"><span class="comment"># [cons]展示连接到服务器的客户端信息</span></span><br><span class="line">$ <span class="built_in">echo</span> cons | nc localhost 2181</span><br><span class="line"> /0:0:0:0:0:0:0:1:52368[0](queued=0,recved=1,sent=0)</span><br><span class="line"> /127.0.0.1:51142[1](queued=0,recved=55,sent=55,sid=0x10001e1e9430001,lop=PING,est=1542165605721,to=30000,lcxid=0x7,lzxid=0x35,lresp=33829115,llat=0,minlat=0,avglat=0,maxlat=3)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [envi] 环境变量</span></span><br><span class="line">$ <span class="built_in">echo</span> envi | nc localhost 2181</span><br><span class="line">zookeeper.version=...</span><br><span class="line">host.name=machinehost</span><br><span class="line">java.version=1.8.0_161</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># [mntr] 监控zk健康信息</span></span><br><span class="line">$ <span class="built_in">echo</span> mntr | nc localhost 2181</span><br><span class="line">...</span><br><span class="line">zk_znode_count	11	<span class="comment"># 节点数</span></span><br><span class="line">zk_watch_count	0	<span class="comment"># 监控节点数</span></span><br><span class="line">zk_ephemerals_count	1	<span class="comment"># 临时节点</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [wchs] 展示watch的信息</span></span><br><span class="line"><span class="comment"># - 进入cli设置watch，设置2个watch</span></span><br><span class="line">$ get /names watch</span><br><span class="line">...</span><br><span class="line">$ get /newnode watch</span><br><span class="line">...</span><br><span class="line">$ <span class="built_in">echo</span> wchs | nc localhost 2181</span><br><span class="line">1 connections watching 2 paths</span><br><span class="line">Total watches:2</span><br><span class="line"></span><br><span class="line"><span class="comment"># [wchc]、[wchp] session与watch 及 path与watch</span></span><br><span class="line"><span class="comment"># - zk默认没有开启这两个命令</span></span><br><span class="line">$ <span class="built_in">echo</span> wchc | nc localhost 2181</span><br><span class="line">wchc is not executed because it is not <span class="keyword">in</span> the whitelist.</span><br><span class="line">$ <span class="built_in">echo</span> wchp | nc localhost 2181</span><br><span class="line">wchp is not executed because it is not <span class="keyword">in</span> the whitelist.</span><br><span class="line"><span class="comment"># - 配置参见官网whitelist</span></span><br><span class="line">$ <span class="built_in">cd</span> conf</span><br><span class="line">$ vim zoo.cfg</span><br><span class="line"><span class="comment"># 在最后一行添加如下命令</span></span><br><span class="line"><span class="comment"># ----------vim start-------------</span></span><br><span class="line"><span class="comment"># 允许所有四字命令</span></span><br><span class="line">4lw.commands.whitelist=*</span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------vim end-------------</span></span><br><span class="line">$ zkServer.sh restart</span><br><span class="line">$ <span class="built_in">echo</span> wchc | nc localhost 2181</span><br><span class="line">0x10001e1e9430001	<span class="comment"># 该session创建了2个带watch的节点</span></span><br><span class="line">	/names</span><br><span class="line">	/newnode</span><br><span class="line">$ <span class="built_in">echo</span> wchp | nc localhost 2181</span><br><span class="line"><span class="comment"># - 当前带watch的path是由哪个session创建的</span></span><br><span class="line">/names</span><br><span class="line">	0x10001e1e9430001</span><br><span class="line">/newnode</span><br><span class="line">	0x10001e1e9430001</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>ZooKeeper分布式专题</category>
      </categories>
      <tags>
        <tag>ZooKeeper分布式专题</tag>
      </tags>
  </entry>
  <entry>
    <title>ZooKeeper专题（1）：ZooKeeper概念&amp;安装&amp;基本数据模型</title>
    <url>/2018/11/06/20181106112913721/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>参考视频：慕课网【ZooKeeper分布式专题与Dubbo微服务入门】</p>
</blockquote>
<h1 id="第1章-分布式系统概念与ZooKeeper简介"><a href="#第1章-分布式系统概念与ZooKeeper简介" class="headerlink" title="第1章 分布式系统概念与ZooKeeper简介"></a>第1章 分布式系统概念与ZooKeeper简介</h1><h2 id="1-1-zookeeper简介"><a href="#1-1-zookeeper简介" class="headerlink" title="1-1 zookeeper简介"></a>1-1 zookeeper简介</h2><p>zookeeper：动物园管理员</p>
<p>![屏幕快照 2018-11-06 下午2.22.47](20181106112913721/屏幕快照 2018-11-06 下午2.22.47.png)</p>
<ul>
<li><p>中间件，提供协调服务</p>
</li>
<li><p>作用于分布式系统，发挥其优势，可以为大数据服务</p>
</li>
<li><p>支持java，提供java和c语言的客户端API</p>
</li>
</ul>
<h2 id="1-2-什么是分布式系统"><a href="#1-2-什么是分布式系统" class="headerlink" title="1-2 什么是分布式系统"></a>1-2 什么是分布式系统</h2><ul>
<li>很多台计算机组成一个整体，一个整体一致对外并且处理同一请求</li>
<li>内部的每台计算机都可以相互通信（rest/rpc）</li>
<li>客户端到服务端的一次请求到响应结束会经历多台计算机</li>
</ul>
<p>案例图解：</p>
<p>![屏幕快照 2018-11-06 下午2.49.09](20181106112913721/屏幕快照 2018-11-06 下午2.49.09.png) </p>
<p>![屏幕快照 2018-11-06 下午2.51.08](20181106112913721/屏幕快照 2018-11-06 下午2.51.08.png) </p>
<h2 id="1-3-分布式系统的瓶颈以及zk的相关特性"><a href="#1-3-分布式系统的瓶颈以及zk的相关特性" class="headerlink" title="1-3 分布式系统的瓶颈以及zk的相关特性"></a>1-3 分布式系统的瓶颈以及zk的相关特性</h2><p>高并发</p>
<p><strong>zk的相关特性</strong></p>
<ul>
<li>一致性：数据一致性，数据按顺序分批入库。</li>
<li>原子性：事务要么都成功，要么都失败，不会局部化。</li>
<li>单一视图：客户端连接集群中的任一zk节点，数据都是一致的。</li>
<li>可靠性：每次对zk的操作状态都保存在服务器中。</li>
<li>实时性：客户端可以读取zk服务端的最新数据。</li>
</ul>
<h1 id="第2章-ZooKeeper安装"><a href="#第2章-ZooKeeper安装" class="headerlink" title="第2章 ZooKeeper安装"></a>第2章 ZooKeeper安装</h1><h2 id="2-1-JDK的安装"><a href="#2-1-JDK的安装" class="headerlink" title="2-1 JDK的安装"></a>2-1 JDK的安装</h2><p>zookeeper是用java编译的</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[machine@machinehost ~]$ java -version</span><br><span class="line">openjdk version &quot;1.8.0_161&quot;</span><br><span class="line">OpenJDK Runtime Environment (build 1.8.0_161-b14)</span><br><span class="line">OpenJDK 64-Bit Server VM (build 25.161-b14, mixed mode)</span><br></pre></td></tr></table></figure></div>



<h2 id="2-2-zookeeper下载、安装以及配置环境变量"><a href="#2-2-zookeeper下载、安装以及配置环境变量" class="headerlink" title="2-2 zookeeper下载、安装以及配置环境变量"></a>2-2 zookeeper下载、安装以及配置环境变量</h2><p>“单机zookeeper安装”</p>
<p>下载：<a href="https://archive.apache.org/dist/zookeeper/zookeeper-3.4.11/zookeeper-3.4.11.tar.gz" target="_blank" rel="noopener">https://archive.apache.org/dist/zookeeper/zookeeper-3.4.11/zookeeper-3.4.11.tar.gz</a></p>
<p>安装：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf zookeeper-3.4.11.tar.gz</span><br><span class="line"><span class="comment"># 重命名</span></span><br><span class="line">mv zookeeper-3.4.11 zookeeper</span><br><span class="line"><span class="comment"># 移位置</span></span><br><span class="line">sudo mv zookeeper /usr/<span class="built_in">local</span>/</span><br><span class="line"><span class="comment"># 编写环境变量</span></span><br><span class="line">sudo vim /etc/profile</span><br><span class="line"><span class="comment"># 修改生效</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure></div>

<p>/etc/profile</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># set java environment</span></span><br><span class="line">JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.161-0.b14.el7_4.x86_64</span><br><span class="line">JRE_HOME=<span class="variable">$JAVA_HOME</span>/jre</span><br><span class="line"><span class="comment"># 修改1</span></span><br><span class="line">ZOOKEEPER_HOME=/usr/<span class="built_in">local</span>/zookeeper</span><br><span class="line">CLASS_PATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar:<span class="variable">$JRE_HOME</span>/lib</span><br><span class="line"><span class="comment"># 修改2</span></span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$JRE_HOME</span>/bin:<span class="variable">$ZOOKEEPER_HOME</span>/bin</span><br><span class="line"><span class="comment"># 修改3</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME JRE_HOME ZOOKEEPER_HOME CLASS_PATH PATH</span><br></pre></td></tr></table></figure></div>



<h2 id="2-3-zookeeper文件夹主要目录介绍"><a href="#2-3-zookeeper文件夹主要目录介绍" class="headerlink" title="2-3 zookeeper文件夹主要目录介绍"></a>2-3 zookeeper文件夹主要目录介绍</h2><ul>
<li>bin</li>
<li>conf</li>
<li>contrib：一些附加功能</li>
<li>dist-maven：mvn编译后的目录</li>
<li>docs：帮助文档</li>
<li>lib：需要依赖的jar包（做cli开发时用到）</li>
<li>recipes：案例demo代码</li>
<li>src</li>
</ul>
<h2 id="2-4-zookeeper配置文件介绍，运行zk"><a href="#2-4-zookeeper配置文件介绍，运行zk" class="headerlink" title="2-4 zookeeper配置文件介绍，运行zk"></a>2-4 zookeeper配置文件介绍，运行zk</h2><p> <strong>zoo.cgf参数介绍</strong>：</p>
<ul>
<li>tickTime:用于计算的时间单元。比如session超时：N*tickTime.</li>
<li>initLimit:用于集群，允许从节点连接并同步到 master节点的初始化连接时间，以tickTime 的倍数来表示(例如initLimit=10).</li>
<li>syncLimit:用于集群， master主节点与 从节点 之间发送消息，请求和应答 时间长度（心跳机制）</li>
<li>dataDir:必须配置。</li>
<li>dataLogDir:日志目录（如果不配置会和dataDir公用）。</li>
<li>clientPort：连接服务器的端口，默认2181</li>
</ul>
<p><strong>修改配置</strong>：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp zoo_sample.cfg zoo.cfg</span><br><span class="line">sudo vim zoo.cfg</span><br><span class="line"><span class="comment"># 创建文件</span></span><br><span class="line">mkdir dataDir</span><br><span class="line">mkdir dataLogDir</span><br></pre></td></tr></table></figure></div>

<p>zoo.cfg</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># The number of milliseconds of each tick</span></span><br><span class="line">tickTime=2000</span><br><span class="line"><span class="comment"># The number of ticks that the initial </span></span><br><span class="line"><span class="comment"># synchronization phase can take</span></span><br><span class="line">initLimit=10</span><br><span class="line"><span class="comment"># The number of ticks that can pass between </span></span><br><span class="line"><span class="comment"># sending a request and getting an acknowledgement</span></span><br><span class="line">syncLimit=5</span><br><span class="line"><span class="comment"># the directory where the snapshot is stored.</span></span><br><span class="line"><span class="comment"># do not use /tmp for storage, /tmp here is just </span></span><br><span class="line"><span class="comment"># example sakes.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改1</span></span><br><span class="line"><span class="comment"># dataDir=/tmp/zookeeper</span></span><br><span class="line">dataDir=/usr/<span class="built_in">local</span>/zookeeper/dataDir</span><br><span class="line">dataLogDir=/usr/<span class="built_in">local</span>/zookeeper/dataLogDir</span><br><span class="line"></span><br><span class="line"><span class="comment"># the port at which the clients will connect</span></span><br><span class="line">clientPort=2181</span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></table></figure></div>

<p>此时单机zookeeper配置完成</p>
<p><strong>运行zk</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看可用参数</span></span><br><span class="line">$ zkServer.sh </span><br><span class="line">...</span><br><span class="line"><span class="comment"># restart 重启</span></span><br><span class="line"><span class="comment"># stop 停止服务</span></span><br><span class="line">Usage: /usr/<span class="built_in">local</span>/zookeeper/bin/zkServer.sh &#123;start|start-foreground|stop|restart|status|upgrade|<span class="built_in">print</span>-cmd&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">$ zkServer.sh start</span><br><span class="line">...</span><br><span class="line">Starting zookeeper ... STARTED</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">$ zkServer.sh status</span><br><span class="line">...</span><br><span class="line">Mode: standalone <span class="comment"># 单机的</span></span><br></pre></td></tr></table></figure></div>



<h1 id="第3章-ZooKeeper基本数据模型"><a href="#第3章-ZooKeeper基本数据模型" class="headerlink" title="第3章 ZooKeeper基本数据模型"></a>第3章 ZooKeeper基本数据模型</h1><h2 id="3-1-zk数据模型介绍"><a href="#3-1-zk数据模型介绍" class="headerlink" title="3-1 zk数据模型介绍"></a>3-1 zk数据模型介绍</h2><ol>
<li><p>是一个树型结构，类似前端开发中的tree.js组件。zk的数据模型也可以理解为linux/unix的文件目录：usr/local/…</p>
</li>
<li><p>每个节点称之为znode,它可以有子节点(相当于子目录)，也可以有数据。</p>
</li>
<li><p>每个节点分为临时节点和永久节点，临时节点会在客户端断开后消失。(在分布式锁会涉及)</p>
</li>
<li><p>每个zk节点都各自的版本号，可以通过命令行来显示节点信息。</p>
</li>
<li><p>每个节点数据发生变化，那么节点的版本号会累加(乐观锁)。??</p>
</li>
<li><p>删除、修改过期节点，版本号不匹配则会报错。</p>
</li>
<li><p>每个zk节点存储的数据不宜过大，几K即可。</p>
</li>
<li><p>节点可以设置acl（权限控制链表）,可以通过权限来控制用户的访问。</p>
</li>
</ol>
<h2 id="3-2-zk客户端连接关闭服务端，查看znode"><a href="#3-2-zk客户端连接关闭服务端，查看znode" class="headerlink" title="3-2 zk客户端连接关闭服务端，查看znode"></a>3-2 zk客户端连接关闭服务端，查看znode</h2><ul>
<li><p>客户端连接</p>
</li>
<li><p>查看znode结构</p>
</li>
<li><p>关闭客户端连接</p>
</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动服务端</span></span><br><span class="line">$ zkServer.sh restart</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动客户端</span></span><br><span class="line">$ zkCli.sh </span><br><span class="line">...</span><br><span class="line">[zk: localhost:2181(CONNECTED) 0]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 帮助</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 0] <span class="built_in">help</span></span><br><span class="line">ZooKeeper -server host:port cmd args</span><br><span class="line">	<span class="built_in">stat</span> path [watch]</span><br><span class="line">	<span class="built_in">set</span> path data [version]</span><br><span class="line">	ls path [watch]	<span class="comment"># 查看指定目录列表</span></span><br><span class="line">	delquota [-n|-b] path</span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看指定目录列表 ls path [watch]</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 1] ls /</span><br><span class="line">[zookeeper]</span><br><span class="line">[zk: localhost:2181(CONNECTED) 3] ls /zookeeper</span><br><span class="line">[quota]</span><br><span class="line">[zk: localhost:2181(CONNECTED) 4] ls /zookeeper/quota</span><br><span class="line">[]	<span class="comment"># 是个空目录，这是zookeeper初始化的状态</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭客户端连接</span></span><br><span class="line">Control+C</span><br></pre></td></tr></table></figure></div>



<h2 id="3-3-zookeeper的作用体现"><a href="#3-3-zookeeper的作用体现" class="headerlink" title="3-3 zookeeper的作用体现"></a>3-3 zookeeper的作用体现</h2><ol>
<li><p>master节点选举，主节点挂了以后，从节点就会接手工作，并且保证这个节点是唯一的，这也就是所谓的首脑模式，从而保证我们的集群是高可用的。</p>
</li>
<li><p>统一配置文件管理，即只需要部署一台服务器，则可以把相同的配置文件同步更新到其他所有服务器，此操作在云计算的特别多。（假设修改了redis统一配置，需要在以下服务器中同时生效，通过zookeeper只需要修改一台电脑 ）</p>
</li>
</ol>
<p>![屏幕快照 2018-11-06 下午10.59.07](20181106112913721/屏幕快照 2018-11-06 下午10.59.07.png)</p>
<ol start="3">
<li><p>发布与订阅，类似消息队列MQ（amq,rmq）,dubbo发<strong>布者把数据存在znode上</strong>，订阅者会读取这个数据。</p>
</li>
<li><p>提供分布式锁，分布式环境中不同进程之间争夺资源，类似多线程中的锁。</p>
<p>![屏幕快照 2018-11-06 下午11.05.18](20181106112913721/屏幕快照 2018-11-06 下午11.05.18.png) </p>
</li>
<li><p>集群管理，集群中保证数据的强一致性。</p>
<p>![屏幕快照 2018-11-06 下午11.07.40](20181106112913721/屏幕快照 2018-11-06 下午11.07.40-1516881.png) </p>
</li>
</ol>
]]></content>
      <categories>
        <category>ZooKeeper分布式专题</category>
      </categories>
      <tags>
        <tag>ZooKeeper分布式专题</tag>
      </tags>
  </entry>
  <entry>
    <title>高并发解决方案（4）：数据库切库分库分表&amp;高可用</title>
    <url>/2018/11/05/20181105165724309/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="第17章-数据库切库分库分表思路"><a href="#第17章-数据库切库分库分表思路" class="headerlink" title="第17章 数据库切库分库分表思路"></a>第17章 数据库切库分库分表思路</h1><h2 id="数据库瓶颈"><a href="#数据库瓶颈" class="headerlink" title="数据库瓶颈"></a>数据库瓶颈</h2><ul>
<li>单个库数据量太大（1T~2T）：多个库</li>
<li>单个数据库服务压力过大、读写瓶颈：多个库</li>
<li>单个表数据量过大：分表</li>
</ul>
<h2 id="数据库切库-分库"><a href="#数据库切库-分库" class="headerlink" title="数据库切库/分库"></a>数据库切库/分库</h2><p>切库基础和实际运用：读写分离</p>
<blockquote>
<p>读写分离技术，主库负责数据更新 和 实时数据查询，从库负责非实时数据查询。</p>
</blockquote>
<p>如何方便进行读写分离，目前有两种方式：</p>
<ol>
<li><p>动态数据源切换(切库)</p>
<p>它是指程序运行时，把数据源动态的织入到程序中，让指定的程序连接主库还是从库</p>
<p><a href="https://www.imooc.com/article/22556" target="_blank" rel="noopener">自定义注解完成数据库切库</a></p>
</li>
<li><p>直接定义查数据源和写数据源（分库）</p>
<p>直接在项目里定义两个数据库连接，一个是主库连接一个是从库连接，更新数据的时候我们读取主库连接，查询数据的时候读取从库连接</p>
</li>
</ol>
<p>![屏幕快照 2018-11-05 下午5.26.57](20181105165724309/屏幕快照 2018-11-05 下午5.26.57.png) </p>
<p>​    </p>
<p><strong>切库和分库的区别</strong>：</p>
<ul>
<li><p>它们都是底层是多个数据库在提供服务。</p>
</li>
<li><p>分库是属于在微服务应用拆分的时候都有自己的数据库，而切库（多数据源）是在没有进行应用拆分的时候就已经分成两个库了，根据业务使用不同的代码连接不同的数据库。</p>
<p><a href="https://www.imooc.com/article/22609" target="_blank" rel="noopener">多个数据源的轻松支持</a></p>
<p><a href="https://www.cnblogs.com/java-zhao/p/5413845.html" target="_blank" rel="noopener">springboot + mybatis + 多数据源</a></p>
</li>
</ul>
<h2 id="数据库分表"><a href="#数据库分表" class="headerlink" title="数据库分表"></a>数据库分表</h2><p><strong>什么时候考虑分表</strong>？</p>
<p>当一个数据表很大，大到我们做了sql和索引优化之后，基本操作的速度还是影响使用，我们就必须考虑分表了 </p>
<p><strong>分表的好处：</strong></p>
<p>分表后单表的并发能力提高了，写操作效率也会提高。其次是查询一次的时间短了，数据分布在不同的文件里，磁盘的io磁盘io性能也提高了，</p>
<p>磁盘的读写锁影响的数据量变小，插入数据库需要重新建立的索引变少。</p>
<p><strong>分表策略：</strong></p>
<ul>
<li><p>横向分表</p>
<p>将表中不同的数据行按照一定规律分布到不同的数据库表中（这些表保存在同一个数据库中），这样来降低单表数据量，优化查询性能。</p>
</li>
<li><p>纵向分表</p>
<p>一般根据数据的活跃度进行划分（按属性，经常变化的字段和不常变化的字段可以分表）。</p>
</li>
</ul>
<p><strong>实际操作</strong>：</p>
<p>mybatis分表插件shardbatis2.0</p>
<p> <a href="https://www.imooc.com/article/25256" target="_blank" rel="noopener">利用mybatis插件实现数据库分表</a></p>
<h1 id="第18章-高可用手段"><a href="#第18章-高可用手段" class="headerlink" title="第18章 高可用手段"></a>第18章 高可用手段</h1><p><strong>高可用的一些手段</strong></p>
<p>![屏幕快照 2018-11-05 下午6.29.10](20181105165724309/屏幕快照 2018-11-05 下午6.29.10.png) </p>
<p><a href="http://www.imooc.com/article/20891" target="_blank" rel="noopener">简谈从零开始搭建一套业务相关监控报警系统</a></p>
<p><strong>高可用原则</strong>：</p>
<ol>
<li>系统的任何发布必须具有可回滚能力。</li>
<li>系统任何外部依赖必须准确衡量是否可降级，是否可无损降级，并提供降级开关。</li>
<li>系统对外暴露的接口必须配置好限流，限流值必须尽量准确可靠。</li>
</ol>
<h1 id="第19章-课程总结"><a href="#第19章-课程总结" class="headerlink" title="第19章 课程总结"></a>第19章 课程总结</h1><p><a href="http://naotu.baidu.com/file/6808ea88451b49ba4964e2c81d0d2c8b?token=3a5de17f2ea7220d" target="_blank" rel="noopener">知识点索引图</a></p>
<p><a href="https://www.imooc.com/article/24007" target="_blank" rel="noopener">《Java并发编程与高并发解决方案》知识点索引</a></p>
]]></content>
      <categories>
        <category>Java并发编程与高并发解决方案</category>
      </categories>
      <tags>
        <tag>Java并发编程与高并发解决方案</tag>
      </tags>
  </entry>
  <entry>
    <title>高并发解决方案（3）：应用限流&amp;服务降级与服务熔断</title>
    <url>/2018/11/05/20181105104407665/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="第15章-应用限流思路"><a href="#第15章-应用限流思路" class="headerlink" title="第15章 应用限流思路"></a>第15章 应用限流思路</h1><p>限流就是通过对并发访问/请求进行限速或一个时间窗口内的请求进行限速，从而达到保护系统的目的。一般系统可以通过压测来预估能处理的峰值，一旦达到设定的峰值阀值，则可以拒绝服务（定向错误页或告知资源没有了）、排队或等待（例如：秒杀、评论、下单）、降级（返回默认数据）。</p>
<h2 id="为什么需要限流"><a href="#为什么需要限流" class="headerlink" title="为什么需要限流"></a>为什么需要限流</h2><p>应用限流：</p>
<p>![屏幕快照 2018-11-05 上午10.50.57](20181105104407665/屏幕快照 2018-11-05 上午10.50.57.png) </p>
<ul>
<li><p>假设有130W到140W的数据插入到数据库中，如果没有做限流，数据库的主库会突然接收到130w的插入操作</p>
</li>
<li><p>首先是网络上的开销，很可能直接把<strong>带宽占满</strong>，导致其他请求无法正常传输和处理，其次会是<strong>数据库的负载突然增高</strong>，导致无法处理某些数据库的操作，也有可能数据库没有足够的连接导致某些数据库插入查询失败；</p>
</li>
<li><p>还有一点就是现在数据库都做了主从设计，主数据库的数据还要同步给从库，这时瞬间插入了大量的数据，会带来<strong>从库和主库的延迟特别大</strong>，这时从库查询不准确的概率也会跟着提升。</p>
</li>
<li><p>如果我们放慢插入数据库的速度，这时插入数据库主库的速率会很正常，同步到从库也很正常。网络消耗也可以接收不会影响其他服务。</p>
</li>
</ul>
<h2 id="应用限流算法"><a href="#应用限流算法" class="headerlink" title="应用限流算法"></a>应用限流算法</h2><ul>
<li>计数器法</li>
<li>滑动窗口</li>
<li>漏桶算法</li>
<li>令牌桶算法</li>
</ul>
<h3 id="1、计数器法"><a href="#1、计数器法" class="headerlink" title="1、计数器法"></a><strong>1、计数器法</strong></h3><p>使用计数器来进行限流，主要用来限制一定时间内的总并发数，比如数据库连接池、线程池、秒杀的并发数；计数器限流只要一定时间内的总请求数超过设定的阀值则进行限流，是一种<strong>简单粗暴的总数量限流</strong>，而不是平均速率限流。</p>
<p>![屏幕快照 2018-11-05 上午11.02.20](20181105104407665/屏幕快照 2018-11-05 上午11.02.20.png) </p>
<p>这个方法有一个致命问题：临界问题——当遇到恶意请求，在0:59时，瞬间请求100次，并且在1:00请求100次，那么这个用户在1秒内请求了200次（59s时请求100次，然后60s时重置计数，又立马请求100次，所以1秒内请求了200次，超过了1s请求100次的阀值），用户可以在<strong>重置节点突发请求</strong>，而瞬间超过我们设置的速率限制，用户可能通过算法漏洞击垮我们的应用。</p>
<p>![屏幕快照 2018-11-05 上午11.04.03](20181105104407665/屏幕快照 2018-11-05 上午11.04.03.png) </p>
<h3 id="2、滑动窗口算法"><a href="#2、滑动窗口算法" class="headerlink" title="2、滑动窗口算法"></a>2、滑动窗口算法</h3><p>![屏幕快照 2018-11-05 上午11.11.33](20181105104407665/屏幕快照 2018-11-05 上午11.11.33.png) </p>
<ul>
<li><p>在上图中，整个红色矩形框是一个时间窗口，一个时间窗口就是1分钟，然后我们将时间窗口进行划分。</p>
</li>
<li><p>如上图我们把滑动窗口划分为6格，所以每一格代表10秒，每超过10秒，我们的时间窗口就会向右滑动一格，每一格都有自己独立的计数器。例如：一个请求在0:35到达，那么0:30到0:39的计数器会+1。</p>
</li>
<li><p>那么<strong>滑动窗口是怎么解决临界点的问题</strong>呢？如上图，0:59到达的100个请求会在灰色区域格子中，而1：00到达的请求会在红色格子中，窗口会向右滑动一格，那么此时间窗口内的总请求数共200个，超过了限定的100，所以此时能够检测出来触发了限流（计数器法利用临界点1秒请求200次会检测不出来）。</p>
</li>
<li><p>回头看看计数器算法，会发现，其实计数器算法就是窗口滑动算法，只不过计数器算法没有对时间窗口进行划分，所以是一格。</p>
</li>
<li><p>由此可见，当滑动窗口的格子划分越多，限流的统计就会越精确。</p>
</li>
</ul>
<h3 id="3、漏桶算法（Leaky-Bucket）"><a href="#3、漏桶算法（Leaky-Bucket）" class="headerlink" title="3、漏桶算法（Leaky Bucket）"></a>3、漏桶算法（Leaky Bucket）</h3><p>![屏幕快照 2018-11-05 上午11.25.00](20181105104407665/屏幕快照 2018-11-05 上午11.25.00.png) </p>
<p>这个算法很简单。首先，我们有一个固定容量的桶，有水进来，也有水出去。对于流进来的水，我们无法预计共有多少水流进来，也无法预计流水速度，但对于流出去的水来说，这个桶可以<strong>固定水流的速率</strong>，而且当桶满的时候，<strong>多余的水会溢出来</strong>。</p>
<h3 id="4、令牌桶算法-Token-Bucket"><a href="#4、令牌桶算法-Token-Bucket" class="headerlink" title="4、令牌桶算法(Token Bucket)"></a>4、令牌桶算法(Token Bucket)</h3><p>![屏幕快照 2018-11-05 上午11.27.39](20181105104407665/屏幕快照 2018-11-05 上午11.27.39.png) </p>
<p>从上图中可以看出，令牌算法有点复杂，桶里存放着令牌token。桶一开始是空的，<strong>token以固定的速率r往桶里面填充</strong>，直到达到桶的容量，多余的token会</p>
<p>被丢弃。每当一个请求过来时，就会尝试着移除一个token，如果没有token，请求无法通过(解决了临界问题，1s内最高并发100个)。</p>
<h3 id="算法对比"><a href="#算法对比" class="headerlink" title="算法对比"></a>算法对比</h3><p><strong>计数器法 VS 滑动窗口</strong></p>
<ul>
<li><p>计数器法是滑动窗口的低精度实现</p>
</li>
<li><p>滑动窗口比计数器法需要更多存储空间（每一格都有自己独立的计数器）</p>
</li>
</ul>
<p><strong>漏桶算法 VS 令牌桶算法</strong></p>
<ul>
<li>允许一定程度的突发（漏桶是匀速的），因为默认取令牌不消耗时间，所以对用户更友好，被业界<strong>采用较多</strong></li>
<li>令牌桶就是匀速，且没有临界问题</li>
</ul>
<h1 id="第16章-服务降级与服务熔断思路"><a href="#第16章-服务降级与服务熔断思路" class="headerlink" title="第16章 服务降级与服务熔断思路"></a>第16章 服务降级与服务熔断思路</h1><h2 id="概念理解"><a href="#概念理解" class="headerlink" title="概念理解"></a>概念理解</h2><p><strong>服务降级：</strong></p>
<p>服务压力剧增的时候根据当前的业务情况及流量对一些服务和页面有策略的降级，以此缓解服务器的压力，以保证核心任务的进行。</p>
<p>同时保证部分甚至大部分任务客户能得到<strong>正确的响应</strong>。也就是当前的请求处理不了了或者出错了，给一个默认的返回。</p>
<p><strong>服务熔断</strong>：</p>
<p>在股票市场，熔断这个词大家都不陌生，是指当股指波幅达到某个点后，交易所为控制风险采取的暂停交易措施。相应的，服务熔断一般是指软件系统中，由于某些原因使得服务出现了<strong>过载现象</strong>，为防止造成整个系统故障，从而采用的一种保护措施，所以很多地方把熔断亦称为<strong>过载保护</strong>。</p>
<p><strong>降级分类</strong></p>
<p>降级按照是否自动化可分为：自动开关降级和人工开关降级。</p>
<p>降级按照功能可分为：读服务降级、写服务降级。</p>
<p>降级按照处于的系统层次可分为：多级降级。</p>
<p><strong>自动降级分类</strong></p>
<p>（1）超时降级：主要配置好超时时间和超时重试次数和机制，并使用异步机制探测回复情况</p>
<p>（2）失败次数降级：主要是一些不稳定的api，当失败调用次数达到一定阀值自动降级，同样要使用异步机制探测回复情况</p>
<p>（3）故障降级：比如要调用的远程服务挂掉了（网络故障、DNS故障、http服务返回错误的状态码、rpc服务抛出异常），则可以直接降级。降级后的处理方案有：<strong>默认值</strong>（比如库存服务挂了，返回默认现货）、兜底数据（比如广告挂了，返回提前准备好的一些静态页面）、缓存（之前暂存的一些缓存数据）</p>
<p>（4）限流降级</p>
<p>当我们去秒杀或者抢购一些限购商品时，此时可能会因为访问量太大而导致系统崩溃，此时开发者会使用限流来进行限制访问量，当达到限流阀值，后续请求会被降级；降级后的处理方案可以是：排队页面（将用户导流到排队页面等一会重试）、无货（直接告知用户没货了）、错误页（如活动太火爆了，稍后重试）。</p>
<p><strong>服务熔断和服务降级比较：</strong></p>
<p>类似性：</p>
<ol>
<li>目的很一致，都是从可用性可靠性着想，为防止系统的整体缓慢甚至崩溃，采用的技术手段；</li>
<li>最终表现类似，对于两者来说，最终让用户体验到的是某些功能暂时不可达或不可用；</li>
<li>粒度一般都是服务级别，当然，业界也有不少更细粒度的做法，比如做到数据持久层（允许查询，不允许增删改）；</li>
<li>自治性要求很高，熔断模式一般都是服务基于策略的自动触发，降级虽说可人工干预，但在微服务架构下，完全靠人显然不可能，开关预置、配置中心都是必要手段；</li>
</ol>
<p>而两者的区别也是明显的：</p>
<ol>
<li>触发原因不太一样，服务熔断一般是某个服务（下游服务）故障引起，而服务降级一般是从整体负荷考虑；</li>
<li>管理目标的层次不太一样，熔断其实是一个框架级的处理，每个微服务都需要（无层级之分），而降级一般需要对业务有层级之分（比如降级一般是从最外围服务开始）</li>
<li>实现方式不太一样</li>
</ol>
<p><strong>服务降级要考虑的问题：</strong></p>
<ol>
<li><p>核心和非核心服务</p>
</li>
<li><p>是否支持降级，降级策略</p>
</li>
<li><p>业务放通的场景，策略</p>
</li>
</ol>
<h2 id="Hystrix"><a href="#Hystrix" class="headerlink" title="Hystrix"></a>Hystrix</h2><p>Hystrix，该库旨在通过控制那些访问远程系统、服务和第三方库的节点，从而对延迟和故障提供更强大的容错能力。Hystrix具备拥有回退机制和断路器功能的线程和信号隔离，请求缓存和请求打包（request collapsing，即自动批处理，译者注），以及监控和配置等功能。</p>
<p>![屏幕快照 2018-11-05 下午4.51.02](20181105104407665/屏幕快照 2018-11-05 下午4.51.02.png) </p>
<p><a href="/2018/11/05/20181105104407665/996415-20180707224508649-1998633034.png" data-fancybox="group" data-caption="996415-20180707224508649-1998633034" class="fancybox"><img alt="996415-20180707224508649-1998633034" title="996415-20180707224508649-1998633034" data-src="/2018/11/05/20181105104407665/996415-20180707224508649-1998633034.png" class="lazyload"></a> </p>
<p>？？？</p>
]]></content>
      <categories>
        <category>Java并发编程与高并发解决方案</category>
      </categories>
      <tags>
        <tag>Java并发编程与高并发解决方案</tag>
      </tags>
  </entry>
  <entry>
    <title>高并发解决方案（2）：消息队列&amp;应用拆分</title>
    <url>/2018/11/03/20181103212110299/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[TOC]</p>
<h1 id="第13章-消息队列思路"><a href="#第13章-消息队列思路" class="headerlink" title="第13章 消息队列思路"></a>第13章 消息队列思路</h1><p>消息队列已经逐渐成为企业IT<strong>系统内部通信的核心手段</strong>。它具有低耦合、可靠投递、广播、流量控制、最终一致性等一系列功能，成为异步RPC的主要手段之一。</p>
<h2 id="引入消息队列"><a href="#引入消息队列" class="headerlink" title="引入消息队列"></a><strong>引入消息队列</strong></h2><p>![屏幕快照 2018-11-03 下午9.34.40](20181103212110299/屏幕快照 2018-11-03 下午9.34.40.png) </p>
<ul>
<li><strong>出现的问题</strong>：消息被处理的过程相当于流程A被处理。我们这里以一个实际的模型来讨论下，比如用户下单成功时给用户发短信，如果没有这个消息队列，我们会选择同步调用发短信的接口，并等待短息发送成功，这时候假设<strong>短信接口实现出现问题</strong>了，或者短信调用端超时了，又或者短信发送达到上限了，我们是选择重试几次还是放弃，还是选择把这个放到数据库。过一段时间再看看呢，不管怎样，实现都很复杂。</li>
<li><strong>引入消息队列</strong>：我们可以将发短信这个请求放在消息队列里，消息队列按照一定的顺序挨个处理队列里的消息，当处理到发送短信的任务时，通知短信服务发送消息，如果出现之前出现的问题，那么把这个消息重新放到消息队列中。我们可以将发短信这个请求放在消息队列里，消息队列按照一定的顺序<strong>挨个处理队列里的消息</strong>，当处理到发送短信的任务时，通知短信服务发送消息，如果出现之前出现的问题，那么把这个消息重新放到消息队列中。</li>
</ul>
<h2 id="消息队列特性"><a href="#消息队列特性" class="headerlink" title="消息队列特性"></a><strong>消息队列特性</strong></h2><ul>
<li>业务无关：只做消息分发</li>
<li>FIFO：先投递先到达</li>
<li>荣灾：结点的动态增删和消息的持久化</li>
<li>性能：吞吐量提升，系统内部通信效率提高</li>
</ul>
<h2 id="为什么需要消息队列"><a href="#为什么需要消息队列" class="headerlink" title="为什么需要消息队列"></a><strong>为什么需要消息队列</strong></h2><ul>
<li><p>【生产】和【消费】的速度或稳定性等因素不一致</p>
<p>例如短信发送、 调用远程系统下订单、把用户请求搜集到队列里</p>
<p>​</p>
</li>
</ul>
<h2 id="消息队列的好处"><a href="#消息队列的好处" class="headerlink" title="消息队列的好处"></a><strong>消息队列的好处</strong></h2><ol>
<li><p><strong>业务解耦</strong>。一个事务只关心本质的流程，需要依赖其他事情但是不那么重要的时候，有通知即可，无需等待结果。</p>
<p> 短信发送时<strong>只要保证放到消息队列中就可以</strong>了，接着做后面的事情就行。每个成员不必受其他成员影响，可以更独立自主，只通过一个简单的容器来联系。</p>
<p>对于我们的订单系统，订单最终支付成功之后可能需要给用户发送短信积分什么的，但其实这已经不是我们系统的核心流程了。如果外部系统速度偏慢（比如短信网关速度不好），那么主流程的时间会加长很多，用户肯定不希望点击支付过好几分钟才看到结果。那么我们只需要通知短信系统“我们支付成功了”，不一定非要等待它处理完成。</p>
</li>
<li><p><strong>最终一致性。</strong>通过在队列中存放任务保证<strong>它最终一定会执行</strong>。最终一致性指的是两个系统的状态保持一致，要么都成功，要么都失败。 当然有个时间限制，理论上越快越好，但实际上在各种异常的情况下，可能会有一定延迟达到最终一致状态，但最后两个系统的状态是一样的。 </p>
<p>业界有一些为“最终一致性”而生的消息队列，如Notify（阿里）、QMQ（去哪儿）等，其设计初衷，就是为了交易系统中的高可靠通知。</p>
<p>以一个银行的转账过程来理解最终一致性，转账的需求很简单，如果A系统扣钱成功，则B系统加钱一定成功。反之则一起回滚，像什么都没发生一样。<br>然而，这个过程中存在很多可能的意外：</p>
<ol>
<li>A扣钱成功，调用B加钱接口失败。</li>
<li>A扣钱成功，调用B加钱接口虽然成功，但获取最终结果时网络异常引起超时。</li>
<li>A扣钱成功，B加钱失败，A想回滚扣的钱，但A机器down机。</li>
</ol>
<p>可见，想把这件看似简单的事真正做成，真的不那么容易。所有跨JVM的一致性问题，从技术的角度讲通用的解决方案是：</p>
<ol>
<li><strong>强一致性</strong>，分布式事务，但<strong>落地太难且成本太高</strong>，后文会具体提到。</li>
<li>最终一致性，主要是用“记录”和“补偿”的方式。在做所有的不确定的事情之前，<strong>先把事情记录下来</strong>，然后去做不确定的事情，结果可能是：成功、失败或是不确定，“不确定”（例如超时等）可以等价为失败。成功就可以把记录的东西清理掉了，<strong>对于失败和不确定，可以依靠定时任务等方式把所有失败的事情重新搞一遍，直到成功为止</strong>。<br>回到刚才的例子，系统在A扣钱成功的情况下，把要给B“通知”这件事记录在库里（为了保证最高的可靠性可以把通知B系统加钱和扣钱成功这两件事维护在一个本地事务里），通知成功则删除这条记录，通知失败或不确定则依靠定时任务<strong>补偿性地通知我们</strong>，直到我们把状态更新成正确的为止。</li>
</ol>
</li>
<li><p><strong>广播</strong>。 </p>
<p>消息队列的基本功能之一是进行广播。如果没有消息队列，每当一个新的业务方接入，我们都要联调一次新接口。有了消息队列，我们只需要关心消息是否送达了队列，至于谁希望订阅，是下游的事情，无疑极大地减少了开发和联调的工作量。</p>
</li>
<li><p><strong>提速</strong>。假设我们还需要发送邮件，有了消息队列就不需要同步等待，我们可以直接并行处理，而下单核心任务可以更快完成。增强业务系统的异步处理能力。甚至几乎不可能出现并发现象。</p>
</li>
<li><p><strong>削峰和流控</strong>。不对于不需要实时处理的请求来说，当并发量特别大的时候，可以先在消息队列中作缓存，然后陆续发送给对应的服务去处理。</p>
<p><strong>上下游对于事情的处理能力是不同的</strong>。比如，Web前端每秒承受上千万的请求，并不是什么神奇的事情，只需要加多一点机器，再搭建一些LVS负载均衡设备和Nginx等即可。但数据库的处理能力却十分有限，即使使用SSD加分库分表，单机的处理能力仍然在万级。由于成本的考虑，我们不能奢求数据库的机器数量追上前端。</p>
<p><strong>这种问题同样存在于系统和系统之间。</strong>如短信系统可能由于短板效应，速度卡在网关上（每秒几百次请求），跟前端的并发量不是一个数量级。但用户晚上个半分钟左右收到短信，一般是不会有太大问题的。如果没有消息队列，两个系统之间通过协商、滑动窗口等复杂的方案也不是说不能实现。但系统复杂性指数级增长，势必在上游或者下游做存储，并且要处理定时、拥塞等一系列问题。而且每当有处理能力有差距的时候，都需要单独开发一套逻辑来维护这套逻辑。所以，利用中间系统转储两个系统的通信内容，并在下游系统有能力处理这些消息的时候，再处理这些消息，是一套相对较通用的方式。</p>
<p> 总而言之，消息队列不是万能的。对于<strong>需要强事务保证而且延迟敏感的，RPC是优于消息队列的</strong>。<br>对于一些无关痛痒，或者对于别人非常重要但是对于自己不是那么关心的事情，可以利用消息队列去做。<br>支持最终一致性的消息队列，能够用来处理延迟不那么敏感的“分布式事务”场景，而且相对于笨重的分布式事务，可能是更优的处理方式。<br>当上下游系统处理能力存在差距的时候，利用消息队列做一个<strong>通用的“漏斗”</strong>。在下游有能力处理的时候，再进行分发。<br>如果下游有很多系统关心你的系统发出的通知的时候，果断地使用消息队列吧。</p>
</li>
</ol>
<h2 id="消息队列举例"><a href="#消息队列举例" class="headerlink" title="消息队列举例"></a><strong>消息队列举例</strong></h2><p>当今市面上有很多主流的消息中间件，如老牌的ActiveMQ、RabbitMQ，炙手可热的Kafka，阿里巴巴自主开发的Notify、MetaQ、RocketMQ等。</p>
<h3 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a><strong>Kafka</strong></h3><p>Kafka是一种高吞吐量的<strong>分布式发布订阅消息系统</strong>，它可以处理消费者规模的网站中的所有动作流数据。</p>
<p>![屏幕快照 2018-11-03 下午10.21.24](20181103212110299/屏幕快照 2018-11-03 下午10.21.24.png) </p>
<p>Kafka 有如下<strong>特性</strong>：</p>
<ul>
<li>以时间复杂度为O(1)的方式提供消息持久化能力，即使对TB级以上数据也能保证常数时间复杂度的访问性能。</li>
<li>高吞吐率。即使在非常廉价的商用机器上也能做到单机支持每秒100K条以上消息的传输。</li>
<li>支持Kafka Server间的消息分区，及分布式消费，同时保证每个Partition内的消息顺序传输。</li>
<li>同时支持离线数据处理和实时数据处理。</li>
<li>Scale out：支持在线水平扩展。 </li>
</ul>
<p>kafka的<strong>术语</strong></p>
<ul>
<li>Broker：Kafka集群包含一个或多个<strong>服务器</strong>，这种服务器被称为broker。</li>
<li>Topic：每条发布到Kafka集群的消息都有一个类别，这个类别被称为Topic。（物理上不同Topic的消息分开存储，逻辑上一个Topic的消息虽然保存于一个或多个broker上但用户只需指定消息的Topic即可生产或消费数据而不必关心数据存于何处）</li>
<li>Partition：<strong>Partition是物理上的概念</strong>，每个Topic包含一个或多个Partition。</li>
<li>Producer：负责发布消息到Kafka broker。</li>
<li>Consumer：消息消费者，向Kafka broker读取消息的客户端。</li>
<li>Consumer Group：每个Consumer属于一个特定的Consumer Group（可为每个Consumer指定group name，若不指定group name则属于默认的group）。</li>
</ul>
<blockquote>
<p>kafka使用参考我的文章：<a href="https://machine4869.gitee.io/blog/2018/10/08/15390005252096/">Kafka流处理平台</a> </p>
</blockquote>
<h3 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a><strong>RabbitMQ</strong></h3><p>![屏幕快照 2018-11-03 下午10.30.51](20181103212110299/屏幕快照 2018-11-03 下午10.30.51.png) </p>
<p>下面来介绍RabbitMQ里的一些基本定义，主要如下：<br><strong>RabbitMQ Server</strong>：提供消息一条从Producer到Consumer的处理。<br><strong>Exchange</strong>：一边从发布者方接收消息，一边把消息推送到队列。<br>producer只能将消息发送给exchange。而exchange负责将消息发送到queues。Procuder Publish的Message进入了exchange，exchange会根据routingKey处理接收到的消息，判断消息是应该推送到指定的队列还是是多个队列，或者是直接忽略消息。这些规则是通过交换机类型（exchange type）来定义的主要的type有direct,topic,headers,fanout。具体针对不同的场景使用不同的type。<br>queue也是通过这个routing keys来做的绑定。交换机将会对绑定键（binding key）和路由键（routing key）进行精确匹配，从而确定消息该分发到哪个队列。<br><strong>Queue</strong>：消息队列。接收来自exchange的消息，然后再由consumer取出。exchange和queue可以一对一，也可以一对多，它们的关系通过routingKey来绑定。<br><strong>Producer</strong>：Client A &amp; B,生产者，消息的来源,消息必须发送给exchange。而不是直接给queue<br><strong>Consumer</strong>：Client 1，2，3消费者，直接从queue中获取消息进行消费，而不是从exchange中获取消息进行消费。</p>
<blockquote>
<p>RabbitMQ的使用：略</p>
</blockquote>
<h1 id="第14章-应用拆分思路"><a href="#第14章-应用拆分思路" class="headerlink" title="第14章 应用拆分思路"></a>第14章 应用拆分思路</h1><p>前面我们已经提到单个服务器再优化，它的处理能力都是有上限的，因此我们选择多扩容以及使用缓存和消息队列等对程序进行优化。</p>
<p>下面介绍另一种方法，随着项目需求完成越来越多，应用自然也会越来越大，架构师将一个应用整体拆分成多个应用。</p>
<h2 id="拆分的原则"><a href="#拆分的原则" class="headerlink" title="拆分的原则"></a><strong>拆分的原则</strong></h2><ol>
<li><p>业务优先，确定业务边界</p>
</li>
<li><p>循序渐进，边拆分边测试</p>
</li>
<li><p>兼顾技术：重构、分层</p>
</li>
<li><p>可靠测试</p>
</li>
</ol>
<h2 id="拆分的思考"><a href="#拆分的思考" class="headerlink" title="拆分的思考"></a><strong>拆分的思考</strong></h2><ol>
<li><p>应用之间的通信：RPC（dubbo等）、消息队列</p>
<p>消息传输适用于传输数据包小但是数据量大，对实时性要求不高的场景。比如下单成功后通过短信通知用户。而选用RPC框架实时性更高一些。<a href="https://blog.csdn.net/u013521220/article/details/70157956" target="_blank" rel="noopener">你应该知道的 RPC 原理</a></p>
</li>
<li><p>应用之间的数据库设计：每个应用都有独立的数据库</p>
</li>
<li><p>避免事务操作跨应用，分布式事务是一个非常消耗资源的问题。这样应用和应用的耦合度降低。</p>
</li>
</ol>
<h2 id="框架举例"><a href="#框架举例" class="headerlink" title="框架举例"></a>框架举例</h2><p>服务化——Dubbo</p>
<p>微服务——SpringCloud</p>
<h3 id="Dubbo"><a href="#Dubbo" class="headerlink" title="Dubbo"></a>Dubbo</h3><p>Dubbo是一种分布式的服务框架 ![屏幕快照 2018-11-04 下午10.21.03](20181103212110299/屏幕快照 2018-11-04 下午10.21.03.png)</p>
<h3 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h3><p>微服务</p>
<p>![屏幕快照 2018-11-04 下午10.38.28](20181103212110299/屏幕快照 2018-11-04 下午10.38.28.png)</p>
<p>![屏幕快照 2018-11-04 下午10.39.44](20181103212110299/屏幕快照 2018-11-04 下午10.39.44.png)</p>
<p><strong>要实践微服务要解决4个问题</strong>：</p>
<ol>
<li><p>客户端如何访问这些服务</p>
<p>API Gateway提供统一的服务入口，对前台透明，同时可以聚合后台的服务，提供安全过滤流控等api的管理功能</p>
</li>
<li><p>服务之间是如何通信的</p>
<p>异步的话使用消息队列，同步调用使用REST或者是RPC，Rest可以使用springboot，RPC通常使用Dubbo</p>
<p>同步调用一致性强但是出现调用问题，<strong>REST一般基于http实现</strong>，能够跨客户端，同时对客户端没有更多的要求。</p>
<p><strong>RPC的传输协议更高效</strong>，安全也更加可控。特别是在一个<strong>公司内部</strong>如果有统一的开发规范和统一的框架，它的开发效率会更加明显。</p>
<p>而异步消息在分布式系统中有特别广泛的应用，它既能减少调用服务之间的耦合，又能成为<strong>调用之间的缓冲</strong>，确保消息积压不会冲垮被调用方。同时保证调用方的用户的体验，继续干自己的活。付出的代价是一致性的减慢，需要接受数据的最终一致性。</p>
</li>
<li><p>如何实现如此多服务</p>
<p>在微服务架构中一般每一服务都会<strong>拷贝进行负载均衡</strong>，服务如何相互感知，如何相互管理，这就是<strong>服务发现</strong>的问题了，一般都是进行服务注册信息的分布式管理。</p>
</li>
<li><p>服务挂了该如何解决，有什么备份方案和应急处理机制</p>
<p>分布式最大的特性就是<strong>网络是不可靠</strong>的，当系统是由一系列的调用链组成的时候，其中任何一个出问题都不至于影响到整个链路。</p>
<p>相应的手段有：重试机制、应用的限流、熔断机制、负载均衡、系统降级</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Java并发编程与高并发解决方案</category>
      </categories>
      <tags>
        <tag>Java并发编程与高并发解决方案</tag>
      </tags>
  </entry>
  <entry>
    <title>高并发解决方案（1）：扩容&amp;缓存</title>
    <url>/2018/10/31/20181031100154042/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[TOC]</p>
<h1 id="第11章-扩容思路"><a href="#第11章-扩容思路" class="headerlink" title="第11章 扩容思路"></a>第11章 扩容思路</h1><h2 id="为什么要扩容"><a href="#为什么要扩容" class="headerlink" title="为什么要扩容"></a>为什么要扩容</h2><p> 每个线程都有自己的工作内存, 占用内存大小取决于工作内存里变量的多少与大小 , 单个线程占用内存通常不会很大</p>
<p>但是随着并发的线程不断的增加 , 从成百上千, 甚至几十万 , 占用的内存就会越来越多.这时候可能就要考虑给系统扩容了 , 简单点的 升级内存, 复杂点的 , 增加服务器 , 分担压力.</p>
<h2 id="两种方式"><a href="#两种方式" class="headerlink" title="两种方式"></a>两种方式</h2><ul>
<li>垂直扩容：提高系统部件能力。但会增大单个服务中其他软件设施的依赖与管理、服务内部复杂度</li>
<li>水平扩容：增加更多系统成员。但会增加网络、数据库IO开销、管理多个服务器的难度</li>
</ul>
<h2 id="扩容-数据库"><a href="#扩容-数据库" class="headerlink" title="扩容-数据库"></a>扩容-数据库</h2><ul>
<li>读操作扩展：假如网站是读操作比较多，比如博客这类。通过通过关系型数据库进行垂直扩展是个不错的选择，并且结合<strong>memcathe、redis、CDN等构建一个健壮的缓存系统</strong>。如果系统超负荷运行，将更多的数据放在缓存中来缓解系统的读压力。采用水平扩容没有太大的意义，因为性能的瓶颈不在写操作，所以不需要实时去完成，用更多的服务器来分担压力性价比太低。所以针对单个系统去强化它的读性能就可以了</li>
<li>写操作扩展：假如写操作比较多，比如大型网站的交易系统，可考虑可<strong>水平扩展的数据存储方式，比如Cassandra、Hbase等</strong>。和大多数的关系型数据库不同，这种数据存储会随着增长增加更多的节点。也可以考虑垂直扩容提升单个数据库的性能，但会发现<strong>资金与硬盘的IO能力是有限的</strong>，所以需要增加更多数据库来分担写的压力。</li>
</ul>
<h1 id="第12章-缓存思路"><a href="#第12章-缓存思路" class="headerlink" title="第12章 缓存思路"></a>第12章 缓存思路</h1><h2 id="12-1-特征、场景及组件介绍"><a href="#12-1-特征、场景及组件介绍" class="headerlink" title="12-1 特征、场景及组件介绍"></a>12-1 特征、场景及组件介绍</h2><p>应用需要支撑大量并发量，但数据库的性能有限，所以使用缓存来减少数据库压力与提高访问性能。</p>
<p>![屏幕快照 2018-10-31 上午11.04.47](20181031100154042/屏幕快照 2018-10-31 上午11.04.47.png) </p>
<p>缓存的使用可以出现在1到4的各个环节中，每个环节的方案他们都各有特点。</p>
<h3 id="特征"><a href="#特征" class="headerlink" title="特征"></a><strong>特征</strong></h3><ul>
<li><p>命中率 = 命中数 / （命中数 + 没有命中数）</p>
</li>
<li><p>最大空间：缓存最大空间一旦缓存中元素数量超过这个值（或者缓存数据所占空间超过其最大支持空间），那么将会触发缓存启动清空策略根据不同的场景合理的设置最大元素值往往可以一定程度上提高缓存的命中率，从而更有效的时候缓存。</p>
</li>
<li><p>清空策略：FIFO/LFU/LRU/过期时间/随机</p>
<p>FIFO：最先进入缓存的数据，在缓存空间不足时被清除，为了保证最新数据可用，保证实时性</p>
<p>LFU(Least Frequently Used)：最近最不常用，基于访问次数，去除命中次数最少的元素，保证高频数据有效性</p>
<p>LRU(Least Recently Used)：最近最少使用，基于访问时间，在被访问过的元素中去除最久未使用的元素，保证热点数据的有效性</p>
</li>
</ul>
<h3 id="影响缓存命中率的因素"><a href="#影响缓存命中率的因素" class="headerlink" title="影响缓存命中率的因素"></a><strong>影响缓存命中率的因素</strong></h3><ol>
<li><p>业务场景和业务需求</p>
<p>缓存通常适合读多写少的业务场景，反之的使用意义并不多，命中率会很低。业务需求也决定了实时性的要求，直接影响到过期时间和更新策略，实时性要求越低越适合缓存。</p>
</li>
<li><p>缓存的设计（策略和粒度）</p>
<p>通常情况下缓存的粒度越小，命中率越高。比如说缓存一个用户信息的对象，只有当这个用户的信息发生变化的时候才更新缓存，而如果是缓存一个集合的话，集合中任何一个对象发生变化都要重新更新缓存。</p>
<p>当数据发生变化时，直接更新缓存的值比移除缓存或者让缓存过期它的命中率更高，不过这个时候系统的复杂度过高。</p>
</li>
<li><p>缓存的容量和基础设施</p>
<p>缓存的容量有限就会容易引起缓存的失效和被淘汰。目前多数的缓存框架和中间件都采用LRU这个算法。同时采用缓存的技术选型也是至关重要的，比如采用本地内置的应用缓存，就比较容易出现单机瓶颈。而采用分布式缓存就更加容易扩展。所以需要做好系统容量规划，系统是否可扩展。</p>
<p>​</p>
</li>
</ol>
<h3 id="缓存分类"><a href="#缓存分类" class="headerlink" title="缓存分类"></a><strong>缓存分类</strong></h3><p><strong>根据缓存和应用的耦合度</strong>：</p>
<ul>
<li><p>本地缓存：编程实现（成员变量、局部变量、静态变量）、Guava Cache</p>
<p>本地缓存最大的<strong>优点</strong>在于它在应用进程的内部，请求缓存非常的快速，没有过多的网络开销。在单应用中不需要集群支持，集群的情况下各节点不需要互相通知的情况下使用本地缓存比较合适。</p>
<p><strong>缺点</strong>是因为本地缓存跟应用程序耦合，多个应用程序无法直接共享缓存，各应用节点都需要维护自己单独的缓存，有时也是对内存的一种浪费。</p>
</li>
<li><p>分布式缓存：Memcache、Redis</p>
<p>分布式缓存指的是应用分离的缓存服务，最大的优点就是自身就是一个独立的应用，与本地应用是隔离的，多个应用直接共享缓存。</p>
</li>
</ul>
<p><strong>根据缓存介质</strong></p>
<p>虽然从硬件介质上来看，无非就是内存和硬盘两种，但从技术上，可以分成内存、硬盘文件、数据库。</p>
<ul>
<li><strong>内存：</strong>将缓存存储于内存中是最快的选择，无需额外的I/O开销，但是内存的缺点是没有持久化落地物理磁盘，一旦应用异常break down而重新启动，数据很难或者无法复原。</li>
<li><strong>硬盘：</strong>一般来说，很多缓存框架会结合使用内存和硬盘，在内存分配空间满了或是在异常的情况下，可以被动或主动的将内存空间数据持久化到硬盘中，达到释放空间或备份数据的目的。</li>
<li><strong>数据库：</strong>前面有提到，增加缓存的策略的目的之一就是为了减少数据库的I/O压力。现在使用数据库做缓存介质是不是又回到了老问题上了？其实，数据库也有很多种类型，像那些不支持SQL，只是简单的key-value存储结构的特殊数据库（如BerkeleyDB和Redis），响应速度和吞吐量都远远高于我们常用的关系型数据库等。</li>
</ul>
<h3 id="缓存组件介绍"><a href="#缓存组件介绍" class="headerlink" title="缓存组件介绍"></a><strong>缓存组件介绍</strong></h3><p><strong>本地缓存Guava Cache</strong></p>
<p>Guava Cache是Google开源的Java重用工具集库Guava里的一款缓存工具，它的设计灵感是CuncurentHashMap</p>
<p>![屏幕快照 2018-11-01 下午6.55.09](20181031100154042/屏幕快照 2018-11-01 下午6.55.09.png) </p>
<p>Guava Cache继承了ConcurrentHashMap的思路，使用多个segments方式的细粒度锁，在保证线程安全的同时，支持高并发场景需求。Cache类似于Map，它是存储键值对的集合，不同的是它还需要处理evict、expire、dynamic load等算法逻辑，需要一些额外信息来实现这些操作。对此，根据面向对象思想，需要做方法与数据的关联封装. </p>
<p>其主要实现的缓存功能有：</p>
<ul>
<li>自动将entry节点加载进缓存结构中；</li>
<li>当缓存的数据超过设置的最大值时，使用LRU算法移除；</li>
<li>具备根据entry节点上次被访问或者写入时间计算它的过期机制；</li>
<li>缓存的key被封装在WeakReference引用内；</li>
<li>缓存的Value被封装在WeakReference或SoftReference引用内；</li>
<li>统计缓存使用过程中命中率、异常率、未命中率等统计数据。</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.machine.concurrency.example.cache;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.common.cache.CacheBuilder;</span><br><span class="line"><span class="keyword">import</span> com.google.common.cache.CacheLoader;</span><br><span class="line"><span class="keyword">import</span> com.google.common.cache.LoadingCache;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GuavaCacheExample1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        LoadingCache&lt;String, Integer&gt; cache = CacheBuilder.newBuilder()</span><br><span class="line">                .maximumSize(<span class="number">10</span>) <span class="comment">// 最多存放10个数据</span></span><br><span class="line">                .expireAfterWrite(<span class="number">10</span>, TimeUnit.SECONDS) <span class="comment">// 缓存10秒</span></span><br><span class="line">                .recordStats() <span class="comment">// 开启记录状态数据功能</span></span><br><span class="line">                .build(<span class="keyword">new</span> CacheLoader&lt;String, Integer&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Integer <span class="title">load</span><span class="params">(String key)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"&#123;&#125;"</span>, cache.getIfPresent(<span class="string">"key1"</span>)); <span class="comment">// null</span></span><br><span class="line">        cache.put(<span class="string">"key1"</span>, <span class="number">1</span>);</span><br><span class="line">        log.info(<span class="string">"&#123;&#125;"</span>, cache.getIfPresent(<span class="string">"key1"</span>)); <span class="comment">// 1</span></span><br><span class="line">        cache.invalidate(<span class="string">"key1"</span>);</span><br><span class="line">        log.info(<span class="string">"&#123;&#125;"</span>, cache.getIfPresent(<span class="string">"key1"</span>)); <span class="comment">// null</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.info(<span class="string">"&#123;&#125;"</span>, cache.get(<span class="string">"key2"</span>)); <span class="comment">// -1</span></span><br><span class="line">            cache.put(<span class="string">"key2"</span>, <span class="number">2</span>);</span><br><span class="line">            log.info(<span class="string">"&#123;&#125;"</span>, cache.get(<span class="string">"key2"</span>)); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">            log.info(<span class="string">"&#123;&#125;"</span>, cache.size()); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt; <span class="number">13</span>; i++) &#123;</span><br><span class="line">                cache.put(<span class="string">"key"</span> + i, i);</span><br><span class="line">            &#125;</span><br><span class="line">            log.info(<span class="string">"&#123;&#125;"</span>, cache.size()); <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line">            log.info(<span class="string">"&#123;&#125;"</span>, cache.getIfPresent(<span class="string">"key2"</span>)); <span class="comment">// null</span></span><br><span class="line"></span><br><span class="line">            Thread.sleep(<span class="number">11000</span>);</span><br><span class="line"></span><br><span class="line">            log.info(<span class="string">"&#123;&#125;"</span>, cache.get(<span class="string">"key5"</span>)); <span class="comment">// -1</span></span><br><span class="line"></span><br><span class="line">            log.info(<span class="string">"&#123;&#125;,&#123;&#125;"</span>, cache.stats().hitCount(), cache.stats().missCount());</span><br><span class="line"></span><br><span class="line">            log.info(<span class="string">"&#123;&#125;,&#123;&#125;"</span>, cache.stats().hitRate(), cache.stats().missRate());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"cache exception"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>





<p><strong>Memcache</strong></p>
<p>memcached是应用较广的开源分布式缓存产品之一，它本身其实不提供分布式解决方案。在服务端，memcached集群环境实际就是一个个memcached服务器的堆积，环境搭建较为简单；cache的分布式主要是在客户端实现，通过<strong>客户端的路由处理来达到分布式解决方案的目的</strong>。客户端做路由的原理非常简单，应用服务器在每次存取某key的value时，通过某种算法把key映射到某台memcached服务器nodeA上，因此这个key所有操作都在nodeA上</p>
<p>左： memcached客户端路由图</p>
<p>右：memcached一致性hash示例图</p>
<p>![屏幕快照 2018-11-01 下午7.03.24](20181031100154042/屏幕快照 2018-11-01 下午7.03.24.png) </p>
<p> memcache客户端<strong>采用一致性hash算法</strong>作为路由策略，相对于一般hash（如简单取模）的算法，一致性hash算法除了计算key的hash值外，还会计算每个server对应的hash值，然后将这些hash值映射到一个有限的值域上（比如0~2^32）。通过寻找hash值大于hash(key)的最小server作为存储该key数据的目标server。如果找不到，则直接把具有最小hash值的server作为目标server。同时，一定程度上，<strong>解决了扩容问题，增加或删除单个节点，对于整个集群来说，不会有大的影响</strong>。最近版本，增加了虚拟节点的设计，进一步提升了可用性。</p>
<blockquote>
<p><a href="https://www.cnblogs.com/lpfuture/p/5796398.html" target="_blank" rel="noopener">一致性哈希算法原理</a></p>
</blockquote>
<p>memcache内存管理机制</p>
<p>![屏幕快照 2018-11-01 下午7.09.51](20181031100154042/屏幕快照 2018-11-01 下午7.09.51.png) </p>
<ul>
<li>memcached是一个高效的分布式内存cache，了解memcached的内存管理机制，才能更好的掌握memcached，让我们可以针对我们数据特点进行调优，让其更好的为我所用。<strong>我们知道memcached仅支持基础的key-value键值对类型数据存储</strong>。在memcached内存结构中有两个非常重要的概念：slab和chunk。 </li>
<li>每个page的默认大小是1M，trunk是真正存放数据的地方，memcache会根据value值的大小找到接近大小的slab</li>
</ul>
<p><strong>Redis</strong></p>
<p>Redis是一个远程内存数据库（非关系型数据库），性能强劲，具有复制特性以及解决问题而生的独一无二的数据模型。它可以存储键值对与5种不同类型的值之间的映射，可以将存储在内存的键值对数据持久化到硬盘，可以使用复制特性来扩展读性能，还可以使用客户端分片来扩展写性能。</p>
<p>![屏幕快照 2018-11-01 下午7.46.18](20181031100154042/屏幕快照 2018-11-01 下午7.46.18.png) </p>
<p>Redis具备以下特点：</p>
<ul>
<li>异常快速: Redis数据库完全在<em>内存</em>中，因此处理速度非常快，每秒能执行约11万集合，每秒约81000+条记录。</li>
<li>数据持久化： redis支持数据持久化，可以将内存中的数据存储到磁盘上，方便在宕机等突发情况下快速恢复。</li>
<li>支持丰富的数据类型: 相比许多其他的键值对存储数据库，Redis拥有一套较为丰富的数据类型。</li>
<li>数据一致性： 所有Redis操作是原子的，这保证了如果两个客户端同时访问的Redis服务器将获得更新后的值。</li>
<li>多功能实用工具： Redis是一个多实用的工具，可以在多个用例如缓存，消息，队列使用(Redis原生支持发布/订阅)，任何短暂的数据，应用程序，如 Web应用程序会话，网页命中计数等。</li>
</ul>
<p>适用场景：</p>
<ol>
<li><p>取最新N个数据的操作</p>
</li>
<li><p>排行榜类似的应用</p>
</li>
<li><p>精准设定过期时间的应用</p>
</li>
<li><p>计数器的应用</p>
</li>
<li><p>唯一性检查</p>
</li>
<li><p>实时系统，队列系统，最基础的缓存功能</p>
<p>​</p>
</li>
</ol>
<h2 id="12-2-redis的使用"><a href="#12-2-redis的使用" class="headerlink" title="12-2 redis的使用"></a>12-2 redis的使用</h2><p>参考我的文章：</p>
<p><a href="https://machine4869.gitee.io/blog/2018/06/04/15326723152601/">redis学习笔记</a>     <a href="https://machine4869.gitee.io/blog/2018/07/20/15328488619832/">bootdo已实现(1)</a></p>
<h2 id="12-3-高并发场景问题及实战"><a href="#12-3-高并发场景问题及实战" class="headerlink" title="12-3 高并发场景问题及实战"></a>12-3 高并发场景问题及实战</h2><h3 id="高并发场景常见问题"><a href="#高并发场景常见问题" class="headerlink" title="高并发场景常见问题"></a>高并发场景常见问题</h3><ul>
<li>缓存一致性</li>
<li>缓存并发问题</li>
<li>缓存穿透问题</li>
<li>缓存的雪崩现象</li>
</ul>
<p>1、缓存一致性问题</p>
<p>当数据时效性要求很高时，<strong>需要保证缓存中的数据与数据库中的保持一致</strong>，而且需要保证缓存节点和副本中的数据也保持一致，不能出现差异现象。这就比较依赖缓存的过期和更新策略。一般会在数据发生更改的时，主动更新缓存中的数据或者移除对应的缓存。</p>
<p>包含4种情况：</p>
<p>![屏幕快照 2018-11-01 下午10.10.06](20181031100154042/屏幕快照 2018-11-01 下午10.10.06.png) </p>
<p>2、缓存并发问题</p>
<p>缓存过期后将尝试从后端数据库获取数据，这是一个看似合理的流程。但是，在高并发场景下，有可能多个请求并发的去从数据库获取数据，对后端数据库造成极大的冲击，甚至<strong>导致 “雪崩”现象</strong>。此外，当某个缓存key在被更新时，同时也可能被大量请求在获取，这也会导致一致性的问题。那如何避免类似问题呢？我们会想到<strong>类似“锁”的机制</strong>，在缓存更新或者过期的情况下，先尝试获取到锁，当更新或者从数据库获取完成后再释放锁，其他的请求只需要牺牲一定的等待时间，即可直接从缓存中继续获取数据。</p>
<p>![屏幕快照 2018-11-01 下午10.13.51](20181031100154042/屏幕快照 2018-11-01 下午10.13.51.png) </p>
<p>3、缓存穿透问题</p>
<p>真正的缓存穿透应该是这样的：</p>
<p>在高并发场景下，如果某一个<strong>key被高并发访问，没有被命中</strong>，出于对容错性考虑，会尝试去从后端数据库中获取，从而导致了大量请求达到数据库，而当该key对应的数据本身就是空的情况下（查询null时没有缓存），这就导致<strong>数据库中并发的去执行了很多不必要的查询操作</strong>，从而导致巨大冲击和压力。</p>
<p>![屏幕快照 2018-11-01 下午10.19.34](20181031100154042/屏幕快照 2018-11-01 下午10.19.34.png) </p>
<p>可以通过下面的几种常用方式来<strong>避免缓存传统问题</strong>：</p>
<ul>
<li><p>缓存空对象</p>
<p>对查询结果为空的对象也进行缓存，如果是集合，可以缓存一个空的集合（非null），如果是缓存单个对象，可以通过字段标识来区分。这样避免请求穿透到后端数据库。同时，也需要保证缓存数据的时效性。这种方式实现起来成本较低，比较适合命中不高，但可能被频繁更新的数据。</p>
</li>
<li><p>单独过滤处理</p>
<p>对所有可能对应数据为空的key进行统一的存放，并在请求前做拦截，这样避免请求穿透到后端数据库。这种方式实现起来相对复杂，比较适合命中不高，但是更新不频繁的数据。</p>
</li>
</ul>
<p>4、缓存颠簸问题</p>
<p>缓存的颠簸问题，有些地方可能被成为“缓存抖动”，可以看做是一种比“雪崩”更轻微的故障，但是也会在一段时间内对系统造成冲击和性能影响。一般是<strong>由于缓存节点故障导致</strong>。业内推荐的做法是通过一致性Hash算法来解决。这里不做过多阐述。</p>
<p>5、缓存的雪崩现象</p>
<p>缓存雪崩就是指由于缓存的原因，导致<strong>大量请求到达后端数据库</strong>，从而导致数据库崩溃，整个系统崩溃，发生灾难。导致这种现象的原因有很多种，上面提到的“缓存并发”，“缓存穿透”，“缓存颠簸”等问题，其实都可能会导致缓存雪崩现象发生。这些问题也可能会被恶意攻击者所利用。还有一种情况，例如某个时间点内，系统预加载的<strong>缓存周期性集中失效</strong>了，也可能会导致雪崩。为了避免这种周期性失效，可以通过设置不同的过期时间，来错开缓存过期，从而避免缓存集中失效。</p>
<p>![屏幕快照 2018-11-01 下午10.30.16](20181031100154042/屏幕快照 2018-11-01 下午10.30.16.png) </p>
<p>从应用架构角度，我们可以通过<strong>限流、降级、熔断</strong>等手段来降低影响，也可以通过<strong>多级缓存</strong>来避免这种灾难。</p>
<p>此外，从整个研发体系流程的角度，应该加强<strong>压力测试</strong>，尽量模拟真实场景，尽早的暴露问题从而防范。</p>
<h3 id="高并发缓存应用案例-股票分时线"><a href="#高并发缓存应用案例-股票分时线" class="headerlink" title="高并发缓存应用案例-股票分时线"></a>高并发缓存应用案例-股票分时线</h3><p>![屏幕快照 2018-11-01 下午10.37.55](20181031100154042/屏幕快照 2018-11-01 下午10.37.55.png) </p>
<ul>
<li>利用guava cache缓存最近几分钟内所有股票的分时数据，key是时间点（单位到分钟），一分钟内有多次变动时使用最后的数据覆盖，保证每只股票每分钟只缓存一条数据</li>
<li>启动一个定时任务，每分钟将最近几分钟的数据都写到redis里，保证redis里的数据一直是最新的。保存使用的是redis hash结构，key是时间点。用户访问分时线时只需从redis取出当前股票缓存数据。</li>
<li>…</li>
</ul>
<blockquote>
<p>参考：<a href="https://www.imooc.com/article/20918" target="_blank" rel="noopener">Redis在股票分时K线图计算的实践</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Java并发编程与高并发解决方案</category>
      </categories>
      <tags>
        <tag>Java并发编程与高并发解决方案</tag>
      </tags>
  </entry>
  <entry>
    <title>并发编程与线程安全（6）：线程池 Executor&amp;并发拓展</title>
    <url>/2018/10/30/20181030111752438/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[TOC]</p>
<h1 id="第9章-线程池"><a href="#第9章-线程池" class="headerlink" title="第9章 线程池"></a>第9章 线程池</h1><h2 id="new-Thread的弊端"><a href="#new-Thread的弊端" class="headerlink" title="new Thread的弊端"></a>new Thread的弊端</h2><ul>
<li>每次new Thread 新建对象，性能差</li>
<li>线程缺乏统一管理，可能无限制的新建线程，相互竞争，可能占用过多的系统资源导致死机或者OOM（out of memory 内存溢出），这种问题的原因不是因为单纯的new一个Thread，而是可能因为程序的bug或者设计上的缺陷导致不断new Thread造成的。</li>
<li>缺少更多功能，如更多执行、定期执行、线程中断。</li>
</ul>
<h2 id="线程池的好处"><a href="#线程池的好处" class="headerlink" title="线程池的好处"></a>线程池的好处</h2><ul>
<li>重用存在的线程，减少对象创建、消亡的开销，性能好</li>
<li>可有效控制最大并发线程数，提高系统资源利用率，同时可以避免过多资源竞争，避免阻塞。</li>
<li>提供定时执行、定期执行、单线程、并发数控制等功能。</li>
</ul>
<h2 id="ThreadPoolExecutor"><a href="#ThreadPoolExecutor" class="headerlink" title="ThreadPoolExecutor"></a>ThreadPoolExecutor</h2><p><strong>参数说明</strong>：</p>
<p>ThreadPoolExecutor一共有七个参数，这七个参数配合起来，构成了线程池强大的功能。</p>
<ul>
<li>corePoolSize：核心线程数量</li>
<li>maximumPoolSize：线程最大线程数</li>
<li>workQueue：阻塞队列，存储等待执行的任务，很重要，会对线程池运行过程产生重大影响</li>
</ul>
<blockquote>
<p>corePoolSize、maximumPoolSize、workQueue 三者关系：如果运行的线程数小于corePoolSize的时候，直接创建新线程来处理任务。即使线程池中的其他线程是空闲的。如果运行中的线程数大于corePoolSize且小于maximumPoolSize时，那么只有当workQueue满的时候才创建新的线程去处理任务(不满时进入workQueue队列)。如果corePoolSize与maximumPoolSize是相同的，那么创建的线程池大小是固定的。这时有新任务提交，当workQueue未满时，就把请求放入workQueue中。等待空线程从workQueue取出任务。如果workQueue此时也满了，那么就使用另外的拒绝策略参数去执行拒绝策略。</p>
</blockquote>
<p>workQueue：</p>
<blockquote>
<p>当我们提交一个新的任务到线程池，线程池会根据当前池中正在运行的线程数量来决定该任务的处理方式。workQueue处理方式有三种： </p>
<ol>
<li>直接切换（SynchronusQueue） </li>
<li>无界队列（LinkedBlockingQueue）能够创建的最大线程数为corePoolSize,这时maximumPoolSize就不会起作用了。当线程池中所有的核心线程都是运行状态的时候，新的任务提交就会放入等待队列中。 </li>
<li>有界队列（ArrayBlockingQueue）最大maximumPoolSize，能够降低资源消耗，但是这种方式使得线程池对线程调度变的更困难。因为线程池与队列容量都是有限的。所以想让线程池的吞吐率和处理任务达到一个合理的范围，又想使我们的线程调度相对简单，并且还尽可能降低资源的消耗，我们就需要合理的限制这两个数量 </li>
</ol>
<p>分配技巧： [如果想降低资源的消耗包括降低cpu使用率、操作系统资源的消耗、上下文切换的开销等等，可以设置一个较大的队列容量和较小的线程池容量，这样会降低线程池的吞吐量。如果我们提交的任务经常发生阻塞，我们可以调整maximumPoolSize。如果我们的队列容量较小，我们需要把线程池大小设置的大一些，这样cpu的使用率相对来说会高一些。但是如果线程池的容量设置的过大，提高任务的数量过多的时候，并发量</p>
<p>会增加，那么线程之间的调度就是一个需要考虑的问题。这样反而可能会降低处理任务的吞吐量。]</p>
</blockquote>
<ul>
<li><p>keepAliveTime：线程没有任务执行时最多保持多久时间终止（当线程中的线程数量大于corePoolSize的时候，如果这时没有新的任务提交核心线程外的线程不会立即销毁，而是等待，直到超过keepAliveTime）</p>
</li>
<li><p>unit：keepAliveTime的时间单位</p>
</li>
<li><p>threadFactory：线程工厂，用来创建线程，有一个默认的工场来创建线程，这样新创建出来的线程有相同的优先级，是非守护线程、设置好了名称）</p>
</li>
<li><p>rejectHandler：当拒绝处理任务时(阻塞队列满)的策略（AbortPolicy默认策略直接抛出异常、CallerRunsPolicy用调用者所在的线程执行任务、DiscardOldestPolicy丢弃队列中最靠前的任务并执行当前任务、DiscardPolicy直接丢弃当前任务） </p>
<p>![屏幕快照 2018-10-30 上午11.59.31](20181030111752438/屏幕快照 2018-10-30 上午11.59.31.png) </p>
</li>
</ul>
<p><strong>初始化方法</strong>：</p>
<p>![屏幕快照 2018-10-30 下午12.01.42](20181030111752438/屏幕快照 2018-10-30 下午12.01.42.png) </p>
<p><strong>线程池生命周期</strong>： </p>
<p>![屏幕快照 2018-10-30 下午4.49.59](20181030111752438/屏幕快照 2018-10-30 下午4.49.59.png) </p>
<ul>
<li>running：能接受新提交的任务，也能处理阻塞队列中的任务</li>
<li>shutdown：不能处理新的任务，但是能继续处理阻塞队列中任务</li>
<li>stop：不能接收新的任务，也不处理队列中的任务(把当前任务做完)</li>
<li>tidying：如果所有的任务都已经终止了，这时有效线程数为0</li>
<li>terminated：最终状态 </li>
</ul>
<p><strong>其他方法：</strong></p>
<table>
<thead>
<tr>
<th>序号</th>
<th>方法名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>execute()</td>
<td>提交任务，交给线程池执行</td>
</tr>
<tr>
<td>2</td>
<td>submit()</td>
<td>提交任务，能够返回执行结果 execute+Future</td>
</tr>
<tr>
<td>3</td>
<td>shutdown()</td>
<td>关闭线程池，等待任务都执行完</td>
</tr>
<tr>
<td>4</td>
<td>shutdownNow()</td>
<td>关闭线程池，不等待任务执行完</td>
</tr>
<tr>
<td>5</td>
<td>getTaskCount()</td>
<td>线程池已执行和未执行的任务总数</td>
</tr>
<tr>
<td>6</td>
<td>getCompleteTaskCount()</td>
<td>已完成的任务数量</td>
</tr>
<tr>
<td>7</td>
<td>getPoolSize()</td>
<td>线程池当前的线程数量</td>
</tr>
<tr>
<td>8</td>
<td>getActiveCount()</td>
<td>当前线程池中正在执行任务的线程数量</td>
</tr>
</tbody></table>
<h2 id="线程池类图"><a href="#线程池类图" class="headerlink" title="线程池类图"></a>线程池类图</h2><p>![屏幕快照 2018-10-30 下午5.18.50](20181030111752438/屏幕快照 2018-10-30 下午5.18.50.png) </p>
<p>在线程池的类图中，我们最常使用的是最下边的Executors,用它来创建线程池使用线程。那么在上边的类图中，包含了一个Executor框架，它是一个根据一组执行策略的调用调度执行和控制异步任务的框架，目的是提供一种将任务提交与任务如何运行分离开的机制。它包含了三个executor接口：</p>
<ul>
<li>Executor:运行新任务的简单接口</li>
<li>ExecutorService：扩展了Executor，添加了用来管理执行器生命周期和任务生命周期的方法</li>
<li>ScheduleExcutorService：扩展了ExecutorService，支持Future和定期执行任务</li>
</ul>
<h2 id="使用Executor创建线程池"><a href="#使用Executor创建线程池" class="headerlink" title="使用Executor创建线程池"></a>使用Executor创建线程池</h2><p>使用Executor可以创建四种线程池：</p>
<p><strong>1、Executors.newCachedThreadPool</strong> </p>
<p>创建一个可缓存的线程池，如果线程池的长度超过了处理的需要，可以灵活回收空闲线程。如果没有可回收的就新建线程。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//源码：</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newCachedThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE,</span><br><span class="line">                                  <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">                                  <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>值得注意的一点是，newCachedThreadPool的返回值是ExecutorService类型，该类型只包含基础的线程池方法，但却不包含线程监控相关方法，因此在使用返回值为ExecutorService的线程池类型创建新线程时要考虑到具体情况。 </p>
<p>![屏幕快照 2018-10-30 下午5.36.22](20181030111752438/屏幕快照 2018-10-30 下午5.36.22.png) </p>
<p> 使用：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolExample1</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> index = i;</span><br><span class="line">            executorService.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    log.info(<span class="string">"task:&#123;&#125;"</span>, index);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p><strong>2、newFixedThreadPool</strong> </p>
<p>定长线程池，可以线程现成的最大并发数，超出在队列等待</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//源码：</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> nThreads)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,</span><br><span class="line">                                  <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                  <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>使用</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolExample2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> index = i;</span><br><span class="line">            executorService.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    log.info(<span class="string">"task:&#123;&#125;"</span>, index);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p><strong>3、newSingleThreadExecutor</strong> </p>
<ul>
<li>单线程化的线程池，用唯一的一个共用线程执行任务，保证所有任务按指定顺序执行（FIFO、优先级…）</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//源码</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newSingleThreadExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> FinalizableDelegatedExecutorService</span><br><span class="line">        (<span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">                                <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>使用：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolExample3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ExecutorService executorService = Executors.newSingleThreadExecutor();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//会按顺序执行</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> index = i;</span><br><span class="line">            executorService.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    log.info(<span class="string">"task:&#123;&#125;"</span>, index);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p><strong>4、newScheduledThreadPool</strong> </p>
<p>定长线程池，支持定时和周期任务执行</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//源码：</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ScheduledExecutorService <span class="title">newScheduledThreadPool</span><span class="params">(<span class="keyword">int</span> corePoolSize)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ScheduledThreadPoolExecutor(corePoolSize);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ScheduledThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(corePoolSize, Integer.MAX_VALUE, <span class="number">0</span>, NANOSECONDS,<span class="comment">//此处super指的是ThreadPoolExecutor</span></span><br><span class="line">          <span class="keyword">new</span> DelayedWorkQueue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>使用：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolExample4</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ScheduledExecutorService executorService = Executors.newScheduledThreadPool(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">          <span class="comment">//-- 延迟3秒执行</span></span><br><span class="line"><span class="comment">//        executorService.schedule(new Runnable() &#123;</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public void run() &#123;</span></span><br><span class="line"><span class="comment">//                log.warn("schedule run");</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;, 3, TimeUnit.SECONDS);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//-- 延迟1秒执行，每3秒执行一次</span></span><br><span class="line">        executorService.scheduleAtFixedRate(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                log.warn(<span class="string">"schedule run"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">1</span>, <span class="number">3</span>, TimeUnit.SECONDS);</span><br><span class="line"><span class="comment">//        executorService.shutdown();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//-- 延迟执行任务的操作，java中还有Timer类同样可以实现</span></span><br><span class="line">        Timer timer = <span class="keyword">new</span> Timer();</span><br><span class="line">        timer.schedule(<span class="keyword">new</span> TimerTask() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                log.warn(<span class="string">"timer run"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="keyword">new</span> Date(), <span class="number">5</span> * <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h1 id="第10章-并发拓展"><a href="#第10章-并发拓展" class="headerlink" title="第10章 并发拓展"></a>第10章 并发拓展</h1><h2 id="10-1-死锁"><a href="#10-1-死锁" class="headerlink" title="10-1 死锁"></a>10-1 死锁</h2><p><strong>什么是死锁？</strong></p>
<p>通俗的说，死锁就是两个或者多个线程，相互占用对方需要的资源，而都不进行释放，导致彼此之间都相互等待对方释放资源，产生了无限制等待的现象。死锁一旦发生，如果没有外力介入，这种等待将永远存在，从而对程序产生严重影响。<br>用来描述死锁的问题最有名的场景就是“哲学家就餐问题”。哲学家就餐问题可以这样表述：假设有五位哲学家围坐在一张圆形餐桌旁，做以下两件事之一：吃饭或者思考。吃东西的时候他们就停止思考，思考的时候也停止吃东西。餐桌中间有一大碗意大利面，每两个哲学家之间有一只餐叉。因为只用一只餐叉很难吃到意大利面，所以假设哲学家必须用两只餐叉吃东西。他们只能使用自己左右手边的那两只餐。哲学家从来不交谈，这就跟危险，可能产生死锁，每个哲学家都拿着左手的餐叉永远等右边的餐叉（或者相反）….</p>
<p><strong>死锁产生的必要条件</strong></p>
<ul>
<li>互斥条件：进程对锁分配的资源进行排他性使用</li>
<li>请求和保持条件：线程已经保持了一个资源，但是又提出了其他请求，而该资源已被其他线程占用</li>
<li>不剥夺条件：在使用时不能被剥夺，只能自己用完释放</li>
<li>环路等待条件：资源调用是一个环形的链</li>
</ul>
<p><strong>死锁示例</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个简单的死锁类</span></span><br><span class="line"><span class="comment"> * 当DeadLock类的对象flag==1时（td1），先锁定o1,睡眠500毫秒</span></span><br><span class="line"><span class="comment"> * 而td1在睡眠的时候另一个flag==0的对象（td2）线程启动，先锁定o2,睡眠500毫秒</span></span><br><span class="line"><span class="comment"> * td1睡眠结束后需要锁定o2才能继续执行，而此时o2已被td2锁定；</span></span><br><span class="line"><span class="comment"> * td2睡眠结束后需要锁定o1才能继续执行，而此时o1已被td1锁定；</span></span><br><span class="line"><span class="comment"> * td1、td2相互等待，都需要得到对方锁定的资源才能继续执行，从而死锁。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLock</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//静态对象是类的所有对象共享的</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Object o1 = <span class="keyword">new</span> Object(), o2 = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"flag:&#123;&#125;"</span>, flag);</span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (o1) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">500</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">synchronized</span> (o2) &#123;</span><br><span class="line">                    log.info(<span class="string">"1"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (o2) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">500</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">synchronized</span> (o1) &#123;</span><br><span class="line">                    log.info(<span class="string">"0"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DeadLock td1 = <span class="keyword">new</span> DeadLock();</span><br><span class="line">        DeadLock td2 = <span class="keyword">new</span> DeadLock();</span><br><span class="line">        td1.flag = <span class="number">1</span>;</span><br><span class="line">        td2.flag = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//td1,td2都处于可执行状态，但JVM线程调度先执行哪个线程是不确定的。</span></span><br><span class="line">        <span class="comment">//td2的run()可能在td1的run()之前运行</span></span><br><span class="line">        <span class="keyword">new</span> Thread(td1).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(td2).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="10-2-并发最佳实践"><a href="#10-2-并发最佳实践" class="headerlink" title="10-2 并发最佳实践"></a>10-2 并发最佳实践</h2><ol>
<li><p>使用本地变量(方法内、局部变量)</p>
<p>应该总是使用本地变量，而不是创建一个类或实例变量，通常情况下，开发人员使用对象实例作为变量可以节省内存并可以重用，因为他们认为每次在方法中创建本地变量会消耗很多内存。</p>
<p>​</p>
</li>
<li><p>使用不可变类</p>
<p>不可变类比如String Integer等一旦创建，不再改变，不可变类可以降低代码中需要的同步数量。</p>
</li>
</ol>
<ol start="3">
<li><p>最小化锁的作用域范围</p>
<p>任何在锁中的代码将不能被并发执行，如果你有5%代码在锁中，那么根据Amdahl’s law，你的应用程序就不可能提高超过20倍，因为锁中这些代码只能顺序执行，降低锁的涵括范围，上锁和解锁之间的代码越少越好。</p>
</li>
</ol>
<ol start="4">
<li><p>使用线程池的Excutor，而不是直接new Thread执行</p>
<p>创建一个线程的代价是昂贵的，如果你要得到一个可伸缩的Java应用，你需要使用线程池，使用线程池管理线程。JDK提供了各种ThreadPool线程池和Executor。</p>
</li>
</ol>
<ol start="5">
<li><p>宁可使用同步而不要使用线程的wait notify</p>
<p>从Java 1.5以后增加了需要同步工具如CycicBariier, CountDownLatch 和 Sempahore，你应当优先使用这些同步工具，而不是去思考如何使用线程的wait和notify，通过BlockingQueue实现生产-消费的设计比使用线程的wait和notify要好得多，也可以使用CountDownLatch实现多个线程的等待。</p>
</li>
</ol>
<ol start="6">
<li><p>使用BlockingQueue实现生产-消费模式</p>
<p>大部分并发问题都可以使用producer-consumer生产-消费设计实现，而BlockingQueue是最好的实现方式，堵塞的队列不只是可以处理单个生产单个消费，也可以处理多个生产和消费。</p>
</li>
</ol>
<ol start="7">
<li><p>使用并发集合Collection而不是加了同步锁的集合</p>
<p>Java提供了 <strong>ConcurrentHashMap</strong> <strong>CopyOnWriteArrayList 和 CopyOnWriteArraySet</strong>以及<strong>BlockingQueue</strong> <strong>Deque and BlockingDeque</strong>五大并发集合，宁可使用这些集合，也不用使用Collections.synchronizedList之类加了同步锁的集合， CopyOnWriteArrayList 适合读多写少的场合，ConcurrentHashMap更是经常使用的并发集合</p>
</li>
</ol>
<ol start="8">
<li><p>使用Semaphore创建有界</p>
<p>为了建立可靠的稳定的系统，对于数据库 文件系统和socket等资源必须有界bound，Semaphore是一个可以限制这些资源开销的选择，如果某个资源不可以，使用Semaphore可以最低代价堵塞线程等待</p>
</li>
</ol>
<ol start="9">
<li><p>宁可使用同步代码块，也不使用加同步的方法</p>
<p>使用synchronized 同步代码块只会锁定一个对象，而不会将当前整个方法锁定；如果更改共同的变量或类的字段，首先选择原子性变量，然后使用volatile。如果你需要互斥锁，可以考虑使用ReentrantLock</p>
</li>
</ol>
<ol start="10">
<li><p>避免使用静态变量</p>
<p>静态变量在并发执行环境会制造很多问题，如果你必须使用静态变量，让它称为final 常量，如果用来保存集合Collection，那么考虑使用只读集合。</p>
</li>
</ol>
<h2 id="10-3-Spring与线程安全"><a href="#10-3-Spring与线程安全" class="headerlink" title="10-3 Spring与线程安全"></a>10-3 Spring与线程安全</h2><blockquote>
<p>参考：<a href="https://www.cnblogs.com/xiangkejin/p/9276736.html" target="_blank" rel="noopener">https://www.cnblogs.com/xiangkejin/p/9276736.html</a></p>
</blockquote>
<p>Spring对每个bean提供了一个scope属性来表示该bean的作用域。它是bean的生命周期。</p>
<ul>
<li>singleton：默认的scope，每个scope为singleton的bean都会被定义为一个单例对象，该对象的生命周期是与Spring IOC容器一致的（但在第一次被注入时才会创建）。</li>
<li>prototype：bean被定义为在每次注入时都会创建一个新的对象。</li>
<li>request：bean被定义为在每个HTTP请求中创建一个单例对象，也就是说在单个请求中都会复用这一个单例对象。</li>
<li>session：bean被定义为在一个session的生命周期内创建一个单例对象。</li>
<li>application：bean被定义为在ServletContext的生命周期中复用一个单例对象。</li>
<li>websocket：bean被定义为在websocket的生命周期中复用一个单例对象。</li>
</ul>
<p><strong>无状态对象和有状态对象：</strong></p>
<p><strong>有状态</strong>就是有数据存储功能。<strong>有状态对象</strong>(Stateful Bean)，就是有实例变量的对象，可以保存数据，是非线程安全的。<br><strong>无状态</strong>就是一次操作，不能保存数据。<strong>无状态对象</strong>(Stateless Bean)，就是没有实例变量的对象.不能保存数据，是不变类，不会因为多个线程的交替调度而破坏自身状态导致线程安全问题。 </p>
<ol>
<li>无状态的Bean适合用单例模式，这样可以共享实例，提高性能。有状态的Bean，多线程环境下不安全，那么适合用Prototype原型模式。</li>
<li>默认情况下，从Spring bean工厂所取得的实例为singleton（scope属性为singleton）,容器只存在一个共享的bean实例。 </li>
<li>那么scope选择的原则就很容易了：有状态的bean都使用prototype作用域，而对无状态的bean则应该使用singleton作用域。</li>
<li>如Service层、Dao层用默认singleton就行</li>
<li>有人可能会认为，我使用request作用域不就可以避免每个请求之间的安全问题了吗？这是完全错误的，因为<strong>Controller默认是单例</strong>的，一个HTTP请求是会被多个线程执行的，这就又回到了线程的安全问题。</li>
</ol>
<p>解决方案：</p>
<ol>
<li><p>不要在bean中声明任何有状态的实例变量或类变量</p>
</li>
<li><p>如果必须如此，那么就使用ThreadLocal把变量变为线程私有的</p>
</li>
<li><p>如果bean的实例变量或类变量需要在多个线程之间共享，那么就只能使用synchronized、lock、CAS等这些实现线程同步的方法了</p>
</li>
<li><p>在spring配置文件Controller中声明 scope=”prototype”，每次都创建新的controller( 不建议，这样开销很大)</p>
<p>​</p>
</li>
</ol>
<h2 id="10-4-HashMap与ConcurrentHashMap解析"><a href="#10-4-HashMap与ConcurrentHashMap解析" class="headerlink" title="10-4 HashMap与ConcurrentHashMap解析"></a>10-4 HashMap与ConcurrentHashMap解析</h2><blockquote>
<p>参考：<a href="https://blog.csdn.net/u010853261/article/details/54312932" target="_blank" rel="noopener">https://blog.csdn.net/u010853261/article/details/54312932</a></p>
</blockquote>
<h3 id="HashMap的线程不安全原因"><a href="#HashMap的线程不安全原因" class="headerlink" title="HashMap的线程不安全原因"></a>HashMap的线程不安全原因</h3><p><strong>原因一：死循环</strong></p>
<p>原因在于HashMap在多线程情况下，执行resize()进行扩容时容易造成死循环。<br>扩容思路为：它要创建一个大小为原来两倍的数组，保证新的容量仍为2的N次方，从而保证上述寻址方式仍然适用。扩容后将原来的数组从新插入到新的数组中。这个过程称为reHash。</p>
<p>【单线程下的reHash】 </p>
<p>![屏幕快照 2018-10-31 下午1.04.51](20181030111752438/屏幕快照 2018-10-31 下午1.04.51.png)  </p>
<ul>
<li>扩容前：我们的HashMap初始容量为2，加载因子为1，需要向其中存入3个key，分别为5、9、11，放入第三个元素11的时候就涉及到了扩容。</li>
<li>第一步：先创建一个二倍大小的数组，接下来把原来数组中的元素reHash到新的数组中，5插入新的数组，没有问题。</li>
<li>第二步：将9插入到新的数组中，经过Hash计算，插入到5的后面。</li>
<li>第三步：将11经过Hash插入到index为3的数组节点中。</li>
</ul>
<p>单线程reHash完全没有问题。</p>
<p>【多线程下的reHash】 </p>
<p>![屏幕快照 2018-10-31 下午2.13.30](20181030111752438/屏幕快照 2018-10-31 下午2.13.30.png) </p>
<p>假设有两个线程同时需要执行resize操作，此时线程1准备处理5，将下一个元素指向9，然后时间片用完了。而线程2被调度执行完了整个resize操作。</p>
<p>![屏幕快照 2018-10-31 下午2.19.36](20181030111752438/屏幕快照 2018-10-31 下午2.19.36.png) </p>
<p>此时线程1重新被调度运行，thread1持有的引用是已经被thread2 resize之后的结果。线程thread1首先将[5,A]迁移到新的数组（自己扩容的数组）上。</p>
<p>![屏幕快照 2018-10-31 下午2.23.36](20181030111752438/屏幕快照 2018-10-31 下午2.23.36.png) </p>
<p>然后将[9,B] (线程1在被抢cpu前的next指向)移到新的数组，而线程2处理时将9后面新增了5，因此线程1发现处理完9后，要继续处理9的next(也就是5)</p>
<p>![屏幕快照 2018-10-31 下午2.31.41](20181030111752438/屏幕快照 2018-10-31 下午2.31.41.png)  </p>
<p>于是5被挂在线程1的数组1下面，5后面连的9，又因为9后面连的5（线程2干的），所以死循环了。</p>
<p><strong>原因二：fast-fail</strong></p>
<p>使用迭代器（Iterator）的过程中，如果HashMap在“结构上”被修改了（增加元素导致扩容？），就会抛出ConcurrentModificationException异常。但其它线程可以通过set()方法<strong>更改</strong>集合对象是允许的，因为这并没有从“结构上”更改集合。但是假如已经从结构上进行了更改，再调用set()方法，将会抛出IllegalArgumentException异常。结构上的更改指的是删除或者插入一个元素，这样会影响到map的结构。</p>
<p>解决办法：可以使用Collections的synchronizedMap方法构造一个同步的map，或者直接使用线程安全的ConcurrentHashMap来保证不会出现fail-fast策略。</p>
<p>ConcurrentHashMap：红黑树？</p>
<hr>
<h3 id="Java7-HashMap"><a href="#Java7-HashMap" class="headerlink" title="Java7 HashMap"></a>Java7 HashMap</h3><p><strong>Hash表</strong></p>
<p>Java中的数据存储方式有两种结构，一种是数组，另一种就是链表，前者的特点是连续空间，寻址迅速，但是在增删元素的时候会有较大幅度的移动，所以数组的特点是查询速度快，增删较慢。</p>
<p>而链表由于空间不连续，寻址困难，增删元素只需修改指针，所以链表的特点是查询速度慢、增删快。</p>
<p>那么有没有一种数据结构来综合一下数组和链表以便发挥他们各自的优势？答案就是哈希表。</p>
<p><a href="/2018/10/30/20181030111752438/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-10-30%20%E4%B8%8B%E5%8D%886.54.08.png" data-fancybox="group" data-caption="屏幕快照 2018-10-30 下午6.54.08" class="fancybox"><img alt="屏幕快照 2018-10-30 下午6.54.08" title="屏幕快照 2018-10-30 下午6.54.08" data-src="/2018/10/30/20181030111752438/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-10-30%20%E4%B8%8B%E5%8D%886.54.08.png" class="lazyload"></a> </p>
<p>HashMap 里面是一个数组，然后数组中每个元素是一个单向链表。</p>
<p>Entry 包含四个属性：key, value, hash 值和用于单向链表的 next。</p>
<p>capacity : 当前数组容量，始终保持 2^n，可以扩容，扩容后数组大小为当前的 2 倍。</p>
<p>loadFactor：负载因子，默认为 0.75。</p>
<p>threshold：扩容的阈值，等于 capacity * loadFactor</p>
<p><strong>HashMap的长度为什么要是2的n次方？</strong></p>
<p>为了存取高效，要尽量较少碰撞，就是要尽量把数据分配均匀，每个链表长度大致相同。参考：<a href="https://blog.csdn.net/sidihuo/article/details/78489820" target="_blank" rel="noopener">https://blog.csdn.net/sidihuo/article/details/78489820</a></p>
<p><strong>put 过程分析</strong></p>
<p>数组初始化：</p>
<p>在第一个元素插入 HashMap 的时候做一次数组的初始化，就是先确定<strong>初始的数组大小</strong>，并计算数组<strong>扩容的阈值</strong>。</p>
<ol>
<li><p>求 key 的 hash 值</p>
<p>int hash = hash(key);</p>
</li>
<li><p>找到对应的数组下标</p>
<p>int i = indexFor(hash, table.length);</p>
</li>
<li><p>放入链表头部</p>
</li>
</ol>
<p>数组扩容</p>
<p>在插入新值的时候，如果当前的 size 已经达到了阈值，并且要插入的数组位置上已经有元素，那么就会触发扩容，扩容后，数组大小为原来的 2 倍。</p>
<p><strong>get 过程分析</strong></p>
<ol>
<li>根据 key 计算 hash 值。</li>
<li>找到相应的数组下标：hash &amp; (length – 1)。</li>
<li>遍历该数组位置处的链表，直到找到相等(==或equals)的 key。</li>
</ol>
<h3 id="Java7-ConcurrentHashMap"><a href="#Java7-ConcurrentHashMap" class="headerlink" title="Java7 ConcurrentHashMap"></a>Java7 ConcurrentHashMap</h3><p>——基于分段锁的ConcurrentHashMap</p>
<p>![屏幕快照 2018-11-01 上午10.29.24](20181030111752438/屏幕快照 2018-11-01 上午10.29.24.png) </p>
<ul>
<li>Java7里面的ConcurrentHashMap的底层结构仍然是数组和链表，与HashMap不同的是ConcurrentHashMap的最外层不是一个大的数组，而是一个Segment数组。每个Segment包含一个与HashMap结构差不多的链表数组。</li>
<li>当我们读取某个Key的时候它先取出key的Hash值，并将Hash值的高sshift位与Segment的个数取模，决定key属于哪个Segment。接着像HashMap一样操作Segment。</li>
<li>为了保证不同的Hash值保存到不同的Segment中，ConcurrentHashMap对Hash值也做了专门的优化。</li>
<li>Segment继承自J.U.C里的ReetrantLock，所以可以很方便的对Segment进行上锁。即分段锁。理论上最大并发数是和segment的个数是想等的。 </li>
</ul>
<p><strong>初始化</strong></p>
<ul>
<li>initialCapacity：初始容量，这个值指的是整个 ConcurrentHashMap 的初始容量，实际操作的时候需要平均分给每个 Segment。</li>
<li>loadFactor：负载因子，之前我们说了，<strong>Segment 数组不可以扩容</strong>，所以这个负载因子是给每个 Segment 内部使用的。扩容是 segment 数组某个位置内部的数组 HashEntry&lt;k,v&gt;[] 进行扩容，扩容后，容量为原来的 2 倍。</li>
</ul>
<p><strong>put 过程分析</strong></p>
<ol>
<li>计算 key 的 hash 值</li>
<li>根据 hash 值找到 Segment 数组中的位置 </li>
<li>再利用 hash 值，求应该放置的segment 内部的数组下标</li>
<li>添加到头部</li>
</ol>
<p><strong>get 过程分析</strong></p>
<ol>
<li>计算 hash 值，找到 segment 数组中的具体位置，或我们前面用的“槽”</li>
<li>槽中也是一个数组，根据 hash 找到数组中具体的位置 </li>
<li>到这里是链表了，顺着链表进行查找即可 </li>
</ol>
<h3 id="Java8-HashMap"><a href="#Java8-HashMap" class="headerlink" title="Java8 HashMap"></a>Java8 HashMap</h3><p>Java8 对 HashMap 进行了一些修改，最大的不同就是利用了红黑树，所以其由 数组+链表+红黑树 组成。</p>
<blockquote>
<p>关于红黑树：红黑树的关键性质: 从根到叶子最长的可能路径不多于最短的可能路径的两倍长。结果是这棵树大致上是平衡的。红黑树它是复杂而高效的，其检索效率O(lg n)。参考自：<a href="https://blog.csdn.net/u010853261/article/details/54312932" target="_blank" rel="noopener">https://blog.csdn.net/u010853261/article/details/54312932</a></p>
</blockquote>
<ul>
<li>根据 Java7 HashMap 的介绍，我们知道，查找的时候，根据 hash 值我们能够快速定位到数组的具体下标，但是之后的话，需要顺着链表一个个比较下去才能找到我们需要的，时间复杂度取决于链表的长度，为 O(n)。</li>
<li>Java 8为进一步提高并发性，<strong>摒弃了分段锁</strong>的方案(同时刻并发数等于Segment数组大小)，而是直接使用一个大的数组。同时为了提高哈希碰撞下的寻址性能，Java 8在链表长度超过一定阈值（8）时将链表（寻址时间复杂度为O(N)）转换为红黑树（寻址时间复杂度为O(long(N))）。</li>
<li>java8也是通过计算key的hash值和数组长度值进行取模确定该key在数组中的索引。但是java8引入红黑树，即使hash冲突比较高，寻址效率也会是比较高的。</li>
</ul>
<p><a href="/2018/10/30/20181030111752438/996415-20180712213055805-743914216.png" data-fancybox="group" data-caption="996415-20180712213055805-743914216" class="fancybox"><img alt="996415-20180712213055805-743914216" title="996415-20180712213055805-743914216" data-src="/2018/10/30/20181030111752438/996415-20180712213055805-743914216.png" class="lazyload"></a> </p>
<ul>
<li>Java7 中使用 Entry 来代表每个 HashMap 中的数据节点，Java8 中使用 Node，基本没有区别，都是 key，value，hash 和 next 这四个属性，不过，Node 只能用于链表的情况，红黑树的情况需要使用 TreeNode。</li>
<li>我们根据数组元素中，<strong>第一个节点数据类型是 Node 还是 TreeNode 来判断该位置下是链表还是红黑树</strong>的。</li>
</ul>
<p><strong>get 过程分析</strong></p>
<ol>
<li>计算 key 的 hash 值，根据 hash 值找到对应数组下标: hash &amp; (length-1)</li>
<li>判断数组该位置处的元素是否刚好就是我们要找的，如果不是，走第三步</li>
<li>判断该元素类型是否是 TreeNode，如果是，用红黑树的方法取数据，如果不是，走第四步</li>
<li>遍历链表，直到找到相等(==或equals)的 key</li>
</ol>
<h3 id="Java8-ConcurrentHashMap"><a href="#Java8-ConcurrentHashMap" class="headerlink" title="Java8 ConcurrentHashMap"></a>Java8 ConcurrentHashMap</h3><p>![屏幕快照 2018-11-01 下午6.41.52](20181030111752438/屏幕快照 2018-11-01 下午6.41.52.png) </p>
<p><strong>同步方式</strong></p>
<ul>
<li>对于put操作，如果Key对应的数组元素为null，则通过<a href="http://www.jasongj.com/java/thread_safe/#CAS%EF%BC%88compare-and-swap%EF%BC%89" target="_blank" rel="noopener">CAS操作</a>将其设置为当前值。如果Key对应的数组元素（也即链表表头或者树的根元素）不为null，则对该元素使用synchronized关键字申请锁，然后进行操作。如果该put操作使得当前链表长度超过一定阈值，则将该链表转换为树，从而提高寻址效率。</li>
<li>对于读操作，由于数组被volatile关键字修饰，因此不用担心数组的可见性问题。同时每个元素是一个Node实例（Java 7中每个元素是一个HashEntry），它的Key值和hash值都由final修饰，不可变更，无须关心它们被修改后的可见性问题。而其Value及对下一个元素的引用由volatile修饰，可见性也有保障</li>
</ul>
<h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><p><strong>HashMap和ConcurrentHashMap对比：</strong></p>
<ul>
<li>HashMap非线程安全、ConcurrentHashMap线程安全</li>
<li>HashMap允许Key与Value为空，ConcurrentHashMap不允许</li>
<li>HashMap不允许通过迭代器遍历的同时修改，ConcurrentHashMap允许。并且更新可见</li>
</ul>
<p> <strong>HashMap和HashTable的对比：</strong></p>
<p>（1）HashMap是非线程安全的，HashTable是线程安全的。</p>
<p>（2）HashMap的键和值都允许有null存在，而HashTable则都不行。</p>
<p>（3）因为线程安全、哈希效率的问题，HashMap效率比HashTable的要高。</p>
<p><strong>HashTable和ConcurrentHashMap对比：</strong></p>
<p>HashTable里使用的是synchronized关键字，这其实是对对象加锁，锁住的都是对象整体，当Hashtable的大小增加到一定的时候，性能会急剧下降，因为迭代时需要被锁定很长的时间。ConcurrentHashMap相对于HashTable的syn关键字锁的粒度更精细了一些（对大数组的元素加锁？），并发性能更好。</p>
<h2 id="10-5-多线程并发与线程安全总结"><a href="#10-5-多线程并发与线程安全总结" class="headerlink" title="10-5 多线程并发与线程安全总结"></a>10-5 多线程并发与线程安全总结</h2><p>![屏幕快照 2018-10-30 下午7.07.14](20181030111752438/屏幕快照 2018-10-30 下午7.07.14.png) </p>
<h1 id="附1-J-U-C脑图"><a href="#附1-J-U-C脑图" class="headerlink" title="附1:J.U.C脑图"></a>附1:J.U.C脑图</h1><p>![屏幕快照 2018-10-30 下午6.26.20](20181030111752438/屏幕快照 2018-10-30 下午6.26.20.png) </p>
]]></content>
      <categories>
        <category>Java并发编程与高并发解决方案</category>
      </categories>
      <tags>
        <tag>Java并发编程与高并发解决方案</tag>
      </tags>
  </entry>
  <entry>
    <title>并发编程与线程安全（5）：J.U.C组件拓展</title>
    <url>/2018/10/29/20181029185403603/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[TOC]</p>
<h1 id="第7章-J-U-C组件拓展"><a href="#第7章-J-U-C组件拓展" class="headerlink" title="第7章 J.U.C组件拓展"></a>第7章 J.U.C组件拓展</h1><h2 id="7-1-FutureTask"><a href="#7-1-FutureTask" class="headerlink" title="7-1 FutureTask"></a>7-1 FutureTask</h2><p><strong>Runnable与Callable对比</strong></p>
<p>通常实现一个线程我们会使用继承Thread的方式或者实现Runnable接口，这两种方式有一个共同的缺陷就是在执行完任务之后无法获取执行结果。从Java1.5之后就提供了Callable与Future，这两个接口就可以实现获取任务执行结果。</p>
<ul>
<li><p>Runnable接口：代码非常简单，只有一个方法run</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RunnableFuture</span>&lt;<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Runnable</span>, <span class="title">Future</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



</li>
</ul>
<ul>
<li><p>Callable泛型接口：有泛型参数，提供了一个call方法，<strong>执行后可返回传入的泛型参数类型的结果</strong>。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Callable</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">V <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>​</p>
</li>
</ul>
<p><strong>Future接口</strong></p>
<p>Future接口提供了一系列方法用于<strong>控制线程执行计算</strong>，如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Future</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">cancel</span><span class="params">(<span class="keyword">boolean</span> mayInterruptIfRunning)</span></span>;<span class="comment">//取消任务</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isCancelled</span><span class="params">()</span></span>;<span class="comment">//是否被取消</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isDone</span><span class="params">()</span></span>;<span class="comment">//计算是否完成</span></span><br><span class="line">    <span class="function">V <span class="title">get</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, ExecutionException</span>;<span class="comment">//获取计算结果，在执行过程中任务被阻塞</span></span><br><span class="line">    <span class="function">V <span class="title">get</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span><span class="comment">//timeout等待时间、unit时间单位</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p>使用方法：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.machine.concurrency.example.aqs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Future;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FutureExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCallable</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            log.info(<span class="string">"do something in callable"</span>);</span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Done"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">        Future&lt;String&gt; future = executorService.submit(<span class="keyword">new</span> MyCallable());</span><br><span class="line">        log.info(<span class="string">"do something in main"</span>);</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        <span class="comment">//阻塞等待计算完成</span></span><br><span class="line">        String result = future.get();</span><br><span class="line">        log.info(<span class="string">"result：&#123;&#125;"</span>, result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p><strong>FutureTask</strong></p>
<p>FutureTask实现了RunnableFuture接口，而RunnableFuture接口继承了Runnable与Future接口，所以它既可以作为Runnable被线程中执行，又可以作为callable获得返回值。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FutureTask</span>&lt;<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">RunnableFuture</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RunnableFuture</span>&lt;<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Runnable</span>, <span class="title">Future</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>FutureTask支持两种参数类型，Callable和Runnable，在使用Runnable 时，还可以多指定一个返回结果类型。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FutureTask</span><span class="params">(Callable&lt;V&gt; callable)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (callable == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="keyword">this</span>.callable = callable;</span><br><span class="line">    <span class="keyword">this</span>.state = NEW;       <span class="comment">// ensure visibility of callable</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FutureTask</span><span class="params">(Runnable runnable, V result)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.callable = Executors.callable(runnable, result);</span><br><span class="line">    <span class="keyword">this</span>.state = NEW;       <span class="comment">// ensure visibility of callable</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>使用方法(推荐)：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.machine.concurrency.example.aqs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FutureTaskExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        FutureTask&lt;String&gt; futureTask = <span class="keyword">new</span> FutureTask&lt;String&gt;(<span class="keyword">new</span> Callable&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                log.info(<span class="string">"do something in callable"</span>);</span><br><span class="line">                Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"Done"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(futureTask).start();</span><br><span class="line">        log.info(<span class="string">"do something in main"</span>);</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        String result = futureTask.get();</span><br><span class="line">        log.info(<span class="string">"result：&#123;&#125;"</span>, result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="7-2-ForkJoin"><a href="#7-2-ForkJoin" class="headerlink" title="7-2 ForkJoin"></a>7-2 ForkJoin</h2><p>ForkJoin是Java7提供的一个并行执行任务的框架，是把大任务分割成若干个小任务，待小任务完成后将结果汇总成大任务结果的框架。主要采用的是<strong>工作窃取算法</strong>，工作窃取算法是指某个线程从其他队列里窃取任务来执行。 </p>
<p>Fork/Join框架：</p>
<p>![屏幕快照 2018-10-29 下午10.23.16](20181029185403603/屏幕快照 2018-10-29 下午10.23.16.png) </p>
<p>在窃取过程中两个线程会访问同一个队列，为了减少窃取任务线程和被窃取任务线程之间的竞争，通常我们会使用<strong>双端队列</strong>来实现工作窃取算法。被窃取任务的线程永远从队列的头部拿取任务，窃取任务的线程从队列尾部拿取任务。</p>
<p><strong>局限性：</strong></p>
<ol>
<li>任务只能使用fork和join作为同步机制，如果使用了其他同步机制，当他们在同步操作时，工作线程就不能执行其他任务了。比如在fork框架使任务进入了睡眠，那么在睡眠期间内在执行这个任务的线程将不会执行其他任务了。 </li>
<li>我们所拆分的任务不应该去执行IO操作，如读和写数据文件。 </li>
<li>任务不能抛出检查异常。必须通过必要的代码来处理他们。</li>
</ol>
<p><strong>框架核心：</strong></p>
<p>核心有两个类：ForkJoinPool | ForkJoinTask<br>ForkJoinPool：负责来做实现，包括工作窃取算法、管理工作线程和提供关于任务的状态以及他们的执行信息。<br>ForkJoinTask:提供在任务中执行fork和join的机制。</p>
<p><strong>使用方式：</strong>（模拟加和运算）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.machine.concurrency.example.aqs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ForkJoinPool;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Future;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.RecursiveTask;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForkJoinTaskExample</span> <span class="keyword">extends</span> <span class="title">RecursiveTask</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> threshold = <span class="number">2</span>;<span class="comment">//设定不大于两个数相加就直接for循环</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> start;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> end;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ForkJoinTaskExample</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.start = start;</span><br><span class="line">        <span class="keyword">this</span>.end = end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Integer <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果任务足够小就计算任务</span></span><br><span class="line">        <span class="keyword">boolean</span> canCompute = (end - start) &lt;= threshold;</span><br><span class="line">        <span class="keyword">if</span> (canCompute) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt;= end; i++) &#123;</span><br><span class="line">                sum += i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果任务大于阈值，就分裂成两个子任务计算</span></span><br><span class="line">            <span class="keyword">int</span> middle = (start + end) / <span class="number">2</span>;</span><br><span class="line">            <span class="comment">//不同的子任务就是不同的子线程</span></span><br><span class="line">            ForkJoinTaskExample leftTask = <span class="keyword">new</span> ForkJoinTaskExample(start, middle);</span><br><span class="line">            ForkJoinTaskExample rightTask = <span class="keyword">new</span> ForkJoinTaskExample(middle + <span class="number">1</span>, end);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 执行子任务</span></span><br><span class="line">            leftTask.fork();</span><br><span class="line">            rightTask.fork();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 等待任务执行结束合并其结果</span></span><br><span class="line">            <span class="keyword">int</span> leftResult = leftTask.join();</span><br><span class="line">            <span class="keyword">int</span> rightResult = rightTask.join();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 合并子任务</span></span><br><span class="line">            sum = leftResult + rightResult;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ForkJoinPool forkjoinPool = <span class="keyword">new</span> ForkJoinPool();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//生成一个计算任务，计算1+2+3+4</span></span><br><span class="line">        ForkJoinTaskExample task = <span class="keyword">new</span> ForkJoinTaskExample(<span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行一个任务</span></span><br><span class="line">        Future&lt;Integer&gt; result = forkjoinPool.submit(task);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.info(<span class="string">"result:&#123;&#125;"</span>, result.get());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"exception"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>





<h2 id="7-3-BlockingQueue"><a href="#7-3-BlockingQueue" class="headerlink" title="7-3 BlockingQueue"></a>7-3 BlockingQueue</h2><p>阻塞队列</p>
<p>主要应用场景：生产者消费者模型，是线程安全的 </p>
<p>![屏幕快照 2018-10-29 下午10.42.14](20181029185403603/屏幕快照 2018-10-29 下午10.42.14.png) </p>
<p><strong>阻塞情况</strong>：</p>
<ol>
<li>当队列满了进行入队操作 </li>
<li>当队列空了的时候进行出队列操作</li>
</ol>
<p><strong>四套方法：</strong></p>
<p>BlockingQueue提供了四套方法，分别来进行插入、移除、检查。每套方法在不能立刻执行时都有不同的反应。</p>
<p>![屏幕快照 2018-10-29 下午10.50.24](20181029185403603/屏幕快照 2018-10-29 下午10.50.24.png) </p>
<ul>
<li>Throws Exceptions ：如果不能立即执行就抛出异常。</li>
<li>Special Value：如果不能立即执行就返回一个特殊的值。</li>
<li>Blocks：如果不能立即执行就阻塞</li>
<li>Times Out：如果不能立即执行就阻塞一段时间，如果过了设定时间还没有被执行，则返回一个值</li>
</ul>
<p><strong>实现类：</strong></p>
<ul>
<li><p>ArrayBlockingQueue：它是一个有界的阻塞队列，内部实现是数组，初始化时指定容量大小，一旦指定大小就不能再变。采用FIFO方式存储元素。</p>
</li>
<li><p>DelayQueue：阻塞内部元素，内部元素必须实现Delayed接口，Delayed接口又继承了Comparable接口，原因在于DelayQueue内部元素需要排序，一般情况按过期时间优先级排序。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Delayed</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">Delayed</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">getDelay</span><span class="params">(TimeUnit unit)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>​</p>
<p>应用场景：定时关闭连接、缓存对象、超时处理</p>
<p>DalayQueue内部采用PriorityQueue（排序）与ReentrantLock（锁）实现。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelayQueue</span>&lt;<span class="title">E</span> <span class="keyword">extends</span> <span class="title">Delayed</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractQueue</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">BlockingQueue</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">transient</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PriorityQueue&lt;E&gt; q = <span class="keyword">new</span> PriorityQueue&lt;E&gt;();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>​</p>
</li>
<li><p>LinkedBlockingQueue：大小配置可选，如果初始化时指定了大小，那么它就是有边界的。不指定就无边界（最大整型值）。内部实现是链表，采用FIFO形式保存数据。</p>
</li>
</ul>
<ul>
<li><pre><code class="java"><span class="function"><span class="keyword">public</span> <span class="title">LinkedBlockingQueue</span><span class="params">()</span> </span>{
    <span class="keyword">this</span>(Integer.MAX_VALUE);<span class="comment">//不指定大小，无边界采用默认值，最大整型值</span>
}</code></pre>
</li>
<li><p>PriorityBlockingQueue:带优先级的阻塞队列。无边界队列，允许插入null。插入的对象必须实现Comparator接口，队列优先级的排序规则就是按照我们对Comparable接口的实现来指定的。我们可以从PriorityBlockingQueue中获取一个迭代器，但这个迭代器并不保证能按照优先级的顺序进行迭代。</p>
</li>
<li><p>SynchronusQueue：只能插入一个元素，同步队列，无界非缓存队列，不存储元素。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Java并发编程与高并发解决方案</category>
      </categories>
      <tags>
        <tag>Java并发编程与高并发解决方案</tag>
      </tags>
  </entry>
  <entry>
    <title>并发编程与线程安全（4）：J.U.C之AQS</title>
    <url>/2018/10/27/20181027234153307/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[TOC]</p>
<h1 id="第7章-J-U-C之AQS"><a href="#第7章-J-U-C之AQS" class="headerlink" title="第7章 J.U.C之AQS"></a>第7章 J.U.C之AQS</h1><h2 id="7-1-简介"><a href="#7-1-简介" class="headerlink" title="7-1 简介"></a>7-1 简介</h2><p>AbstractQueuedSynchronizer - AQS</p>
<p><strong>数据结构</strong></p>
<p>![屏幕快照 2018-10-27 下午11.52.26](20181027234153307/屏幕快照 2018-10-27 下午11.52.26.png) </p>
<ul>
<li>底层是双向链表，队列的一种实现</li>
<li>sync queue：同步队列，head节点主要负责后面的调度</li>
<li>Condition queue：单向链表，不是必须的的，也可以有多个</li>
</ul>
<p><strong>设计原理</strong></p>
<ul>
<li>使用Node实现FIFO队列，可以用于构建锁或者其他同步装置的基础框架</li>
<li>利用了一个int类型标示状态，有一个state的成员变量，表示获取锁的线程数（0没有线程获取锁，1有线程获取锁，大于1表示重入锁的数量），和一个同步组件ReentrantLock，</li>
<li>使用方法是继承，基于模板方法</li>
<li>子类通过继承并通过实现它的方法管理其状态{acquire和release}的方法操作状态</li>
<li>可以实现排它锁和共享锁的模式（独占、共享）</li>
</ul>
<p><strong>具体实现的思路</strong></p>
<ol>
<li>首先 AQS内部维护了一个CLH队列，来管理锁</li>
<li>线程尝试获取锁，如果获取失败，则将等待信息等包装成一个Node结点，加入到同步队列Sync queue里</li>
<li>不断重新尝试获取锁（当前结点为head的直接后继才会 尝试），如果获取失败，则会阻塞自己，直到被唤醒</li>
<li>当持有锁的线程释放锁的时候，会唤醒队列中的后继线程</li>
</ol>
<p><strong>AQS同步组件</strong></p>
<ul>
<li>CountDownLatch</li>
<li>Semaphore</li>
<li>CyclicBarrier</li>
<li>ReentrantLock</li>
<li>Condition</li>
<li>FutureTask</li>
</ul>
<h2 id="7-2-CountDownLatch"><a href="#7-2-CountDownLatch" class="headerlink" title="7-2 CountDownLatch"></a>7-2 CountDownLatch</h2><p>同步阻塞类，可以完成阻塞线程的功能</p>
<p>![屏幕快照 2018-10-28 下午6.49.46](20181027234153307/屏幕快照 2018-10-28 下午6.49.46.png) </p>
<p><strong>使用场景</strong></p>
<p>程序执行需要等待某个条件完成后，才能进行后面的操作。比如父任务等待所有子任务都完成的时候，在继续往下进行</p>
<p>基本用法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.machine.concurrency.example.aqs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 等200个线程都执行完，再执行下一步</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountDownLatchExample1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> threadCount = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        ExecutorService exec = Executors.newCachedThreadPool();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(threadCount);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threadCount; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> threadNum = i;</span><br><span class="line">            exec.execute(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    test(threadNum);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    log.error(<span class="string">"exception"</span>, e);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">//每个线程执行完都-1</span></span><br><span class="line">                    countDownLatch.countDown();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//等待，直到值变为0</span></span><br><span class="line">        countDownLatch.await();</span><br><span class="line">        log.info(<span class="string">"finish"</span>);</span><br><span class="line">        exec.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> threadNum)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        log.info(<span class="string">"&#123;&#125;"</span>, threadNum);</span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p>场景：比如有多个线程完成一个任务，但是这个任务只想给他一个指定的时间，超过这个任务就不继续等待了。完成多少算多少</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.machine.concurrency.example.aqs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountDownLatchExample2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> threadCount = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        ExecutorService exec = Executors.newCachedThreadPool();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(threadCount);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threadCount; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> threadNum = i;</span><br><span class="line">            exec.execute(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    test(threadNum);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    log.error(<span class="string">"exception"</span>, e);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    countDownLatch.countDown();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 等待指定的时间，超过该时间就执行log.info("finish");，其余线程还会继续执行</span></span><br><span class="line">        <span class="comment">// 等待指定的时间 参数1：等待时间 参数2：时间单位</span></span><br><span class="line">        countDownLatch.await(<span class="number">10</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">        log.info(<span class="string">"finish"</span>);</span><br><span class="line">        exec.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> threadNum)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        log.info(<span class="string">"&#123;&#125;"</span>, threadNum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>





<h2 id="7-3-Semaphore"><a href="#7-3-Semaphore" class="headerlink" title="7-3 Semaphore"></a>7-3 Semaphore</h2><p><strong>使用场景</strong></p>
<p>1、仅能提供有限访问的资源（控制并发数）：比如数据库的连接数最大只有20，而上层的并发数远远大于20，这时候如果不做限制，可能会由于无法获取连接而导致并发异常，这时候可以使用Semaphore来进行控制，当信号量设置为1的时候，就和单线程很相似了</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.machine.concurrency.example.aqs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Semaphore;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SemaphoreExample1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> threadCount = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        ExecutorService exec = Executors.newCachedThreadPool();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threadCount; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> threadNum = i;</span><br><span class="line">            exec.execute(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    semaphore.acquire(); <span class="comment">// 获取一个许可</span></span><br><span class="line">                    test(threadNum);</span><br><span class="line">                    semaphore.release(); <span class="comment">// 释放一个许可</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    log.error(<span class="string">"exception"</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        exec.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> threadNum)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">"&#123;&#125;"</span>, threadNum);</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.machine.concurrency.example.aqs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Semaphore;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SemaphoreExample2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> threadCount = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        ExecutorService exec = Executors.newCachedThreadPool();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threadCount; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> threadNum = i;</span><br><span class="line">            exec.execute(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    semaphore.acquire(<span class="number">3</span>); <span class="comment">// 获取多个许可</span></span><br><span class="line">                    test(threadNum);</span><br><span class="line">                    semaphore.release(<span class="number">3</span>); <span class="comment">// 释放多个许可</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    log.error(<span class="string">"exception"</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        exec.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> threadNum)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">"&#123;&#125;"</span>, threadNum);</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p>2、并发很高，想要超过允许的并发数之后，就抛弃</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.machine.concurrency.example.aqs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Semaphore;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SemaphoreExample3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> threadCount = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        ExecutorService exec = Executors.newCachedThreadPool();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threadCount; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> threadNum = i;</span><br><span class="line">            exec.execute(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//tryAcquire(int permits) permits：尝试获取的许可数量</span></span><br><span class="line">                    <span class="comment">//tryAcquire(long timeout, TimeUnit unit)</span></span><br><span class="line">                    <span class="comment">//tryAcquire(int permits, long timeout, TimeUnit unit)</span></span><br><span class="line">                    <span class="keyword">if</span> (semaphore.tryAcquire()) &#123; <span class="comment">// 尝试获取一个许可，获取不到就抛弃这个请求</span></span><br><span class="line">                        test(threadNum);</span><br><span class="line">                        semaphore.release(); <span class="comment">// 释放一个许可</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    log.error(<span class="string">"exception"</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        exec.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> threadNum)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">"&#123;&#125;"</span>, threadNum);</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="7-4-CyclicBarrier"><a href="#7-4-CyclicBarrier" class="headerlink" title="7-4 CyclicBarrier"></a>7-4 CyclicBarrier</h2><p>同步辅助类，允许一组线程相互等待，知道所有线程都准备就绪后，才能继续操作，当某个线程调用了await方法之后，就会进入等待状态，并将计数器-1，直到所有线程调用await方法使计数器为0，才可以继续执行，由于计数器可以重复使用，所以我们又叫他循环屏障</p>
<p>![屏幕快照 2018-10-28 下午7.39.43](20181027234153307/屏幕快照 2018-10-28 下午7.39.43.png) </p>
<p><strong>使用场景</strong></p>
<p>多线程计算数据，最后合并计算结果的应用场景：</p>
<p>比如用Excel保存了用户的银行流水，每一页保存了一个用户近一年的每一笔银行流水，现在需要统计用户的日均银行流水，这时候我们就可以用多线程处理每一页里的银行流水，都执行完以后，得到每一个页的日均银行流水，之后通过CyclicBarrier的action，利用这些线程的计算结果，计算出整个excel的日均流水</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.machine.concurrency.example.aqs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CyclicBarrier;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 5个线程相互等待，当5个线程的ready操作都准备好了，再执行continue操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CyclicBarrierExample1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CyclicBarrier barrier = <span class="keyword">new</span> CyclicBarrier(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        ExecutorService executor = Executors.newCachedThreadPool();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> threadNum = i;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            executor.execute(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    race(threadNum);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    log.error(<span class="string">"exception"</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        executor.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">race</span><span class="params">(<span class="keyword">int</span> threadNum)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        log.info(<span class="string">"&#123;&#125; is ready"</span>, threadNum);</span><br><span class="line">        <span class="comment">//计数器-1，等待直到为0</span></span><br><span class="line">        barrier.await();</span><br><span class="line">        log.info(<span class="string">"&#123;&#125; continue"</span>, threadNum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.machine.concurrency.example.aqs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CyclicBarrier;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CyclicBarrierExample2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CyclicBarrier barrier = <span class="keyword">new</span> CyclicBarrier(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        ExecutorService executor = Executors.newCachedThreadPool();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> threadNum = i;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            executor.execute(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    race(threadNum);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    log.error(<span class="string">"exception"</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        executor.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">race</span><span class="params">(<span class="keyword">int</span> threadNum)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        log.info(<span class="string">"&#123;&#125; is ready"</span>, threadNum);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//由于状态可能会改变，所以会抛出BarrierException异常，如果想继续往下执行，需要加上try-catch</span></span><br><span class="line">            barrier.await(<span class="number">2000</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.warn(<span class="string">"BarrierException"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">"&#123;&#125; continue"</span>, threadNum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.machine.concurrency.example.aqs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CyclicBarrier;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CyclicBarrierExample3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当线程全部到达屏障时，优先执行这里的runable</span></span><br><span class="line">    <span class="comment">//在ready和continue之间会执行的代码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CyclicBarrier barrier = <span class="keyword">new</span> CyclicBarrier(<span class="number">5</span>, () -&gt; &#123;</span><br><span class="line">        log.info(<span class="string">"callback is running"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        ExecutorService executor = Executors.newCachedThreadPool();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> threadNum = i;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            executor.execute(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    race(threadNum);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    log.error(<span class="string">"exception"</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        executor.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">race</span><span class="params">(<span class="keyword">int</span> threadNum)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        log.info(<span class="string">"&#123;&#125; is ready"</span>, threadNum);</span><br><span class="line">        barrier.await();</span><br><span class="line">        log.info(<span class="string">"&#123;&#125; continue"</span>, threadNum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p><strong>CyclicBarrier与CountDownLatch区别</strong></p>
<ol>
<li><p>CyclicBarrier可以重复使用（使用reset方法），CountDownLatch只能用一次</p>
</li>
<li><p>CountDownLatch主要用于实现一个或n个线程需要等待其他线程完成某项操作之后，才能继续往下执行，描述的是一个或n个线程等待其他线程的关系，而CyclicBarrier是多个线程相互等待，知道满足条件以后再一起往下执行。描述的是多个线程相互等待的场景</p>
<p>​</p>
</li>
</ol>
<h2 id="7-5-ReentrantLock与锁"><a href="#7-5-ReentrantLock与锁" class="headerlink" title="7-5 ReentrantLock与锁"></a>7-5 ReentrantLock与锁</h2><p>java一共分为两类锁，一类是由synchornized修饰的锁，还有一种是JUC里提供的锁，核心就是ReentrantLock</p>
<p>synchornized与ReentrantLock的区别对比</p>
<table>
<thead>
<tr>
<th>对比维度</th>
<th>synchornized</th>
<th>ReentrantLock</th>
</tr>
</thead>
<tbody><tr>
<td>可重入性（进入锁的时候计数器自增1）</td>
<td>可重入</td>
<td>可重入</td>
</tr>
<tr>
<td>锁的实现</td>
<td>JVM实现，很难操作源码，得到实现</td>
<td>JDK实现</td>
</tr>
<tr>
<td>性能</td>
<td>在引入轻量级锁后性能大大提升，建议都可以选择的时候选择synchornized</td>
<td>-</td>
</tr>
<tr>
<td>功能区别</td>
<td>方便简洁，由编译器负责加锁和释放锁</td>
<td>手工操作</td>
</tr>
<tr>
<td>粗粒度，不灵活</td>
<td>细粒度，可灵活控制</td>
<td></td>
</tr>
<tr>
<td>可否指定公平锁</td>
<td>不可以</td>
<td>可以</td>
</tr>
<tr>
<td>可否放弃锁</td>
<td>不可以</td>
<td>可以</td>
</tr>
</tbody></table>
<p>ReentrantLock独有功能：</p>
<ul>
<li>可指定是公平锁还是非公平锁</li>
<li>提供了一个Condition类，可以分组唤醒需要唤醒的线程</li>
<li>提供能够中断等待锁的线程的机制，lock.lockInterruptibly()</li>
</ul>
<p>ReentrantLock实现：自旋锁，循环调用CAS操作来实现加锁，避免了使线程进入内核态的阻塞状态。想办法阻止线程进入内核态的阻塞状态，是我们分析和理解锁的关键钥匙</p>
<p>基本使用：类似synchronized</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.machine.concurrency.example.lock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.machine.concurrency.annotations.ThreadSafe;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Semaphore;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@ThreadSafe</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockExample2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 请求总数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> clientTotal = <span class="number">5000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同时并发执行的线程数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> threadTotal = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">        <span class="keyword">final</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(threadTotal);</span><br><span class="line">        <span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(clientTotal);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; clientTotal ; i++) &#123;</span><br><span class="line">            executorService.execute(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    semaphore.acquire();</span><br><span class="line">                    add();</span><br><span class="line">                    semaphore.release();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    log.error(<span class="string">"exception"</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">                countDownLatch.countDown();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        countDownLatch.await();</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">        log.info(<span class="string">"count:&#123;&#125;"</span>, count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>ReentrantLock内置函数</p>
<p>基础特性：</p>
<ul>
<li><p>tryLock()：仅在调用时锁定未被另一个线程保持的情况下才获取锁定。</p>
</li>
<li><p>tryLock(long timeout, TimeUnit unit)：如果锁定在给定的时间内没有被另一个线程保持且当前线程没有被中断，则获取这个锁定。</p>
</li>
<li><p>lockInterruptbily：如果当前线程没有被中断的话，那么就获取锁定。如果中断了就抛出异常。</p>
</li>
<li><p>isLocked：查询此锁定是否由任意线程保持</p>
</li>
<li><p>isHeldByCurrentThread：查询当前线程是否保持锁定状态。</p>
</li>
<li><p>isFair：判断是不是公平锁 </p>
<p>…</p>
</li>
</ul>
<p><strong>ReentrantReadWriteLock</strong></p>
<p>在没有任何读写锁的时候才能取得写入的锁，可用于实现悲观读取（读优先，没有读时才能写），读多写少的场景下可能会出现线程饥饿</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.machine.concurrency.example.lock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeMap;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantReadWriteLock;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockExample3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Data&gt; map = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReentrantReadWriteLock lock = <span class="keyword">new</span> ReentrantReadWriteLock();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Lock readLock = lock.readLock();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Lock writeLock = lock.writeLock();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Data <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        readLock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> map.get(key);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            readLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">getAllKeys</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        readLock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> map.keySet();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            readLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在没有任何读写锁的时候才可以进行写入操作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Data <span class="title">put</span><span class="params">(String key, Data value)</span> </span>&#123;</span><br><span class="line">        writeLock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> map.put(key, value);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            readLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Data</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p><strong>StempedLock</strong></p>
<p>它控制锁有三种模式（写、读、乐观读）。一个StempedLock的状态是由版本和模式两个部分组成。锁获取方法返回一个数字作为票据（stamp），他用相应的锁状态表示并控制相关的访问。数字0表示没有写锁被锁写访问，在读锁上分为悲观锁和乐观锁。</p>
<p>乐观读：<br>如果读的操作很多写的很少，我们可以乐观的认为读的操作与写的操作同时发生的情况很少，因此不悲观的使用完全的读取锁定。程序可以查看读取资料之后是否遭到写入资料的变更，再采取之后的措施。</p>
<p>示例源码：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.machine.concurrency.example.lock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.StampedLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockExample4</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">double</span> x, y;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> StampedLock sl = <span class="keyword">new</span> StampedLock();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">double</span> deltaX, <span class="keyword">double</span> deltaY)</span> </span>&#123; <span class="comment">// an exclusively locked method</span></span><br><span class="line">            <span class="keyword">long</span> stamp = sl.writeLock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                x += deltaX;</span><br><span class="line">                y += deltaY;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                sl.unlockWrite(stamp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//下面看看乐观读锁案例</span></span><br><span class="line">        <span class="function"><span class="keyword">double</span> <span class="title">distanceFromOrigin</span><span class="params">()</span> </span>&#123; <span class="comment">// A read-only method</span></span><br><span class="line">            <span class="keyword">long</span> stamp = sl.tryOptimisticRead(); <span class="comment">//获得一个乐观读锁</span></span><br><span class="line">            <span class="keyword">double</span> currentX = x, currentY = y;  <span class="comment">//将两个字段读入本地局部变量</span></span><br><span class="line">            <span class="comment">//stamp=0表示没有写锁入侵，</span></span><br><span class="line">            <span class="keyword">if</span> (!sl.validate(stamp)) &#123; <span class="comment">//检查发出乐观读锁后同时是否有其他写锁发生？</span></span><br><span class="line">                stamp = sl.readLock();  <span class="comment">//如果没有，我们再次获得一个读悲观锁</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    currentX = x; <span class="comment">// 将两个字段读入本地局部变量</span></span><br><span class="line">                    currentY = y; <span class="comment">// 将两个字段读入本地局部变量</span></span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    sl.unlockRead(stamp);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> Math.sqrt(currentX * currentX + currentY * currentY);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//下面是悲观读锁案例</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">moveIfAtOrigin</span><span class="params">(<span class="keyword">double</span> newX, <span class="keyword">double</span> newY)</span> </span>&#123; <span class="comment">// upgrade</span></span><br><span class="line">            <span class="comment">// Could instead start with optimistic, not read mode</span></span><br><span class="line">            <span class="keyword">long</span> stamp = sl.readLock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (x == <span class="number">0.0</span> &amp;&amp; y == <span class="number">0.0</span>) &#123; <span class="comment">//循环，检查当前状态是否符合</span></span><br><span class="line">                    <span class="keyword">long</span> ws = sl.tryConvertToWriteLock(stamp); <span class="comment">//将读锁转为写锁</span></span><br><span class="line">                    <span class="keyword">if</span> (ws != <span class="number">0L</span>) &#123; <span class="comment">//这是确认转为写锁是否成功</span></span><br><span class="line">                        stamp = ws; <span class="comment">//如果成功 替换票据</span></span><br><span class="line">                        x = newX; <span class="comment">//进行状态改变</span></span><br><span class="line">                        y = newY;  <span class="comment">//进行状态改变</span></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123; <span class="comment">//如果不能成功转换为写锁</span></span><br><span class="line">                        sl.unlockRead(stamp);  <span class="comment">//我们显式释放读锁</span></span><br><span class="line">                        stamp = sl.writeLock();  <span class="comment">//显式直接进行写锁 然后再通过循环再试</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                sl.unlock(stamp); <span class="comment">//释放读锁或写锁</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p>简单使用</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> StampedLock lock = <span class="keyword">new</span> StampedLock();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> stamp = lock.writeLock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        count++;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock(stamp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p><strong>总结关于锁的几个类：</strong></p>
<p>synchronized：JVM实现，不但可以通过一些监控工具监控，而且在出现未知异常的时候JVM也会自动帮我们释放锁</p>
<p>ReentrantLock、ReentrantRead/WriteLock、StempedLock 他们都是对象层面的锁定，要想保证锁一定被释放，要放到finally里面，才会更安全一些；<strong>StempedLock对性能有很大的改进，特别是在读线程越来越多的情况下</strong>，StempedLock有一个复杂的API。</p>
<p><strong>如何选择锁？</strong></p>
<ul>
<li>当只有少量竞争者，使用synchronized </li>
<li>竞争者不少但是线程增长的趋势是能预估的，使用ReetrantLock </li>
<li>synchronized不会造成死锁，jvm会自动释放死锁。</li>
</ul>
<p><strong>Condition</strong></p>
<p>多线程间协调通信的工具类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.machine.concurrency.example.lock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockExample6</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ReentrantLock reentrantLock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"><span class="comment">// 从reentrantLock实例里获取了condition</span></span><br><span class="line">        Condition condition = reentrantLock.newCondition();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 线程1调用了lock方法，加入到了AQS的等待队里里面去</span></span><br><span class="line">                reentrantLock.lock();</span><br><span class="line">                log.info(<span class="string">"wait signal"</span>); <span class="comment">// 1 等待信号</span></span><br><span class="line">                <span class="comment">// 调用await方法后，从AQS队列里移除了，进入到了condition队列里面去，等待一个信号</span></span><br><span class="line">                condition.await();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            log.info(<span class="string">"get signal"</span>); <span class="comment">// 4 得到信号</span></span><br><span class="line"><span class="comment">// 线程1释放锁</span></span><br><span class="line">            reentrantLock.unlock();</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line"><span class="comment">// 线程1await释放锁以后，这里就获取了锁，加入到了AQS等待队列中</span></span><br><span class="line">            reentrantLock.lock();</span><br><span class="line">            log.info(<span class="string">"get lock"</span>); <span class="comment">// 2 获取锁</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//调用signalAll发送信号的方法,Condition节点的线程1节点元素被取出，放在了AQS等待队列里（注意并没有被唤醒）</span></span><br><span class="line">            condition.signalAll();</span><br><span class="line">            log.info(<span class="string">"send signal ~ "</span>); <span class="comment">// 3 发送信号</span></span><br><span class="line"><span class="comment">// 线程2释放锁，这时候AQS队列中只剩下线程1，线程1开始执行</span></span><br><span class="line">            reentrantLock.unlock();</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>Java并发编程与高并发解决方案</category>
      </categories>
      <tags>
        <tag>Java并发编程与高并发解决方案</tag>
      </tags>
  </entry>
  <entry>
    <title>并发编程与线程安全（3）：安全发布对象&amp;线程安全策略</title>
    <url>/2018/10/27/20181027141018462/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[TOC]</p>
<h1 id="第5章-安全发布对象"><a href="#第5章-安全发布对象" class="headerlink" title="第5章 安全发布对象"></a>第5章 安全发布对象</h1><h2 id="5-1-发布与溢出"><a href="#5-1-发布与溢出" class="headerlink" title="5-1 发布与溢出"></a>5-1 发布与溢出</h2><ul>
<li>发布对象：使一个对象能够被当前范围之外的代码所使用</li>
<li>对象溢出：一种错误的发布，当一个对象还没有构造完成时，就使它被其他线程所见</li>
</ul>
<p>不安全的发布</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.machine.concurrency.example.publish;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.machine.concurrency.annotations.NotThreadSafe;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 不安全的发布</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@NotThreadSafe</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsafePublish</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String[] states = &#123;<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过public发布级别发布了类的域，在类的外部，任何线程都可以访问这个域</span></span><br><span class="line"><span class="comment">     * 这样是不安全的，因为我们无法检查其他线程是否会修改这个域导致了错误</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String[] getStates() &#123;</span><br><span class="line">        <span class="keyword">return</span> states;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        UnsafePublish unsafePublish = <span class="keyword">new</span> UnsafePublish();</span><br><span class="line">        log.info(<span class="string">"&#123;&#125;"</span>, Arrays.toString(unsafePublish.getStates()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//可以修改值</span></span><br><span class="line">        unsafePublish.getStates()[<span class="number">0</span>] = <span class="string">"d"</span>;</span><br><span class="line">        log.info(<span class="string">"&#123;&#125;"</span>, Arrays.toString(unsafePublish.getStates()));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p>对象溢出</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.machine.concurrency.example.publish;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.machine.concurrency.annotations.NotRecommend;</span><br><span class="line"><span class="keyword">import</span> com.machine.concurrency.annotations.NotThreadSafe;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对象溢出</span></span><br><span class="line"><span class="comment"> * 在对象构造完成之前，不可以将其发布</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@NotThreadSafe</span></span><br><span class="line"><span class="meta">@NotRecommend</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Escape</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> thisCannBeEscape = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Escape</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> InnerClass();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 包含了对封装实例的隐藏和引用，这样在对象没有被正确构造完成之前就会被发布，由此导致不安全的因素在里面</span></span><br><span class="line"><span class="comment">     * 1.导致this引用在构造期间溢出的错误，他是在构造函数构造过程中启动了一个线程，造成this引用的溢出</span></span><br><span class="line"><span class="comment">     *   新线程只是在对象构造完毕之前就已经看到他了，所以如果要在构造函数中创建线程，那么不要启动它，</span></span><br><span class="line"><span class="comment">     *   而是用一个专有的start，或是其他的方式统一启动线程</span></span><br><span class="line"><span class="comment">     *   使用工厂方法和私有构造函数来完成对象创建和监听器的注册来避免不正确的发布</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span>  <span class="title">InnerClass</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">InnerClass</span><span class="params">()</span></span>&#123;</span><br><span class="line">            log.info(<span class="string">"&#123;&#125;"</span>,Escape.<span class="keyword">this</span>.thisCannBeEscape);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Escape();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="5-2-安全发布对象的4种方法"><a href="#5-2-安全发布对象的4种方法" class="headerlink" title="5-2 安全发布对象的4种方法"></a>5-2 安全发布对象的4种方法</h2><ul>
<li>在静态初始化函数中初始化一个对象引用</li>
<li>将对象的引用保存到volatile类型域或者AtomicReference对象中</li>
<li>将对象的引用保存到某个正确构造对象的final类型域中</li>
<li>将对象的引用保存到一个由锁保护的域中</li>
</ul>
<p><strong>单例模式</strong>（懒汉、饿汉、枚举）</p>
<blockquote>
<p> 以下代码讲述一个<strong>懒汉模式</strong>逐步优化的过程</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.machine.concurrency.example.singleton;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.machine.concurrency.annotations.NotThreadSafe;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉模式：单例实例在第一次使用时进行创建</span></span><br><span class="line"><span class="comment"> * 缺点：线程不安全</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@NotThreadSafe</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonExample1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有构造函数：外部不能通过new方法多次创建对象</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonExample1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 单例对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonExample1 instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态的工厂方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonExample1 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//当2个线程同时执行到这一步，2个线程都会执行new，</span></span><br><span class="line">        <span class="comment">// 违背了单例模式，线程不安全</span></span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">            instance = <span class="keyword">new</span> SingletonExample1();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.machine.concurrency.example.singleton;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.machine.concurrency.annotations.NotRecommend;</span><br><span class="line"><span class="keyword">import</span> com.machine.concurrency.annotations.ThreadSafe;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉模式：使用synchronized</span></span><br><span class="line"><span class="comment"> * 缺点：synchronized使同一时间只能一个线程进入getInstance方法，并发性能差</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ThreadSafe</span></span><br><span class="line"><span class="meta">@NotRecommend</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonExample3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonExample3</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonExample3 instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用synchronized</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> SingletonExample3 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> SingletonExample3();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.machine.concurrency.example.singleton;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.machine.concurrency.annotations.NotThreadSafe;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉模式 -》 双重同步锁单例模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@NotThreadSafe</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonExample4</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonExample4</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  new SingletonExample4()时发生了什么</span></span><br><span class="line">    <span class="comment">// 1、memory = allocate() 分配对象的内存空间</span></span><br><span class="line">    <span class="comment">// 2、ctorInstance() 初始化对象</span></span><br><span class="line">    <span class="comment">// 3、instance = memory 设置instance指向刚分配的内存</span></span><br><span class="line">    <span class="comment">// 如果不指令重排序，此方法线程安全，而且并发性能好</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 但是...JVM和cpu优化，发生了指令重排</span></span><br><span class="line">    <span class="comment">// 1、memory = allocate() 分配对象的内存空间</span></span><br><span class="line">    <span class="comment">// 3、instance = memory 设置instance指向刚分配的内存</span></span><br><span class="line">    <span class="comment">// 2、ctorInstance() 初始化对象</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonExample4 instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态的工厂方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonExample4 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123; <span class="comment">// 双重检测机制        // B</span></span><br><span class="line">            <span class="keyword">synchronized</span> (SingletonExample4<span class="class">.<span class="keyword">class</span>) </span>&#123; <span class="comment">// 同步锁</span></span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> SingletonExample4(); <span class="comment">// A - 3</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//重拍后，可能返回未初始化的对象</span></span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>懒汉模式 最终解决方案</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.machine.concurrency.example.singleton;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.machine.concurrency.annotations.ThreadSafe;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉模式 -》 双重同步锁单例模式</span></span><br><span class="line"><span class="comment"> * 双重检测+同步锁+volatile</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ThreadSafe</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonExample5</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonExample5</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1、memory = allocate() 分配对象的内存空间</span></span><br><span class="line">    <span class="comment">// 2、ctorInstance() 初始化对象</span></span><br><span class="line">    <span class="comment">// 3、instance = memory 设置instance指向刚分配的内存</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 单例对象 volatile + 双重检测机制 -&gt; 禁止指令重排</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> SingletonExample5 instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态的工厂方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonExample5 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123; <span class="comment">// 双重检测机制        // B</span></span><br><span class="line">            <span class="keyword">synchronized</span> (SingletonExample5<span class="class">.<span class="keyword">class</span>) </span>&#123; <span class="comment">// 同步锁</span></span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> SingletonExample5(); <span class="comment">// A - 3</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<blockquote>
<p>以下代码讲述一个<strong>饿汉模式</strong>逐步优化的过程</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.machine.concurrency.example.singleton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.machine.concurrency.annotations.ThreadSafe;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 饿汉模式：单例实例在类装载时进行创建</span></span><br><span class="line"><span class="comment"> * 缺点：1.如果创建过程中进行很多的运算，会导致类加载的时候特别的慢</span></span><br><span class="line"><span class="comment"> *      2.如果创建出来的实例要很久以后才被调用，那么会导致资源的浪费</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ThreadSafe</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonExample2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonExample2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//装载时创建</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonExample2 instance = <span class="keyword">new</span> SingletonExample2();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonExample2 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.machine.concurrency.example.singleton;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.machine.concurrency.annotations.ThreadSafe;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 饿汉模式: 通过静态代码块创建</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ThreadSafe</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonExample6</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonExample6</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//1和2的顺序不能反，不然会造成空指针异常</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//1</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonExample6 instance = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//2</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        instance = <span class="keyword">new</span> SingletonExample6();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonExample6 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(getInstance().hashCode());</span><br><span class="line">        System.out.println(getInstance().hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<blockquote>
<p><strong>枚举模式</strong>优化过程：最推荐</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.machine.concurrency.example.singleton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.machine.concurrency.annotations.Recommend;</span><br><span class="line"><span class="keyword">import</span> com.machine.concurrency.annotations.ThreadSafe;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 枚举模式：最安全</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ThreadSafe</span></span><br><span class="line"><span class="meta">@Recommend</span>  <span class="comment">//没有饿汉的并发性能问题，也没有懒汉需要额外代码来维护线程安全</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonExample7</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonExample7</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonExample7 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Singleton.INSTANCE.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//枚举类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">enum</span> Singleton &#123;</span><br><span class="line">        INSTANCE;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> SingletonExample7 singleton;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// JVM保证这个方法绝对只调用一次</span></span><br><span class="line">        Singleton() &#123;</span><br><span class="line">            singleton = <span class="keyword">new</span> SingletonExample7();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> SingletonExample7 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> singleton;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.machine.concurrency.example.singleton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.machine.concurrency.annotations.Recommend;</span><br><span class="line"><span class="keyword">import</span> com.machine.concurrency.annotations.ThreadSafe;</span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 枚举类型的单例，最安全最简单</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@ThreadSafe</span></span><br><span class="line"><span class="meta">@Recommend</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonExample8</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 私有构造函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonExample8</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 可能会进行很多≠操作，很多运算</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 静态工厂方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonExample8 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Singleton.INSTANCE.getSingletonExample8();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 由枚举类创建单例对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">enum</span>  Singleton&#123;</span><br><span class="line">        INSTANCE;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> SingletonExample8 singletonExample8;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//JVM保证只被执行一次</span></span><br><span class="line">        Singleton()&#123;</span><br><span class="line">            singletonExample8 = <span class="keyword">new</span> SingletonExample8();</span><br><span class="line">            System.out.println(<span class="string">"233"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        SingletonExample8.getInstance();</span><br><span class="line">        SingletonExample8.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h1 id="第6章-线程安全策略"><a href="#第6章-线程安全策略" class="headerlink" title="第6章 线程安全策略"></a>第6章 线程安全策略</h1><h2 id="6-1-不可变对象"><a href="#6-1-不可变对象" class="headerlink" title="6-1 不可变对象"></a>6-1 不可变对象</h2><p>不可变对象需要满足的条件</p>
<ul>
<li>对象创建以后其状态就不能修改</li>
<li>对象所有域都是final类型</li>
<li>对象是正确创建的（在对象创建期间，this引用没有逸出）</li>
</ul>
<p>创建不可变对象的方式（参考String类型）</p>
<ul>
<li>将类声明成final类型，使其不可以被继承</li>
<li>将所有的成员设置成私有的，使其他的类和对象不能直接访问这些成员</li>
<li>对变量不提供set方法</li>
<li>将所有可变的成员声明为final，这样只能对他们赋值一次</li>
<li>通过构造器初始化所有成员，进行深度拷贝</li>
<li>在get方法中，不直接返回对象本身，而是克隆对象，返回对象的拷贝</li>
</ul>
<p>final关键字：类、方法、变量</p>
<ul>
<li>修饰类：不能被继承（final类中的所有方法都会被隐式的声明为final方法）</li>
<li>修饰方法：1、锁定方法不被继承类修改；2、提升效率（private方法被隐式修饰为final方法）</li>
<li>修饰变量：基本数据类型变量（初始化之后不能修改）、引用类型变量（初始化之后不能再修改其引用，但原对象内部的值可以被改变）</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.machine.concurrency.example.immutable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.common.collect.Maps;</span><br><span class="line"><span class="keyword">import</span> com.machine.concurrency.annotations.NotThreadSafe;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@NotThreadSafe</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImmutableExample1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Integer a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String b = <span class="string">"2"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Map&lt;Integer, Integer&gt; map = Maps.newHashMap();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        map.put(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        map.put(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">        map.put(<span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        a = 2;</span></span><br><span class="line"><span class="comment">//        b = "3";</span></span><br><span class="line"><span class="comment">//        map = Maps.newHashMap();</span></span><br><span class="line">        map.put(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">        log.info(<span class="string">"&#123;&#125;"</span>, map.get(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        a = 1;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p>其他的不可变对象的创建</p>
<ul>
<li>Collection.unmodifiableXXX：Clollection、List、Set、Map…</li>
<li>Guava：ImmutableXXX：Collection、List、Set、Map…</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.machine.concurrency.example.immutable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.common.collect.Maps;</span><br><span class="line"><span class="keyword">import</span> com.machine.concurrency.annotations.ThreadSafe;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Collections.unmodifiableMap 创建完以后不允许被修改源码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@ThreadSafe</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImmutableExample2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Integer, Integer&gt; map = Maps.newHashMap();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        map.put(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        map.put(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">        map.put(<span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//内部原理：初始化的时候将传进来的map赋值给一个final类型的map，然后将所有会修改的方法直接抛出UnsupportedOperationException异常</span></span><br><span class="line">        map = Collections.unmodifiableMap(map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        map.put(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//会报错</span></span><br><span class="line">        log.info(<span class="string">"&#123;&#125;"</span>, map.get(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.machine.concurrency.example.immutable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.common.collect.ImmutableList;</span><br><span class="line"><span class="keyword">import</span> com.google.common.collect.ImmutableMap;</span><br><span class="line"><span class="keyword">import</span> com.google.common.collect.ImmutableSet;</span><br><span class="line"><span class="keyword">import</span> com.machine.concurrency.annotations.ThreadSafe;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Guava:Immutablexxx</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ThreadSafe</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImmutableExample3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> ImmutableList&lt;Integer&gt; list = ImmutableList.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> ImmutableSet set = ImmutableSet.copyOf(list);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> ImmutableMap&lt;Integer, Integer&gt; map = ImmutableMap.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> ImmutableMap&lt;Integer, Integer&gt; map2 = ImmutableMap.&lt;Integer, Integer&gt;builder()</span><br><span class="line">            .put(<span class="number">1</span>, <span class="number">2</span>).put(<span class="number">3</span>, <span class="number">4</span>).put(<span class="number">5</span>, <span class="number">6</span>).build();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//put方法执行都会跑异常</span></span><br><span class="line">        System.out.println(map2.get(<span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="6-2-线程封闭"><a href="#6-2-线程封闭" class="headerlink" title="6-2 线程封闭"></a>6-2 线程封闭</h2><p>把对象封装到一个线程里，只有这个线程能看到这个对象(所以不存在并发下的线程安全，因为只有一个线程操作该对象)</p>
<p>实现线程封闭</p>
<ul>
<li><p>Ad-hoc 线程封闭：程序控制实现，最糟糕，忽略</p>
</li>
<li><p>堆栈封闭：局部变量，无并发问题（在方法内部定义局部变量）</p>
</li>
<li><p>ThreadLocal 线程封闭：特别好的封闭方法</p>
<p>​</p>
</li>
</ul>
<p>ThreadLocal：主要用于将私有线程和该线程存放的副本对象做一个映射，各个线程之间的变量互不干扰，在高并发场景下，可以实现无状态的调用，特别适用于各个线程依赖不通的变量值完成操作的场景。</p>
<p>参考：<a href="https://www.jianshu.com/p/98b68c97df9b" target="_blank" rel="noopener">https://www.jianshu.com/p/98b68c97df9b</a></p>
<h2 id="6-3-线程不安全类与写法"><a href="#6-3-线程不安全类与写法" class="headerlink" title="6-3 线程不安全类与写法"></a>6-3 线程不安全类与写法</h2><p><strong>常用的线程不安全类</strong></p>
<ol>
<li><p>StringBuilder 线程不安全，StringBuffer线程安全</p>
<p>原因:StringBuffer几乎所有的方法都加了synchronized关键字</p>
<p>为什么需要StringBuilder：由于StringBuffer 加了 synchronized 所以性能会下降很多，所以在堆栈封闭等线程安全的环境下应该首先选用StringBuilder</p>
</li>
</ol>
<ol start="2">
<li>SimpleDateFormat<br>SimpleDateFormat 在多线程共享使用的时候回抛出转换异常，应该才用堆栈封闭在每次调用方法的时候在方法里创建一个SimpleDateFormat<br>另一种方式是使用joda-time的DateTimeFormatter(推荐使用)</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> DateTimeFormatter dateTimeFormatter = DateTimeFormat.forPattern(<span class="string">"yyyyMMdd"</span>);</span><br><span class="line"></span><br><span class="line">DateTime.parse(<span class="string">"20180320"</span>,dateTimeFormatter).toDate();</span><br></pre></td></tr></table></figure></div>



<ol start="3">
<li><p>ArrayList,HashMap,HashSet等Collections</p>
<p>ArrayList,HashMap,HashSet都不安全</p>
</li>
</ol>
<p><strong>线程不安全写法</strong></p>
<p>先检查再执行</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 非原子性，需要加个锁保证原子性</span></span><br><span class="line"><span class="keyword">if</span>(condition(a))&#123;</span><br><span class="line">  handle(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="6-4-同步容器"><a href="#6-4-同步容器" class="headerlink" title="6-4 同步容器"></a>6-4 同步容器</h2><ol>
<li><p>同一接口，不同实现的线程安全类</p>
<ul>
<li>ArrayList -&gt;  Vector、Stack</li>
<li>HashMap -&gt; HashTable(key、Value不能为null)</li>
</ul>
<p>vector的所有方法都是有synchronized关键字保护的<br>stack继承了vector，并且提供了栈操作（先进后出）<br>hashtable也是由synchronized关键字保护</p>
<p>​</p>
</li>
<li><p>Collections.synchronizedXXX (list,set,map)</p>
<p>​</p>
</li>
</ol>
<p>同步容器并不一定线程安全</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.machine.concurrency.example.syncContainer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.machine.concurrency.annotations.NotThreadSafe;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Vector;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 并发测试</span></span><br><span class="line"><span class="comment"> * 同步容器不一定线程安全</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> gaowenfeng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@NotThreadSafe</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VectorExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 请求总数 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> clientTotal = <span class="number">5000</span>;</span><br><span class="line">    <span class="comment">/** 同时并发执行的线程数 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> threadTotal = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Integer&gt; list = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            list.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                list.remove(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="comment">// thread2想get i=9的元素的时候，thread1将i=9的元素remove了，导致数组越界</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                list.get(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p>在foreach或迭代器遍历的过程中不要做删除操作，应该先标记，然后最后再统一删除</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.machine.concurrency.example.syncContainer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Vector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VectorExample2</span> </span>&#123;</span><br><span class="line">    <span class="comment">// java.util.ConcurrentModificationException</span></span><br><span class="line">    <span class="comment">// 在遍历的同时进行了删除的操作，导致抛出了并发修改的异常</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">(Vector&lt;Integer&gt; v1)</span> </span>&#123; <span class="comment">// foreach</span></span><br><span class="line">        <span class="keyword">for</span>(Integer i : v1) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i.equals(<span class="number">3</span>)) &#123;</span><br><span class="line">                v1.remove(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// java.util.ConcurrentModificationException</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">(Vector&lt;Integer&gt; v1)</span> </span>&#123; <span class="comment">// iterator</span></span><br><span class="line">        Iterator&lt;Integer&gt; iterator = v1.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            Integer i = iterator.next();</span><br><span class="line">            <span class="keyword">if</span> (i.equals(<span class="number">3</span>)) &#123;</span><br><span class="line">                v1.remove(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// success</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">(Vector&lt;Integer&gt; v1)</span> </span>&#123; <span class="comment">// for</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v1.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (v1.get(i).equals(<span class="number">3</span>)) &#123;</span><br><span class="line">                v1.remove(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Vector&lt;Integer&gt; vector = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line">        vector.add(<span class="number">1</span>);</span><br><span class="line">        vector.add(<span class="number">2</span>);</span><br><span class="line">        vector.add(<span class="number">3</span>);</span><br><span class="line">        test1(vector);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p>同步容器也存在很多安全问题，因此java提供了并发容器J.U.C</p>
<h2 id="6-5-并发容器"><a href="#6-5-并发容器" class="headerlink" title="6-5 并发容器"></a>6-5 并发容器</h2><ul>
<li><p>ArrayList - &gt; CopyOnWriteArrayList</p>
<p>关于CopyOnWriteArrayList的介绍：<a href="https://blog.csdn.net/linsongbin1/article/details/54581787" target="_blank" rel="noopener">https://blog.csdn.net/linsongbin1/article/details/54581787</a></p>
</li>
</ul>
<ul>
<li><p>HashSet、TreeSet -&gt; CopyOnWriteArraySet、ConcurrentSkipListSet</p>
<p>​</p>
</li>
<li><p>HashMap、TreeMap -&gt; ConcurrentHashMap、ConcurrentSkipListMap</p>
</li>
</ul>
<p>J.U.C体系：tools、locks、aotmic、collections、executor</p>
<h2 id="6-6-安全共享对象策略-总结"><a href="#6-6-安全共享对象策略-总结" class="headerlink" title="6-6 安全共享对象策略-总结"></a>6-6 安全共享对象策略-总结</h2><ul>
<li><p>线程限制：一个被线程限制的对象，由线程独占，并且只能被占有它的线程修改</p>
</li>
<li><p>共享只读：一个共享只读的对象，在没有额外同步的情况下，可以被多个线程并发访问，但是任何线程都不能修改它</p>
</li>
<li><p>线程安全对象：一个线程安全的对象或容器，在内部通过同步机制来保证线程安全，所以其他线程无需额外的同步就可以通过公共接口随意访问它</p>
</li>
<li><p>被守护对象：被守护对象只能通过获取特定的锁来访问</p>
<p>​</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Java并发编程与高并发解决方案</category>
      </categories>
      <tags>
        <tag>Java并发编程与高并发解决方案</tag>
      </tags>
  </entry>
  <entry>
    <title>【Linux转载集合】</title>
    <url>/2018/10/12/15393432974594/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>ubunto更新软件源<br><a href="https://www.cnblogs.com/flyinggod/p/7979108.html" target="_blank" rel="noopener">https://www.cnblogs.com/flyinggod/p/7979108.html</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>modbus通信-java实现</title>
    <url>/2018/10/10/15391468341911/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="硬件测试仿真"><a href="#硬件测试仿真" class="headerlink" title="硬件测试仿真"></a>硬件测试仿真</h1><p>工具：</p>
<p>vspd虚拟串口：仿真串口、创建虚拟 COM 对</p>
<p>ModbusPoll：主站设备仿真软件</p>
<p>ModbusSlave：从站设备仿真软件</p>
<p><strong>实现ModbusPoll与ModbusSlave的通信</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Modbus Poll与Modbus Slave安装破解教程及使用指南</span><br><span class="line">https:&#x2F;&#x2F;www.jb51.net&#x2F;softjc&#x2F;597246.html</span><br></pre></td></tr></table></figure></div>



<h1 id="modbus4j实现通信"><a href="#modbus4j实现通信" class="headerlink" title="modbus4j实现通信"></a>modbus4j实现通信</h1><p>modbus4j: <a href="https://github.com/infiniteautomation/modbus4j" target="_blank" rel="noopener">https://github.com/infiniteautomation/modbus4j</a></p>
<p>pom.xml</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>ias-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Infinite Automation Snapshot Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.mangoautomation.net/repository/ias-snapshot/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>ias-releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Infinite Automation Release Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.mangoautomation.net/repository/ias-release/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.infiniteautomation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>modbus4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>



<p>ModbusUtils</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> machine.example.modbus.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.serotonin.modbus4j.ModbusFactory;</span><br><span class="line"><span class="keyword">import</span> com.serotonin.modbus4j.ModbusMaster;</span><br><span class="line"><span class="keyword">import</span> com.serotonin.modbus4j.exception.ModbusInitException;</span><br><span class="line"><span class="keyword">import</span> com.serotonin.modbus4j.exception.ModbusTransportException;</span><br><span class="line"><span class="keyword">import</span> com.serotonin.modbus4j.ip.IpParameters;</span><br><span class="line"><span class="keyword">import</span> com.serotonin.modbus4j.msg.*;</span><br><span class="line"><span class="keyword">import</span> com.serotonin.modbus4j.sero.util.queue.ByteQueue;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ModbusUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 写数据到寄存器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ip 从站IP</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> port modbus端口</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> slaveId 从站id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> writeOffset 启始地址偏移量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sdata 待写数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">modbusWriteTCP</span><span class="params">(String ip, <span class="keyword">int</span> port,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">int</span> slaveId, <span class="keyword">int</span> writeOffset,<span class="keyword">short</span>[] sdata)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置要连接的modbus从站信息</span></span><br><span class="line">        ModbusFactory modbusFactory = <span class="keyword">new</span> ModbusFactory();</span><br><span class="line">        IpParameters params = <span class="keyword">new</span> IpParameters();</span><br><span class="line">        params.setHost(ip);</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">502</span>!=port)&#123;</span><br><span class="line">            params.setPort(port);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建modbus主站</span></span><br><span class="line">        ModbusMaster tcpMaster = modbusFactory.createTcpMaster(params, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            tcpMaster.init();</span><br><span class="line">            log.info(<span class="string">"modbus主站初始化成功"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ModbusInitException e) &#123;</span><br><span class="line">            log.error(<span class="string">"modbus主站初始化异常："</span>+e.getStackTrace());</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//功能码16(slave设置为03)</span></span><br><span class="line">            WriteRegistersRequest request = <span class="keyword">new</span> WriteRegistersRequest(slaveId, writeOffset, sdata);</span><br><span class="line">            WriteRegistersResponse response = (WriteRegistersResponse)tcpMaster.send(request);</span><br><span class="line">            <span class="keyword">if</span>(response.isException())&#123;</span><br><span class="line">                log.error(<span class="string">"Exception response: "</span>+ response.getExceptionMessage());</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                log.info(<span class="string">"response success"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ModbusTransportException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从寄存器读数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> host  从站IP</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> port  modbus端口</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> slaveId   从站id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> startOffset   起始地址偏移量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> numberOfRegisters 待读寄存器个数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ByteQueue <span class="title">modbusReadTCP</span><span class="params">(String host,<span class="keyword">int</span> port,<span class="keyword">int</span> slaveId</span></span></span><br><span class="line"><span class="function"><span class="params">                    ,<span class="keyword">int</span> startOffset,<span class="keyword">int</span> numberOfRegisters)</span></span>&#123;</span><br><span class="line">        ModbusFactory modbusFactory = <span class="keyword">new</span> ModbusFactory();</span><br><span class="line">        IpParameters params = <span class="keyword">new</span> IpParameters();</span><br><span class="line">        params.setHost(host);</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">502</span>!=port)&#123;</span><br><span class="line">            params.setPort(port);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ModbusMaster tcpMaster = modbusFactory.createTcpMaster(params, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            tcpMaster.init();</span><br><span class="line">            log.info(<span class="string">"modbus主站初始化成功"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ModbusInitException e) &#123;</span><br><span class="line">            log.error(<span class="string">"modbus主站初始化异常："</span>+e.getStackTrace());</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ReadHoldingRegistersRequest request = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//功能码03(在slave上修改寄存器即可)</span></span><br><span class="line">            request = <span class="keyword">new</span> ReadHoldingRegistersRequest(slaveId, startOffset, numberOfRegisters);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ModbusTransportException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ModbusResponse response = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            response = tcpMaster.send(request);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ModbusTransportException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        ByteQueue byteQueue = <span class="keyword">new</span> ByteQueue(<span class="number">1024</span>);</span><br><span class="line">        response.write(byteQueue);</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"功能码："</span>+request.getFunctionCode());</span><br><span class="line">        log.info(<span class="string">"从站地址："</span>+request.getSlaveId());</span><br><span class="line">        log.info(<span class="string">"收到响应信息大小："</span>+byteQueue.size());</span><br><span class="line">        log.info(<span class="string">"收到响应信息值："</span>+byteQueue);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> byteQueue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">short</span>[] sdata = &#123;<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        <span class="comment">//ModbusUtils.modbusWriteTCP("192.168.199.228",502,1,40001,sdata);</span></span><br><span class="line">        ModbusUtils.modbusReadTCP(<span class="string">"192.168.199.228"</span>,<span class="number">502</span>,<span class="number">1</span>,</span><br><span class="line">                <span class="number">40001</span>,<span class="number">9</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>





]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>glib-The Main Event Loop</title>
    <url>/2018/10/08/15389750260474/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>代码地址：<a href="https://gitee.com/machine4869/example-code/tree/master/note_glib/glib_The%20Main%20Event%20Loop" target="_blank" rel="noopener">glib-The Main Event Loop</a></p>
</blockquote>
<h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * glib-The Main Event Loop</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*  API</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> GMainLoop *g_main_loop_new(GMainContext *context, //NULL：程序会分配一个默认的Context给GMainLoop</span></span><br><span class="line"><span class="comment">                        gboolean is_running);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> //把GSource加到GMainContext</span></span><br><span class="line"><span class="comment"> guint g_source_attach(GSource *source , GMainContext   *context);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> void g_source_set_callback (GSource *source,</span></span><br><span class="line"><span class="comment">                       GSourceFunc func,</span></span><br><span class="line"><span class="comment">                       gpointer data,   //要传递给回调函数的数据</span></span><br><span class="line"><span class="comment">                       GDestroyNotify notify);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> GSource * g_source_new (GSourceFuncs *source_funcs,    //GSource的接口函数</span></span><br><span class="line"><span class="comment">                        guint struct_size); //事件源的大小</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 接口函数如下</span></span><br><span class="line"><span class="comment">     struct _GSourceFuncs</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">      gboolean (*prepare)  (GSource    *source,</span></span><br><span class="line"><span class="comment">                            gint       *timeout_);</span></span><br><span class="line"><span class="comment">      gboolean (*check)    (GSource    *source);</span></span><br><span class="line"><span class="comment">      gboolean (*dispatch) (GSource    *source,</span></span><br><span class="line"><span class="comment">                            GSourceFunc callback,</span></span><br><span class="line"><span class="comment">                            gpointer    user_data);</span></span><br><span class="line"><span class="comment">      void     (*finalize) (GSource    *source);    // Can be NULL</span></span><br><span class="line"><span class="comment">   &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    gboolean (*prepare) (GSource *source, gint *timeout_);进入睡眠之前，在g_main_context_prepare里，mainloop调用所有Source的prepare函数，计算最小的timeout时间，该时间决定下一次睡眠的时间。</span></span><br><span class="line"><span class="comment">    gboolean (*check) (GSource *source); poll被唤醒后，在 g_main_context_check里，mainloop调用所有Source的check函数，检查是否有Source已经准备好了。如果poll是由于错误或者超时等原因唤醒的，就不必进行dispatch了。</span></span><br><span class="line"><span class="comment">    gboolean (*dispatch) (GSource*source, GSourceFunc callback,gpointer user_data); 当有Source准备好了，在 g_main_context_dispatch里，mainloop调用所有Source的dispatch函数，去分发消息。</span></span><br><span class="line"><span class="comment">    void (*finalize) (GSource *source); 在Source被移出时，mainloop调用该函数去销毁Source。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div>

<h1 id="主循环（g-main-loop）"><a href="#主循环（g-main-loop）" class="headerlink" title="主循环（g_main_loop）"></a>主循环（g_main_loop）</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;glib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">GMainLoop *loop;</span><br><span class="line">gint counter = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">gboolean <span class="title">callback01</span><span class="params">(gpointer arg)</span></span>&#123;</span><br><span class="line">    g_print(<span class="string">"."</span>);</span><br><span class="line">    <span class="keyword">if</span>(--counter ==<span class="number">0</span>)&#123;</span><br><span class="line">        g_print(<span class="string">"\n"</span>);</span><br><span class="line">        <span class="comment">//退出循环</span></span><br><span class="line">        g_main_loop_quit(loop);</span><br><span class="line">        <span class="comment">//注销定时器</span></span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定时器继续运行</span></span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当stdin有数据可读时被GSource调用的回调函数</span></span><br><span class="line"><span class="function">gboolean <span class="title">callback02</span><span class="params">(GIOChannel *channel)</span></span>&#123;</span><br><span class="line">    gchar* str;</span><br><span class="line">    gsize len;</span><br><span class="line">    <span class="comment">//从stdin读取一行字符串</span></span><br><span class="line">    g_io_channel_read_line(channel, &amp;str, &amp;len, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//去掉回车键()</span></span><br><span class="line">    <span class="keyword">while</span>(len &gt; <span class="number">0</span> &amp;&amp; (str[len<span class="number">-1</span>] == <span class="string">'\r'</span> || str[len<span class="number">-1</span>] == <span class="string">'\n'</span>))</span><br><span class="line">        str[--len]=<span class="string">'\0'</span>;</span><br><span class="line">    <span class="comment">//反转字符串</span></span><br><span class="line">    <span class="keyword">for</span>(;len;len--)</span><br><span class="line">        g_print(<span class="string">"%c"</span>,str[len<span class="number">-1</span>]);</span><br><span class="line">    g_print(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="comment">//判断结束符</span></span><br><span class="line">    <span class="keyword">if</span>(strcasecmp(str, <span class="string">"q"</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">        g_main_loop_quit(loop);</span><br><span class="line">    &#125;</span><br><span class="line">    g_free(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_source</span><span class="params">(GMainContext *context)</span></span>&#123;</span><br><span class="line">    GIOChannel* channel;</span><br><span class="line">    GSource* source;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里我们监视stdin是否可读， stdin的fd默认等于1</span></span><br><span class="line">    channel = g_io_channel_unix_new(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//G_IO_IN表示监视stdin的读取状态</span></span><br><span class="line">    source = g_io_create_watch(channel, G_IO_IN);</span><br><span class="line">    g_io_channel_unref(channel);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置stdin可读的时候调用的回调函数</span></span><br><span class="line">    g_source_set_callback(source, (GSourceFunc)callback02, channel, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//把GSource附加到GMainContext</span></span><br><span class="line">    g_source_attach(source, context);</span><br><span class="line">    g_source_unref(source);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 功能：开启主循环，设置定时任务，在1s钟后退出主循环</span></span><br><span class="line"><span class="comment"> * 解析：主线程跑起来后（g_main_loop_run）程序会一直阻塞，所以开启定时任务退出主循环（g_main_loop_quit）</span></span><br><span class="line"><span class="comment"> *      主循环退出后，整个程序就结束了。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main01</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//- 新建一个glib主循环</span></span><br><span class="line">    loop = g_main_loop_new(<span class="literal">NULL</span>, FALSE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//- 设置定时器,每10毫秒调用callback</span></span><br><span class="line">    g_timeout_add(<span class="number">100</span>,callback01,<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//- 让循环体跑起来</span></span><br><span class="line">    g_main_loop_run(loop);</span><br><span class="line">    <span class="comment">//g_main_loop_unref(loop);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* event loop</span></span><br><span class="line"><span class="comment">   - 所有需要异步操作的地方都可以用event loop</span></span><br><span class="line"><span class="comment">   - event loop的这三个基本结构：GMainLoop, GMainContext和GSource</span></span><br><span class="line"><span class="comment">        关系：GMainLoop -&gt; GMainContext -&gt; &#123;GSource1, GSource2, GSource3......&#125;</span></span><br><span class="line"><span class="comment">        GSource则是具体的各种Event处理逻辑了。可以把GMainContext理解为GSource的容器。</span></span><br><span class="line"><span class="comment">        把GSource加到GMainContext呢，则使用函数g_source_attach</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* ref/unref</span></span><br><span class="line"><span class="comment">   引用计数是追踪对象生命周期最常用的方法，一方面保证对象在有人使用时不会被销毁，另外一方面又保证不会因为忘记销毁对象而造成内存泄漏。</span></span><br><span class="line"><span class="comment">   具有引用计数功能的对象一般都会提供两个函数：ref用于增加引用计数，unref用于减少引用计数，计数为0时销毁对象。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 功能：从stdin读取字符串，然后反转字符串并输出到屏幕</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main02</span><span class="params">()</span></span>&#123;</span><br><span class="line">    GMainContext *context;</span><br><span class="line">    <span class="comment">//新建一个GMainContext</span></span><br><span class="line">    context = g_main_context_new();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//然后把GSource附到这个Context上</span></span><br><span class="line">    add_source(context);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//把Context赋给GMainLoop</span></span><br><span class="line">    loop = g_main_loop_new(context, FALSE);</span><br><span class="line"></span><br><span class="line">    g_print(<span class="string">"input string('q' to quit):\n"</span>);</span><br><span class="line"></span><br><span class="line">    g_main_loop_run(loop);</span><br><span class="line"></span><br><span class="line">    g_main_loop_unref(loop);</span><br><span class="line">    g_main_context_unref(context);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="事件源（GSource）"><a href="#事件源（GSource）" class="headerlink" title="事件源（GSource）"></a>事件源（GSource）</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;glib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;glib/gprintf.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">GMainLoop *loop;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义的事件源</span></span><br><span class="line"><span class="comment">// 是一个继承 GSource 的结构体,即自定义事件源的结构体的第一个成员是 GSource 结构体,</span></span><br><span class="line"><span class="comment">// 其后便可放置程序所需数据</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">MySource</span> <span class="title">MySource</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">MySource</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    GSource _source;</span><br><span class="line">    gchar <span class="built_in">text</span>[<span class="number">256</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">static</span> gboolean <span class="title">prepare</span><span class="params">(GSource *source, gint *timeout)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    *timeout = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> gboolean <span class="title">check</span><span class="params">(GSource *source)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> gboolean <span class="title">dispatch</span><span class="params">(GSource *source, GSourceFunc callback, gpointer user_data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MySource *mysource = (MySource *)source;</span><br><span class="line"></span><br><span class="line">    g_print(<span class="string">"%s\n"</span>, mysource-&gt;<span class="built_in">text</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> gboolean <span class="title">idle_func</span><span class="params">(gpointer data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    g_print(<span class="string">"%s\n"</span>, (gchar *)data);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> gboolean <span class="title">timeout_func</span><span class="params">(gpointer data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> guint i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    i += <span class="number">1</span>;</span><br><span class="line">    g_print (<span class="string">"%d\n"</span>, i);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*  Glib事件源</span></span><br><span class="line"><span class="comment"> GLib 内部实现了三种类型的事件源，分别是 Timeout, Idle,  I/O, 也支持创建自定义的事件源</span></span><br><span class="line"><span class="comment"> 1. Timeout事件源</span></span><br><span class="line"><span class="comment">    g_timeout_add(100,callback,NULL);</span></span><br><span class="line"><span class="comment"> 2. Idle事件源</span></span><br><span class="line"><span class="comment"> 3. 自定义事件源：g_source_new（见API）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1.1、自定义idle类型事件源：创建一个只会讲“Hello world!”的事件源,并将其添加到主事件循环默认的 GMainContext 中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    loop = g_main_loop_new(<span class="literal">NULL</span>, TRUE);</span><br><span class="line">    GMainContext *context = g_main_loop_get_context(loop);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实现事件源所规定的接口,主要为 prepare, check, dispatch, finalize 等事件处理函数(回调函数)</span></span><br><span class="line">    GSourceFuncs source_funcs = &#123;<span class="built_in">prepare</span>, check, dispatch, <span class="literal">NULL</span>&#125;;</span><br><span class="line">    <span class="comment">//自定义事件源,实现规定接口</span></span><br><span class="line">    GSource *source = g_source_new(&amp;source_funcs, <span class="keyword">sizeof</span>(MySource));</span><br><span class="line">    <span class="comment">//赋值</span></span><br><span class="line">    g_sprintf(((MySource *)source)-&gt;<span class="built_in">text</span>, <span class="string">"Hello world!"</span>);</span><br><span class="line">    <span class="comment">//将事件源绑定在context上</span></span><br><span class="line">    g_source_attach(source, context);</span><br><span class="line">    g_source_unref(source);</span><br><span class="line">    g_main_loop_run(loop);</span><br><span class="line"></span><br><span class="line">    g_main_context_unref(context);</span><br><span class="line">    g_main_loop_unref(loop);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 上述代码描述：</span></span><br><span class="line"><span class="comment">    - g_main_loop_run 函数运行时,会迭代访问 GMainContext 的事件源列表</span></span><br><span class="line"><span class="comment">        - g_main_loop_run 通过调用事件源的 prepare 接口并判断其返回值以确定各事件源是否作好准备。</span></span><br><span class="line"><span class="comment">          如果各事件源的 prepare 接口的返回值为 TRUE,即表示该事件源已经作好准备,否则表示尚未做好准备。</span></span><br><span class="line"><span class="comment">        - 若某事件源尚未作好准备 ,那么 g_main_loop 会在处理完那些已经准备好的事件后再次询问该事件源是否作好准备 ,这一过程是通过调用事件源的 check 接口而实现的</span></span><br><span class="line"><span class="comment">          如果事件源依然未作好准备,即 check 接口的返回 FALSE,那么 g_main_loop_run 会让主事件循环进入睡眠状态。</span></span><br><span class="line"><span class="comment">          主事件循环的睡眠时间是步骤 a 中遍历时间源时所统计的最小时间间隔 ,例如在 prepare 接口中可以像下面这样设置时间间隔。</span></span><br><span class="line"><span class="comment">            static gboolean prepare(GSource *source, gint *timeout)</span></span><br><span class="line"><span class="comment">            &#123;</span></span><br><span class="line"><span class="comment">                *timeout = 1000; //set time interval one second</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                return TRUE;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        - 若事件源 prepare 与 check 函数返回值均为 TRUE,则 g_main_loop_run 会调用事件源的 dispatch 接口,由该接口调用事件源的响应函数。</span></span><br><span class="line"><span class="comment">          事件源的响应函数是回调函数,可使用 g_source_set_callback 函数进行设定。在上例中, 我们没有为自定义的事件源提供响应函数。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    - 上文自定义的事件源实际是 Idle 类型(低优先级)的，此类事件源，是指那些只有在主事件循环无其他事件源处理时才会被处理的事件源。</span></span><br><span class="line"><span class="comment">      GLib 提供了预定义的空闲事件源类型,其用法见下面的示例。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1.2、预定义idle事件源：GLib 提供了预定义的空闲事件源类型(idle),其用法见下面的示例。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main02</span><span class="params">()</span></span>&#123;</span><br><span class="line">    GMainLoop *loop = g_main_loop_new(<span class="literal">NULL</span>, TRUE);</span><br><span class="line">    GMainContext *context = g_main_loop_get_context(loop);</span><br><span class="line"></span><br><span class="line">    g_idle_add(idle_func, <span class="string">"Hello world!"</span>);</span><br><span class="line"></span><br><span class="line">    g_main_loop_run(loop);</span><br><span class="line"></span><br><span class="line">    g_main_context_unref(context);</span><br><span class="line">    g_main_loop_unref(loop);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 上述代码描述：</span></span><br><span class="line"><span class="comment">   - idle_func 是 idle 事件源的响应函数,如果该函数返回值为 TRUE,那么它会在主事件循环空闲时重复被执行;</span></span><br><span class="line"><span class="comment">   - 如果 idle_func 的返回值为 FALSE,那么该函数在执行一次后,便被主事件循环从事件源中移除。</span></span><br><span class="line"><span class="comment">   - g_idle_add 函数内部定义了一个空闲事件源,并将用户定义的回调函数设为空闲事件源的响应函数, 然后将该事件源挂到主循环上下文。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 2.1、预定义Timeout类事件源：GLib 也提供了预定义的定时器事件源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main03</span><span class="params">()</span></span>&#123;</span><br><span class="line">    GMainLoop *loop = g_main_loop_new(<span class="literal">NULL</span>, TRUE);</span><br><span class="line">    GMainContext *context = g_main_loop_get_context(loop);</span><br><span class="line"></span><br><span class="line">    g_timeout_add(<span class="number">1000</span>, timeout_func, loop);</span><br><span class="line"></span><br><span class="line">    g_main_loop_run(loop);</span><br><span class="line"></span><br><span class="line">    g_main_context_unref(context);</span><br><span class="line">    g_main_loop_unref(loop);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  - 如果要自定义定时器类型的事件源,只需让事件源的 prepare 与 check 接口在时间超过所设定的时间间隔时返回 TRUE, 否则返回 FALSE。</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;glib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">MySource</span> <span class="title">MySource</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">MySource</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    GSource _source;</span><br><span class="line">    GIOChannel *channel;</span><br><span class="line">    GPollFD fd;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">static</span> gboolean <span class="title">prepare</span><span class="params">(GSource *source, gint *timeout)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    *timeout = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> gboolean <span class="title">check</span><span class="params">(GSource *source)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MySource *mysource = (MySource *)source;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(mysource-&gt;fd.revents != mysource-&gt;fd.events)</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> gboolean <span class="title">dispatch</span><span class="params">(GSource *source, GSourceFunc callback, gpointer user_data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MySource *mysource = (MySource *)source;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(callback)</span><br><span class="line">        callback(mysource-&gt;channel);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">(GSource *source)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MySource *mysource = (MySource *)source;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(mysource-&gt;channel)</span><br><span class="line">        g_io_channel_unref(mysource-&gt;channel);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> gboolean <span class="title">watch</span><span class="params">(GIOChannel *channel)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    gsize len = <span class="number">0</span>;</span><br><span class="line">    gchar *<span class="built_in">buffer</span> = <span class="literal">NULL</span>;</span><br><span class="line">    g_io_channel_read_line(channel, &amp;<span class="built_in">buffer</span>, &amp;len, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span>(len &gt; <span class="number">0</span>)</span><br><span class="line">        g_print(<span class="string">"%d\n"</span>, len<span class="number">-1</span>);</span><br><span class="line">    g_free(<span class="built_in">buffer</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">gboolean <span class="title">io_watch</span><span class="params">(GIOChannel *channel, GIOCondition condition, gpointer data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    gsize len = <span class="number">0</span>;</span><br><span class="line">    gchar *<span class="built_in">buffer</span> = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    g_io_channel_read_line(channel, &amp;<span class="built_in">buffer</span>, &amp;len, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span>(len &gt; <span class="number">0</span>)</span><br><span class="line">        g_print(<span class="string">"%d\n"</span>, len<span class="number">-1</span>);</span><br><span class="line">    g_free(<span class="built_in">buffer</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 3.1、自定义的 I/O 类型事件源: 接受用户在终端中输入的字符串,并统计输入的字符数量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    GMainLoop *loop = g_main_loop_new(<span class="literal">NULL</span>, FALSE);</span><br><span class="line">    GSourceFuncs funcs = &#123;<span class="built_in">prepare</span>, check, dispatch, finalize&#125;;</span><br><span class="line">    GSource *source = g_source_new(&amp;funcs, <span class="keyword">sizeof</span>(MySource));</span><br><span class="line">    MySource *mysource = (MySource *)source;</span><br><span class="line"></span><br><span class="line">    mysource-&gt;channel = g_io_channel_new_file(<span class="string">"/machine/test.txt"</span>, <span class="string">"r"</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span>(mysource-&gt;channel == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        g_printerr(<span class="string">"fail to read file"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    mysource-&gt;fd.fd = g_io_channel_unix_get_fd(mysource-&gt;channel);</span><br><span class="line">    mysource-&gt;fd.events = G_IO_IN;</span><br><span class="line">    g_source_add_poll(source, &amp;mysource-&gt;fd);</span><br><span class="line">    g_source_set_callback(source, (GSourceFunc)watch, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    g_source_set_priority(source, G_PRIORITY_DEFAULT_IDLE);</span><br><span class="line">    g_source_attach(source, <span class="literal">NULL</span>);</span><br><span class="line">    g_source_unref(source);</span><br><span class="line"></span><br><span class="line">    g_main_loop_run(loop);</span><br><span class="line"></span><br><span class="line">    g_main_context_unref(g_main_loop_get_context(loop));</span><br><span class="line">    g_main_loop_unref(loop);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 3.2、预定义的 I/O 类型事件源: 可以将上例简化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    GMainLoop *loop = g_main_loop_new(<span class="literal">NULL</span>, FALSE);</span><br><span class="line"></span><br><span class="line">    g_print(<span class="string">"input string: \n"</span>);</span><br><span class="line">    <span class="comment">//fd=1 代表终端输入</span></span><br><span class="line">    GIOChannel* channel = g_io_channel_unix_new(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(channel)</span><br><span class="line">    &#123;</span><br><span class="line">        g_io_add_watch(channel, G_IO_IN, io_watch, <span class="literal">NULL</span>);</span><br><span class="line">        g_io_channel_unref(channel);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    g_main_loop_run(loop);</span><br><span class="line"></span><br><span class="line">    g_main_context_unref(g_main_loop_get_context(loop));</span><br><span class="line">    g_main_loop_unref(loop);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>


]]></content>
      <categories>
        <category>c_c++</category>
      </categories>
      <tags>
        <tag>c_c++</tag>
      </tags>
  </entry>
  <entry>
    <title>Kafka流处理平台</title>
    <url>/2018/10/08/15390005252096/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>参考视频：<a href="https://www.imooc.com/learn/1043" target="_blank" rel="noopener">https://www.imooc.com/learn/1043</a><br>参考文章：<a href="https://m.imooc.com/article/details?article_id=75457" target="_blank" rel="noopener">https://m.imooc.com/article/details?article_id=75457</a><br>代码地址：<a href="https://gitee.com/machine4869/example-code/tree/master/note_kafka" target="_blank" rel="noopener">note_kafka</a></p>
</blockquote>
<p><strong>课程介绍</strong></p>
<ul>
<li>Kafka概念解析</li>
<li>Kafka结构设计</li>
<li>Kafka场景应用</li>
<li>Kafka高级特性</li>
</ul>
<h1 id="什么是kafka"><a href="#什么是kafka" class="headerlink" title="什么是kafka"></a>什么是kafka</h1><p><strong>什么是kafka</strong></p>
<p>LinkedIn 开源</p>
<ul>
<li>Databus 分布式数据同步系统</li>
<li>Cubert 高性能计算引擎</li>
<li>ParSeq Java异步处理框架</li>
<li>Kafka 分布式发布订阅消息系统，流处理平台</li>
</ul>
<p>Kafka发展历程</p>
<ul>
<li>LinkedIn 开发</li>
<li>2011年初开源，加入Apache基金会</li>
<li>2012年从Apache Incubator毕业</li>
<li>Apache顶级开源项目</li>
</ul>
<p>Kafka的特性</p>
<ul>
<li>可以发布和订阅且记录数据的流，类似于消息队列</li>
<li>数据流存储的平台，具备容错能力</li>
<li>在数据产生时就可以进行处理</li>
</ul>
<p>Kafka通常被用于</p>
<ul>
<li>构建实时数据流管道</li>
<li>构建实时数据流处理</li>
</ul>
<h1 id="kafka基本概念"><a href="#kafka基本概念" class="headerlink" title="kafka基本概念"></a>kafka基本概念</h1><p>Producer：数据生产者</p>
<ul>
<li>消息和数据的生产者</li>
<li>向Kafka的一个topic发布消息的进程或代码或服务</li>
</ul>
<p>Consumer：数据消费者</p>
<ul>
<li>消息和数据的消费者</li>
<li>向Kafka订阅数据（topic）并且处理其发布的消息的进程或代码或服务</li>
</ul>
<p>Consumer Group：消费者组</p>
<ul>
<li>对于同一个topic，会广播给不同的Group</li>
<li>一个Group中，只有一个Consumer可以消费该消息</li>
</ul>
<p>Broker：服务节点</p>
<ul>
<li>Kafka集群中的每个Kafka节点</li>
</ul>
<p>Topic：主题</p>
<ul>
<li>Kafka消息的类别</li>
<li>对数据进行区分、隔离</li>
</ul>
<p>Partition：分区</p>
<ul>
<li>Kafka中数据存储的基本单元</li>
<li>一个topic数据，会被分散存储到多个Partition</li>
<li>一个Partition只会存在一个Broker上</li>
<li>每个Partition是有序的</li>
</ul>
<p>Replication：分区的副本</p>
<ul>
<li>同一个Partition可能会有多个Replication</li>
<li>多个Replication之间数据是一样的</li>
</ul>
<p>Replication Leader：副本的老大</p>
<ul>
<li>一个Partition的多个Replication上</li>
<li>需要一个Leader负责该Partition上与Producer和Consumer交互</li>
</ul>
<p>Replication Manager：副本的管理者</p>
<ul>
<li>负责管理当前Broker所有分区和副本的信息</li>
<li>处理KafkaController发起的一些请求</li>
<li>副本状态的切换</li>
<li>添加、读取消息等</li>
</ul>
<p><strong>kafka概念延伸</strong></p>
<p>Partition：分区</p>
<ul>
<li>每一个Topic被切分为多个Partition</li>
<li>消费者数目少于或等于Partition的数目</li>
<li>Broker Group中的每一个Broker保存Topic的一个或多个Partition</li>
<li>Consumer Group中的仅有一个Consumer读取Topic的一个或多个Partition，并且是惟一的Consumer</li>
</ul>
<p>Replication：分区的副本</p>
<ul>
<li>当集群中有Broker挂掉的情况，系统可以主动地使Replication提供服务</li>
<li>系统默认设置每一个Topic的Replication系数为1，可以在创建Topic时单独设置</li>
<li>Replication的基本单位是Topic的Partition</li>
<li>所有的读和写都从Replication Leader进行，Replication Followers只是作为备份</li>
<li>Replication Followers必须能够及时复制Replication Leader的数据</li>
<li>增加容错性与可扩展性</li>
</ul>
<h1 id="kafka结构设计"><a href="#kafka结构设计" class="headerlink" title="kafka结构设计"></a>kafka结构设计</h1><h2 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a><strong>基本结构</strong></h2><p>Kafka功能结构</p>
<p><a href="/2018/10/08/15390005252096/5b94beb500010e8803860328.png" data-fancybox="group" data-caption="5b94beb500010e8803860328" class="fancybox"><img alt="5b94beb500010e8803860328" title="5b94beb500010e8803860328" data-src="/2018/10/08/15390005252096/5b94beb500010e8803860328.png" class="lazyload"></a> </p>
<p>Kafka数据流势</p>
<p><a href="/2018/10/08/15390005252096/5b94bebe0001c11707010336.png" data-fancybox="group" data-caption="5b94bebe0001c11707010336" class="fancybox"><img alt="5b94bebe0001c11707010336" title="5b94bebe0001c11707010336" data-src="/2018/10/08/15390005252096/5b94bebe0001c11707010336.png" class="lazyload"></a> </p>
<p>Kafka消息结构</p>
<p><a href="/2018/10/08/15390005252096/5b94bec70001831507830096.png" data-fancybox="group" data-caption="5b94bec70001831507830096" class="fancybox"><img alt="5b94bec70001831507830096" title="5b94bec70001831507830096" data-src="/2018/10/08/15390005252096/5b94bec70001831507830096.png" class="lazyload"></a> </p>
<ul>
<li>Offset：当前消息所处于的偏移</li>
<li>Length：消息的长度</li>
<li>CRC32：校验字段，用于校验当前信息的完整性</li>
<li>Magic：很多分布式系统都会设计该字段，固定的数字，用于快速判定当前信息是否为Kafka消息</li>
<li>attributes：可选字段，消息的属性</li>
<li>Timestamp：时间戳</li>
<li>Key Length：Key的长度</li>
<li>Key：Key</li>
<li>Value Length：Value的长度</li>
<li>Value：Value</li>
</ul>
<h2 id="功能特点"><a href="#功能特点" class="headerlink" title="功能特点"></a><strong>功能特点</strong></h2><p>Kafka特点：分布式</p>
<ul>
<li>多分区</li>
<li>多副本</li>
<li>多订阅者</li>
<li>基于Zookeeper调度</li>
</ul>
<p>Kafka特点：高性能</p>
<ul>
<li>高吞吐量</li>
<li>低延迟</li>
<li>高并发</li>
<li>时间复杂度为O(1)</li>
</ul>
<p>Kafka特点：持久性与扩展性</p>
<ul>
<li><p>数据可持久化</p>
</li>
<li><p>容错性</p>
</li>
<li><p>支持在线水平扩展</p>
</li>
<li><p>消息自动平衡</p>
</li>
</ul>
<h1 id="kafka的应用"><a href="#kafka的应用" class="headerlink" title="kafka的应用"></a>kafka的应用</h1><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a><strong>应用场景</strong></h2><p>Kafka应用场景</p>
<ul>
<li>消息队列</li>
<li>行为跟踪</li>
<li>元信息监控</li>
<li>日志收集</li>
<li>流处理</li>
<li>事件源</li>
<li>持久性日志（commit log）</li>
</ul>
<h2 id="应用案例"><a href="#应用案例" class="headerlink" title="应用案例"></a>应用案例</h2><p><strong>Kafka简单案例</strong></p>
<p>单机下：</p>
<ul>
<li>部署启动</li>
<li>简单生产者</li>
<li>简单消费者</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.下载与安装</span><br><span class="line">Zookeeper下载：https:&#x2F;&#x2F;zookeeper.apache.org&#x2F;releases.html#download</span><br><span class="line">Kafka下载：http:&#x2F;&#x2F;kafka.apache.org&#x2F;downloads</span><br><span class="line">安装：解压、配置环境变量</span><br><span class="line">mac只需要: brew install kafka</span><br><span class="line"></span><br><span class="line">2.Zookeeper启动</span><br><span class="line">&#x2F;&#x2F;进入zookeeper安装目录&#x2F;bin</span><br><span class="line">.&#x2F;zkServer start &#x2F;usr&#x2F;local&#x2F;etc&#x2F;kafka&#x2F;zookeeper.properties</span><br><span class="line">&#x2F;&#x2F;clientPort&#x3D;2181</span><br><span class="line"></span><br><span class="line">3.Kafka启动</span><br><span class="line">.&#x2F;kafka-server-start &#x2F;usr&#x2F;local&#x2F;etc&#x2F;kafka&#x2F;server.properties</span><br><span class="line">&#x2F;&#x2F;端口&#x3D;9092</span><br><span class="line"></span><br><span class="line">4.使用控制台操作生产者与消费者</span><br><span class="line">创建Topic：.&#x2F;kafka-topics --create --zookeeper localhost:2181 --replication-factor 1 --partitions 3 --topic my-kafka-topic</span><br><span class="line">查看Topic：.&#x2F;kafka-topics --list --zookeeper localhost:2181</span><br><span class="line">启动生产者：.&#x2F;kafka-console-producer --broker-list localhost:9092 --topic my-kafka-topic</span><br><span class="line">启动消费者：.&#x2F;kafka-console-consumer --bootstrap-server localhost:9092 --topic my-kafka-topic --from-beginning</span><br><span class="line">&#x2F;&#x2F;--from-beginning: 让消费者从头开始消费，不加这个参数就从当前生产者发出的消息开始消费</span><br><span class="line"></span><br><span class="line">生产消息：my first msg</span><br></pre></td></tr></table></figure></div>



<p><strong>代码案例</strong></p>
<p><strong>生产者和消费者的配置</strong></p>
<p>application.properties</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">properties</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#============== kafka ===================</span></span><br><span class="line"><span class="meta">kafka.consumer.zookeeper.connect</span>=<span class="string">127.0.0.1:2181</span></span><br><span class="line"><span class="meta">kafka.consumer.servers</span>=<span class="string">127.0.0.1:9092</span></span><br><span class="line"><span class="meta">kafka.consumer.enable.auto.commit</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">kafka.consumer.session.timeout</span>=<span class="string">6000</span></span><br><span class="line"><span class="meta">kafka.consumer.auto.commit.interval</span>=<span class="string">100</span></span><br><span class="line"><span class="meta">kafka.consumer.auto.offset.reset</span>=<span class="string">latest</span></span><br><span class="line"><span class="meta">kafka.consumer.topic</span>=<span class="string">my-kafka-topic</span></span><br><span class="line"><span class="meta">kafka.consumer.group.id</span>=<span class="string">machine4869</span></span><br><span class="line"><span class="meta">kafka.consumer.concurrency</span>=<span class="string">10</span></span><br><span class="line"></span><br><span class="line"><span class="meta">kafka.producer.servers</span>=<span class="string">127.0.0.1:9092</span></span><br><span class="line"><span class="meta">kafka.producer.retries</span>=<span class="string">0</span></span><br><span class="line"><span class="meta">kafka.producer.batch.size</span>=<span class="string">4096</span></span><br><span class="line"><span class="meta">kafka.producer.linger</span>=<span class="string">1</span></span><br><span class="line"><span class="meta">kafka.producer.buffer.memory</span>=<span class="string">40960</span></span><br><span class="line"></span><br><span class="line"><span class="meta">kafka.topic.default</span>=<span class="string">my-kafka-topic</span></span><br></pre></td></tr></table></figure></div>

<p>KafkaProducerConfig</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.machine.example.kafka.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.machine.example.kafka.common.MessageEntity;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.ProducerConfig;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.common.serialization.StringSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.kafka.annotation.EnableKafka;</span><br><span class="line"><span class="keyword">import</span> org.springframework.kafka.core.DefaultKafkaProducerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.kafka.core.KafkaTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.kafka.core.ProducerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.kafka.support.serializer.JsonSerializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableKafka</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaProducerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;kafka.producer.servers&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String servers;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;kafka.producer.retries&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> retries;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;kafka.producer.batch.size&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> batchSize;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;kafka.producer.linger&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> linger;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;kafka.producer.buffer.memory&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> bufferMemory;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">producerConfigs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; props = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, servers);</span><br><span class="line">        props.put(ProducerConfig.RETRIES_CONFIG, retries);</span><br><span class="line">        props.put(ProducerConfig.BATCH_SIZE_CONFIG, batchSize);</span><br><span class="line">        props.put(ProducerConfig.LINGER_MS_CONFIG, linger);</span><br><span class="line">        props.put(ProducerConfig.BUFFER_MEMORY_CONFIG, bufferMemory);</span><br><span class="line">        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> props;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ProducerFactory&lt;String, MessageEntity&gt; <span class="title">producerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DefaultKafkaProducerFactory&lt;&gt;(producerConfigs(),</span><br><span class="line">                <span class="keyword">new</span> StringSerializer(),</span><br><span class="line">                <span class="keyword">new</span> JsonSerializer&lt;MessageEntity&gt;());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> KafkaTemplate&lt;String, MessageEntity&gt; <span class="title">kafkaTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> KafkaTemplate&lt;&gt;(producerFactory());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>KafkaConsumerConfig</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.machine.example.kafka.config;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.machine.example.kafka.common.MessageEntity;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.ConsumerConfig;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.common.serialization.StringDeserializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.kafka.annotation.EnableKafka;</span><br><span class="line"><span class="keyword">import</span> org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.kafka.config.KafkaListenerContainerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.kafka.core.ConsumerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.kafka.core.DefaultKafkaConsumerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.kafka.listener.ConcurrentMessageListenerContainer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.kafka.support.serializer.JsonDeserializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableKafka</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaConsumerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;kafka.consumer.servers&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String servers;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;kafka.consumer.enable.auto.commit&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> enableAutoCommit;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;kafka.consumer.session.timeout&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String sessionTimeout;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;kafka.consumer.auto.commit.interval&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String autoCommitInterval;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;kafka.consumer.group.id&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String groupId;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;kafka.consumer.auto.offset.reset&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String autoOffsetReset;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;kafka.consumer.concurrency&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> concurrency;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> KafkaListenerContainerFactory&lt;ConcurrentMessageListenerContainer&lt;String, MessageEntity&gt;&gt; kafkaListenerContainerFactory() &#123;</span><br><span class="line">        ConcurrentKafkaListenerContainerFactory&lt;String, MessageEntity&gt; factory = <span class="keyword">new</span> ConcurrentKafkaListenerContainerFactory&lt;&gt;();</span><br><span class="line">        factory.setConsumerFactory(consumerFactory());</span><br><span class="line">        factory.setConcurrency(concurrency);</span><br><span class="line">        factory.getContainerProperties().setPollTimeout(<span class="number">1500</span>);</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ConsumerFactory&lt;String, MessageEntity&gt; <span class="title">consumerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DefaultKafkaConsumerFactory&lt;&gt;(</span><br><span class="line">                consumerConfigs(),</span><br><span class="line">                <span class="keyword">new</span> StringDeserializer(),<span class="comment">//key</span></span><br><span class="line">                <span class="keyword">new</span> JsonDeserializer&lt;&gt;(MessageEntity<span class="class">.<span class="keyword">class</span>)//<span class="title">value</span></span></span><br><span class="line"><span class="class">        )</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Map&lt;String, Object&gt; <span class="title">consumerConfigs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; propsMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        propsMap.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, servers);</span><br><span class="line">        propsMap.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, enableAutoCommit);</span><br><span class="line">        propsMap.put(ConsumerConfig.AUTO_COMMIT_INTERVAL_MS_CONFIG, autoCommitInterval);</span><br><span class="line">        propsMap.put(ConsumerConfig.SESSION_TIMEOUT_MS_CONFIG, sessionTimeout);</span><br><span class="line">        propsMap.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        propsMap.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        propsMap.put(ConsumerConfig.GROUP_ID_CONFIG, groupId);</span><br><span class="line">        propsMap.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, autoOffsetReset);</span><br><span class="line">        <span class="keyword">return</span> propsMap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p><strong>生产者</strong></p>
<p>SimpleProducer</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.machine.example.kafka.producer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.machine.example.kafka.common.MessageEntity;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.ProducerRecord;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.kafka.core.KafkaTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.kafka.support.SendResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.concurrent.ListenableFuture;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleProducer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"kafkaTemplate"</span>)</span><br><span class="line">    <span class="keyword">private</span> KafkaTemplate&lt;String, MessageEntity&gt; kafkaTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String topic, MessageEntity message)</span> </span>&#123;</span><br><span class="line">        kafkaTemplate.send(topic, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String topic, String key, MessageEntity entity)</span> </span>&#123;</span><br><span class="line">        ProducerRecord&lt;String, MessageEntity&gt; record = <span class="keyword">new</span> ProducerRecord&lt;&gt;(</span><br><span class="line">                topic,</span><br><span class="line">                key,</span><br><span class="line">                entity);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        ListenableFuture&lt;SendResult&lt;String, MessageEntity&gt;&gt; future = kafkaTemplate.send(record);</span><br><span class="line">        <span class="comment">//发送完消息后回调函数</span></span><br><span class="line">        <span class="comment">//startTime：方便记录整个消息消费的时间</span></span><br><span class="line">        future.addCallback(<span class="keyword">new</span> ProducerCallback(startTime, key, entity));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>ProducerCallback</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.machine.example.kafka.producer;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"><span class="keyword">import</span> com.machine.example.kafka.common.MessageEntity;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.RecordMetadata;</span><br><span class="line"><span class="keyword">import</span> org.springframework.kafka.support.SendResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.lang.Nullable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.concurrent.ListenableFutureCallback;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerCallback</span> <span class="keyword">implements</span> <span class="title">ListenableFutureCallback</span>&lt;<span class="title">SendResult</span>&lt;<span class="title">String</span>, <span class="title">MessageEntity</span>&gt;&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> startTime;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String key;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MessageEntity message;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Gson gson = <span class="keyword">new</span> Gson();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProducerCallback</span><span class="params">(<span class="keyword">long</span> startTime, String key, MessageEntity message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.startTime = startTime;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送消息成功时回调</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(@Nullable SendResult&lt;String, MessageEntity&gt; result)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> elapsedTime = System.currentTimeMillis() - startTime;</span><br><span class="line"></span><br><span class="line">        RecordMetadata metadata = result.getRecordMetadata();</span><br><span class="line">        <span class="keyword">if</span> (metadata != <span class="keyword">null</span>) &#123;</span><br><span class="line">            StringBuilder record = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            record.append(<span class="string">"message("</span>)</span><br><span class="line">                    .append(<span class="string">"key = "</span>).append(key).append(<span class="string">","</span>)</span><br><span class="line">                    .append(<span class="string">"message = "</span>).append(gson.toJson(message)).append(<span class="string">")"</span>)</span><br><span class="line">                    .append(<span class="string">"sent to partition("</span>).append(metadata.partition()).append(<span class="string">")"</span>)</span><br><span class="line">                    .append(<span class="string">"with offset("</span>).append(metadata.offset()).append(<span class="string">")"</span>)</span><br><span class="line">                    .append(<span class="string">"in "</span>).append(elapsedTime).append(<span class="string">" ms"</span>);</span><br><span class="line">            log.info(record.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Throwable ex)</span> </span>&#123;</span><br><span class="line">        ex.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p><strong>消费者</strong></p>
<p>SimpleConsumer</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.machine.example.kafka.consumer;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"><span class="keyword">import</span> com.machine.example.kafka.common.MessageEntity;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.kafka.annotation.KafkaListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Gson gson = <span class="keyword">new</span> Gson();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@KafkaListener</span>(topics = <span class="string">"$&#123;kafka.topic.default&#125;"</span>, containerFactory = <span class="string">"kafkaListenerContainerFactory"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(MessageEntity message)</span> </span>&#123;</span><br><span class="line">        log.info(gson.toJson(message));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p><strong>Controller</strong></p>
<p>ProduceController</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.machine.example.kafka.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"><span class="keyword">import</span> com.machine.example.kafka.common.ErrorCode;</span><br><span class="line"><span class="keyword">import</span> com.machine.example.kafka.common.MessageEntity;</span><br><span class="line"><span class="keyword">import</span> com.machine.example.kafka.common.Response;</span><br><span class="line"><span class="keyword">import</span> com.machine.example.kafka.producer.SimpleProducer;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/kafka"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProduceController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SimpleProducer simpleProducer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;kafka.topic.default&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String topic;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Gson gson = <span class="keyword">new</span> Gson();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/hello"</span>, method = RequestMethod.GET, produces = &#123;<span class="string">"application/json"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Response <span class="title">sendKafka</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Response(ErrorCode.SUCCESS, <span class="string">"OK"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/send"</span>, method = RequestMethod.POST, produces = &#123;<span class="string">"application/json"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Response <span class="title">sendKafka</span><span class="params">(@RequestBody MessageEntity message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.info(<span class="string">"kafka的消息=&#123;&#125;"</span>, gson.toJson(message));</span><br><span class="line">            simpleProducer.send(topic, <span class="string">"key"</span>, message);</span><br><span class="line">            log.info(<span class="string">"发送kafka成功."</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Response(ErrorCode.SUCCESS, <span class="string">"发送kafka成功"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"发送kafka失败"</span>, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Response(ErrorCode.EXCEPTION, <span class="string">"发送kafka失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p>测试</p>
<h1 id="kafka高级特征"><a href="#kafka高级特征" class="headerlink" title="kafka高级特征"></a>kafka高级特征</h1><h2 id="消息事务"><a href="#消息事务" class="headerlink" title="消息事务"></a>消息事务</h2><p>为什么要支持事务</p>
<ul>
<li>满足“读取-处理-写入”模式</li>
<li>流处理需求的不断增强</li>
<li>不准确的数据处理的容忍度不断降低</li>
</ul>
<p>数据传输的事务定义</p>
<ul>
<li>最多一次：消息不会被重复发送，最多被传输一次，但也有可能一次不传输</li>
<li>最少一次：消息不会被漏发送，最少被传输一次，但也有可能被重复传输</li>
<li>精确的一次（Exactly once）：不会漏传输也不会重复传输，每个消息都被传输一次且仅仅被传输一次，这是大家所期望的</li>
</ul>
<p>事务保证</p>
<ul>
<li><p>内部重试问题：Procedure幂等处理</p>
</li>
<li><p>多分区原子写入</p>
</li>
<li><p>避免僵尸实例</p>
<blockquote>
<p>每个事务Procedure分配一个 transactionl. id，在进程重新启动时能够识别相同的Procedure实例<br>Kafka增加了一个与transactionl.id相关的epoch，存储每个transactionl.id内部元数据<br>一旦epoch被触发，任务具有相同的transactionl.id和更旧的epoch的Producer被视为僵尸，Kafka会拒绝来自这些Producer的后续事务性写入</p>
</blockquote>
</li>
</ul>
<h2 id="零拷贝"><a href="#零拷贝" class="headerlink" title="零拷贝"></a>零拷贝</h2><p>零拷贝简介</p>
<ul>
<li>网络传输持久性日志块</li>
<li>Java Nio channel.transforTo()方法</li>
<li>Linux sendfile系统调用</li>
</ul>
<p>文件传输到网络的公共数据路径</p>
<ul>
<li>第一次拷贝：操作系统将数据从磁盘读入到内核空间的页缓存</li>
<li>第二次拷贝：应用程序将数据从内核空间读入到用户空间缓存中</li>
<li>第三次拷贝：应用程序将数据写回到内核空间到socket缓存中</li>
<li>第四次拷贝：操作系统将数据从socket缓冲区复制到网卡缓冲区，以便将数据经网络发出</li>
</ul>
<p>零拷贝过程（指内核空间和用户空间的交互拷贝次数为零）</p>
<ul>
<li>第一次拷贝：操作系统将数据从磁盘读入到内核空间的页缓存</li>
<li>将数据的位置和长度的信息的描述符增加至内核空间（socket缓存区）</li>
<li>第二次拷贝：操作系统将数据从内核拷贝到网卡缓冲区，以便将数据经网络发出</li>
</ul>
<p>文件传输到网络的公共数据路径演变</p>
<p>![屏幕快照 2018-10-10 上午9.46.19](15390005252096/屏幕快照 2018-10-10 上午9.46.19.png) </p>
<p>零拷贝：内核和用户空间的交互次数为0</p>
<h1 id="kafka-进阶"><a href="#kafka-进阶" class="headerlink" title="kafka-进阶"></a>kafka-进阶</h1><h2 id="MQ传统应用场景–异步处理"><a href="#MQ传统应用场景–异步处理" class="headerlink" title="MQ传统应用场景–异步处理"></a>MQ传统应用场景–异步处理</h2><p>![屏幕快照 2019-09-12 下午10.43.59](15390005252096/屏幕快照 2019-09-12 下午10.43.59.png)</p>
<h2 id="为什么要使用MQ？"><a href="#为什么要使用MQ？" class="headerlink" title="为什么要使用MQ？"></a>为什么要使用MQ？</h2><ul>
<li><p>解耦:<br>允许你独立的扩展或修改两边的处理过程，只要确保它们遵守同样的接口约束。</p>
</li>
<li><p>冗余:</p>
<p>消息队列把数据进行持久化直到它们已经被完全处理，通过这一方式规避了数据丢失风<br>险。许多消息队列所采用的”插入-获取-删除”范式中，在把一个消息从队列中删除之前，需<br>要你的处理系统明确的指出该消息已经被处理完毕，从而确保你的数据被安全的保存直到你<br>使用完毕。</p>
</li>
<li><p>扩展性:</p>
<p>因为消息队列解耦了你的处理过程，所以增大消息入队和处理的频率是很容易的，只要另外增加处理过程即可。</p>
</li>
<li><p>灵活性 &amp; 峰值处理能力: </p>
<p>在访问量剧增的情况下，应用仍然需要继续发挥作用，但是这样的突发流量并不常见。 如果为以能处理这类峰值访问为标准来投入资源随时待命无疑是巨大的浪费。使用消息队列 能够使关键组件顶住突发的访问压力，而不会因为突发的超负荷的请求而完全崩溃。  </p>
</li>
<li><p>可恢复性: </p>
<p>系统的一部分组件失效时，不会影响到整个系统。消息队列降低了进程间的耦合度，所 以即使一个处理消息的进程挂掉，加入队列中的消息仍然可以在系统恢复后被处理。 </p>
</li>
<li><p>顺序保证: </p>
<p>在大多使用场景下，数据处理的顺序都很重要。大部分消息队列本来就是排序的，并且 能保证数据会按照特定的顺序来处理。(Kafka 保证一个 Partition 内的消息的有序性) </p>
</li>
<li><p>缓冲: </p>
<p>有助于控制和优化数据流经过系统的速度，解决生产消息和消费消息的处理速度不一致 的情况。</p>
</li>
<li><p>异步通信: </p>
<p>很多时候，用户不想也不需要立即处理消息。消息队列提供了异步处理机制，允许用户 把一个消息放入队列，但并不立即处理它。想向队列中放入多少消息就放多少，然后在需要 的时候再去处理它们。  </p>
</li>
</ul>
<h2 id="MQ的2种模式"><a href="#MQ的2种模式" class="headerlink" title="MQ的2种模式"></a>MQ的2种模式</h2><p>(1)点对点模式(一对一，消费者主动拉取数据，消息收到后消息清除) </p>
<p>点对点模型通常是一个基于拉取或者轮询的消息传送模型，这种模型从队列中请求信息， 而不是将消息推送到客户端。这个模型的特点是发送到队列的消息被一个且只有一个接收者 接收处理，即使有多个消息监听者也是如此。 </p>
<p>(2)发布/订阅模式(一对多，数据生产后，推送给所有订阅者) </p>
<p>发布订阅模型则是一个基于推送的消息传送模型。发布订阅模型可以有多种不同的订阅者，临时订阅者只在主动监听主题时才接收消息，而持久订阅者则监听主题的所有消息，即 使当前订阅者不可用，处于离线状态。</p>
<h2 id="什么是-Kafka"><a href="#什么是-Kafka" class="headerlink" title="什么是 Kafka"></a>什么是 Kafka</h2><p>在流式计算中，Kafka 一般用来缓存数据，Storm 通过消费 Kafka 的数据进行计算。</p>
<p>Kafka 是一个分布式消息队列。Kafka 对消息保存时根据 Topic 进行归类，发送消息<br>者称为 Producer，消息接受者称为 Consumer，此外 kafka 集群有多个 kafka 实例组成，每个<br>实例(server)称为 broker。</p>
<p>无论是 kafka 集群，还是 consumer 都依赖于 zookeeper 集群保存一些 meta 信息，<br>来保证系统可用性。</p>
<h2 id="Kafka架构"><a href="#Kafka架构" class="headerlink" title="Kafka架构"></a>Kafka架构</h2><p>![屏幕快照 2019-09-12 下午11.25.17](15390005252096/屏幕快照 2019-09-12 下午11.25.17.png)</p>
<p>patition：提供topic的负载均衡，每个分区都在其他节点有副本。</p>
<p>一个 topic 可以分为多个 partition，每个 partition 是一个有序的队列。</p>
<p>patition0和patition1的内容是不一样的。partition 中的每条消息<br>都会被分配一个有序的 id(offset)。kafka 只保证按一个 partition 中的顺序将消息发给<br>consumer，不保证一个 topic 的整体(多个 partition 间)的顺序;</p>
<p>producer采用轮询方式向kafka broker 发消息。</p>
<p>某一个分区 只能被同一个消费者组里的某一个消费者 消费。</p>
<p>组的作用是提高消费并发的，提高消费能力。</p>
<p>Offset:kafka 的存储文件都是按照 offset.kafka 来命名，用 offset 做名字的好处是方便查<br>找。例如你想找位于 2049 的位置，只要找到 2048.kafka 的文件即可。当然 the first offset 就<br>是 00000000000.kafka。</p>
<h2 id="Kafka安装"><a href="#Kafka安装" class="headerlink" title="Kafka安装"></a>Kafka安装</h2><p>安装配置</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kafka_2.12-2.3.0.tgz</span><br><span class="line"><span class="meta">#</span><span class="bash"> config/server.properties</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 一些参数介绍</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 文件暂存的时间</span></span><br><span class="line">log.retention.hours=168</span><br><span class="line"><span class="meta">#</span><span class="bash"> zookeeper地址，集群时用逗号分隔</span></span><br><span class="line">zookeeper.connect=localhost:2181</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入kafka目录</span></span><br><span class="line">mkdir logs</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改以下内容</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 存的就是数据</span></span><br><span class="line">log.dirs=/home/machine/apps/kafka_2.12-2.3.0/logs</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 环境变量可以配一下</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> xsync是一个分发脚本，适合集群搭建的时候使用</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> xcall.sh jps  查看集群</span></span><br></pre></td></tr></table></figure></div>

<p>启动</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 先启动zookeeper</span></span><br><span class="line">zkServer.sh start</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动阻塞进程</span></span><br><span class="line">bin/kafka-server-start.sh config/server.properties</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动守护进行</span></span><br><span class="line">bin/kafka-server-start.sh -daemon config/server.properties</span><br><span class="line">jps</span><br><span class="line"><span class="meta">#</span><span class="bash"> 发现多了个kafka</span></span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>大数据分布式</category>
      </categories>
      <tags>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言实现socket通信</title>
    <url>/2018/09/29/15382179403318/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>server.c</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SERVPORT 3333<span class="comment">//定义端口号</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BACKLOG 10<span class="comment">//请求队列中允许的最大请求数</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXDATASIZE 5<span class="comment">//数据长度</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">server_sockaddr</span>,<span class="title">client_sockaddr</span>;</span><span class="comment">//声明服务器和客户端的socket存储结构</span></span><br><span class="line">    <span class="keyword">int</span> sockfd,client_fd;<span class="comment">//socket描述符</span></span><br><span class="line">    <span class="keyword">int</span> sin_size,recvbytes;</span><br><span class="line">    <span class="keyword">char</span> buf[MAXDATASIZE];<span class="comment">//传输的数据</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//1、建立socket链接</span></span><br><span class="line">    <span class="keyword">if</span>((sockfd = socket(AF_INET,SOCK_STREAM,<span class="number">0</span>)) == <span class="number">-1</span>) &#123;<span class="comment">//建立socket链接</span></span><br><span class="line">        perror(<span class="string">"Socket"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Socket success!,sockfd=%d\n"</span>,sockfd);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2、填充socket信息</span></span><br><span class="line">    server_sockaddr.sin_family = AF_INET;<span class="comment">//IPv4</span></span><br><span class="line">    server_sockaddr.sin_port = htons(SERVPORT);<span class="comment">//端口</span></span><br><span class="line">    server_sockaddr.sin_addr.s_addr = INADDR_ANY;<span class="comment">//本主机的任意IP都可以使用</span></span><br><span class="line">    bzero(&amp;(server_sockaddr.sin_zero),<span class="number">8</span>);<span class="comment">//填充0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//3、bind函数绑定socket</span></span><br><span class="line">    <span class="keyword">if</span>((bind(sockfd,(struct sockaddr *)&amp;server_sockaddr,<span class="keyword">sizeof</span>(struct sockaddr))) == <span class="number">-1</span>) &#123;<span class="comment">//bind函数绑定</span></span><br><span class="line">        perror(<span class="string">"bind"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"bind success!\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4、监听</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">listen</span>(sockfd,BACKLOG) == <span class="number">-1</span>) &#123;<span class="comment">//监听,BACKLOG:最大监听数</span></span><br><span class="line">        perror(<span class="string">"listen"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"listening ... \n"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;<span class="comment">//一直接收客户端请求</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//5、等待客户端链接</span></span><br><span class="line">        <span class="keyword">if</span>((client_fd = accept(sockfd,(struct sockaddr *) &amp;client_sockaddr,&amp;sin_size)) == <span class="number">-1</span>) &#123;<span class="comment">//等待客户端链接</span></span><br><span class="line">            perror(<span class="string">"accept"</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"accept success!\n"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6、接收客户端的请求</span></span><br><span class="line">        <span class="keyword">if</span>((recvbytes = recv(client_fd,buf,MAXDATASIZE,<span class="number">0</span>)) == <span class="number">-1</span>) &#123;<span class="comment">//接收客户端的请求</span></span><br><span class="line">            perror(<span class="string">"recv"</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"received a connection : %s\n"</span>,buf);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//7、关闭</span></span><br><span class="line">    <span class="built_in">close</span>(sockfd);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div>

<p>client.c</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netdb.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEST_PORT 3333</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEST_IP <span class="meta-string">"127.0.0.1"</span><span class="comment">/*目标地址IP，这里设为本机*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXDATASIZE 100</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sockfd,sendbytes;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">serv_addr</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//1、建立socket链接</span></span><br><span class="line">    <span class="keyword">if</span>((sockfd = socket(AF_INET,SOCK_STREAM,<span class="number">0</span>)) == <span class="number">-1</span>) &#123;<span class="comment">//创建socket</span></span><br><span class="line">        perror(<span class="string">"socket"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Socket success!,sockfd=%d\n"</span>,sockfd);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2、填充socket信息</span></span><br><span class="line">    serv_addr.sin_family = AF_INET;</span><br><span class="line">    serv_addr.sin_port = htons(DEST_PORT);</span><br><span class="line">    serv_addr.sin_addr.s_addr = inet_addr(DEST_IP);</span><br><span class="line">    bzero(&amp;(serv_addr.sin_zero),<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//3、连接服务端</span></span><br><span class="line">    <span class="keyword">if</span>((<span class="built_in">connect</span>(sockfd,(struct sockaddr *)&amp;serv_addr,<span class="keyword">sizeof</span>(struct sockaddr))) == <span class="number">-1</span>) &#123;<span class="comment">//发起对服务器的链接</span></span><br><span class="line">        perror(<span class="string">"connect"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4、发送消息</span></span><br><span class="line">    <span class="keyword">if</span>((sendbytes = send(sockfd,<span class="string">"hello"</span>,<span class="number">5</span>,<span class="number">0</span>)) == <span class="number">-1</span>) &#123;<span class="comment">//发送消息给服务器端</span></span><br><span class="line">        perror(<span class="string">"send"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5、关闭</span></span><br><span class="line">    <span class="built_in">close</span>(sockfd);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>


]]></content>
      <categories>
        <category>c_c++</category>
      </categories>
      <tags>
        <tag>c_c++</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下的C编程——整理</title>
    <url>/2018/09/20/15374327142974/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>源码编译安装</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;autogen.sh</span><br><span class="line"># 失败</span><br><span class="line">sudo apt-get install autoconf automake libtool</span><br><span class="line"></span><br><span class="line">.&#x2F;config --prefix&#x3D;&#x2F;home&#x2F;machine</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br><span class="line"># .&#x2F;config出现错误</span><br><span class="line">sudo apt-get install zlib1g-dev</span><br><span class="line">sudo apt-get install libffi-dev</span><br></pre></td></tr></table></figure></div>



<p><strong>Linux生成静态库与动态库</strong></p>
<p><a href="https://blog.csdn.net/llzk_/article/details/55519242" target="_blank" rel="noopener">https://blog.csdn.net/llzk_/article/details/55519242</a></p>
<p><strong>Clion下使用动态库</strong></p>
<p>CMakeLists.txt</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 3.9)</span><br><span class="line">project(c_0928 C)</span><br><span class="line"></span><br><span class="line">set(CMAKE_C_STANDARD 99)</span><br><span class="line"></span><br><span class="line">set(LIB_DIR &#x2F;home&#x2F;machine&#x2F;CLionProjects&#x2F;c_0928)</span><br><span class="line"># dynamic lib</span><br><span class="line">link_libraries( $&#123;LIB_DIR&#125;&#x2F;lib&#x2F;glib&#x2F;lib&#x2F;libglib-2.0.so)</span><br><span class="line"></span><br><span class="line">link_libraries( $&#123;LIB_DIR&#125;&#x2F;lib&#x2F;libmodbus&#x2F;lib&#x2F;libmodbus.so)</span><br><span class="line"># head file</span><br><span class="line">include_directories($&#123;LIB_DIR&#125;&#x2F;lib&#x2F;glib&#x2F;include&#x2F;glib-2.0)</span><br><span class="line">include_directories($&#123;LIB_DIR&#125;&#x2F;lib&#x2F;glib&#x2F;lib&#x2F;glib-2.0&#x2F;include)</span><br><span class="line"></span><br><span class="line">include_directories($&#123;LIB_DIR&#125;&#x2F;lib&#x2F;libmodbus&#x2F;include&#x2F;modbus)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add_executable(c_0928 main.c dam0888Socket.c)</span><br></pre></td></tr></table></figure></div>



<p>目录结构如下：</p>
<p>![屏幕快照 2018-09-29 下午6.31.08](15374327142974/屏幕快照 2018-09-29 下午6.31.08.png)</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>01_C语言提高（2）</title>
    <url>/2018/09/07/15363344131459/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[TOC]</p>
<h1 id="6-结构体"><a href="#6-结构体" class="headerlink" title="6 结构体"></a>6 结构体</h1><h2 id="1、结构体类型基本操作"><a href="#1、结构体类型基本操作" class="headerlink" title="1、结构体类型基本操作"></a>1、结构体类型基本操作</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>）结构体类型定义</span><br><span class="line"><span class="comment">//struct结构体关键字</span></span><br><span class="line"><span class="comment">//struct STU合起来才是类型名</span></span><br><span class="line"><span class="comment">//&#123;&#125;后面有个分号</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stu</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">char</span> name[<span class="number">32</span>];</span><br><span class="line">	<span class="keyword">char</span> tile[<span class="number">32</span>];</span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">	<span class="keyword">char</span> addr[<span class="number">50</span>];</span><br><span class="line">&#125;;</span><br><span class="line">	</span><br><span class="line"><span class="comment">//通过typedef把struct Stu改名为Stu</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Stu</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> a;</span><br><span class="line">&#125;Stu;</span><br><span class="line">	</span><br><span class="line"><span class="number">2</span>）结构体变量的定义</span><br><span class="line"><span class="comment">//1)先定义类型，再定义变量，最常用</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stu</span> <span class="title">a</span>;</span></span><br><span class="line">	</span><br><span class="line"><span class="comment">//2)定义类型的同时，定义变量</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Stu</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">char</span> name[<span class="number">32</span>];</span><br><span class="line">	<span class="keyword">char</span> tile[<span class="number">32</span>];</span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">	<span class="keyword">char</span> addr[<span class="number">50</span>];</span><br><span class="line">&#125;c;</span><br><span class="line">	</span><br><span class="line"><span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">char</span> name[<span class="number">32</span>];</span><br><span class="line">	<span class="keyword">char</span> tile[<span class="number">32</span>];</span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">	<span class="keyword">char</span> addr[<span class="number">50</span>];</span><br><span class="line">&#125;e, f;</span><br><span class="line">	</span><br><span class="line"><span class="number">3</span>）结构体变量初始化</span><br><span class="line"><span class="comment">//定义变量同时时初始化</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stu</span> <span class="title">g</span> = &#123;</span> <span class="string">"lily"</span>, <span class="string">"teacher"</span>, <span class="number">22</span>, <span class="string">"guangzhou"</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>）变量和指针法操作结构体成员</span><br><span class="line"><span class="comment">// (指针)-&gt;name  (变量).name</span></span><br><span class="line"><span class="comment">//变量法， 点运算符</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stu</span> <span class="title">h</span>;</span></span><br><span class="line"><span class="built_in">strcpy</span>(h.name, <span class="string">"^_^"</span>);</span><br><span class="line">(&amp;h)-&gt;name</span><br><span class="line">	</span><br><span class="line"><span class="comment">//指针法， -&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stu</span> *<span class="title">p</span>;</span></span><br><span class="line">p = &amp;h;</span><br><span class="line"><span class="built_in">strcpy</span>(p-&gt;name, <span class="string">"abc"</span>);</span><br><span class="line">(*p).name</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line"><span class="number">5</span>）结构体数组</span><br><span class="line"><span class="comment">//结构体类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">char</span> name[<span class="number">32</span>];</span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">&#125;Teacher;</span><br><span class="line">	</span><br><span class="line"><span class="comment">//定义结构体数组，同时初始化</span></span><br><span class="line">Teacher t1[<span class="number">2</span>] = </span><br><span class="line">&#123;</span><br><span class="line">	&#123; <span class="string">"lily"</span>, <span class="number">18</span> &#125;,</span><br><span class="line">	&#123; <span class="string">"lilei"</span>, <span class="number">22</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line">	</span><br><span class="line">Teacher t1[<span class="number">2</span>] = &#123;<span class="string">"lily"</span>, <span class="number">18</span>, <span class="string">"lilei"</span>, <span class="number">22</span> &#125;;</span><br></pre></td></tr></table></figure></div>

<h2 id="2、结构体套指针"><a href="#2、结构体套指针" class="headerlink" title="2、结构体套指针"></a>2、结构体套指针</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//结构体类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">char</span> *name;</span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">&#125;Teacher;</span><br><span class="line">	</span><br><span class="line"><span class="comment">//结构体类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">char</span> *name;</span><br><span class="line">	<span class="keyword">char</span> **stu;</span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">&#125;Teacher;</span><br></pre></td></tr></table></figure></div>

<h2 id="3、结构体赋值"><a href="#3、结构体赋值" class="headerlink" title="3、结构体赋值"></a>3、结构体赋值</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Teacher t1 &#x3D; &#123; &quot;lily&quot;, &quot;teacher&quot;, 18, &quot;beijing&quot; &#125;;</span><br><span class="line">&#x2F;&#x2F;相同类型的结构体变量，可以相互赋值</span><br><span class="line">&#x2F;&#x2F;把t1每个成员的内容逐一拷贝到t2对应的成员中</span><br><span class="line">Teacher t2 &#x3D; t1;</span><br></pre></td></tr></table></figure></div>

<h2 id="4、浅拷贝和深拷贝"><a href="#4、浅拷贝和深拷贝" class="headerlink" title="4、浅拷贝和深拷贝"></a>4、浅拷贝和深拷贝</h2><p><a href="/2018/09/07/15363344131459/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-09-07%20%E4%B8%8B%E5%8D%8811.23.40.png" data-fancybox="group" data-caption="屏幕快照 2018-09-07 下午11.23.40" class="fancybox"><img alt="屏幕快照 2018-09-07 下午11.23.40" title="屏幕快照 2018-09-07 下午11.23.40" data-src="/2018/09/07/15363344131459/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-09-07%20%E4%B8%8B%E5%8D%8811.23.40.png" class="lazyload"></a></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef struct Teacher</span><br><span class="line">&#123;</span><br><span class="line">	char *name;</span><br><span class="line">	int age;</span><br><span class="line">&#125;Teacher;</span><br><span class="line">	</span><br><span class="line">&#x2F;&#x2F;结构体中嵌套指针，而且动态分配空间</span><br><span class="line">&#x2F;&#x2F;同类型结构体变量相互赋值</span><br><span class="line">&#x2F;&#x2F;不同结构体成员指针变量指向同一块内存</span><br><span class="line">Teacher t1;</span><br><span class="line">t1.name &#x3D; (char *)malloc(30);</span><br><span class="line">&#x2F;&#x2F;浅拷贝</span><br><span class="line">strcpy(t1.name, &quot;lily&quot;);</span><br><span class="line">t1.age &#x3D; 22;</span><br><span class="line"></span><br><span class="line">Teacher t2;</span><br><span class="line">t2 &#x3D; t1;</span><br><span class="line">	</span><br><span class="line">&#x2F;&#x2F;深拷贝，人为增加内存，重新拷贝一下</span><br><span class="line">t2.name &#x3D; (char *)malloc(30);</span><br><span class="line">strcpy(t2.name, t1.name);</span><br></pre></td></tr></table></figure></div>

<h2 id="5、结构体偏移量（了解）"><a href="#5、结构体偏移量（了解）" class="headerlink" title="5、结构体偏移量（了解）"></a>5、结构体偏移量（了解）</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;结构体类型定义下来，内部的成员变量的内存布局已经确定</span><br><span class="line">typedef struct Teacher</span><br><span class="line">&#123;</span><br><span class="line">	char name[64]; &#x2F;&#x2F;64</span><br><span class="line">	int age;	&#x2F;&#x2F;4</span><br><span class="line">	int id;	 &#x2F;&#x2F;4</span><br><span class="line">&#125;Teacher;</span><br><span class="line">	</span><br><span class="line">Teacher t1;</span><br><span class="line">Teacher *p &#x3D; &amp;t1;</span><br><span class="line"></span><br><span class="line">int n1 &#x3D; (int)(&amp;p-&gt;age) - (int)p;  &#x2F;&#x2F;相对于结构体首地址</span><br><span class="line">int n2 &#x3D; (int)&amp;((Teacher *)0)-&gt;age; &#x2F;&#x2F;绝对0地址的偏移量</span><br></pre></td></tr></table></figure></div>

<h2 id="6、结构体字节对齐（以空间换时间）"><a href="#6、结构体字节对齐（以空间换时间）" class="headerlink" title="6、结构体字节对齐（以空间换时间）"></a>6、结构体字节对齐（以空间换时间）</h2><p>  详情请看《结构体字节对齐规则.doc》</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">实际上访问特定类型的变量只能在特定的地址访问，</span><br><span class="line">这就需要 各个变量在空间上按一定的规则排列， </span><br><span class="line">而不是简单地顺序排列，这就是 内存对齐。</span><br></pre></td></tr></table></figure></div>

<h1 id="7-文件操作"><a href="#7-文件操作" class="headerlink" title="7 文件操作"></a>7 文件操作</h1><h2 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、文件分类</span><br><span class="line">	普通文件：存放在硬盘中的文件</span><br><span class="line">	设备文件：屏幕、键盘等特殊文件</span><br><span class="line">	</span><br><span class="line">	文本文件：ASCII文件，每个字节存放一个字符的ASCII码，打开文件看到的是文本信息</span><br><span class="line">	二进制文件：数据按其在内存中的存储形式原样存放，打开文件看到的是乱码</span><br><span class="line">	</span><br><span class="line">2、文件缓冲区（了解）</span><br><span class="line">	ANSI C（标准C语言库函数）标准采用“缓冲文件系统”处理数据文件。</span><br><span class="line">	</span><br><span class="line">	写文件（设备文件除外），并不会直接写到文件中，会先放在缓冲区，默认情况下，关闭文件或缓冲区满了才写到文件。</span><br><span class="line">	如果没有关闭文件，缓冲区也没有满，可以通过程序正常结束，或者人为刷新缓冲区fflush(fd)来把缓冲区的内容写到文件中。</span><br><span class="line">	</span><br><span class="line">	缓冲区了解一下即可，增加缓冲区只是为了提高效率，减少频繁交互的次数，我们写程序基本上不用关心。</span><br></pre></td></tr></table></figure></div>

<p><strong>缓冲区验证</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    char buf[] &#x3D; &quot;this is a test\n&quot;;</span><br><span class="line"></span><br><span class="line">    FILE  *fp &#x3D; fopen(&quot;&#x2F;machine&#x2F;test.txt&quot;, &quot;w+&quot;);</span><br><span class="line"></span><br><span class="line">    fputs(buf, fp);</span><br><span class="line">    fflush(fp);</span><br><span class="line">    fclose(fp);</span><br><span class="line"></span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="二、读写文件"><a href="#二、读写文件" class="headerlink" title="二、读写文件"></a>二、读写文件</h2><h3 id="1、按照字符读写文件：fgetc-、fputc"><a href="#1、按照字符读写文件：fgetc-、fputc" class="headerlink" title="1、按照字符读写文件：fgetc()、fputc()"></a>1、按照字符读写文件：fgetc()、fputc()</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define _CRT_SECURE_NO_WARNINGS</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;stdout stdin stderr</span><br><span class="line">int main01(void)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    fputc(&#39;a&#39;, stdout); &#x2F;&#x2F;stdout -&gt; 屏幕, 打印普通信息</span><br><span class="line"></span><br><span class="line">    char ch;</span><br><span class="line">    ch &#x3D; fgetc(stdin); &#x2F;&#x2F;stdin -&gt; 键盘</span><br><span class="line">    printf(&quot;ch &#x3D; %c\n&quot;, ch);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;fprintf(stderr, &quot;%c&quot;, ch ); &#x2F;&#x2F;stderr -&gt; 屏幕， 错误信息</span><br><span class="line">    fputc(ch, stderr);</span><br><span class="line"></span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;相对路径</span><br><span class="line">int main02(void)</span><br><span class="line">&#123;</span><br><span class="line">    FILE *fp &#x3D; NULL;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;下面两个等级</span><br><span class="line">    &#x2F;&#x2F;C:\\Users\\apple\\Documents\\C提高视频\\03.txt，  windows</span><br><span class="line">    &#x2F;&#x2F;C:&#x2F;Users&#x2F;apple&#x2F;Documents&#x2F;C提高视频&#x2F;03.txt，  windows linux</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; &quot;C:\\Users&quot; windows的写法</span><br><span class="line">    &#x2F;&#x2F; &quot;C:&#x2F;Users&quot; linux, windows都支持， 建议&quot;&#x2F;&quot;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;相对路径，&#x2F; , 45度， .&#x2F;, ..&#x2F;(建议), linux, windows</span><br><span class="line">    &#x2F;&#x2F;vs: 编译代码时，路径相对于项目工程(当前代码)</span><br><span class="line">    &#x2F;&#x2F;直接运行可执行程序，路径相对于程序</span><br><span class="line"></span><br><span class="line">    char *p &#x3D; &quot;1234353454364&quot;\</span><br><span class="line">		&quot;lgkjfdljhlkfdjhlfdjk&quot;;</span><br><span class="line">    printf(&quot;%s\n&quot;, p);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;r+ : 允许读和写,文件必须已存在</span><br><span class="line">    &#x2F;&#x2F;w+ : 允许读和写,如果文件不存在则创建,如果文件 已存在则把文件长度截断为 0 字节再重新 写 。</span><br><span class="line">    fp &#x3D; fopen(&quot;.&#x2F;05.txt&quot;, &quot;w+&quot;);</span><br><span class="line">    if (fp &#x3D;&#x3D; NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(&quot;fopen&quot;);</span><br><span class="line">        system(&quot;pause&quot;);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (fp !&#x3D; NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        fclose(fp);</span><br><span class="line">        fp &#x3D; NULL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;写文件</span><br><span class="line">void my_fputc(char *path)</span><br><span class="line">&#123;</span><br><span class="line">    FILE *fp &#x3D; NULL;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;&quot;w+&quot;, 写读方式打开，如果文件不存在，则创建</span><br><span class="line">    &#x2F;&#x2F;                     如果文件存在，清空内容，再写</span><br><span class="line">    fp &#x3D; fopen(path, &quot;w+&quot;);</span><br><span class="line">    if (fp &#x3D;&#x3D; NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;字符串</span><br><span class="line">        perror(&quot;my_fputs fopen&quot;);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;写文件</span><br><span class="line">    char buf[] &#x3D; &quot;this is a test for fputc&quot;;</span><br><span class="line">    int i &#x3D; 0;</span><br><span class="line">    int n &#x3D; strlen(buf);</span><br><span class="line">    for (i &#x3D; 0; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;返回值，成功写入文件的字符</span><br><span class="line">        int ch &#x3D; fputc(buf[i], fp);</span><br><span class="line">        printf(&quot;ch &#x3D; %c\n&quot;, ch);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (fp !&#x3D; NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        fclose(fp);</span><br><span class="line">        fp &#x3D; NULL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;读文件</span><br><span class="line">void my_fgetc(char *path)</span><br><span class="line">&#123;</span><br><span class="line">    FILE *fp &#x3D; NULL;</span><br><span class="line">    &#x2F;&#x2F;读写方式打开，如果文件不存在，打开失败</span><br><span class="line">    fp &#x3D; fopen(path, &quot;r+&quot;);</span><br><span class="line">    if (fp &#x3D;&#x3D; NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(&quot;my_fgetc fopen&quot;);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    char ch;</span><br><span class="line">#if 0</span><br><span class="line">    while ( ( ch &#x3D; fgetc(fp) ) !&#x3D; EOF )</span><br><span class="line">	&#123;</span><br><span class="line">		printf(&quot;%c&quot;, ch);</span><br><span class="line">	&#125;</span><br><span class="line">	printf(&quot;\n&quot;);</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">    while (!feof(fp)) &#x2F;&#x2F;文件没有结束</span><br><span class="line">    &#123;</span><br><span class="line">        ch &#x3D; fgetc(fp);</span><br><span class="line">        printf(&quot;%c&quot;, ch);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line"></span><br><span class="line">    if (fp !&#x3D; NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        fclose(fp);</span><br><span class="line">        fp &#x3D; NULL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main03(void)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;my_fputc(&quot;..&#x2F;03.txt&quot;);</span><br><span class="line"></span><br><span class="line">    my_fgetc(&quot;..&#x2F;03.txt&quot;);</span><br><span class="line"></span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="2、按照行读写文件：fputs-、fgets"><a href="#2、按照行读写文件：fputs-、fgets" class="headerlink" title="2、按照行读写文件：fputs()、fgets()"></a>2、按照行读写文件：fputs()、fgets()</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define _CRT_SECURE_NO_WARNINGS</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;写</span><br><span class="line">void my_fputs(char *path)</span><br><span class="line">&#123;</span><br><span class="line">    FILE *fp &#x3D; NULL;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;&quot;w+&quot;, 写读方式打开，如果文件不存在，则创建</span><br><span class="line">    &#x2F;&#x2F;                     如果文件存在，清空内容，再写</span><br><span class="line">    fp &#x3D; fopen(path, &quot;w+&quot;);</span><br><span class="line">    if (fp &#x3D;&#x3D; NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;字符串</span><br><span class="line">        perror(&quot;my_fputs fopen&quot;);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;写文件</span><br><span class="line">    char *buf[] &#x3D; &#123; &quot;123456\n&quot;, &quot;bbbbbbbbbb\n&quot;, &quot;ccccccccccc\n&quot; &#125;;</span><br><span class="line">    int i &#x3D; 0;</span><br><span class="line">    int n &#x3D; 3;</span><br><span class="line">    for (i &#x3D; 0; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;返回值，成功, 和失败， 成功是0， 失败非0</span><br><span class="line">        int len &#x3D; fputs(buf[i], fp);</span><br><span class="line">        printf(&quot;len &#x3D; %d\n&quot;, len);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (fp !&#x3D; NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        fclose(fp);</span><br><span class="line">        fp &#x3D; NULL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;读</span><br><span class="line">void my_fgets(char *path)</span><br><span class="line">&#123;</span><br><span class="line">    FILE *fp &#x3D; NULL;</span><br><span class="line">    &#x2F;&#x2F;读写方式打开，如果文件不存在，打开失败</span><br><span class="line">    fp &#x3D; fopen(path, &quot;r+&quot;);</span><br><span class="line">    if (fp &#x3D;&#x3D; NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(&quot;my_fgets fopen&quot;);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    char buf[100];</span><br><span class="line"></span><br><span class="line">    while (!feof(fp)) &#x2F;&#x2F;文件没有结束</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;sizeof(buf), 最大值，放不下，只能放100， 不超过，实际大小存放</span><br><span class="line">        &#x2F;&#x2F;返回值，成功读取文件内容</span><br><span class="line">        &#x2F;&#x2F;把“\n”会读取，以“\n”作为换行的标志</span><br><span class="line">        &#x2F;&#x2F;fgets()读取完毕后，自动加字符串结束符0</span><br><span class="line">        &#x2F;&#x2F;memset(buf, &#39;a&#39;, sizeof(buf));</span><br><span class="line">        char *p &#x3D; fgets(buf, sizeof(buf), fp);</span><br><span class="line">        if (p !&#x3D; NULL)</span><br><span class="line">        &#123;</span><br><span class="line">            printf(&quot;buf &#x3D; %s&quot;, buf);</span><br><span class="line">            printf(&quot;p &#x3D; %s&quot;, p);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line"></span><br><span class="line">    if (fp !&#x3D; NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        fclose(fp);</span><br><span class="line">        fp &#x3D; NULL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    my_fputs(&quot;..&#x2F;04.txt&quot;);</span><br><span class="line">    my_fgets(&quot;..&#x2F;04.txt&quot;);</span><br><span class="line"></span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    system(&quot;pause&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="3、按照块读写文件：fread-、fwirte"><a href="#3、按照块读写文件：fread-、fwirte" class="headerlink" title="3、按照块读写文件：fread()、fwirte()"></a>3、按照块读写文件：fread()、fwirte()</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef struct Stu</span><br><span class="line">&#123;</span><br><span class="line">	char name[50];</span><br><span class="line">	int id;</span><br><span class="line">&#125;Stu;</span><br><span class="line">Stu s[3];</span><br><span class="line">	</span><br><span class="line">1）写文件</span><br><span class="line">&#x2F;&#x2F;写文件，按块的方式写</span><br><span class="line">&#x2F;&#x2F;s：写入文件内容的内存首地址</span><br><span class="line">&#x2F;&#x2F;sizeof(Stu)：块数据的大小</span><br><span class="line">&#x2F;&#x2F;3：块数， 写文件数据的大小 sizeof(Stu) *3</span><br><span class="line">&#x2F;&#x2F;fp：文件指针</span><br><span class="line">&#x2F;&#x2F;返回值，成功写入文件的块数目，不是数据总长度</span><br><span class="line">int ret &#x3D; fwrite(s, sizeof(Stu), 3, fp);</span><br><span class="line">printf(&quot;ret &#x3D; %d\n&quot;, ret);</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">2）读文件</span><br><span class="line">&#x2F;&#x2F;读文件，按块的方式读</span><br><span class="line">&#x2F;&#x2F;s：放文件内容的首地址</span><br><span class="line">&#x2F;&#x2F;sizeof(Stu)：块数据的大小</span><br><span class="line">&#x2F;&#x2F;3：块数， 读文件数据的大小 sizeof(Stu) *3</span><br><span class="line">&#x2F;&#x2F;fp：文件指针</span><br><span class="line">&#x2F;&#x2F;返回值，成功读取文件内容的块数目，不是数据总长度</span><br><span class="line">int ret &#x3D; fread(s, sizeof(Stu), 3, fp);</span><br><span class="line">printf(&quot;ret &#x3D; %d\n&quot;, ret);</span><br></pre></td></tr></table></figure></div>

<h3 id="4、按照格式化进行读写文件：fprintf-、fscanf"><a href="#4、按照格式化进行读写文件：fprintf-、fscanf" class="headerlink" title="4、按照格式化进行读写文件：fprintf()、fscanf()"></a>4、按照格式化进行读写文件：fprintf()、fscanf()</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1）写文件</span><br><span class="line">&#x2F;&#x2F;格式化写文件</span><br><span class="line">int a &#x3D; 250;</span><br><span class="line">int b &#x3D; 10;</span><br><span class="line">int c &#x3D; 20;</span><br><span class="line">&#x2F;&#x2F;和printf()用法一样，只是printf是往屏幕（标准输出）写内容</span><br><span class="line">&#x2F;&#x2F;fprintf往指定的文件指针写内容</span><br><span class="line">&#x2F;&#x2F;返回值：成功：写入文件内容的长度，失败：负数</span><br><span class="line">fprintf(fp, &quot;Tom &#x3D; %d, just like %d, it is %d&quot;, a, b, c);</span><br><span class="line">	</span><br><span class="line">2）读文件</span><br><span class="line">int a, b, c;</span><br><span class="line">&#x2F;&#x2F;按格式取</span><br><span class="line">fscanf(fp, &quot;Tom &#x3D; %d, just like %d, it is %d&quot;, &amp;a, &amp;b, &amp;c);</span><br><span class="line">printf(&quot;a &#x3D; %d, b &#x3D; %d, c &#x3D; %d\n&quot;, a, b, c);</span><br></pre></td></tr></table></figure></div>

<h3 id="5、随机读写"><a href="#5、随机读写" class="headerlink" title="5、随机读写"></a>5、随机读写</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1）fseek ftell rewind</span><br><span class="line">	&#x2F;&#x2F;文件光标移动到文件结尾</span><br><span class="line">	&#x2F;&#x2F;SEEK_SET：文件开头</span><br><span class="line">	&#x2F;&#x2F;SEEK_CUR：文件当前位置</span><br><span class="line">	&#x2F;&#x2F;SEEK_END：文件结尾</span><br><span class="line">	&#x2F;&#x2F;文件指针 偏移量 参考点</span><br><span class="line">	fseek(fp, 0, SEEK_END);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;获取光标到文件开头文件的大小ftell</span><br><span class="line">	long size &#x3D; ftell(fp);</span><br><span class="line">	</span><br><span class="line">	&#x2F;&#x2F;文件光标恢复到开始位置</span><br><span class="line">	rewind(fp);</span><br><span class="line">	</span><br><span class="line">2）使用</span><br><span class="line">	typedef struct Stu</span><br><span class="line">	&#123;</span><br><span class="line">		char name[50];</span><br><span class="line">		int id;</span><br><span class="line">	&#125;Stu;</span><br><span class="line">	Stu tmp; &#x2F;&#x2F;读第3个结构体</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;假如文件中写了三个结构体</span><br><span class="line">	&#x2F;&#x2F;从起点位置开始，往后跳转2个结构体的位置</span><br><span class="line">	fseek(fp, 2*sizeof(Stu), SEEK_SET);</span><br><span class="line">	&#x2F;&#x2F;从结尾位置开始，往前跳转一个结构体的位置</span><br><span class="line">	&#x2F;&#x2F;fseek(fp, -1 * (int)sizeof(Stu), SEEK_END);</span><br><span class="line">	int ret &#x3D; 0;</span><br><span class="line">	ret &#x3D; fread(&amp;tmp,sizeof(Stu), 1,  fp);</span><br><span class="line">	if(ret &#x3D;&#x3D; 1)</span><br><span class="line">	&#123;</span><br><span class="line">		printf(&quot;[tmp]%s, %d\n&quot;, tmp.name, tmp.id);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	&#x2F;&#x2F;把文件光标移动到文件开头</span><br><span class="line">	&#x2F;&#x2F;fseek(fp, 0, SEEK_SET);</span><br><span class="line">	rewind(fp);</span><br></pre></td></tr></table></figure></div>

<h2 id="三、综合案例"><a href="#三、综合案例" class="headerlink" title="三、综合案例"></a>三、综合案例</h2><h3 id="1、加密文件读写（使用别人写好的接口）"><a href="#1、加密文件读写（使用别人写好的接口）" class="headerlink" title="1、加密文件读写（使用别人写好的接口）"></a>1、加密文件读写（使用别人写好的接口）</h3><p><a href="/2018/09/07/15363344131459/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-09-08%20%E4%B8%8A%E5%8D%881.53.45.png" data-fancybox="group" data-caption="屏幕快照 2018-09-08 上午1.53.45" class="fancybox"><img alt="屏幕快照 2018-09-08 上午1.53.45" title="屏幕快照 2018-09-08 上午1.53.45" data-src="/2018/09/07/15363344131459/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-09-08%20%E4%B8%8A%E5%8D%881.53.45.png" class="lazyload"></a></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &quot;des.h&quot;</span><br></pre></td></tr></table></figure></div>

<h3 id="2、配置文件读写（自定义接口）"><a href="#2、配置文件读写（自定义接口）" class="headerlink" title="2、配置文件读写（自定义接口）"></a>2、配置文件读写（自定义接口）</h3><h1 id="8-链表和函数指针"><a href="#8-链表和函数指针" class="headerlink" title="8 链表和函数指针"></a>8 链表和函数指针</h1><h2 id="一、链表"><a href="#一、链表" class="headerlink" title="一、链表"></a>一、链表</h2><h3 id="1、数组和链表的区别"><a href="#1、数组和链表的区别" class="headerlink" title="1、数组和链表的区别"></a>1、数组和链表的区别</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">数组：一次性分配一块连续的存储区域</span><br><span class="line">优点：</span><br><span class="line">	随机访问元素效率高</span><br><span class="line">缺点：</span><br><span class="line">	需要分配一块连续的存储区域（很大区域，有可能分配失败）</span><br><span class="line">	删除和插入某个元素效率低</span><br><span class="line">	</span><br><span class="line">链表：现实生活中的灯笼</span><br><span class="line">优点：</span><br><span class="line">	不需要一块连续的存储区域</span><br><span class="line">	删除和插入某个元素效率高</span><br><span class="line">缺点：</span><br><span class="line">	随机访问元素效率低</span><br></pre></td></tr></table></figure></div>

<h3 id="2、相关概念"><a href="#2、相关概念" class="headerlink" title="2、相关概念"></a>2、相关概念</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">节点：链表的每个节点实际上是一个结构体变量，节点，既有 数据域 也有 指针域</span><br><span class="line">typedef struct Node</span><br><span class="line">&#123;</span><br><span class="line">	int id;		&#x2F;&#x2F;数据域</span><br><span class="line">	struct Node *next;	&#x2F;&#x2F;指针域</span><br><span class="line">&#125;SLIST;</span><br><span class="line">	</span><br><span class="line">尾结点：next指针指向NULL</span><br></pre></td></tr></table></figure></div>

<h3 id="3、结构体套结构体"><a href="#3、结构体套结构体" class="headerlink" title="3、结构体套结构体"></a>3、结构体套结构体</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef struct A</span><br><span class="line">&#123;</span><br><span class="line">	int b;</span><br><span class="line">&#125;A;</span><br><span class="line">&#x2F;*</span><br><span class="line">1、结构体可以嵌套另外一个结构体的任何类型变量</span><br><span class="line">2、结构体嵌套本结构体普通变量（不可以）</span><br><span class="line">	本结构体的类型大小无法确定，类型本质：固定大小内存块别名</span><br><span class="line">3、结构体嵌套本结构体指针变量（可以）</span><br><span class="line">	指针变量的空间能确定，32位， 4字节， 64位， 8字节</span><br><span class="line">*&#x2F;</span><br><span class="line">typedef struct B</span><br><span class="line">&#123;</span><br><span class="line">	int a;</span><br><span class="line">	A tmp1; &#x2F;&#x2F;ok</span><br><span class="line">	A *p1; &#x2F;&#x2F;ok</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;struct B tmp2; &#x2F;&#x2F;err</span><br><span class="line">	struct B *next; &#x2F;&#x2F;32位， 4字节， 64位， 8字节	</span><br><span class="line">&#125;B;</span><br></pre></td></tr></table></figure></div>

<h3 id="4、链表的操作"><a href="#4、链表的操作" class="headerlink" title="4、链表的操作"></a>4、链表的操作</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">实际上是指针的拓展应用：指向指向谁，就把谁的地址赋值给指针。</span><br><span class="line">	</span><br><span class="line">typedef struct Stu</span><br><span class="line">&#123;</span><br><span class="line">	int id;	&#x2F;&#x2F;数据域</span><br><span class="line">	char name[100];</span><br><span class="line"></span><br><span class="line">	struct Stu *next; &#x2F;&#x2F;指针域</span><br><span class="line">&#125;Stu;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">（1）静态链表</span><br><span class="line">&#x2F;&#x2F;初始化三个结构体变量</span><br><span class="line">Stu s1 &#x3D; &#123; 1, &quot;mike&quot;, NULL &#125;;</span><br><span class="line">Stu s2 &#x3D; &#123; 2, &quot;lily&quot;, NULL &#125;;</span><br><span class="line">Stu s3 &#x3D; &#123; 3, &quot;lilei&quot;, NULL &#125;;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">s1.next &#x3D; &amp;s2; &#x2F;&#x2F;s1的next指针指向s2</span><br><span class="line">s2.next &#x3D; &amp;s3;</span><br><span class="line">s3.next &#x3D; NULL; &#x2F;&#x2F;尾结点</span><br><span class="line">	</span><br><span class="line">Stu *p &#x3D; &amp;s1; </span><br><span class="line"></span><br><span class="line">while (p !&#x3D; NULL)</span><br><span class="line">&#123;</span><br><span class="line">	printf(&quot;id &#x3D; %d, name &#x3D; %s\n&quot;, p-&gt;id, p-&gt;name);</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;结点往后移动一位</span><br><span class="line">	p &#x3D; p-&gt;next; &#x2F;&#x2F;&amp;s2</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line">（2）动态链表</span><br><span class="line">&#x2F;&#x2F;Stu *p1 &#x3D; NULL;</span><br><span class="line">&#x2F;&#x2F;p1 &#x3D; (Stu *)malloc(sizeof(Stu));</span><br><span class="line">Stu *p1 &#x3D; (Stu *)malloc(sizeof(Stu));</span><br><span class="line">Stu *p2 &#x3D; (Stu *)malloc(sizeof(Stu));</span><br><span class="line">Stu *p3 &#x3D; (Stu *)malloc(sizeof(Stu));</span><br><span class="line">	</span><br><span class="line">p1-&gt;next &#x3D; p2;</span><br><span class="line">p2-&gt;next &#x3D; p3;</span><br><span class="line">p3-&gt;next &#x3D; NULL; &#x2F;&#x2F;尾节点</span><br><span class="line">	</span><br><span class="line">Stu *tmp &#x3D; p1;</span><br><span class="line">while(tmp !&#x3D; NULL)</span><br><span class="line">&#123;</span><br><span class="line">	printf(&quot;id &#x3D; %d, name &#x3D; %s\n&quot;, tmp-&gt;id, tmp-&gt;name);</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;结点往后移动一位</span><br><span class="line">	tmp &#x3D; tmp-&gt;next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="二、函数指针"><a href="#二、函数指针" class="headerlink" title="二、函数指针"></a>二、函数指针</h2><h3 id="1、指针函数，它是函数，返回指针类型的函数"><a href="#1、指针函数，它是函数，返回指针类型的函数" class="headerlink" title="1、指针函数，它是函数，返回指针类型的函数"></a>1、指针函数，它是函数，返回指针类型的函数</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;指针函数</span><br><span class="line">&#x2F;&#x2F;()优先级比*高，它是函数，返回值是指针类型的函数</span><br><span class="line">&#x2F;&#x2F;返回指针类型的函数</span><br><span class="line">int *fun2()</span><br><span class="line">&#123;</span><br><span class="line">	int *p &#x3D; (int *)malloc(sizeof(int));</span><br><span class="line"></span><br><span class="line">	return p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="2、函数指针，它是指针，指向函数的指针"><a href="#2、函数指针，它是指针，指向函数的指针" class="headerlink" title="2、函数指针，它是指针，指向函数的指针"></a>2、函数指针，它是指针，指向函数的指针</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一个函数在编译时被分配一个入口地址，这个地址就称为函数的指针，函数名代表函数的入口地址。</span><br><span class="line"></span><br><span class="line">函数指针变量，它也是变量，和int a变量的本质是一样的。</span><br><span class="line">	</span><br><span class="line">int fun(int a)</span><br><span class="line">&#123;</span><br><span class="line">	printf(&quot;a &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; %d\n&quot;, a);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line">&#x2F;&#x2F;定义函数指针变量有3种方式：</span><br><span class="line">	</span><br><span class="line">（1）先定义函数类型，根据类型定义指针变量（不常用）</span><br><span class="line">&#x2F;&#x2F;有typedef是类型，没有是变量</span><br><span class="line">typedef int FUN(int a); &#x2F;&#x2F;FUN是函数类型，类型模式为： int fun(int);</span><br><span class="line">FUN *p1 &#x3D; NULL; &#x2F;&#x2F;函数指针变量</span><br><span class="line">p1 &#x3D; fun; &#x2F;&#x2F;p1 指向 fun 函数</span><br><span class="line">fun(5);   &#x2F;&#x2F;传统调用</span><br><span class="line">p1(6);    &#x2F;&#x2F;函数指针变量调用方式</span><br><span class="line">	</span><br><span class="line">（2）先定义函数指针类型，根据类型定义指针变量（常用）</span><br><span class="line">&#x2F;&#x2F;()()优先级相同，从左往右看</span><br><span class="line">&#x2F;&#x2F;第一个()代表指针，所以，它是指针</span><br><span class="line">&#x2F;&#x2F;第二个括号代表函数，指向函数的指针</span><br><span class="line">typedef int(*PFUN)(int a); &#x2F;&#x2F;PFUN是函数指针类型</span><br><span class="line">PFUN p2 &#x3D; fun; &#x2F;&#x2F;p2 指向 fun</span><br><span class="line">p2(7);</span><br><span class="line">	</span><br><span class="line">（3）直接定义函数指针变量（常用）</span><br><span class="line">int(*p3)(int a) &#x3D; fun;</span><br><span class="line">p3(8);</span><br><span class="line"></span><br><span class="line">int(*p4)(int a);</span><br><span class="line">p4 &#x3D; fun;</span><br><span class="line">p4(9);</span><br></pre></td></tr></table></figure></div>

<h3 id="3、函数指针数组，它是数组，每个元素都是函数指针类型"><a href="#3、函数指针数组，它是数组，每个元素都是函数指针类型" class="headerlink" title="3、函数指针数组，它是数组，每个元素都是函数指针类型"></a>3、函数指针数组，它是数组，每个元素都是函数指针类型</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void add() &#123;&#125;</span><br><span class="line">void minus() &#123;&#125;</span><br><span class="line">void multi() &#123;&#125;</span><br><span class="line">void divide() &#123;&#125;</span><br><span class="line">void myexit() &#123;&#125;</span><br><span class="line">	</span><br><span class="line">&#x2F;&#x2F;函数指针变量，fun1指向add()函数</span><br><span class="line">void(*fun1)() &#x3D; add;</span><br><span class="line">fun1();	&#x2F;&#x2F;调用add()函数</span><br><span class="line">	</span><br><span class="line">&#x2F;&#x2F;函数指针数组</span><br><span class="line">void(*fun[5])() &#x3D; &#123; add, minus, multi, divide, myexit &#125;;</span><br><span class="line">&#x2F;&#x2F;指针数组</span><br><span class="line">char *buf[] &#x3D; &#123; &quot;add&quot;, &quot;min&quot;, &quot;mul&quot;, &quot;div&quot;, &quot;exit&quot; &#125;;</span><br><span class="line">	</span><br><span class="line">char cmd[100];</span><br><span class="line">int i &#x3D; 0;</span><br><span class="line">while (1)</span><br><span class="line">&#123;</span><br><span class="line">	printf(&quot;请输入指令：&quot;);</span><br><span class="line">	scanf(&quot;%s&quot;, cmd);</span><br><span class="line"></span><br><span class="line">	for (i &#x3D; 0; i &lt; 5; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		if (strcmp(cmd, buf[i]) &#x3D;&#x3D; 0)</span><br><span class="line">		&#123;</span><br><span class="line">			fun[i]();</span><br><span class="line">			break; &#x2F;&#x2F;跳出for()循环，最近的循环</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="4、回调函数，函数的形参为：函数指针变量"><a href="#4、回调函数，函数的形参为：函数指针变量" class="headerlink" title="4、回调函数，函数的形参为：函数指针变量"></a>4、回调函数，函数的形参为：函数指针变量</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int add(int a, int b)</span><br><span class="line">&#123;</span><br><span class="line">	return a + b;</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line">int minus(int a, int b)</span><br><span class="line">&#123;</span><br><span class="line">	return a - b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;int(*p)(int a, int b), p 为函数指针变量</span><br><span class="line">void fun(int x, int y,  int(*p)(int a, int b) )</span><br><span class="line">&#123;</span><br><span class="line">	int a &#x3D; p(x, y); &#x2F;&#x2F;回调函数</span><br><span class="line">	printf(&quot;a &#x3D; %d\n&quot;, a);</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line">typedef int(*Q)(int a, int b); &#x2F;&#x2F;Q 为函数指针类型</span><br><span class="line">void fun2(int x, int y, Q p)&#x2F;&#x2F;p 为函数指针变量</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">	int a &#x3D; p(x, y); &#x2F;&#x2F;回调函数</span><br><span class="line">	printf(&quot;a &#x3D; %d\n&quot;, a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;fun()函数的调用方式</span><br><span class="line">fun(1, 2, add);</span><br><span class="line"></span><br><span class="line">fun2(10, 5, minus);</span><br></pre></td></tr></table></figure></div>

<h2 id="三、函数的递归"><a href="#三、函数的递归" class="headerlink" title="三、函数的递归"></a>三、函数的递归</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">递归：函数可以调用函数本身（不要用main()调用main()，不是不行，是没有这么做，往往得不到你想要的结果）</span><br><span class="line">	</span><br><span class="line">（1）普通函数调用（栈结构，先进后出，先调用，后结束）</span><br><span class="line">void funB(int b)</span><br><span class="line">&#123;</span><br><span class="line">	printf(&quot;b &#x3D; %d\n&quot;, b);</span><br><span class="line">	</span><br><span class="line">	return;</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line">void funA(int a)</span><br><span class="line">&#123;</span><br><span class="line">	funB(a-1);</span><br><span class="line">	</span><br><span class="line">	printf(&quot;a &#x3D; %d\n&quot;, a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">调用流程：</span><br><span class="line">funA(2) -&gt; funB(1) -&gt; printf(b) （离开funB()，回到funA()函数）-&gt; printf(a)</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">（2）函数递归调用(调用流程和上面是一样，换种模式，都是函数的调用而已)</span><br><span class="line">void fun(int a)</span><br><span class="line">&#123;</span><br><span class="line">	if(a &#x3D;&#x3D; 1)</span><br><span class="line">	&#123;</span><br><span class="line">		printf(&quot;a &#x3D;&#x3D; %d\n&quot;, a);</span><br><span class="line">		return; &#x2F;&#x2F;中断函数很重要</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	fun(a-1);</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	printf(&quot;a &#x3D; %d\n&quot;, a);</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line">fun(2);</span><br></pre></td></tr></table></figure></div>

<h1 id="9-预处理"><a href="#9-预处理" class="headerlink" title="9 预处理"></a>9 预处理</h1><h2 id="一、预处理概念"><a href="#一、预处理概念" class="headerlink" title="一、预处理概念"></a>一、预处理概念</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1）预处理的基本概念</span><br><span class="line"></span><br><span class="line">    C 语言对源程序处理的四个步骤：预处理、编译、汇编、链接。</span><br><span class="line"></span><br><span class="line">    预处理是在程序源代码被编译之前，由预处理器（Preprocessor）对程 序源代码进行的处理。</span><br><span class="line">    这个过程并不对程序的源代码语法进行解析，</span><br><span class="line">    但它会把 源代码分割或处理成为特定的符号为下一步的编译做准备工作。</span><br><span class="line">    </span><br><span class="line">2）预编译命令</span><br><span class="line"></span><br><span class="line">    Ｃ编译器提供的预处理功能主要有以下四种：</span><br><span class="line">        1)文件包含 #include</span><br><span class="line">        2)宏定义 #define</span><br><span class="line">        3)条件编译 #if #endif ..</span><br><span class="line">        4)一些特殊作用的预定义宏</span><br></pre></td></tr></table></figure></div>

<h2 id="二、文件包含处理：-include"><a href="#二、文件包含处理：-include" class="headerlink" title="二、文件包含处理：#include"></a>二、文件包含处理：#include</h2><p><a href="/2018/09/07/15363344131459/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-09-08%20%E4%B8%8B%E5%8D%8810.42.59.png" data-fancybox="group" data-caption="屏幕快照 2018-09-08 下午10.42.59" class="fancybox"><img alt="屏幕快照 2018-09-08 下午10.42.59" title="屏幕快照 2018-09-08 下午10.42.59" data-src="/2018/09/07/15363344131459/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-09-08%20%E4%B8%8B%E5%8D%8810.42.59.png" class="lazyload"></a></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt; &gt; 与 #include &quot;&quot;的区别</span><br><span class="line"></span><br><span class="line">    &quot;&quot;表示系统先在 file1.c 所在的当前目录找 file1.h，如果找不到，再按系 统指定的目录检索。</span><br><span class="line">     &lt; &gt;表示系统直接按系统指定的目录检索。</span><br><span class="line">     </span><br><span class="line">     注意：</span><br><span class="line"></span><br><span class="line">        1. #include &lt;&gt;常用于包含库函数的头文件</span><br><span class="line">        </span><br><span class="line">        2. #include &quot;&quot;常用于包含自定义的头文件</span><br><span class="line">        </span><br><span class="line">        3. 理论上#include 可以包含任意格式的文件(.c .h 等) ，但我们一 般用于头文件的包含。</span><br></pre></td></tr></table></figure></div>

<h2 id="三、宏定义：-define"><a href="#三、宏定义：-define" class="headerlink" title="三、宏定义：#define"></a>三、宏定义：#define</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1）基本概念</span><br><span class="line"></span><br><span class="line">    在源程序中，允许一个标识符（宏名）来表示一个语言符号字符串用指 定的符号代替指定的信息。 </span><br><span class="line">    在 C 语言中，“宏”分为：无参数的宏和有参数的宏。</span><br><span class="line">    </span><br><span class="line">2）无参数的宏定义</span><br><span class="line">    #define 宏名 字符串</span><br><span class="line">    例: #define PI 3.141926</span><br><span class="line">    在编译预处理时，将程序中在该语句以后出现的所有的 PI 都用 3.1415926 代替。</span><br><span class="line">    这种方法使用户能以一个简单的名字代替一个长的字符串，在预编译时 将宏名替换成字符串的过程称为“宏展开”。宏定义，只在宏定义的文件中起 作用。 </span><br><span class="line">    </span><br><span class="line">3）带参数的宏定义</span><br><span class="line"></span><br><span class="line">    1) 格式：#define 宏名(形参表) 字符串</span><br><span class="line">    2) 调用：宏名(形参表)</span><br><span class="line">    3) 宏展开：进行宏替换</span><br><span class="line"></span><br><span class="line">    #define S(a,b) a*b </span><br><span class="line">    ……  </span><br><span class="line">    Area &#x3D; S(3,2);</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">说明：</span><br><span class="line"></span><br><span class="line">    1) 宏名一般用大写，以便于与变量区别</span><br><span class="line">    </span><br><span class="line">    2) 字符串可以是常数、表达式等</span><br><span class="line">    </span><br><span class="line">    3) 宏定义不作语法检查，只有在编译被宏展开后的源程序才会报错</span><br><span class="line">    </span><br><span class="line">    4) 宏定义不是 C 语言，不在行末加分号</span><br><span class="line">    </span><br><span class="line">    5) 宏名有效范围为从定义到本源文件结束</span><br><span class="line">    </span><br><span class="line">    6) 可以用#undef 命令终止宏定义的作用域</span><br><span class="line">    </span><br><span class="line">    7) 在宏定义中，可以引用已定义的宏名</span><br></pre></td></tr></table></figure></div>

<p><strong>宏定义</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define _CRT_SECURE_NO_WARNINGS</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">#define  MAX2(a, b) (a) &gt; (b) ? (a) : (b)</span><br><span class="line">#define MAX3(a, b, c) (a) &gt; ( MAX2(b, c) ) ? (a) : ( MAX2(b, c) )</span><br><span class="line">&#x2F;&#x2F; 1, 2, 3 </span><br><span class="line"></span><br><span class="line">#define  PI   3.14</span><br><span class="line"></span><br><span class="line">#define TEST(a, b)   (a)*(b)</span><br><span class="line">void fun2()</span><br><span class="line">&#123;</span><br><span class="line">	&#x2F;&#x2F;int a &#x3D; A; &#x2F;&#x2F;err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void fun()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">#define A 10 &#x2F;&#x2F;定义了宏定义，下面的代码都可以用，类似于全局变量</span><br><span class="line">	int i &#x3D; 10;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void test()</span><br><span class="line">&#123;</span><br><span class="line">	int a &#x3D; A; &#x2F;&#x2F;ok</span><br><span class="line">	&#x2F;&#x2F;int j &#x3D; i; &#x2F;&#x2F;err</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;取消宏定义</span><br><span class="line">#undef A</span><br><span class="line">	&#x2F;&#x2F;int b &#x3D; A; &#x2F;&#x2F;err</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">	int r &#x3D; 10;</span><br><span class="line"></span><br><span class="line">	printf(&quot;%lf\n&quot;, PI*r*r);</span><br><span class="line">	&#x2F;&#x2F;printf(&quot;%lf\n&quot;, 3.14*r*r);</span><br><span class="line"></span><br><span class="line">	int a &#x3D; TEST(1, 2);</span><br><span class="line">	&#x2F;&#x2F;int a &#x3D; 1*2</span><br><span class="line">	a &#x3D; TEST(1 + 1, 2); &#x2F;&#x2F; 2 * 2</span><br><span class="line">	&#x2F;&#x2F;a &#x3D; 1+1*2 &#x3D; 3</span><br><span class="line">	printf(&quot;a &#x3D; %d\n&quot;, a);</span><br><span class="line"></span><br><span class="line">	printf(&quot;%d\n&quot;, MAX2(1, 2) );</span><br><span class="line">	printf(&quot;%d\n&quot;, MAX3(1, 2, 3));</span><br><span class="line">	&#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	printf(&quot;\n&quot;);</span><br><span class="line">	system(&quot;pause&quot;);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="四、条件编译：-if-endif"><a href="#四、条件编译：-if-endif" class="headerlink" title="四、条件编译：#if #endif"></a>四、条件编译：#if #endif</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>）基本概念</span><br><span class="line"></span><br><span class="line">    一般情况下，源程序中所有的行都参加编译。</span><br><span class="line">    但有时希望对部分源程序 行只在满足一定条件时才编译，</span><br><span class="line">    即对这部分源程序行指定编译条件。</span><br><span class="line">    </span><br><span class="line"><span class="number">2</span>）条件编译的作用</span><br><span class="line">    <span class="number">1</span>）防止头文件被重复包含引用 </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//test.h &gt; _TEST_H</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">ifndef</span> _SOMEFILE_H </span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> _SOMEFILE_H</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">//需要声明的变量、函数    </span></span><br><span class="line">        <span class="comment">//宏定义 </span></span><br><span class="line">        <span class="comment">//结构体</span></span><br><span class="line">        </span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endif</span>  </span></span><br><span class="line">   </span><br><span class="line">    <span class="number">2</span>) 软件裁剪</span><br></pre></td></tr></table></figure></div>

<p><strong>条件编译</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define _CRT_SECURE_NO_WARNINGS</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">#define  D1</span><br><span class="line">#define  TEST 0</span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;&#x2F; #ifdef：测试存在</span><br><span class="line">&#x2F;&#x2F; #ifndef：测试不存在</span><br><span class="line">#ifndef D1</span><br><span class="line">	printf(&quot;D1111111111111111111\n&quot;);</span><br><span class="line">#else</span><br><span class="line">	printf(&quot;others\n&quot;);</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; #if 表达式：根据表达式定义</span><br><span class="line">#if TEST</span><br><span class="line">	printf(&quot;1111111111111\n&quot;);</span><br><span class="line">#else</span><br><span class="line">	printf(&quot;2222222222222222&quot;);</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">#if 1</span><br><span class="line"></span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	printf(&quot;\n&quot;);</span><br><span class="line">	system(&quot;pause&quot;);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>


<h1 id="10-动态库"><a href="#10-动态库" class="headerlink" title="10 动态库"></a>10 动态库</h1><h2 id="一、静态库的封装和使用"><a href="#一、静态库的封装和使用" class="headerlink" title="一、静态库的封装和使用"></a>一、静态库的封装和使用</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">linux(mac)的静态链接库后缀是 .a</span><br><span class="line">win是 .lib</span><br><span class="line"></span><br><span class="line">编译代码时，需要链接此文件</span><br><span class="line"></span><br><span class="line">静态库和可执行文件没有依赖关系 </span><br><span class="line"></span><br><span class="line">意义：不开源，第三方提供API</span><br></pre></td></tr></table></figure></div>

<p><strong>CLion创建/调用静态链接库</strong></p>
<p> <strong>创建</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">新建工程 &gt; C Library &gt; type: static </span><br><span class="line"></span><br><span class="line">run &gt; build &gt; 会在debug文件夹下生成 .a文件</span><br></pre></td></tr></table></figure></div>

<p> <strong>调用</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">将 .a文件和.h文件拷贝到main.c同级</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">&#x2F;&#x2F;自定义的头文件</span><br><span class="line">#include &quot;library.h&quot;</span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;使用library.h 里的函数</span><br><span class="line">    hello();</span><br><span class="line"></span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>需要编写CMakeLists.txt，将.a文件添加为静态库</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set(LIB_DIR &#x2F;machine&#x2F;codding&#x2F;c_0906)</span><br><span class="line">link_libraries( $&#123;LIB_DIR&#125;&#x2F;libc_static_lib_0909.a)</span><br></pre></td></tr></table></figure></div>


<h2 id="二、动态库的封装和使用"><a href="#二、动态库的封装和使用" class="headerlink" title="二、动态库的封装和使用"></a>二、动态库的封装和使用</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">linux的动态链接库后缀是 .so</span><br><span class="line">mac .dylib**</span><br><span class="line">win是 .dll</span><br><span class="line"></span><br><span class="line">运行程序时，需要链接此文件    </span><br><span class="line"></span><br><span class="line">静态库和可执行文件没有依赖关系 </span><br><span class="line"></span><br><span class="line">意义：也称为共享库，可以被多个可执行文件同时使用，减少程序体积</span><br></pre></td></tr></table></figure></div>

<p><strong>CLion创建/调用动态链接库</strong></p>
<p> <strong>创建</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">新建工程 &gt; C Library &gt; type: shared </span><br><span class="line"></span><br><span class="line">run &gt; build &gt; 会在debug文件夹下生成 .dylib文件</span><br></pre></td></tr></table></figure></div>

<p> <strong>调用</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">将 .dylib文件和.h文件拷贝到main.c同级</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">&#x2F;&#x2F;自定义的头文件</span><br><span class="line">#include &quot;library.h&quot;</span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;使用library.h 里的函数</span><br><span class="line">    hello();</span><br><span class="line"></span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>需要编写CMakeLists.txt，将.a文件添加为静态库</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set(LIB_DIR &#x2F;machine&#x2F;codding&#x2F;c_0906)</span><br><span class="line">link_libraries( $&#123;LIB_DIR&#125;&#x2F;libc_shared_lib_0909.dylib)</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>c_c++</category>
      </categories>
      <tags>
        <tag>c_c++</tag>
      </tags>
  </entry>
  <entry>
    <title>01_C语言提高（1）</title>
    <url>/2018/09/06/15362416453168/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>参考：itheima</p>
</blockquote>
<p>[TOC]</p>
<h1 id="1-内存四区"><a href="#1-内存四区" class="headerlink" title="1 内存四区"></a>1 内存四区</h1><h2 id="1-1-数据类型本质分析"><a href="#1-1-数据类型本质分析" class="headerlink" title="1.1 数据类型本质分析"></a>1.1 数据类型本质分析</h2><h3 id="1-1-1-数据类型的本质"><a href="#1-1-1-数据类型的本质" class="headerlink" title="1.1.1 数据类型的本质"></a>1.1.1 数据类型的本质</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    int a;      &#x2F;&#x2F;告诉编译器，分配 4个字节</span><br><span class="line">    int b[10];  &#x2F;&#x2F;告诉编译器，分配 4 * 10 个字节</span><br><span class="line"></span><br><span class="line">    &#x2F;*类型的本质：固定内存块大小别名</span><br><span class="line">      可以通过 sizeof()测试</span><br><span class="line">    *&#x2F;</span><br><span class="line"></span><br><span class="line">    printf(&quot;sizeof(a) &#x3D; %d, sizeof(b) &#x3D; %d\n&quot;, sizeof(a), sizeof(b));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;打印地址</span><br><span class="line">    &#x2F;&#x2F;数组名字，数组首元素地址，数组首地址</span><br><span class="line">    printf(&quot;b:%ld， &amp;b:%ld\n&quot;, b, &amp;b);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;b, &amp;b的数组类型不一样</span><br><span class="line">    &#x2F;&#x2F;b， 数组首元素地址， 一个元素4字节，+1， +4</span><br><span class="line">    &#x2F;&#x2F;&amp;b, 整个数组的首地址，一个数组4*10  &#x3D; 40字节，+1， +40</span><br><span class="line">    printf(&quot;b+1:%ld， &amp;b+1:%ld\n&quot;, b+1, &amp;b+1);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;指针类型长度，32位程序， 长度4</span><br><span class="line">    &#x2F;&#x2F;              64位程序， 长度8</span><br><span class="line">    char ***********************p &#x3D; NULL;</span><br><span class="line">    int *q &#x3D; NULL;</span><br><span class="line">    printf(&quot;%d, %d\n&quot;, sizeof(p), sizeof(q));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">sizeof(a) &#x3D; 4, sizeof(b) &#x3D; 40</span><br><span class="line">b:140732775582288， &amp;b:140732775582288</span><br><span class="line">b+1:140732775582292， &amp;b+1:140732775582328</span><br><span class="line">8, 8</span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure></div>

<h3 id="1-1-2-数据类型的别名"><a href="#1-1-2-数据类型的别名" class="headerlink" title="1.1.2 数据类型的别名"></a>1.1.2 数据类型的别名</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define  _CRT_SECURE_NO_WARNINGS</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">typedef unsigned int u32;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;typedef和结构体结合使用</span><br><span class="line">struct MyStruct</span><br><span class="line">&#123;</span><br><span class="line">    int a;</span><br><span class="line">    int b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">typedef struct MyStruct2</span><br><span class="line">&#123;</span><br><span class="line">    int a;</span><br><span class="line">    int b;</span><br><span class="line">&#125;TMP;</span><br><span class="line"></span><br><span class="line">&#x2F;* void, 无类型</span><br><span class="line">1、函数参数为空，定义函数时，可以用void修饰:  int fun(void)</span><br><span class="line">2、函数没有返回值：void fun(void);</span><br><span class="line">3、不能定义void类型的普通变量： void a; &#x2F;&#x2F;err,无法确定类型,不同类型分配空间不一样</span><br><span class="line">4、可以定义void *变量： void *p; &#x2F;&#x2F;ok， 32永远4字节，64永远8字节</span><br><span class="line">5、数据类型本质：固定内存块大小别名</span><br><span class="line">6、void *p万能指针，函数返回值，函数参数</span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    u32 t; &#x2F;&#x2F; unsigned int</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;定义结构体变量，一定要加上struct关键字</span><br><span class="line">    struct MyStruct m1;</span><br><span class="line">    &#x2F;&#x2F;MyStruct m2; &#x2F;&#x2F;err</span><br><span class="line"></span><br><span class="line">    TMP m3;</span><br><span class="line">    struct MyStruct2 m4;</span><br><span class="line"></span><br><span class="line">    char buf[1024];</span><br><span class="line">    strcpy(buf, &quot;1111111111&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    system(&quot;pause&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="1-2-变量的本质分析"><a href="#1-2-变量的本质分析" class="headerlink" title="1.2 变量的本质分析"></a>1.2 变量的本质分析</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;变量本质：一段连续内存空间别名</span><br><span class="line">    &#x2F;&#x2F;变量相当于门牌号，内存相当于房间</span><br><span class="line">    int a;</span><br><span class="line">    int *p;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;直接赋值</span><br><span class="line">    a &#x3D; 10;</span><br><span class="line"></span><br><span class="line">    printf(&quot;a &#x3D; %d\n&quot;, a);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;间接赋值</span><br><span class="line">    printf(&quot;&amp;a: %ld\n&quot;, &amp;a);</span><br><span class="line">    p &#x3D; &amp;a;</span><br><span class="line">    printf(&quot;p &#x3D; %ld\n&quot;, p);</span><br><span class="line"></span><br><span class="line">    *p &#x3D; 22;</span><br><span class="line">    printf(&quot;*p &#x3D; %d, a &#x3D; %d\n&quot;, *p, a);</span><br><span class="line"></span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">    a &#x3D; 10</span><br><span class="line">    &amp;a: 140732754213496</span><br><span class="line">    p &#x3D; 140732754213496</span><br><span class="line">    *p &#x3D; 22, a &#x3D; 22</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure></div>

<h2 id="1-3-程序的内存四区模型"><a href="#1-3-程序的内存四区模型" class="headerlink" title="1.3 程序的内存四区模型"></a>1.3 程序的内存四区模型</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1）栈区：系统分配空间，系统自动回收，函数内部定义的变量，函数参数，函数结束，其内部变量生命周期结束</span><br><span class="line"></span><br><span class="line">2）堆区：程序员动态分配空间，由程序员手动释放，没有手动释放，分配的空间一直可用</span><br><span class="line"></span><br><span class="line">3）全局区（全局变量和静态变量，里面又分为初始化区和未初始化区，文字常量区：字符常量）：整个程序运行完毕，系统自动回收</span><br><span class="line"></span><br><span class="line">4）代码区</span><br></pre></td></tr></table></figure></div>

<h3 id="全局区分析"><a href="#全局区分析" class="headerlink" title="全局区分析"></a>全局区分析</h3><p>全局区：全局变量 静态变量 文字常量区</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">char *get_str1()</span><br><span class="line">&#123;</span><br><span class="line">    char *p &#x3D; &quot;abcdef&quot;; &#x2F;&#x2F;文字常量区</span><br><span class="line">    &#x2F;&#x2F;char *p &#x3D; &quot;abcdef1&quot;;</span><br><span class="line">    return p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">char *get_str2()</span><br><span class="line">&#123;</span><br><span class="line">    char *q &#x3D; &quot;abcdef&quot;; &#x2F;&#x2F;文字常量区，和上面的常量&quot;abcdef&quot;地址是一样的</span><br><span class="line">    &#x2F;&#x2F;char *q &#x3D; &quot;abcdef2&quot;;</span><br><span class="line">    return q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    char *p &#x3D; NULL;</span><br><span class="line">    char *q &#x3D; NULL;</span><br><span class="line"></span><br><span class="line">    p &#x3D; get_str1();</span><br><span class="line">    &#x2F;&#x2F;%s： 指针指向内存区域的内容</span><br><span class="line">    &#x2F;&#x2F;%d: 打印p本身的值</span><br><span class="line">    printf(&quot;p &#x3D; %s， p &#x3D; %d \n&quot;, p, p);</span><br><span class="line"></span><br><span class="line">    q &#x3D; get_str2();</span><br><span class="line">    printf(&quot;q &#x3D; %s， q &#x3D; %d&quot;, q, q);</span><br><span class="line"></span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">    p &#x3D; abcdef1， p &#x3D; 226439038</span><br><span class="line">    q &#x3D; abcdef2， q &#x3D; 226439046</span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure></div>

<p>全局区分析</p>
<p><a href="/2018/09/06/15362416453168/05_%E5%85%A8%E5%B1%80%E5%8C%BA%E5%88%86%E6%9E%90.png" data-fancybox="group" data-caption="05_全局区分析" class="fancybox"><img alt="05_全局区分析" title="05_全局区分析" data-src="/2018/09/06/15362416453168/05_%E5%85%A8%E5%B1%80%E5%8C%BA%E5%88%86%E6%9E%90.png" class="lazyload"></a></p>
<h3 id="堆栈区分析"><a href="#堆栈区分析" class="headerlink" title="堆栈区分析"></a>堆栈区分析</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define _CRT_SECURE_NO_WARNINGS</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;栈</span><br><span class="line">char *get_str()</span><br><span class="line">&#123;</span><br><span class="line">    char str[] &#x3D; &quot;abcdedsgads&quot;; &#x2F;&#x2F;&quot;abcdedsgads&quot;在常量区，但是会拷贝一份到 栈区str[]，函数运行完会释放栈区str[]</span><br><span class="line">    printf(&quot;str &#x3D; %s\n&quot;, str);</span><br><span class="line"></span><br><span class="line">    return str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;堆</span><br><span class="line">char *get_str2()</span><br><span class="line">&#123;</span><br><span class="line">    char *tmp &#x3D; (char *)malloc(100);</span><br><span class="line">    if (tmp &#x3D;&#x3D; NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        return NULL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    strcpy(tmp, &quot;adsagldsjglk&quot;);</span><br><span class="line"></span><br><span class="line">    return tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    char buf[128] &#x3D; &#123; 0 &#125;;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;strcpy(buf, get_str());</span><br><span class="line">    &#x2F;&#x2F;printf(&quot;buf &#x3D; %s\n&quot;, buf); &#x2F;&#x2F;乱码，不确定，因为栈区数据在函数get_str调用完会释放</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;解决办法：申请堆区</span><br><span class="line">    </span><br><span class="line">    char *p &#x3D; NULL;</span><br><span class="line">    p &#x3D; get_str2();</span><br><span class="line">    if (p !&#x3D; NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;p &#x3D; %s\n&quot;, p);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;堆区要手动释放</span><br><span class="line">        &#x2F;&#x2F;free是一个标识位，表示p这个空间可以被使用</span><br><span class="line">        free(p);</span><br><span class="line">        &#x2F;&#x2F;把指针赋值为空（不然它就指向一个已释放的空间地址）</span><br><span class="line">        p &#x3D; NULL;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;已经释放的空间不能再free（空间使用权已经交出去了）, 否则报错</span><br><span class="line">        if (p !&#x3D; NULL)</span><br><span class="line">        &#123;</span><br><span class="line">            free(p);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>栈区分析<br><a href="/2018/09/06/15362416453168/06%E6%A0%88%E5%8C%BA%E5%88%86%E6%9E%90.png" data-fancybox="group" data-caption="06栈区分析" class="fancybox"><img alt="06栈区分析" title="06栈区分析" data-src="/2018/09/06/15362416453168/06%E6%A0%88%E5%8C%BA%E5%88%86%E6%9E%90.png" class="lazyload"></a></p>
<p>堆区分析<br><a href="/2018/09/06/15362416453168/04_%E5%A0%86%E5%8C%BA%E5%88%86%E6%9E%90.png" data-fancybox="group" data-caption="04_堆区分析" class="fancybox"><img alt="04_堆区分析" title="04_堆区分析" data-src="/2018/09/06/15362416453168/04_%E5%A0%86%E5%8C%BA%E5%88%86%E6%9E%90.png" class="lazyload"></a></p>
<h2 id="1-4-函数的调用模型"><a href="#1-4-函数的调用模型" class="headerlink" title="1.4 函数的调用模型"></a>1.4 函数的调用模型</h2><p>栈：先进后出</p>
<p><a href="/2018/09/06/15362416453168/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-09-06%20%E4%B8%8B%E5%8D%8811.21.49.png" data-fancybox="group" data-caption="屏幕快照 2018-09-06 下午11.21.49" class="fancybox"><img alt="屏幕快照 2018-09-06 下午11.21.49" title="屏幕快照 2018-09-06 下午11.21.49" data-src="/2018/09/06/15362416453168/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-09-06%20%E4%B8%8B%E5%8D%8811.21.49.png" class="lazyload"></a></p>
<h2 id="1-5-函数调用变量传递分析"><a href="#1-5-函数调用变量传递分析" class="headerlink" title="1.5 函数调用变量传递分析"></a>1.5 函数调用变量传递分析</h2><p><a href="/2018/09/06/15362416453168/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-09-06%20%E4%B8%8B%E5%8D%8811.26.02.png" data-fancybox="group" data-caption="屏幕快照 2018-09-06 下午11.26.02" class="fancybox"><img alt="屏幕快照 2018-09-06 下午11.26.02" title="屏幕快照 2018-09-06 下午11.26.02" data-src="/2018/09/06/15362416453168/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-09-06%20%E4%B8%8B%E5%8D%8811.26.02.png" class="lazyload"></a></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. main 函数中可以在栈&#x2F;堆&#x2F;全局分配内存，都可以被 func1 和 func2 使用</span><br><span class="line"></span><br><span class="line">2. func2 在栈上分配的内存，不能被 func1 和 main 函数使用</span><br><span class="line"></span><br><span class="line">3. func2 中 malloc 的内存(堆),可以被 main 和 func1 函数使用</span><br><span class="line"></span><br><span class="line">**</span><br><span class="line">4. func2 中全局分配“abcdefg”(常量全局区)内存，可以被 func1 和 main 函数使用</span><br></pre></td></tr></table></figure></div>

<h2 id="1-6-栈的生长方向和内存存放方向"><a href="#1-6-栈的生长方向和内存存放方向" class="headerlink" title="1.6 栈的生长方向和内存存放方向"></a>1.6 栈的生长方向和内存存放方向</h2><p><a href="/2018/09/06/15362416453168/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-09-06%20%E4%B8%8B%E5%8D%8811.46.38.png" data-fancybox="group" data-caption="屏幕快照 2018-09-06 下午11.46.38" class="fancybox"><img alt="屏幕快照 2018-09-06 下午11.46.38" title="屏幕快照 2018-09-06 下午11.46.38" data-src="/2018/09/06/15362416453168/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-09-06%20%E4%B8%8B%E5%8D%8811.46.38.png" class="lazyload"></a></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;栈区</span><br><span class="line">    int a;</span><br><span class="line">    int b;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;栈的生长方向：从高到底</span><br><span class="line">    printf(&quot;&amp;a &#x3D; %ld, &amp;b &#x3D; %ld\n&quot;, &amp;a, &amp;b);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;堆的生长方向：与栈相反</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;内存存放方向：低 &gt; 高</span><br><span class="line">    int buf[100];</span><br><span class="line">    printf(&quot;buf: %ld, buf+1:%ld\n&quot;, buf, buf+1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">    &amp;a &#x3D; 140732802033880, &amp;b &#x3D; 140732802033876</span><br><span class="line">    buf: 140732802033888, buf+1:140732802033892</span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure></div>

<h1 id="2-指针强化"><a href="#2-指针强化" class="headerlink" title="2 指针强化"></a>2 指针强化</h1><h2 id="强化-1：指针是一种数据类型"><a href="#强化-1：指针是一种数据类型" class="headerlink" title="强化 1：指针是一种数据类型"></a>强化 1：指针是一种数据类型</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    int *p &#x3D; 0x11111;</span><br><span class="line">    char ***************q &#x3D; 0x11;</span><br><span class="line"></span><br><span class="line">    printf(&quot;sizeof(p) &#x3D; %d, sizeof(q) &#x3D;%d\n&quot;, sizeof(p), sizeof(q));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    int a &#x3D; 100;</span><br><span class="line">    int *p1 &#x3D; NULL;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;指针指向谁，就把谁的地址赋值给指针</span><br><span class="line">    p1 &#x3D; &amp;a;</span><br><span class="line">    &#x2F;&#x2F;*钥匙，通过*可以找到指针指向的内存区域，操作还是内存</span><br><span class="line">    *p1 &#x3D; 22;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;*放在&#x3D;左边，给内存赋值，写内存</span><br><span class="line">    &#x2F;&#x2F;*放在&#x3D;右边，取内存的值，读内容</span><br><span class="line">    int b &#x3D; *p1;</span><br><span class="line">    printf(&quot;a &#x3D; %d\n&quot;, a);</span><br><span class="line">    printf(&quot;b &#x3D; %d\n&quot;, b);</span><br><span class="line"></span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">    sizeof(p) &#x3D; 8, sizeof(q) &#x3D;8</span><br><span class="line">    a &#x3D; 22</span><br><span class="line">    b &#x3D; 22</span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure></div>

<p><strong>指针变量和它指向的内存块是两个不同的概念</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    char *p &#x3D; NULL;</span><br><span class="line">    char buf[] &#x3D; &quot;abcdef&quot;;</span><br><span class="line"></span><br><span class="line">    printf(&quot;p1 &#x3D; %d\n&quot;, p);</span><br><span class="line">    &#x2F;&#x2F;改变指针变量的值</span><br><span class="line">    p &#x3D; buf;</span><br><span class="line">    printf(&quot;p2 &#x3D; %ld\n&quot;, p);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;指针变量，和指向指向的内存是两个不同的概念</span><br><span class="line">    p &#x3D; p + 1; &#x2F;&#x2F;改变了指向变量的值，改变了指针的指向</span><br><span class="line">    printf(&quot;p2 &#x3D; %ld\n&quot;, p);</span><br><span class="line">    printf(&quot;buf &#x3D; %s\n&quot;, buf);</span><br><span class="line"></span><br><span class="line">    printf(&quot;*p &#x3D; %c\n&quot;, *p);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;改变指针指向的内存，并不会影响到指针的值</span><br><span class="line">    printf(&quot;改变指针指向的内存，并不会影响到指针的值\n&quot;);</span><br><span class="line">    buf[1] &#x3D; &#39;1&#39;;</span><br><span class="line">    printf(&quot;p3 &#x3D; %ld\n&quot;, p);</span><br><span class="line">    printf(&quot;buf2 &#x3D; %s\n&quot;, buf);</span><br><span class="line"></span><br><span class="line">    *p &#x3D; &#39;m&#39;;</span><br><span class="line">    printf(&quot;p4 &#x3D; %ld\n&quot;, p);</span><br><span class="line">    printf(&quot;buf3 &#x3D; %s\n&quot;, buf);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;写内存时，一定要确保内存可写</span><br><span class="line">    char *buf2 &#x3D; &quot;sadgkdsjlgjlsdk&quot;; &#x2F;&#x2F;文字常量区，内存不可改</span><br><span class="line">    &#x2F;&#x2F;buf2[2] &#x3D; &#39;1&#39;; &#x2F;&#x2F;err</span><br><span class="line"></span><br><span class="line">    char buf3[] &#x3D; &quot;skgjkdsjgjds&quot;;</span><br><span class="line">    buf3[1] &#x3D; &#39;1&#39;; &#x2F;&#x2F;ok</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;不允许向 NULL 和未知非法地址拷贝内存。</span><br><span class="line"></span><br><span class="line">    char *p3 &#x3D; NULL;</span><br><span class="line">    p3 &#x3D; buf3;</span><br><span class="line">    &#x2F;&#x2F;给p3指向的内存区域拷贝内存</span><br><span class="line">    strcpy(p3, &quot;1111&quot;); &#x2F;&#x2F;err</span><br><span class="line"></span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">    p1 &#x3D; 0</span><br><span class="line">    p2 &#x3D; 140732889754241</span><br><span class="line">    p2 &#x3D; 140732889754242</span><br><span class="line">    buf &#x3D; abcdef</span><br><span class="line">    *p &#x3D; b</span><br><span class="line">    改变指针指向的内存，并不会影响到指针的值</span><br><span class="line">    p3 &#x3D; 140732889754242</span><br><span class="line">    buf2 &#x3D; a1cdef</span><br><span class="line">    p4 &#x3D; 140732889754242</span><br><span class="line">    buf3 &#x3D; amcdef</span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure></div>

<p><strong>当我们不断的给指针变量赋值，就是不断的改变指针变量</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define _CRT_SECURE_NO_WARNINGS</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    char *p &#x3D; NULL;</span><br><span class="line">    char *q &#x3D; NULL;</span><br><span class="line">    int i &#x3D; 0;</span><br><span class="line"></span><br><span class="line">    char buf[100] &#x3D; &quot;akgjdksjg&quot;;</span><br><span class="line"></span><br><span class="line">    p &#x3D; &amp;buf[0];</span><br><span class="line">    printf(&quot;p1 &#x3D; %ld, %c\n&quot;, p, *p);</span><br><span class="line"></span><br><span class="line">    p &#x3D; &amp;buf[1];</span><br><span class="line">    printf(&quot;p2 &#x3D; %ld, %c\n\n&quot;, p, *p);</span><br><span class="line"></span><br><span class="line">    for (i &#x3D; 0; i &lt; strlen(buf); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;p &#x3D; &amp;buf[i];</span><br><span class="line">        p &#x3D; buf + i;</span><br><span class="line">        printf(&quot;p3 &#x3D; %ld, %c\n&quot;, p, *p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    q &#x3D; (char *)malloc(100);</span><br><span class="line">    if (q &#x3D;&#x3D; NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    strcpy(q, &quot;abcdefg&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    for (i &#x3D; 0; i &lt; strlen(q); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        p &#x3D; q + i;</span><br><span class="line">        printf(&quot;%c &quot;, *p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">    p1 &#x3D; 140732771035712, a</span><br><span class="line">    p2 &#x3D; 140732771035713, k</span><br><span class="line">    </span><br><span class="line">    p3 &#x3D; 140732771035712, a</span><br><span class="line">    p3 &#x3D; 140732771035713, k</span><br><span class="line">    p3 &#x3D; 140732771035714, g</span><br><span class="line">    p3 &#x3D; 140732771035715, j</span><br><span class="line">    p3 &#x3D; 140732771035716, d</span><br><span class="line">    p3 &#x3D; 140732771035717, k</span><br><span class="line">    p3 &#x3D; 140732771035718, s</span><br><span class="line">    p3 &#x3D; 140732771035719, j</span><br><span class="line">    p3 &#x3D; 140732771035720, g</span><br><span class="line">    </span><br><span class="line">    a b c d e f g </span><br><span class="line"> </span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure></div>

<h2 id="强化-2：间接赋值（-p）是指针存在的最大意义"><a href="#强化-2：间接赋值（-p）是指针存在的最大意义" class="headerlink" title="强化 2：间接赋值（*p）是指针存在的最大意义"></a>强化 2：间接赋值（*p）是指针存在的最大意义</h2><p><strong>通过指针间接赋值</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define _CRT_SECURE_NO_WARNINGS</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">int get_a()</span><br><span class="line">&#123;</span><br><span class="line">    int a &#x3D; 10;</span><br><span class="line"></span><br><span class="line">    return a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void get_a2(int b)</span><br><span class="line">&#123;</span><br><span class="line">    b &#x3D; 22;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void get_a3(int *p)</span><br><span class="line">&#123;</span><br><span class="line">    *p &#x3D; 33; &#x2F;&#x2F;通过*操作内存</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void get_a4(int *a1, int *a2, int *a3, int *a4)</span><br><span class="line">&#123;</span><br><span class="line">    *a1 &#x3D; 1;</span><br><span class="line">    *a2 &#x3D; 2;</span><br><span class="line">    *a3 &#x3D; 3;</span><br><span class="line">    *a4 &#x3D; 4;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main01(void)</span><br><span class="line">&#123;</span><br><span class="line">    int a &#x3D; 100;	&#x2F;&#x2F;两个变量</span><br><span class="line">    int *p &#x3D; NULL;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;建立关系</span><br><span class="line">    &#x2F;&#x2F;指针指向谁，就把谁的地址赋值给指针</span><br><span class="line">    p &#x3D; &amp;a;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;通过*操作内存</span><br><span class="line">    *p &#x3D; 22;</span><br><span class="line"></span><br><span class="line">    &#x2F;*通过指针间接赋值</span><br><span class="line">    1、两个变量</span><br><span class="line">    2、建立关系</span><br><span class="line">    3、通过*操作内存</span><br><span class="line">    *&#x2F;</span><br><span class="line"></span><br><span class="line">    int b &#x3D; get_a();</span><br><span class="line">    printf(&quot;b &#x3D;&#x3D;&#x3D;&#x3D;&#x3D; %d\n&quot;, b);</span><br><span class="line"></span><br><span class="line">    get_a2(b);</span><br><span class="line">    printf(&quot;b2 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D; %d\n&quot;, b);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;** 如果想通过形参改变实参的内存内容（值），必须地址传递</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;实参，形参</span><br><span class="line">    get_a3(&amp;b); &#x2F;&#x2F;在函数调用时，建立关系</span><br><span class="line">    printf(&quot;b3 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D; %d\n&quot;, b);</span><br><span class="line"></span><br><span class="line">    int a1, a2, a3, a4;</span><br><span class="line">    get_a4(&amp;a1, &amp;a2, &amp;a3, &amp;a4);</span><br><span class="line">    printf(&quot;a1 &#x3D; %d，a2 &#x3D; %d, a3 &#x3D; %d, a4 &#x3D; %d\n&quot;, a1, a2, a3, a4);</span><br><span class="line"></span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    return 0;</span><br><span class="line"></span><br><span class="line">    &#x2F;*</span><br><span class="line">        b &#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 10</span><br><span class="line">        b2 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 10</span><br><span class="line">        b3 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 33</span><br><span class="line">        a1 &#x3D; 1，a2 &#x3D; 2, a3 &#x3D; 3, a4 &#x3D; 4</span><br><span class="line">     *&#x2F;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void fun2(int *p)</span><br><span class="line">&#123;</span><br><span class="line">    p &#x3D; 0xaabb;</span><br><span class="line">    printf(&quot;fun2:p &#x3D; %p\n&quot;, p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void fun3(int **p)</span><br><span class="line">&#123;</span><br><span class="line">    *p &#x3D; 0xeeff;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;一个变量，应该定义一个怎么类型的指针保存它的地址</span><br><span class="line">    &#x2F;&#x2F;在原来类型基础上加一个*</span><br><span class="line">&#x2F;&#x2F; 	int a &#x3D; 10;</span><br><span class="line">&#x2F;&#x2F; 	int *p &#x3D; &amp;a;</span><br><span class="line">&#x2F;&#x2F; 	int **q &#x3D; &amp;p;</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F; 	int ************t &#x3D; NULL;</span><br><span class="line">&#x2F;&#x2F; 	int * ************t2 &#x3D; &amp;t;</span><br><span class="line"></span><br><span class="line">    int *p &#x3D; 0x1122;</span><br><span class="line">    printf(&quot;p1 &#x3D; %p\n&quot;, p);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    fun2(p); &#x2F;&#x2F;值传递</span><br><span class="line">    printf(&quot;p2 &#x3D; %p\n&quot;, p);</span><br><span class="line"></span><br><span class="line">    fun3(&amp;p); &#x2F;&#x2F;地址传递</span><br><span class="line">    printf(&quot;p2 &#x3D; %p\n&quot;, p);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    return 0;</span><br><span class="line"></span><br><span class="line">    &#x2F;*</span><br><span class="line">        p1 &#x3D; 0x1122</span><br><span class="line">        fun2:p &#x3D; 0xaabb</span><br><span class="line">        p2 &#x3D; 0x1122</span><br><span class="line">        p2 &#x3D; 0xeeff</span><br><span class="line">     *&#x2F;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="强化-3：理解指针必须和内存四区概念相结合"><a href="#强化-3：理解指针必须和内存四区概念相结合" class="headerlink" title="强化 3：理解指针必须和内存四区概念相结合"></a>强化 3：理解指针必须和内存四区概念相结合</h2><p><strong>指针做参数输入输出特性</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define _CRT_SECURE_NO_WARNINGS</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">void fun(char *p &#x2F;* in *&#x2F;)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;给p指向的内存区域拷贝</span><br><span class="line">    strcpy(p, &quot;abcddsgsd&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void fun2(char *p)</span><br><span class="line">&#123;</span><br><span class="line">    if (p &#x3D;&#x3D; NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;给p指向的内存区域拷贝</span><br><span class="line">    strcpy(p, &quot;abcddsgsd&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void fun3(char **p &#x2F;* out *&#x2F;, int *len)</span><br><span class="line">&#123;</span><br><span class="line">    if (p &#x3D;&#x3D; NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    char *tmp &#x3D; (char *)malloc(100);</span><br><span class="line">    if (tmp &#x3D;&#x3D; NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    strcpy(tmp, &quot;adlsgjldsk&quot;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;间接赋值</span><br><span class="line">    *p &#x3D; tmp;</span><br><span class="line">    *len &#x3D; strlen(tmp);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;输入，主调函数分配内存</span><br><span class="line">    char buf[100] &#x3D; &#123; 0 &#125;;</span><br><span class="line">    fun(buf);</span><br><span class="line">    printf(&quot;buf  &#x3D; %s\n&quot;, buf);</span><br><span class="line"></span><br><span class="line">    char *str &#x3D; NULL;</span><br><span class="line">    fun2(str);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;输出，被调用函数分配内存，地址传递</span><br><span class="line">    &#x2F;&#x2F; p的指向是null，但p变量本身不null</span><br><span class="line">    char *p &#x3D; NULL;</span><br><span class="line">    int len &#x3D; 0;</span><br><span class="line">    fun3(&amp;p, &amp;len);</span><br><span class="line">    if (p !&#x3D; NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;p &#x3D; %s, len &#x3D; %d\n&quot;, p, len);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    return 0;</span><br><span class="line"></span><br><span class="line">    &#x2F;*</span><br><span class="line">        buf  &#x3D; abcddsgsd</span><br><span class="line">        p &#x3D; adlsgjldsk, len &#x3D; 10</span><br><span class="line">    *&#x2F;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="强化-4：应用指针必须和函数调用相结合（指针做函数参数）"><a href="#强化-4：应用指针必须和函数调用相结合（指针做函数参数）" class="headerlink" title="强化 4：应用指针必须和函数调用相结合（指针做函数参数）"></a>强化 4：应用指针必须和函数调用相结合（指针做函数参数）</h2><h1 id="3-字符串"><a href="#3-字符串" class="headerlink" title="3 字符串"></a>3 字符串</h1><h2 id="3-1-字符串的基本操作"><a href="#3-1-字符串的基本操作" class="headerlink" title="3.1 字符串的基本操作"></a>3.1 字符串的基本操作</h2><p><strong>字符串的初始化</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">  c语言没有字符串类型，通过字符数组模拟</span><br><span class="line">  C语言字符串，以字符‘\0’, 数字0</span><br><span class="line">*&#x2F;</span><br><span class="line">int main01(void)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;不指定长度, 没有0结束符，有多少个元素就有多长</span><br><span class="line">    char buf[] &#x3D; &#123; &#39;a&#39;, &#39;b&#39;, &#39;c&#39; &#125;;</span><br><span class="line">    printf(&quot;buf &#x3D; %s\n&quot;, buf);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;指定长度，后面没有赋值的元素，自动补0</span><br><span class="line">    char buf2[100] &#x3D; &#123; &#39;a&#39;, &#39;b&#39;, &#39;c&#39; &#125;;</span><br><span class="line">    printf(&quot;buf2 &#x3D; %s\n&quot;, buf2);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;所有元素赋值为0</span><br><span class="line">    char buf3[100] &#x3D; &#123; 0 &#125;;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;char buf4[2] &#x3D; &#123; &#39;1&#39;, &#39;2&#39;, &#39;3&#39; &#125;;&#x2F;&#x2F;数组越界</span><br><span class="line"></span><br><span class="line">    char buf5[50] &#x3D; &#123; &#39;1&#39;, &#39;a&#39;, &#39;b&#39;, &#39;0&#39;, &#39;7&#39; &#125;;</span><br><span class="line">    printf(&quot;buf5 &#x3D; %s\n&quot;, buf5);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;%s遇到数字0 就默认结束</span><br><span class="line">    char buf6[50] &#x3D; &#123; &#39;1&#39;, &#39;a&#39;, &#39;b&#39;, 0, &#39;7&#39; &#125;;</span><br><span class="line">    printf(&quot;buf6 &#x3D; %s\n&quot;, buf6);</span><br><span class="line"></span><br><span class="line">    char buf7[50] &#x3D; &#123; &#39;1&#39;, &#39;a&#39;, &#39;b&#39;, &#39;\0&#39;, &#39;7&#39; &#125;;</span><br><span class="line">    printf(&quot;buf7 &#x3D; %s\n&quot;, buf7);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;使用字符串初始化，常用</span><br><span class="line">    char buf8[] &#x3D; &quot;agjdslgjlsdjg&quot;;</span><br><span class="line">    &#x2F;&#x2F;strlen: 测字符串长度，不包含数字0，字符&#39;\0&#39;</span><br><span class="line">    &#x2F;&#x2F;sizeof：测数组长度，包含数字0，字符&#39;\0&#39;</span><br><span class="line">    printf(&quot;strlen &#x3D; %d, sizeof &#x3D; %d\n&quot;, strlen(buf8), sizeof(buf8));</span><br><span class="line"></span><br><span class="line">    char buf9[100] &#x3D; &quot;agjdslgjlsdjg&quot;;</span><br><span class="line">    printf(&quot;strlen &#x3D; %d, sizeof &#x3D; %d\n&quot;, strlen(buf9), sizeof(buf9));</span><br><span class="line"></span><br><span class="line">    printf(&quot;test&quot;);</span><br><span class="line">    &#x2F;&#x2F;\012相当于\n</span><br><span class="line">    char str[] &#x3D; &quot;\0129&quot;;</span><br><span class="line">    printf(&quot;%s\n&quot;, str);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    return 0;</span><br><span class="line"></span><br><span class="line">    &#x2F;*</span><br><span class="line">        buf &#x3D; abc</span><br><span class="line">        buf2 &#x3D; abc</span><br><span class="line">        buf5 &#x3D; 1ab07</span><br><span class="line">        buf6 &#x3D; 1ab</span><br><span class="line">        buf7 &#x3D; 1ab</span><br><span class="line">        strlen &#x3D; 13, sizeof &#x3D; 14</span><br><span class="line">        strlen &#x3D; 13, sizeof &#x3D; 100</span><br><span class="line">        test</span><br><span class="line">        9</span><br><span class="line">     *&#x2F;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    char buf[] &#x3D; &quot;algjdlksajgldksjg&quot;;</span><br><span class="line">    int i &#x3D; 0;</span><br><span class="line">    int n &#x3D; strlen(buf);</span><br><span class="line">    char *p &#x3D; NULL;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;[]方式</span><br><span class="line">    for (i &#x3D; 0; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%c&quot;, buf[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;指针方法</span><br><span class="line">    &#x2F;&#x2F;数组名字，数组首元素地址</span><br><span class="line">    p &#x3D; buf;</span><br><span class="line">    for (i &#x3D; 0; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%c&quot;, p[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line"></span><br><span class="line">    for (i &#x3D; 0; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%c&quot;, *(p+i) );</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line"></span><br><span class="line">    for (i &#x3D; 0; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%c&quot;, *(buf+i) );</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;buf和p完全等价吗？</span><br><span class="line">    &#x2F;&#x2F;p++;</span><br><span class="line">    &#x2F;&#x2F;buf++;</span><br><span class="line">    &#x2F;&#x2F;buf只是一个常量，不能修改</span><br><span class="line"></span><br><span class="line">    &#x2F;*</span><br><span class="line">        algjdlksajgldksjg</span><br><span class="line">        algjdlksajgldksjg</span><br><span class="line">        algjdlksajgldksjg</span><br><span class="line">        algjdlksajgldksjg</span><br><span class="line">     *&#x2F;</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>字符串拷贝函数的实现</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define _CRT_SECURE_NO_WARNINGS</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">int main01(void)</span><br><span class="line">&#123;</span><br><span class="line">    char src[] &#x3D; &quot;abcedfdgds&quot;;</span><br><span class="line">    char dst[100] &#x3D; &#123; 0 &#125;;</span><br><span class="line">    int i &#x3D; 0;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    for (i &#x3D; 0; src[i] !&#x3D; &#39;\0&#39;; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dst[i] &#x3D; src[i];</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;补结束符</span><br><span class="line">    dst[i] &#x3D; 0;</span><br><span class="line"></span><br><span class="line">    printf(&quot;%s\n&quot;, dst);</span><br><span class="line"></span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void my_strcpy(char *dst, char *src)</span><br><span class="line">&#123;</span><br><span class="line">    int i &#x3D; 0;</span><br><span class="line"></span><br><span class="line">    for (i &#x3D; 0; *(src+i) !&#x3D; &#39;\0&#39;; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        *(dst+i) &#x3D; *(src+i); &#x2F;&#x2F;dst[i] &#x3D; src[i]</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;补结束符</span><br><span class="line">    &#x2F;&#x2F;dst[i] &#x3D; 0;</span><br><span class="line">    *(dst + i) &#x3D; 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void my_strcpy2(char *dst, char *src)</span><br><span class="line">&#123;</span><br><span class="line">    while (*src !&#x3D; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        *dst &#x3D; *src;</span><br><span class="line">        dst++;</span><br><span class="line">        src++;</span><br><span class="line">    &#125;</span><br><span class="line">    *dst &#x3D; 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void my_strcpy3(char *dst, char *src)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;*dst &#x3D; *src</span><br><span class="line">    &#x2F;&#x2F;dst++， src++</span><br><span class="line">    &#x2F;&#x2F;判断 *dst是否为0, 为0跳出循环</span><br><span class="line">    while (*dst++ &#x3D; *src++)</span><br><span class="line">    &#123;</span><br><span class="line">        NULL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;成功为0，失败非0</span><br><span class="line">&#x2F;&#x2F;1、判断形参指针是否为NULL</span><br><span class="line">&#x2F;&#x2F;2、最好不要直接使用形参</span><br><span class="line">int  my_strcpy4(char *dst, char *src)</span><br><span class="line">&#123;</span><br><span class="line">    if (dst &#x3D;&#x3D; NULL || src &#x3D;&#x3D; NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;辅助变量把形参接过来</span><br><span class="line">    char *to &#x3D; dst;</span><br><span class="line">    char *from &#x3D; src;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;*dst &#x3D; *src</span><br><span class="line">    &#x2F;&#x2F;dst++， src++</span><br><span class="line">    &#x2F;&#x2F;判断 *dst是否为0, 为0跳出循环</span><br><span class="line">    while (*to++ &#x3D; *from++)</span><br><span class="line">    &#123;</span><br><span class="line">        NULL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printf(&quot;my_strcpy4: dst &#x3D; %s\n&quot;, dst);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    char src[] &#x3D; &quot;abcedfdgds&quot;;</span><br><span class="line">    char dst[100] &#x3D; &#123; 0 &#125;;</span><br><span class="line">    int ret &#x3D; 0;</span><br><span class="line"></span><br><span class="line">    ret &#x3D; my_strcpy4(dst, src);</span><br><span class="line">    if (ret !&#x3D; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;my_strcpy4 err:%d\n&quot;, ret);</span><br><span class="line">        return ret;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;%s\n&quot;, dst);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="3-2-项目开发常用字符串应用模型"><a href="#3-2-项目开发常用字符串应用模型" class="headerlink" title="3.2 项目开发常用字符串应用模型"></a>3.2 项目开发常用字符串应用模型</h2><p><strong>strstr中的while和do-while模型</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define _CRT_SECURE_NO_WARNINGS</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;查找子串出现的次数</span><br><span class="line">int main01(void)</span><br><span class="line">&#123;</span><br><span class="line">    char *p &#x3D; &quot;11abcd111122abcd333abcd3322abcd3333322qqq&quot;;</span><br><span class="line">    int n &#x3D; 0;</span><br><span class="line"></span><br><span class="line">    do</span><br><span class="line">    &#123;</span><br><span class="line">        p &#x3D; strstr(p, &quot;abcd&quot;);</span><br><span class="line">        if (p !&#x3D; NULL)</span><br><span class="line">        &#123;</span><br><span class="line">            n++; &#x2F;&#x2F;累计个数</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F;重新设置查找的起点</span><br><span class="line">            p &#x3D; p + strlen(&quot;abcd&quot;);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        else &#x2F;&#x2F;如果没有匹配的字符串，跳出循环</span><br><span class="line">        &#123;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125; while (*p !&#x3D; 0); &#x2F;&#x2F;如果没有到结尾</span><br><span class="line"></span><br><span class="line">    printf(&quot;n &#x3D; %d\n&quot;, n);</span><br><span class="line"></span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main02(void)</span><br><span class="line">&#123;</span><br><span class="line">    char *p &#x3D; &quot;11abcd111122abcd333abcd3322abcd3333322qqq&quot;;</span><br><span class="line">    int n &#x3D; 0;</span><br><span class="line"></span><br><span class="line">    while (  ( p &#x3D; strstr(p, &quot;abcd&quot;) ) !&#x3D; NULL )</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;能进来，肯定有匹配的子串</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;重新设置起点位置</span><br><span class="line">        p &#x3D; p + strlen(&quot;abcd&quot;);</span><br><span class="line">        n++;</span><br><span class="line"></span><br><span class="line">        if (*p &#x3D;&#x3D; 0) &#x2F;&#x2F;如果到结束符</span><br><span class="line">        &#123;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printf(&quot;n &#x3D; %d\n&quot;, n);</span><br><span class="line"></span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int my_strstr(char *p, int *n)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;辅助变量</span><br><span class="line">    int i &#x3D; 0;</span><br><span class="line">    char *tmp &#x3D; p;</span><br><span class="line"></span><br><span class="line">    while ((tmp &#x3D; strstr(tmp, &quot;abcd&quot;)) !&#x3D; NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;能进来，肯定有匹配的子串</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;重新设置起点位置</span><br><span class="line">        tmp &#x3D; tmp + strlen(&quot;abcd&quot;);</span><br><span class="line">        i++;</span><br><span class="line"></span><br><span class="line">        if (*tmp &#x3D;&#x3D; 0) &#x2F;&#x2F;如果到结束符</span><br><span class="line">        &#123;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;间接赋值</span><br><span class="line">    *n &#x3D; i;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    char *p &#x3D; &quot;11abcd111122abcd333abcd3322abcd3333322qqq&quot;;</span><br><span class="line">    int n &#x3D; 0;</span><br><span class="line">    int ret &#x3D; 0;</span><br><span class="line"></span><br><span class="line">    ret &#x3D; my_strstr(p, &amp;n);</span><br><span class="line">    if (ret !&#x3D; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        return ret;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;n &#x3D; %d\n&quot;, n);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>两头堵模型</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define _CRT_SECURE_NO_WARNINGS</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;ctype.h&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;去首尾空格 求字符串长度</span><br><span class="line">int main01(void)</span><br><span class="line">&#123;</span><br><span class="line">    char *p &#x3D; &quot;      abcdefg      &quot;;</span><br><span class="line">    int begin &#x3D; 0;</span><br><span class="line">    int end &#x3D; strlen(p) - 1;</span><br><span class="line">    int n &#x3D; 0;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;从左边开始</span><br><span class="line">    &#x2F;&#x2F;如果当前字符为空，而且没有结束</span><br><span class="line">    while ( p[begin] &#x3D;&#x3D; &#39; &#39; &amp;&amp; p[begin] !&#x3D; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        begin++; &#x2F;&#x2F;位置从右移动一位</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;如果当前字符为空，而且没有结束</span><br><span class="line">    while ( p[end] &#x3D;&#x3D; &#39; &#39; &amp;&amp; p[end] !&#x3D; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        end--; &#x2F;&#x2F;往左移动</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    n &#x3D; end - begin + 1;</span><br><span class="line">    printf(&quot;n &#x3D; %d\n&quot;, n);</span><br><span class="line"></span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int fun(char *p, int *n)</span><br><span class="line">&#123;</span><br><span class="line">    if (p &#x3D;&#x3D; NULL || n &#x3D;&#x3D; NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int begin &#x3D; 0;</span><br><span class="line">    int end &#x3D; strlen(p) - 1;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;从左边开始</span><br><span class="line">    &#x2F;&#x2F;如果当前字符为空，而且没有结束</span><br><span class="line">    while (p[begin] &#x3D;&#x3D; &#39; &#39; &amp;&amp; p[begin] !&#x3D; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        begin++; &#x2F;&#x2F;位置从右移动一位</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;如果当前字符为空，而且没有结束</span><br><span class="line">    while (p[end] &#x3D;&#x3D; &#39; &#39; &amp;&amp; p[end] !&#x3D; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        end--; &#x2F;&#x2F;往左移动</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    *n &#x3D; end - begin + 1;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int fun2(char *p, char *buf)</span><br><span class="line">&#123;</span><br><span class="line">    if (p &#x3D;&#x3D; NULL || buf &#x3D;&#x3D; NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int begin &#x3D; 0;</span><br><span class="line">    int end &#x3D; strlen(p) - 1;</span><br><span class="line">    int n &#x3D; 0;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;从左边开始</span><br><span class="line">    &#x2F;&#x2F;如果当前字符为空，而且没有结束</span><br><span class="line">    while (p[begin] &#x3D;&#x3D; &#39; &#39; &amp;&amp; p[begin] !&#x3D; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        begin++; &#x2F;&#x2F;位置从右移动一位</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;如果当前字符为空，而且没有结束</span><br><span class="line">    while (p[end] &#x3D;&#x3D; &#39; &#39; &amp;&amp; p[end] !&#x3D; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        end--; &#x2F;&#x2F;往左移动</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    n &#x3D; end - begin + 1; &#x2F;&#x2F;非空元素个数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    strncpy(buf, p + begin, n);</span><br><span class="line">    buf[n] &#x3D; 0;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    char *p &#x3D; &quot;      abcddsgadsgefg      &quot;;</span><br><span class="line">    int ret &#x3D; 0;</span><br><span class="line">    char buf[100] &#x3D; &#123; 0 &#125;;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;将去首尾的串拷贝给buff</span><br><span class="line">    ret &#x3D; fun2(p, buf);</span><br><span class="line">    if (ret !&#x3D; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        return ret;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;buf &#x3D; %s\n&quot;, buf);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="3-3-const"><a href="#3-3-const" class="headerlink" title="3.3 const"></a>3.3 const</h2><p><strong>const的使用</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define _CRT_SECURE_NO_WARNINGS</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">typedef struct MyStruct</span><br><span class="line">&#123;</span><br><span class="line">    int a;</span><br><span class="line">    int b;</span><br><span class="line">&#125;MyStruct;</span><br><span class="line"></span><br><span class="line">void fun(MyStruct *p)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;指针能变</span><br><span class="line">    &#x2F;&#x2F;p &#x3D; NULL;</span><br><span class="line">    &#x2F;&#x2F;指针指向的内存也可以变</span><br><span class="line">    &#x2F;&#x2F;p-&gt;a &#x3D; 10; &#x2F;&#x2F;ok</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void fun1(MyStruct const *p)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;p &#x3D; NULL; &#x2F;&#x2F;ok</span><br><span class="line">    &#x2F;&#x2F;p-&gt;a &#x3D; 10; &#x2F;&#x2F;err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void fun2(MyStruct  * const p)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;p &#x3D; NULL; &#x2F;&#x2F;err</span><br><span class="line">    p-&gt;a &#x3D; 10;&#x2F;&#x2F;ok</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;p只读</span><br><span class="line">void fun3(MyStruct const * const p)</span><br><span class="line">&#123;</span><br><span class="line">    MyStruct tmp;</span><br><span class="line">    tmp.a &#x3D; p-&gt;a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;const修饰一个变量为只读</span><br><span class="line">    const int a &#x3D; 10;</span><br><span class="line">    &#x2F;&#x2F;a &#x3D; 100; &#x2F;&#x2F;err</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;指针变量， 指针指向的内存， 2个不同概念</span><br><span class="line">    char buf[] &#x3D; &quot;aklgjdlsgjlkds&quot;;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;从左往右看，跳过类型，看修饰哪个字符</span><br><span class="line">    &#x2F;&#x2F;1 如果是*， 说明指针指向的内存不能改变</span><br><span class="line">    &#x2F;&#x2F;2 如果是指针变量，说明指针的指向不能改变，指针的值不能修改</span><br><span class="line">    const char *p &#x3D; buf;&#x2F;&#x2F;1</span><br><span class="line">    &#x2F;&#x2F; 等价于上面 char const *p1 &#x3D; buf;</span><br><span class="line">    &#x2F;&#x2F;p[1] &#x3D; &#39;2&#39;; &#x2F;&#x2F;err</span><br><span class="line">    p &#x3D; &quot;agdlsjaglkdsajgl&quot;; &#x2F;&#x2F;ok</span><br><span class="line"></span><br><span class="line">    char * const p2 &#x3D; buf;</span><br><span class="line">    p2[1] &#x3D; &#39;3&#39;;</span><br><span class="line">    &#x2F;&#x2F;p2 &#x3D; &quot;salkjgldsjaglk&quot;; &#x2F;&#x2F;err</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;p3为只读，指向不能变，指向的内存也不能变</span><br><span class="line">    const char * const p3 &#x3D; buf;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;如何引用另外.c中const变量，了解</span><br><span class="line">    &#x2F;&#x2F;extern const int aa; &#x2F;&#x2F;不能再赋值，只能声明</span><br><span class="line">    &#x2F;&#x2F;printf(&quot;aa &#x3D; %d\n&quot;, aa);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;const修饰的变量，只能定义时初始化</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;在c语言中, const是一个冒牌货</span><br><span class="line">    const int b &#x3D; 10;</span><br><span class="line">    &#x2F;&#x2F;b &#x3D; 100; &#x2F;&#x2F;err（不能直接修改）</span><br><span class="line">    &#x2F;&#x2F;但可以通过指针间接修改</span><br><span class="line">    int *q &#x3D; &amp;b;</span><br><span class="line">    *q &#x3D; 22;</span><br><span class="line">    printf(&quot;%d, %d\n&quot;, b, *q);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="4-二级指针"><a href="#4-二级指针" class="headerlink" title="4 二级指针"></a>4 二级指针</h1><p><a href="/2018/09/06/15362416453168/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-09-07%20%E4%B8%8B%E5%8D%888.48.09.png" data-fancybox="group" data-caption="屏幕快照 2018-09-07 下午8.48.09" class="fancybox"><img alt="屏幕快照 2018-09-07 下午8.48.09" title="屏幕快照 2018-09-07 下午8.48.09" data-src="/2018/09/06/15362416453168/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-09-07%20%E4%B8%8B%E5%8D%888.48.09.png" class="lazyload"></a></p>
<h2 id="4-1-二级指针输出特性"><a href="#4-1-二级指针输出特性" class="headerlink" title="4.1 二级指针输出特性"></a>4.1 二级指针输出特性</h2><p><strong>二级指针做参数输出特性</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define _CRT_SECURE_NO_WARNINGS</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">int getMem(char *p)</span><br><span class="line">&#123;</span><br><span class="line">    p &#x3D; (char *)malloc(sizeof(char)* 100);</span><br><span class="line">    if (p &#x3D;&#x3D; NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    strcpy(p, &quot;abdakg&quot;);</span><br><span class="line">    printf(&quot;p &#x3D; %s\n&quot;, p);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int getMem2(char **p)</span><br><span class="line">&#123;</span><br><span class="line">    if (p &#x3D;&#x3D; NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    char *tmp &#x3D; (char *)malloc(100);</span><br><span class="line">    if (tmp &#x3D;&#x3D; NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        return -2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    strcpy(tmp, &quot;ALGKJDLSJGLKDSJ&quot;);</span><br><span class="line"></span><br><span class="line">    *p &#x3D; tmp;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    char *p &#x3D; NULL;</span><br><span class="line">    int ret &#x3D; 0;</span><br><span class="line"></span><br><span class="line">    ret &#x3D; getMem2(&amp;p);</span><br><span class="line">    if (ret !&#x3D; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;getMem err: %d\n&quot;, ret);</span><br><span class="line">        return ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printf(&quot;p &#x3D; %s\n&quot;, p);</span><br><span class="line"></span><br><span class="line">    if (p !&#x3D; NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        free(p);</span><br><span class="line">        p &#x3D; NULL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="4-2-二级指针输入特性"><a href="#4-2-二级指针输入特性" class="headerlink" title="4.2 二级指针输入特性"></a>4.2 二级指针输入特性</h2><p><strong>二级指针做输入：第一种内存模型</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;指针数组</span><br><span class="line">char *myArray[] &#x3D; &#123;&quot;aaaaaa&quot;, &quot;ccccc&quot;, &quot;bbbbbb&quot;, &quot;111111&quot;&#125;;</span><br><span class="line"></span><br><span class="line">void printMyArray(char **myArray, int num); </span><br><span class="line">void sortMyArray(char **myArray, int num);</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define _CRT_SECURE_NO_WARNINGS</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;指针数组</span><br><span class="line">int main01(void)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;每个类型都是char *</span><br><span class="line">    char *p0 &#x3D; &quot;111111111&quot;;</span><br><span class="line">    &#x2F;&#x2F;printf(&quot;%s\n&quot;, p0);</span><br><span class="line">    char *p1 &#x3D; &quot;000000000&quot;;</span><br><span class="line">    char *p2 &#x3D; &quot;bbbbbbbbb&quot;;</span><br><span class="line">    char *p3 &#x3D; &quot;aaaaaaaaa&quot;;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;指针数组，指针的数组，它是一个数组，每一个元素都是指针char *</span><br><span class="line">    char *p[] &#x3D; &#123; &quot;111111111&quot;, &quot;000000000&quot;, &quot;bbbbbbbbb&quot;, &quot;aaaaaaaaa&quot; &#125;;</span><br><span class="line">    &#x2F;&#x2F;p[0] &#x3D; &quot;111111111&quot;</span><br><span class="line">    int n &#x3D; sizeof(p) &#x2F; sizeof(p[0]);</span><br><span class="line">    printf(&quot;sizeof(p) &#x3D; %d, sizeof(p[0]) &#x3D; %d\n&quot;, sizeof(p), sizeof(p[0]));</span><br><span class="line"></span><br><span class="line">    int i &#x3D; 0;</span><br><span class="line">    for (i &#x3D; 0; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%s\n&quot;, p[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    char *q[10] &#x3D; &#123; &quot;111111111&quot;, &quot;000000000&quot;, &quot;bbbbbbbbb&quot;, &quot;aaaaaaaaa&quot; &#125;;</span><br><span class="line">    printf(&quot;sizeof(q) &#x3D; %d, sizeof(q[0]) &#x3D; %d\n&quot;, sizeof(q), sizeof(q[0]));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main02(void)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;指针数组，指针的数组，它是一个数组，每一个元素都是指针char *</span><br><span class="line">    char *p[] &#x3D; &#123; &quot;111111111&quot;, &quot;000000000&quot;, &quot;bbbbbbbbb&quot;, &quot;aaaaaaaaa&quot; &#125;;</span><br><span class="line">    &#x2F;&#x2F;char **q &#x3D; &#123; &quot;111111111&quot;, &quot;000000000&quot;, &quot;bbbbbbbbb&quot;, &quot;aaaaaaaaa&quot; &#125;; &#x2F;&#x2F;err</span><br><span class="line">    &#x2F;&#x2F;p[0] &#x3D; &quot;111111111&quot;</span><br><span class="line">    int n &#x3D; sizeof(p) &#x2F; sizeof(p[0]);</span><br><span class="line">    int i &#x3D; 0;</span><br><span class="line">    int j &#x3D; 0;</span><br><span class="line">    char *tmp &#x3D; NULL;</span><br><span class="line"></span><br><span class="line">    printf(&quot;排序前：\n&quot;);</span><br><span class="line">    for (i &#x3D; 0; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%s, &quot;, p[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;选择法排序</span><br><span class="line">    for (i &#x3D; 0; i &lt; n - 1; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        for (j &#x3D; i + 1; j &lt; n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            if (strcmp(p[i], p[j]) &gt; 0)</span><br><span class="line">            &#123;</span><br><span class="line">                tmp &#x3D; p[i];</span><br><span class="line">                p[i] &#x3D; p[j];</span><br><span class="line">                p[j] &#x3D; tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printf(&quot;\n排序后：\n&quot;);</span><br><span class="line">    for (i &#x3D; 0; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%s, &quot;, p[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    system(&quot;pause&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void test(int a[])</span><br><span class="line">&#x2F;&#x2F;void test(int *a)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void fun()</span><br><span class="line">&#123;</span><br><span class="line">    int a[10];</span><br><span class="line">    test(a);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;void print_array(char *p[], int n)</span><br><span class="line">void print_array(char **p, int n)</span><br><span class="line">&#123;</span><br><span class="line">    int i &#x3D; 0;</span><br><span class="line">    for (i &#x3D; 0; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%s, &quot;, p[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void sort_array(char **p, int n)</span><br><span class="line">&#123;</span><br><span class="line">    int i, j;</span><br><span class="line">    char *tmp;</span><br><span class="line">    for (i &#x3D; 0; i &lt; n - 1; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        for (j &#x3D; i + 1; j &lt; n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            if (strcmp(p[i], p[j]) &gt; 0)</span><br><span class="line">            &#123;</span><br><span class="line">                tmp &#x3D; p[i];</span><br><span class="line">                p[i] &#x3D; p[j];</span><br><span class="line">                p[j] &#x3D; tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main03(void)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;指针数组，指针的数组，它是一个数组，每一个元素都是指针char *</span><br><span class="line">    char *p[] &#x3D; &#123; &quot;111111111&quot;, &quot;000000000&quot;, &quot;bbbbbbbbb&quot;, &quot;aaaaaaaaa&quot; &#125;;</span><br><span class="line">    &#x2F;&#x2F;char **q &#x3D; &#123; &quot;111111111&quot;, &quot;000000000&quot;, &quot;bbbbbbbbb&quot;, &quot;aaaaaaaaa&quot; &#125;; &#x2F;&#x2F;err</span><br><span class="line">    &#x2F;&#x2F;p[0] &#x3D; &quot;111111111&quot;</span><br><span class="line">    int n &#x3D; sizeof(p) &#x2F; sizeof(p[0]);</span><br><span class="line"></span><br><span class="line">    printf(&quot;排序前:\n&quot;);</span><br><span class="line">    print_array(p, n);</span><br><span class="line"></span><br><span class="line">    sort_array(p, n);</span><br><span class="line"></span><br><span class="line">    printf(&quot;\n排序后:\n&quot;);</span><br><span class="line">    print_array(p, n);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    system(&quot;pause&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>二级指针做输入：第二种内存模型</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> myArray[<span class="number">10</span>][<span class="number">30</span>] = &#123;<span class="string">"aaaaaa"</span>, <span class="string">"ccccc"</span>, <span class="string">"bbbbbbb"</span>, <span class="string">"1111111111111"</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printMyArray</span><span class="params">(<span class="keyword">char</span> myArray[<span class="number">10</span>][<span class="number">30</span>], <span class="keyword">int</span> num)</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sortMyArray</span><span class="params">(<span class="keyword">char</span> myArray[<span class="number">10</span>][<span class="number">30</span>], <span class="keyword">int</span> num)</span></span>;</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define _CRT_SECURE_NO_WARNINGS</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">int main01(void)</span><br><span class="line">&#123;</span><br><span class="line">    char a0[30] &#x3D; &quot;22222222222&quot;;</span><br><span class="line">    char a1[30] &#x3D; &quot;11111111111&quot;;</span><br><span class="line">    char a2[30] &#x3D; &quot;bbbbbbbbbbb&quot;;</span><br><span class="line">    char a3[30] &#x3D; &quot;aaaaaaaaaaaa&quot;;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;4个a[30]的一维数组，二维数组</span><br><span class="line">    &#x2F;&#x2F;定义二维数组，不写第一个[]值有条件, 必须要初始化</span><br><span class="line">    &#x2F;&#x2F;a代表首行地址，首行地址和首行首元素地址有区别，但是他们的值是一样</span><br><span class="line">    &#x2F;&#x2F;区别：步长不一样</span><br><span class="line">    char a[][30] &#x3D; &#123; &quot;22222222222&quot;, &quot;11111111111&quot;, &quot;bbbbbbbbbbb&quot;, &quot;aaaaaaaaaaaa&quot; &#125;;</span><br><span class="line">    printf(&quot;a:%d, a+1: %d\n&quot;, a, a+1);</span><br><span class="line"></span><br><span class="line">    char b[30];</span><br><span class="line">    printf(&quot;&amp;b:%d, &amp;b+1:%d\n&quot;, &amp;b, &amp;b+1);</span><br><span class="line">    printf(&quot;b:%d, b+1:%d\n&quot;, b, b+1);</span><br><span class="line"></span><br><span class="line">    int n &#x3D; sizeof(a) &#x2F; sizeof(a[0]);</span><br><span class="line">    printf(&quot;n &#x3D; %d\n&quot;, n);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;a[0] &#x3D; &quot;22222222222&quot;</span><br><span class="line">    int i &#x3D; 0;</span><br><span class="line">    for (i &#x3D; 0; i &lt; 4; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%s\n&quot;,a[i]); &#x2F;&#x2F;首行地址，和首行首元素地址的值是一样</span><br><span class="line">        &#x2F;&#x2F; a+i, *(a+i)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    system(&quot;pause&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;不能通过 char ** 作为函数形参，因为指针+1步长不一样</span><br><span class="line">&#x2F;&#x2F; char **，指针+1步长为 4 个字节</span><br><span class="line">&#x2F;&#x2F; char a[][30]，指针+1步长为 1 行的长度，这里为 30 个字节</span><br><span class="line">void print_array_err(char **a, int n)</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;a: %d, a+1:%d\n&quot;, a, a+1);</span><br><span class="line">    int i &#x3D; 0;</span><br><span class="line">    for (i &#x3D; 0; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;printf(&quot;%s\n&quot;, a[i]); &#x2F;&#x2F;首行地址，和首行首元素地址的值是一样</span><br><span class="line">        &#x2F;&#x2F; a+i, *(a+i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void print_array(char a[][30], int n)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;printf(&quot;a: %d, a+1:%d\n&quot;, a, a + 1);</span><br><span class="line">    int i &#x3D; 0;</span><br><span class="line">    for (i &#x3D; 0; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%s, &quot;, a[i]); &#x2F;&#x2F;首行地址，和首行首元素地址的值是一样</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void sort_array(char a[][30], int n)</span><br><span class="line">&#123;</span><br><span class="line">    int i &#x3D; 0;</span><br><span class="line">    int j &#x3D; 0;</span><br><span class="line">    char tmp[30];</span><br><span class="line"></span><br><span class="line">    for (i &#x3D; 0; i &lt; n - 1; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        for (j &#x3D; i + 1; j &lt; n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            if (strcmp(a[i], a[j])&gt; 0)</span><br><span class="line">            &#123;</span><br><span class="line">                &#x2F;&#x2F;交换的内存块</span><br><span class="line">                strcpy(tmp, a[i]);</span><br><span class="line">                strcpy(a[i], a[j]);</span><br><span class="line">                strcpy(a[j], tmp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    char a[][30] &#x3D; &#123; &quot;22222222222&quot;, &quot;11111111111&quot;, &quot;bbbbbbbbbbb&quot;, &quot;aaaaaaaaaaaa&quot; &#125;;</span><br><span class="line">    int n &#x3D; sizeof(a) &#x2F; sizeof(a[0]);</span><br><span class="line"></span><br><span class="line">    printf(&quot;before sort:\n&quot;);</span><br><span class="line">    print_array(a, n);</span><br><span class="line"></span><br><span class="line">    sort_array(a, n);</span><br><span class="line"></span><br><span class="line">    printf(&quot;\nafter sort:\n&quot;);</span><br><span class="line">    print_array(a, n);</span><br><span class="line"></span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    system(&quot;pause&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>二级指针做输入：第三种内存模型</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> **myArray = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> **<span class="title">getMem</span><span class="params">(<span class="keyword">int</span> num)</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printMyArray</span><span class="params">(<span class="keyword">char</span> **myArray, <span class="keyword">int</span> num)</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sortMyArray</span><span class="params">(<span class="keyword">char</span> **myArray, <span class="keyword">int</span> num)</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">arrayFree</span><span class="params">(<span class="keyword">char</span> **myArray, <span class="keyword">int</span> num)</span></span>;</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define _CRT_SECURE_NO_WARNINGS</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">int main01(void)</span><br><span class="line">&#123;</span><br><span class="line">    char *p0 &#x3D; NULL;</span><br><span class="line">    p0 &#x3D; (char *)malloc(100);</span><br><span class="line">    strcpy(p0, &quot;agdsgds&quot;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;10个char *， 每一个的值都是空</span><br><span class="line">    int i &#x3D; 0;</span><br><span class="line">    char *p[10] &#x3D; &#123; 0 &#125;;</span><br><span class="line">    for (i &#x3D; 0; i &lt; 10; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        p[i] &#x3D; malloc(100);</span><br><span class="line">        strcpy(p[i], &quot;agdsg&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int a[10];</span><br><span class="line">    int *q &#x3D; (int *)malloc(10 * sizeof(int)); &#x2F;&#x2F;q[10]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;动态分配一个数组，每个元素都是char *</span><br><span class="line">    &#x2F;&#x2F;char *ch[10]</span><br><span class="line">    int n &#x3D; 3;</span><br><span class="line">    char **buf &#x3D; (char **)malloc(n * sizeof(char *)); &#x2F;&#x2F;char *buf[3]</span><br><span class="line">    if (buf &#x3D;&#x3D; NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    for (i &#x3D; 0; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        buf[i] &#x3D; (char *)malloc(30 * sizeof(char));</span><br><span class="line">        char str[30];</span><br><span class="line">        sprintf(str, &quot;test%d%d&quot;, i, i);</span><br><span class="line">        strcpy(buf[i], str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for (i &#x3D; 0; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%s, &quot;, buf[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line"></span><br><span class="line">    for (i &#x3D; 0; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        free(buf[i]);</span><br><span class="line">        buf[i] &#x3D; NULL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (buf !&#x3D; NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        free(buf);</span><br><span class="line">        buf &#x3D; NULL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    system(&quot;pause&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">char **getMem(int n)</span><br><span class="line">&#123;</span><br><span class="line">    int i &#x3D; 0;</span><br><span class="line">    char **buf &#x3D; (char **)malloc(n * sizeof(char *)); &#x2F;&#x2F;char *buf[3]</span><br><span class="line">    if (buf &#x3D;&#x3D; NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        return NULL;</span><br><span class="line">    &#125;</span><br><span class="line">    for (i &#x3D; 0; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        buf[i] &#x3D; (char *)malloc(30 * sizeof(char));</span><br><span class="line">        char str[30];</span><br><span class="line">        sprintf(str, &quot;test%d%d&quot;, i, i);</span><br><span class="line">        strcpy(buf[i], str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return buf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void print_buf(char **buf, int n)</span><br><span class="line">&#123;</span><br><span class="line">    int i &#x3D; 0;</span><br><span class="line">    for (i &#x3D; 0; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%s, &quot;, buf[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void free_buf(char **buf, int n)</span><br><span class="line">&#123;</span><br><span class="line">    int i &#x3D; 0;</span><br><span class="line">    for (i &#x3D; 0; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        free(buf[i]);</span><br><span class="line">        buf[i] &#x3D; NULL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (buf !&#x3D; NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        free(buf);</span><br><span class="line">        buf &#x3D; NULL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    char **buf &#x3D; NULL;</span><br><span class="line">    int n &#x3D; 3;</span><br><span class="line"></span><br><span class="line">    buf &#x3D; getMem(n);</span><br><span class="line">    if (buf &#x3D;&#x3D; NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;getMem err\n&quot;);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    print_buf(buf, n);</span><br><span class="line"></span><br><span class="line">    free_buf(buf, n);</span><br><span class="line">    buf &#x3D; NULL;</span><br><span class="line"></span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    system(&quot;pause&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="5-多维数组"><a href="#5-多维数组" class="headerlink" title="5 多维数组"></a>5 多维数组</h1><h2 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define _CRT_SECURE_NO_WARNINGS</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;int b[]; &#x2F;&#x2F;定义时必须初始化</span><br><span class="line">    int a1[100] &#x3D; &#123; 1, 2, 3, 4 &#125;; &#x2F;&#x2F;没有赋值的都为0</span><br><span class="line"></span><br><span class="line">    int a[] &#x3D; &#123; 1, 2, 3, 4, 5, 6, 7, 8&#125;;</span><br><span class="line">    &#x2F;&#x2F;sizeof()测变量所占的空间（变量所对应类型的空间）</span><br><span class="line"></span><br><span class="line">    int n &#x3D; 0;</span><br><span class="line">    int i &#x3D; 0;</span><br><span class="line">    &#x2F;&#x2F; sizeof(a) &#x3D; 4 * 8 &#x3D; 32 数组类型：由元素个数 和元素类型对应 int [8]</span><br><span class="line">    &#x2F;&#x2F;sizeof(a[0]) 首元素大小，每个元素4个字节</span><br><span class="line">    n &#x3D; sizeof(a) &#x2F; sizeof(a[0]); &#x2F;&#x2F;n &#x3D; 8</span><br><span class="line"></span><br><span class="line">    for (i &#x3D; 0; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;*(a+i) : a+i代表第I元素地址, *(a+i)指针指向的内存（取值）</span><br><span class="line">        &#x2F;&#x2F;[] * 等级</span><br><span class="line">        printf(&quot;%d &quot;, *(a + i));</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;数组类型</span><br><span class="line">    &#x2F;&#x2F;a代表首元素地址</span><br><span class="line">    &#x2F;&#x2F;&amp;a代表整个数组首地址，它和首元素地址一样的，但是，它们步长不一样</span><br><span class="line">    printf(&quot;a:%d, a+1:%d\n&quot;, a, a+1); &#x2F;&#x2F;+4</span><br><span class="line">    printf(&quot;&amp;a: %d, &amp;a+1:%d\n&quot;, &amp;a, &amp;a + 1); &#x2F;&#x2F;+32</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;数组类型：由元素个数 和元素类型对应 int [8]</span><br><span class="line">    &#x2F;&#x2F;通过typedf定义一个数组类型</span><br><span class="line">    &#x2F;&#x2F;有typedef是类型，没有是变量</span><br><span class="line">    typedef int A[8]; &#x2F;&#x2F;代表数组类型，它是一类型，不是变量</span><br><span class="line">    &#x2F;&#x2F;typedef int (A)[8];</span><br><span class="line"></span><br><span class="line">    A b; &#x2F;&#x2F; int b[8], 去了typedef, b替换到A的位置</span><br><span class="line"></span><br><span class="line">    for (i &#x3D; 0; i &lt; 8; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        b[i] &#x3D; 2*i + 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for (i &#x3D; 0; i &lt; 8; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;printf(&quot;%d &quot;, b[i]);</span><br><span class="line">        printf(&quot;%d &quot;, *(b+i));</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line"></span><br><span class="line">    printf(&quot;b: %d, b+1:%d\n&quot;, b, b+1);</span><br><span class="line">    printf(&quot;&amp;b: %d, &amp;b+1:%d\n&quot;, &amp;b, &amp;b + 1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    system(&quot;pause&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="数组指针"><a href="#数组指针" class="headerlink" title="数组指针"></a>数组指针</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;有typedef：类型</span><br><span class="line">&#x2F;&#x2F;没有typedef：变量</span><br><span class="line">1、根据数组类型，定义指针变量，数组指针变量</span><br><span class="line">2、直接定义数组指针变量（常用）</span><br><span class="line">3、先定义数组指针类型，再根据类型定义指针变量（常用）</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define _CRT_SECURE_NO_WARNINGS</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;argc: 传参数的个数（包含可执行程序）</span><br><span class="line">&#x2F;&#x2F;argv：指针数组，指向输入的参数</span><br><span class="line">int main01(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;数组指针，指针数组</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;指针数组，它是数组，每个元素都是指针</span><br><span class="line">    &#x2F;&#x2F;[] 比 * 优先级高</span><br><span class="line">    char *a[] &#x3D; &#123; &quot;aaaaaaa&quot;, &quot;bbbbbbbbbb&quot;, &quot;ccccccc&quot; &#125;;</span><br><span class="line">    int i &#x3D; 0;</span><br><span class="line"></span><br><span class="line">    printf(&quot;argc &#x3D; %d\n&quot;, argc);</span><br><span class="line"></span><br><span class="line">    for (i &#x3D; 0; i &lt; argc; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%s\n&quot;, argv[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    system(&quot;pause&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;1、根据数组类型，定义指针变量，数组指针变量</span><br><span class="line">int main02(void)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;数组指针，它是指针，指向一个数组的指针</span><br><span class="line">    &#x2F;&#x2F;数组指针，指向一维数组的整个数组，而不是首元素地址</span><br><span class="line">    &#x2F;&#x2F;定义数组指针变量</span><br><span class="line"></span><br><span class="line">    int a[10] &#x3D; &#123; 0 &#125;;</span><br><span class="line">    int i &#x3D; 0;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;1、先定义数组类型，根据类型定义指针变量</span><br><span class="line">    typedef int A[10]; &#x2F;&#x2F;A数组类型, [10]代表步长</span><br><span class="line">    &#x2F;&#x2F;p是指针，指向一个步长10的数组，p是数组指针</span><br><span class="line">    A *p &#x3D; NULL; &#x2F;&#x2F;p数组指针类型变量</span><br><span class="line">    &#x2F;&#x2F;p &#x3D; a; &#x2F;&#x2F;a代表首元素地址， a 和 &amp;a 一样，最终也是当做&amp;a，警告</span><br><span class="line">    p &#x3D; &amp;a; &#x2F;&#x2F;&amp;a代表整个数组首地址</span><br><span class="line"></span><br><span class="line">    printf(&quot;p:%d, p+1:%d\n&quot;, p, p + 1);</span><br><span class="line"></span><br><span class="line">    for (i &#x3D; 0; i &lt; 10; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;a[]</span><br><span class="line">        &#x2F;&#x2F; p &#x3D; &amp;a;</span><br><span class="line">        &#x2F;&#x2F; *p &#x3D; *&amp;a -&gt; a</span><br><span class="line">        (*p)[i] &#x3D; i + 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for (i &#x3D; 0; i &lt; 10; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%d &quot;, (*p)[i] );</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    system(&quot;pause&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;3、先定义数组指针类型，再根据类型定义指针变量（常用）</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    int a[10] &#x3D; &#123; 0 &#125;;</span><br><span class="line">    int i &#x3D; 0;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;2、先定义数组指针类型，根据类型定义变量</span><br><span class="line">    &#x2F;&#x2F;和指针数组写法很类似，多了()</span><br><span class="line">    &#x2F;&#x2F;() 和 []优先级一样，从左往右</span><br><span class="line">    &#x2F;&#x2F;()有指针，它是一个指针， []</span><br><span class="line">    &#x2F;&#x2F;指向数组的指针，它有typedef，所以它是一个数组指针类型</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;int[2][3]  一个长度为2的数组，每个数组存放的类型是长度为3的数组</span><br><span class="line"></span><br><span class="line">    typedef int(*P)[10];&#x2F;&#x2F;(*P)是指针，[10]代表步长为10，该指针指向一个步长10的数组，所以是数组指针类型</span><br><span class="line">    P q; &#x2F;&#x2F;数组指针变量</span><br><span class="line">    q &#x3D; &amp;a;</span><br><span class="line"></span><br><span class="line">    for (i &#x3D; 0; i &lt; 10; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; *q &#x3D; *&amp;a -&gt; a</span><br><span class="line">        (*q)[i] &#x3D; 2*i + 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for (i &#x3D; 0; i &lt; 10; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%d &quot;, (*q)[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    system(&quot;pause&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void fun(void * a)</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;%d\n&quot;, (int)a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;2、直接定义数组指针变量（常用）</span><br><span class="line">int main04(void)</span><br><span class="line">&#123;</span><br><span class="line">    int t &#x3D; 10;</span><br><span class="line">    fun((void *)t);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    int a[10] &#x3D; &#123; 0 &#125;;</span><br><span class="line">    &#x2F;&#x2F;a[11] &#x3D; 10;</span><br><span class="line"></span><br><span class="line">    int i &#x3D; 0;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;2、直接定义数组指针变量</span><br><span class="line">    &#x2F;&#x2F;和指针数组写法很类似，多了()</span><br><span class="line">    &#x2F;&#x2F;() 和 []优先级一样，从左往右</span><br><span class="line">    &#x2F;&#x2F;()有指针，它是一个指针， []</span><br><span class="line">    &#x2F;&#x2F;指向数组的指针， 没有typedef，所以它是一个数组指针变量</span><br><span class="line">    int(*q)[10]; &#x2F;&#x2F;q数组指针变量</span><br><span class="line">    q &#x3D; &amp;a; &#x2F;&#x2F;q指向a数组</span><br><span class="line"></span><br><span class="line">    for (i &#x3D; 0; i &lt; 10; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        (*q)[i] &#x3D; 3 * i + 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for (i &#x3D; 0; i &lt; 10; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%d &quot;, (*q)[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">    system(&quot;pause&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="多维数组名的本质"><a href="#多维数组名的本质" class="headerlink" title="多维数组名的本质"></a>多维数组名的本质</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>）二维数组初始化</span><br><span class="line"><span class="keyword">int</span> a1[<span class="number">3</span>][<span class="number">4</span>] = &#123;</span><br><span class="line">	&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;,</span><br><span class="line">	&#123;<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>&#125;,</span><br><span class="line">	&#123;<span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>&#125;</span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a2[<span class="number">3</span>][<span class="number">4</span>] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a3[][<span class="number">4</span>] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span> &#125;;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line"><span class="number">2</span>）内存中并不存在多维数组，多维数组在内存中都是线性存储</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">3</span>][<span class="number">5</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> *b = (<span class="keyword">int</span> *)a;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">15</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d "</span>, b[i]);</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>）多维数组名</span><br><span class="line">	</span><br><span class="line"><span class="comment">//学会类比</span></span><br><span class="line"><span class="keyword">int</span> b[<span class="number">5</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">b: 首行首元素地址（一级指针）， +<span class="number">1</span>，跳 <span class="number">4</span> 个字节</span><br><span class="line">&amp;b：首行地址（二级指针），+<span class="number">1</span>，跳 <span class="number">4</span>*<span class="number">5</span> = <span class="number">20</span>个字节</span><br><span class="line">	</span><br><span class="line"><span class="comment">//二维数组实际上就是 N 个一维数组</span></span><br><span class="line"><span class="comment">//把二维数组第一个[]的值看做标志位，0 -&gt; 2</span></span><br><span class="line"><span class="comment">//第0个一维数组a[5] -&gt; 第2个一维数组a[5]</span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">3</span>][<span class="number">5</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">a：</span><br><span class="line">二维数组首元素地址</span><br><span class="line">代表首行地址，相当于一维数组整个数组的地址，相当于上面的 &amp;b，本来就是一个二级指针</span><br><span class="line">	</span><br><span class="line"><span class="comment">//(重要)首行地址  --&gt; 首行首元素地址（加*）</span></span><br><span class="line">*a：首行首元素地址，相当于一维数组首元素地址，相当于上面的 b</span><br><span class="line">	</span><br><span class="line">a + i -&gt; &amp;a[i]: 第i行地址</span><br><span class="line">	</span><br><span class="line"><span class="comment">//(重要)某行地址  --&gt; 某行首元素地址（加*）</span></span><br><span class="line">*(a+i) -&gt; *&amp;a[i] -&gt; a[i]: 第i行首元素地址</span><br><span class="line">	</span><br><span class="line"><span class="comment">//第i行j列元素的地址，某行首元素地址 + 偏移量</span></span><br><span class="line">*(a+i)+j -&gt; a[i]+j -&gt; &amp;a[i][j]: 第i行j列元素的地址</span><br><span class="line">	</span><br><span class="line"><span class="comment">//第i行j列元素的值，第i行j列元素的地址的基础上（加 *）</span></span><br><span class="line">*(*(a+i)+j) -&gt; a[i][j]: 第i行j列元素的值</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">3</span>][<span class="number">5</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">sizeof</span>(a): 二维数组整个数组长度，<span class="number">4</span> * <span class="number">3</span> * <span class="number">5</span> = <span class="number">60</span></span><br><span class="line"><span class="keyword">sizeof</span>(a[<span class="number">0</span>])：a[<span class="number">0</span>]为第<span class="number">0</span>行首元素地址，相当于测第<span class="number">0</span>行一维数组的长度：<span class="number">4</span> * <span class="number">5</span> = <span class="number">20</span></span><br><span class="line"><span class="keyword">sizeof</span>(a[<span class="number">0</span>][<span class="number">0</span>])：a[<span class="number">0</span>][<span class="number">0</span>]为第<span class="number">0</span>第<span class="number">0</span>列元素（是元素，不是地址），测某个元素长度：<span class="number">4</span>字节</span><br><span class="line">	</span><br><span class="line"><span class="number">4</span>）多维数组名，实际上是一个数组指针，指向数组的指针，步长为一行字节长度</span><br><span class="line">	</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">3</span>][<span class="number">5</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	</span><br><span class="line"><span class="comment">//定义一个数组指针类型的变量</span></span><br><span class="line"><span class="keyword">int</span>(*p)[<span class="number">5</span>];</span><br><span class="line">	</span><br><span class="line"><span class="comment">//编译会有警告，但不会出错，因为 a 和 &amp;a的值一样</span></span><br><span class="line"><span class="comment">//但是&amp;a代表整个二维数组的首地址</span></span><br><span class="line"><span class="comment">//就算p = &amp;a这样赋值，编译器内部也会自动转换为 p = a</span></span><br><span class="line"><span class="comment">//不建议这么做</span></span><br><span class="line">p = &amp;a; </span><br><span class="line">	</span><br><span class="line"><span class="comment">//a 本来就是第0个一维数组整个数组的地址，所以，无需加&amp;</span></span><br><span class="line">p = a; </span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line"><span class="number">5</span>）二维数组做形参的三种形式</span><br><span class="line"><span class="comment">//一维数组做函数参数退化为一级指针</span></span><br><span class="line"><span class="comment">//二维数组（多维数组）做函数参数，退化为数组指针</span></span><br><span class="line">	</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">3</span>][<span class="number">5</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_array1</span><span class="params">(<span class="keyword">int</span> a[<span class="number">3</span>][<span class="number">5</span>])</span></span>;</span><br><span class="line">	</span><br><span class="line"><span class="comment">//第一维的数组，可以不写</span></span><br><span class="line"><span class="comment">//第二维必须写，代表步长，确定指针+1的步长 5*4</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_array2</span><span class="params">(<span class="keyword">int</span> a[][<span class="number">5</span>])</span></span></span><br><span class="line"><span class="function">	</span></span><br><span class="line"><span class="function"><span class="comment">//形参为数组指针变量，[]的数字代表步长</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_array3</span><span class="params">(<span class="keyword">int</span> (*a)[<span class="number">5</span>])</span></span>;</span><br><span class="line">	</span><br><span class="line"><span class="comment">//a+1和二维数组的步长不一样</span></span><br><span class="line"><span class="comment">//这里的步长为4</span></span><br><span class="line"><span class="comment">//上面二维数组的步长为 5 * 4 = 20</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_array3</span><span class="params">(<span class="keyword">int</span> **a)</span></span>; <span class="comment">//err</span></span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>c_c++</category>
      </categories>
      <tags>
        <tag>c_c++</tag>
      </tags>
  </entry>
  <entry>
    <title>MAC下apache＋php 配置</title>
    <url>/2018/08/15/15343253464770/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[TOC]</p>
<blockquote>
<p>mac下是自带有Apache和php的服务器的，不需要另外安装，对相关配置介绍。</p>
</blockquote>
<h1 id="配置Apache"><a href="#配置Apache" class="headerlink" title="配置Apache"></a>配置Apache</h1><blockquote>
<p>apache是个静态服务器，但可以支持添加 PHP 处理模块</p>
</blockquote>
<h2 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;启动</span><br><span class="line">sudo apachectl-k start  </span><br><span class="line">&#x2F;&#x2F;重新启动</span><br><span class="line">sudo apachectl -k restart</span><br></pre></td></tr></table></figure></div>

<p>验证：在浏览器中输入：<a href="http://127.0.0.1，显示为It" target="_blank" rel="noopener">http://127.0.0.1，显示为It</a> Works！，既证明服务器已经启动。</p>
<hr>
<h2 id="修改网站根目录"><a href="#修改网站根目录" class="headerlink" title="修改网站根目录"></a>修改网站根目录</h2><blockquote>
<p>默认 Apache 的网站根目录是安装目录中的 htdocs 文件夹<br>mac下默认的网站根目录有访问权限，所以改一下</p>
</blockquote>
<p>/etc/apache2/httpd.conf</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># DocumentRoot &quot;&#x2F;Library&#x2F;WebServer&#x2F;Documents&quot;</span><br><span class="line">DocumentRoot &quot;&#x2F;machine&#x2F;phpSites&quot;</span><br><span class="line"></span><br><span class="line"># &lt;Directory &quot;&#x2F;Library&#x2F;WebServer&#x2F;Documents&quot;&gt;</span><br><span class="line">&lt;Directory &quot;&#x2F;machine&#x2F;phpSites&quot;&gt;</span><br></pre></td></tr></table></figure></div>

<p>重启服务器，并在自定义的路径下放置html文件，即可访问</p>
<h2 id="配置虚拟主机"><a href="#配置虚拟主机" class="headerlink" title="配置虚拟主机"></a>配置虚拟主机</h2><blockquote>
<p>在一台机器上部署多个站点，就必须通过配置虚<br>拟主机的方式解决</p>
</blockquote>
<p>/etc/apache2/httpd.conf</p>
<p>取消注释Include….</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Virtual hosts</span><br><span class="line">Include &#x2F;private&#x2F;etc&#x2F;apache2&#x2F;extra&#x2F;httpd-vhosts.conf</span><br></pre></td></tr></table></figure></div>

<p>找到 Apache 的虚拟主机配置文件,添加一个如下的虚拟主机配置节点</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;VirtualHost *:8080&gt;</span><br><span class="line">    # 根目录</span><br><span class="line">    DocumentRoot &quot;&#x2F;machine&#x2F;phpSites&#x2F;testSite&quot;</span><br><span class="line">    # 域名</span><br><span class="line">    ServerName localhost</span><br><span class="line">&lt;&#x2F;VirtualHost&gt;</span><br></pre></td></tr></table></figure></div>

<p><code># 8080需要在主配置文件中添加一个对这个端口的监听</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Listen 12.34.56.78:80</span><br><span class="line">Listen 8080</span><br><span class="line">Listen 8081</span><br></pre></td></tr></table></figure></div>




<p>testSite下放html,然后重新启动 Apache访问</p>
<h1 id="配置PHP支持"><a href="#配置PHP支持" class="headerlink" title="配置PHP支持"></a>配置PHP支持</h1><blockquote>
<p>Apache 只能处理静态文件请求，在 Apache 中添加支持 PHP 的配置</p>
</blockquote>
<p>/etc/apache2/httpd.conf</p>
<p>把带有LoadModule php这一行的#(注释符号）去掉。</p>
<p>在 <ifmodule mime_module> 节点中添加 .php 扩展名解析支持</ifmodule></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># parse .php files</span><br><span class="line">AddType application&#x2F;x‐httpd‐php .php</span><br></pre></td></tr></table></figure></div>

<p>默认文档配置节点 <ifmodule dir_module> 中添加 index.php</ifmodule></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;IfModule dir_module&gt;</span><br><span class="line">      DirectoryIndex index.html index.php</span><br><span class="line">&lt;&#x2F;IfModule&gt;</span><br></pre></td></tr></table></figure></div>

<p>index.php内容如下</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php echo &#39;Hello PHP&#39;; ?&gt;</span><br></pre></td></tr></table></figure></div>

<p>重启服务器，在虚拟站点路径下放置php文件，即可访问php内容。</p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>mockJs常用</title>
    <url>/2018/08/14/15342314603345/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>参考：<a href="https://github.com/nuysoft/Mock/wiki" target="_blank" rel="noopener">官方文档</a></p>
</blockquote>
<p>[TOC]</p>
<h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><ul>
<li><p>安装 <code>npm install mockjs</code></p>
</li>
<li><p>使用</p>
  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const datamy &#x3D; &#123;</span><br><span class="line">    &#x2F;&#x2F; 点击图片转向的链接</span><br><span class="line">    url:&quot;1&quot;,</span><br><span class="line">    &#x2F;&#x2F; 图片路径链接</span><br><span class="line">    img:&quot;2&quot;,</span><br><span class="line">    &#x2F;&#x2F; 图片简要说明（放在轮播图下面）</span><br><span class="line">    msg:&quot;3&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 引入mockjs</span><br><span class="line">import Mock from &#39;mockjs&#39;</span><br><span class="line">&#x2F;&#x2F; API: Mock.mock( rurl, rtype, function( options ) ) </span><br><span class="line">Mock.mock( &#39;http:&#x2F;&#x2F;cms4869.com&#x2F;test&#39;, &#39;get&#39;, function( options )&#123;</span><br><span class="line">  return datamy</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;当拦截到http:&#x2F;&#x2F;cms4869.com&#x2F;test地址时，会返回datamy对象</span><br></pre></td></tr></table></figure></div></li>
<li><p>使用vue-esource请求</p>
  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">    name: &quot;index&quot;,</span><br><span class="line">    created()&#123;</span><br><span class="line">        this.$http.get(&quot;http:&#x2F;&#x2F;cms4869.com&#x2F;test&quot;).then(result &#x3D;&gt; &#123;</span><br><span class="line">            console.log(&quot;123&quot;)</span><br><span class="line">            console.log(result)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

</li>
</ul>
<h1 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h1><ul>
<li><p>API</p>
  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Mock.mock( rurl, rtype, function( options ) )</span><br><span class="line">Mock.mock( rurl, rtype, template )</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>参数说明</p>
  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rurl</span><br><span class="line">可选。</span><br><span class="line">表示需要拦截的 URL，可以是 URL 字符串或 URL 正则。例如 &#x2F;\&#x2F;domain\&#x2F;list\.json&#x2F;、&#39;&#x2F;domian&#x2F;list.json&#39;。</span><br><span class="line"></span><br><span class="line">rtype</span><br><span class="line">可选。</span><br><span class="line">表示需要拦截的 Ajax 请求类型。例如 GET、POST、PUT、DELETE 等。</span><br><span class="line"></span><br><span class="line">template</span><br><span class="line">可选。</span><br><span class="line">表示数据模板，可以是对象或字符串。例如 &#123; &#39;data|1-10&#39;:[&#123;&#125;] &#125;、&#39;@EMAIL&#39;。</span><br><span class="line"></span><br><span class="line">function(options)</span><br><span class="line">可选。 </span><br><span class="line">表示用于生成响应数据的函数。</span><br><span class="line"></span><br><span class="line">options</span><br><span class="line">指向本次请求的 Ajax 选项集，含有 url、type 和 body 三个属性，参见 XMLHttpRequest 规范。</span><br></pre></td></tr></table></figure></div>


</li>
</ul>
]]></content>
      <categories>
        <category>Web前端</category>
      </categories>
      <tags>
        <tag>Web前端</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6新特征（基本+常用）</title>
    <url>/2018/08/09/15338173277136/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[TOC]</p>
<h1 id="第一章：概述"><a href="#第一章：概述" class="headerlink" title="第一章：概述"></a>第一章：概述</h1><blockquote>
<p>课程地址：<a href="https://www.imooc.com/video/16703" target="_blank" rel="noopener">https://www.imooc.com/video/16703</a><br>学习vue的过程中出现很多ES6语法，补充学习</p>
</blockquote>
<h2 id="1-1：课程介绍"><a href="#1-1：课程介绍" class="headerlink" title="1-1：课程介绍"></a>1-1：课程介绍</h2><ul>
<li>ES3 ES5 ES6的对比讲解</li>
<li>常量、作用域、箭头函数、默认参数、对象代理</li>
</ul>
<p>##1-2：环境搭建</p>
<ul>
<li>Git Webpack Js    </li>
<li>因为ES6很多浏览器不支持，所以使用Webpac做处理</li>
<li>webpack环境：<a href="https://github.com/cucygh/es6-lessons.git" target="_blank" rel="noopener">https://github.com/cucygh/es6-lessons.git</a></li>
</ul>
<h1 id="第二章：ES6基础"><a href="#第二章：ES6基础" class="headerlink" title="第二章：ES6基础"></a>第二章：ES6基础</h1><h2 id="2-1：常量"><a href="#2-1：常量" class="headerlink" title="2-1：常量"></a>2-1：常量</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; ES5 中设置常量的语法</span><br><span class="line">Object.defineProperty(typeof global &#x3D;&#x3D;&#x3D; &quot;object&quot; ? global : window, &quot;PI2&quot;, &#123;</span><br><span class="line">    value:        3.1415926,</span><br><span class="line">    enumerable:   true,</span><br><span class="line">    writable:     false,</span><br><span class="line">    configurable: false</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; ES6 设置常量的语法</span><br><span class="line">const PI &#x3D; 3.1415926;</span><br></pre></td></tr></table></figure></div>

<p>但是下面情况是可以被改变的，如：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const obj&#x3D;&#123;</span><br><span class="line">  a:1,</span><br><span class="line">  b:2</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;修改对象的值是可行的</span><br><span class="line">obj.a&#x3D;3;</span><br><span class="line">&#x2F;&#x2F; 修改对象是不可行的</span><br><span class="line">obj&#x3D;&#123;</span><br><span class="line">  c:1</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;因为对象是引用类型，const 指向的是对象引用地址，只要地址不变就符合 const 定义。</span><br></pre></td></tr></table></figure></div>



<h2 id="2-2：作用域"><a href="#2-2：作用域" class="headerlink" title="2-2：作用域"></a>2-2：作用域</h2><ul>
<li>区分 let 和 var </li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> callbacks2=[]</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= <span class="number">2</span>; i++) &#123;</span><br><span class="line">    callbacks2[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> i * <span class="number">2</span>; &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.table([</span><br><span class="line">  callbacks2[<span class="number">0</span>]() === <span class="number">0</span>,<span class="comment">//false</span></span><br><span class="line">  callbacks2[<span class="number">1</span>]() === <span class="number">2</span>,<span class="comment">//false</span></span><br><span class="line">  callbacks2[<span class="number">2</span>]() === <span class="number">4</span><span class="comment">//false</span></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment">// var 声明的变量是没有块作用域的</span></span><br></pre></td></tr></table></figure></div>



<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> callbacks = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= <span class="number">2</span>; i++) &#123;</span><br><span class="line">    callbacks[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> i * <span class="number">2</span>; &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.table([</span><br><span class="line">  callbacks[<span class="number">0</span>]() === <span class="number">0</span>,<span class="comment">//true</span></span><br><span class="line">  callbacks[<span class="number">1</span>]() === <span class="number">2</span>,<span class="comment">//true</span></span><br><span class="line">  callbacks[<span class="number">2</span>]() === <span class="number">4</span><span class="comment">//true</span></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment">//let 是块作用域变量</span></span><br></pre></td></tr></table></figure></div>



<ul>
<li>如何隔离一块作用域</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ES5</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line">    foo() === <span class="number">1</span>;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">2</span>; &#125;</span><br><span class="line">      foo() === <span class="number">2</span>;<span class="comment">//这个foo和外边的fool是隔离的</span></span><br><span class="line">    &#125;)();</span><br><span class="line">    foo() === <span class="number">1</span>;</span><br><span class="line">&#125;)(); </span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">1</span> &#125;</span><br><span class="line">  foo() === <span class="number">1</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">2</span> &#125;</span><br><span class="line">  foo() === <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">  foo() === <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//块作用域符号 &#123;&#125;</span></span><br></pre></td></tr></table></figure></div>



<h2 id="2-3：箭头函数"><a href="#2-3：箭头函数" class="headerlink" title="2-3：箭头函数"></a>2-3：箭头函数</h2><ul>
<li>基本用法</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ES5</span></span><br><span class="line"><span class="keyword">var</span> evens = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> odds = evens.map(<span class="function"><span class="keyword">function</span> (<span class="params">v</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> v + <span class="number">1</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> pairs = evens.map(<span class="function"><span class="keyword">function</span> (<span class="params">v</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    even: v,</span><br><span class="line">    odd: v + <span class="number">1</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> nums = evens.map(<span class="function"><span class="keyword">function</span> (<span class="params">v, i</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> v + i;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.table(evens, odds, pairs, nums)</span><br></pre></td></tr></table></figure></div>



<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ES6</span></span><br><span class="line"><span class="keyword">let</span> evens = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> odds = evens.map(<span class="function"><span class="params">v</span> =&gt;</span> v + <span class="number">1</span>)</span><br><span class="line"><span class="keyword">let</span> pairs = evens.map(<span class="function"><span class="params">v</span> =&gt;</span> (&#123;</span><br><span class="line">  even: v,</span><br><span class="line">  odd: v + <span class="number">1</span></span><br><span class="line">&#125;))</span><br><span class="line"><span class="keyword">let</span> nums = evens.map(<span class="function">(<span class="params">v, i</span>) =&gt;</span> v + i)</span><br><span class="line"><span class="built_in">console</span>.table(evens, odds, pairs, nums)</span><br><span class="line"></span><br><span class="line"><span class="comment">//上述代码 v =&gt; v+1 就是箭头函数， 箭头左侧是函数的参数，</span></span><br><span class="line"><span class="comment">//当只有一个参数的时候可以不用 () ，等有多个参数的时候用 () 。</span></span><br><span class="line"><span class="comment">//箭头右侧是函数体，如何只有一行代码可以省略 &#123;&#125;,值就是return 。</span></span><br></pre></td></tr></table></figure></div>



<ul>
<li>this 的不一样<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES5、ES3</span></span><br><span class="line"><span class="keyword">var</span> factory=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.a=<span class="string">'a'</span>;</span><br><span class="line">  <span class="keyword">this</span>.b=<span class="string">'b'</span>;</span><br><span class="line">  <span class="keyword">this</span>.c=&#123;</span><br><span class="line">    a:<span class="string">'a+'</span>,</span><br><span class="line">    b:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.a</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> factory().c.b());<span class="comment">//输出结果是 'a+'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//this 的引用是函数运行调用的对象</span></span><br><span class="line"><span class="comment">//运行b()的是c,所以b函数内的this.a this指的是c</span></span><br></pre></td></tr></table></figure></div>



</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> factory=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.a=<span class="string">'a'</span>;</span><br><span class="line">  <span class="keyword">this</span>.b=<span class="string">'b'</span>;</span><br><span class="line">  <span class="keyword">this</span>.c=&#123;</span><br><span class="line">    a:<span class="string">'a+'</span>,</span><br><span class="line">    b:<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.a</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> factory().c.b());<span class="comment">//输出结果是 'a+'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这个时候用的是箭头函数，b 函数中 this 指向的是定义时的对象，也就是 factory 类的实例，所以 this.a 就是构造函数的属性 a ，也就是 'a' 了。</span></span><br><span class="line"><span class="comment">//</span></span><br></pre></td></tr></table></figure></div>



<h2 id="2-4：参数"><a href="#2-4：参数" class="headerlink" title="2-4：参数"></a>2-4：参数</h2><ul>
<li>默认参数</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ES3\ES5</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x, y, z</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (y === <span class="literal">undefined</span>)</span><br><span class="line">    y = <span class="number">7</span>;</span><br><span class="line">  <span class="keyword">if</span> (z === <span class="literal">undefined</span>)</span><br><span class="line">    z = <span class="number">42</span>;</span><br><span class="line">  <span class="keyword">return</span> x + y + z;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(f(<span class="number">1</span>));</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ES6</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x, y = <span class="number">7</span>, z = <span class="number">42</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y + z</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(f(<span class="number">1</span>));</span><br><span class="line"><span class="comment">//x 是必选参数，y、z 是可选的</span></span><br><span class="line"><span class="comment">//当输入两个参数的时候第一个参数是x、第二个参数就不会使用默认值</span></span><br></pre></td></tr></table></figure></div>

<p>如何让 x 参数成为必选参数呢？不设置这个参数就报错</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkParameter</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'can\'t be empty!'</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x = checkParameter(</span>),<span class="title">y</span> = 2,<span class="title">z</span> = 3)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y + z</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(f());</span><br></pre></td></tr></table></figure></div>



<ul>
<li>可变参数</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">a,b</span>)</span>&#123;<span class="comment">//可变参数求和</span></span><br><span class="line">  <span class="keyword">return</span> a+b</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//ES5</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">  <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">  a.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">    sum+=item*<span class="number">1</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ES6</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">...a</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">  a.forEach(<span class="function"><span class="params">item</span>=&gt;</span>&#123;sum+=item*<span class="number">1</span>&#125;);</span><br><span class="line">  <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<ul>
<li>扩展运算符</li>
</ul>
<p>比如要合并两个数组</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="keyword">var</span> params = [ <span class="string">"hello"</span>, <span class="literal">true</span>, <span class="number">7</span> ];</span><br><span class="line"><span class="keyword">var</span> other = [ <span class="number">1</span>, <span class="number">2</span> ].concat(params);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">var</span> params = [ <span class="string">"hello"</span>, <span class="literal">true</span>, <span class="number">7</span> ]</span><br><span class="line"><span class="keyword">var</span> other = [ <span class="number">1</span>, <span class="number">2</span>, ...params ] <span class="comment">// [ 1, 2, "hello", true, 7 ]</span></span><br></pre></td></tr></table></figure></div>



<h2 id="2-5：代理"><a href="#2-5：代理" class="headerlink" title="2-5：代理"></a>2-5：代理</h2><p>什么是对象代理呢？就是不让用户直接访问一个对象，只能通过代理去操作，类似于中介。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ES3</span></span><br><span class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> data = &#123;</span><br><span class="line">    name: <span class="string">'es3'</span>,</span><br><span class="line">    sex: <span class="string">'male'</span>,</span><br><span class="line">    age: <span class="number">15</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">this</span>.get = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> data[key];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.set = <span class="function"><span class="keyword">function</span>(<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (key !== <span class="string">'sex'</span>) &#123;</span><br><span class="line">      data[key] = value</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ES5</span></span><br><span class="line"><span class="keyword">var</span> Person = &#123;</span><br><span class="line">  name: <span class="string">'es5'</span>,</span><br><span class="line">  age: <span class="number">15</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(Person, <span class="string">'sex'</span>, &#123;</span><br><span class="line">  writable: <span class="literal">false</span>,</span><br><span class="line">  value: <span class="string">'male'</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 读取姓名，性别，年龄</span></span><br><span class="line"><span class="built_in">console</span>.table(&#123;<span class="attr">name</span>: Person.name, <span class="attr">sex</span>: Person.sex, <span class="attr">age</span>: Person.age&#125;);</span><br><span class="line"><span class="comment">// 修改姓名</span></span><br><span class="line">Person.name = <span class="string">'es5-cname'</span>;</span><br><span class="line"><span class="comment">// 修改性别</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  Person.sex = <span class="string">'female'</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.table(&#123;<span class="attr">name</span>: Person.name, <span class="attr">sex</span>: Person.sex, <span class="attr">age</span>: Person.age&#125;);</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ES6</span></span><br><span class="line"><span class="keyword">let</span> Person = &#123;</span><br><span class="line">  name: <span class="string">'es6'</span>,</span><br><span class="line">  sex: <span class="string">'male'</span>,</span><br><span class="line">  age: <span class="number">15</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(Person, &#123;</span><br><span class="line">  <span class="keyword">get</span>(target, key) &#123;<span class="comment">//target就是person,key就是要读的数据</span></span><br><span class="line">    <span class="keyword">return</span> target[key]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">set</span>(target, key, value) &#123;</span><br><span class="line">    <span class="keyword">if</span> (key !== <span class="string">'sex'</span>) &#123;</span><br><span class="line">      target[key] = value;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line"><span class="comment">// 读取姓名，性别，年龄</span></span><br><span class="line"><span class="built_in">console</span>.table(&#123;<span class="attr">name</span>: proxy.name, <span class="attr">sex</span>: proxy.sex, <span class="attr">age</span>: proxy.age&#125;);</span><br><span class="line"><span class="comment">// 修改性别</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  proxy.sex=<span class="string">'female'</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.table(&#123;<span class="attr">name</span>: proxy.name, <span class="attr">sex</span>: proxy.sex, <span class="attr">age</span>: proxy.age&#125;);</span><br></pre></td></tr></table></figure></div>


<h1 id="第三章：常用补充"><a href="#第三章：常用补充" class="headerlink" title="第三章：常用补充"></a>第三章：常用补充</h1><blockquote>
<p>参考：<a href="https://www.jianshu.com/p/287e0bb867ae" target="_blank" rel="noopener">https://www.jianshu.com/p/287e0bb867ae</a></p>
</blockquote>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><ul>
<li>基本的字符串格式化</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ES5 </span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'lux'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'hello'</span> + name)</span><br><span class="line"><span class="comment">//es6</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">'lux'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`hello <span class="subst">$&#123;name&#125;</span>`</span>) <span class="comment">//hello lux</span></span><br></pre></td></tr></table></figure></div>



<h2 id="import-和-export"><a href="#import-和-export" class="headerlink" title="import 和 export"></a>import 和 export</h2><ul>
<li>基本用法</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用export命令定义了模块的对外接口以后，其他JS文件就可以通过import命令加载这个模块（文件）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="keyword">var</span> sex=<span class="string">"boy"</span>;</span><br><span class="line"><span class="keyword">var</span> echo=<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">　　<span class="built_in">console</span>.log(value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123;sex,echo&#125; </span><br><span class="line"><span class="comment">//不能写成export sex这样的方式，如果这样就相当于export "boy",外部文件就获取不到该文件的内部变量sex的值</span></span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// b.js</span></span><br><span class="line"><span class="comment">//通过import获取a.js文件的内部变量，&#123;&#125;括号内的变量来自于a.js文件export出的变量标识符。</span></span><br><span class="line"><span class="keyword">import</span> &#123;sex,echo&#125; <span class="keyword">from</span> <span class="string">"./a.js"</span> </span><br><span class="line"><span class="built_in">console</span>.log(sex)   <span class="comment">// boy</span></span><br><span class="line">echo(sex) <span class="comment">// boy</span></span><br></pre></td></tr></table></figure></div>



<ul>
<li>export default</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//export default命令，为模块指定默认输出，这样就不需要知道所要加载模块的变量名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//a.js</span></span><br><span class="line"><span class="keyword">var</span> sex=<span class="string">"boy"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> sex（sex不能加大括号）</span><br><span class="line"><span class="comment">//原本直接export sex外部是无法识别的，加上default就可以了.但是一个文件内最多只能有一个export default。</span></span><br><span class="line"><span class="comment">//其实此处相当于为sex变量值"boy"起了一个系统默认的变量名default，自然default只能有一个值，所以一个文件内不能有多个export default。</span></span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// b.js</span></span><br><span class="line"><span class="comment">//本质上，a.js文件的export default输出一个叫做default的变量，然后系统允许你为它取任意名字。所以可以为import的模块起任何变量名，且不需要用大括号包含</span></span><br><span class="line"><span class="keyword">import</span> any <span class="keyword">from</span> <span class="string">"./a.js"</span></span><br><span class="line"><span class="keyword">import</span> any12 <span class="keyword">from</span> <span class="string">"./a.js"</span> </span><br><span class="line"><span class="built_in">console</span>.log(any,any12)   <span class="comment">// boy,boy</span></span><br></pre></td></tr></table></figure></div>



<h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><h3 id="Promise概念介绍"><a href="#Promise概念介绍" class="headerlink" title="Promise概念介绍"></a>Promise概念介绍</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. Promise 是一个 构造函数，既然是构造函数， 那么，我们就可以  new Promise() 得到一个 Promise 的实例；</span></span><br><span class="line"><span class="comment">// 2. 在 Promise 上，有两个函数，分别叫做 resolve（成功之后的回调函数） 和 reject（失败之后的回调函数）</span></span><br><span class="line"><span class="comment">// 3. 在 Promise 构造函数的 Prototype 属性上，有一个 .then() 方法，也就说，只要是 Promise 构造函数创建的实例，都可以访问到 .then() 方法</span></span><br><span class="line"><span class="comment">// 4. Promise 表示一个 异步操作；每当我们 new 一个 Promise 的实例，这个实例，就表示一个具体的异步操作；</span></span><br><span class="line"><span class="comment">// 5. 既然 Promise 创建的实例，是一个异步操作，那么，这个 异步操作的结果，只能有两种状态：</span></span><br><span class="line"><span class="comment">//  5.1 状态1： 异步执行成功了，需要在内部调用 成功的回调函数 resolve 把结果返回给调用者；</span></span><br><span class="line"><span class="comment">//  5.2 状态2： 异步执行失败了，需要在内部调用 失败的回调函数 reject 把结果返回给调用者；</span></span><br><span class="line"><span class="comment">//  5.3 由于 Promise 的实例，是一个异步操作，所以，内部拿到 操作的结果后，无法使用 return 把操作的结果返回给调用者； 这时候，只能使用回调函数的形式，来把 成功 或 失败的结果，返回给调用者；</span></span><br><span class="line"><span class="comment">// 6. 我们可以在 new 出来的 Promise 实例上，调用 .then() 方法，【预先】 为 这个 Promise 异步操作，指定 成功（resolve） 和 失败（reject） 回调函数；</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：这里 new 出来的 promise， 只是代表 【形式上】的一个异步操作；</span></span><br><span class="line"><span class="comment">// 什么是形式上的异步操作：就是说，我们只知道它是一个异步操作，但是做什么具体的异步事情，目前还不清楚</span></span><br><span class="line"><span class="comment">// var promise = new Promise()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这是一个具体的异步操作，其中，使用 function 指定一个具体的异步操作</span></span><br><span class="line"><span class="comment">/* var promise = new Promise(function()&#123;</span></span><br><span class="line"><span class="comment">  // 这个 function 内部写的就是具体的异步操作！！！</span></span><br><span class="line"><span class="comment">&#125;) */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每当 new 一个 Promise 实例的时候，就会立即 执行这个 异步操作中的代码</span></span><br><span class="line"><span class="comment">// 也就是说，new 的时候，除了能够得到 一个 promise 实例之外，还会立即调用 我们为 Promise 构造函数传递的那个 function，执行这个 function 中的 异步操作代码；</span></span><br><span class="line"><span class="comment">/* var promise = new Promise(function () &#123;</span></span><br><span class="line"><span class="comment">  fs.readFile('./files/2.txt', 'utf-8', (err, dataStr) =&gt; &#123;</span></span><br><span class="line"><span class="comment">    if (err) throw err</span></span><br><span class="line"><span class="comment">    console.log(dataStr)</span></span><br><span class="line"><span class="comment">  &#125;)</span></span><br><span class="line"><span class="comment">&#125;) */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初衷： 给路径，返回读取到的内容</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFileByPath</span>(<span class="params">fpath</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    fs.readFile(fpath, <span class="string">'utf-8'</span>, (err, dataStr) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">return</span> reject(err)</span><br><span class="line">      resolve(dataStr)</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* getFileByPath('./files/2.txt')</span></span><br><span class="line"><span class="comment">  .then(function (data) &#123;</span></span><br><span class="line"><span class="comment">    console.log(data + '-------')</span></span><br><span class="line"><span class="comment">  &#125;, function (err) &#123;</span></span><br><span class="line"><span class="comment">    console.log(err.message)</span></span><br><span class="line"><span class="comment">  &#125;) */</span></span><br></pre></td></tr></table></figure></div>



<h3 id="使用Promise解决回调地狱"><a href="#使用Promise解决回调地狱" class="headerlink" title="使用Promise解决回调地狱"></a>使用Promise解决回调地狱</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFileByPath</span>(<span class="params">fpath</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    fs.readFile(fpath, <span class="string">'utf-8'</span>, (err, dataStr) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">return</span> reject(err)</span><br><span class="line">      resolve(dataStr)</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先读取文件1，在读取2，最后读取3</span></span><br><span class="line"><span class="comment">// 注意： 通过 .then 指定 回调函数的时候，成功的 回调函数，必须传，但是，失败的回调，可以省略不传</span></span><br><span class="line"><span class="comment">// 这是一个 错误的示范，千万不要这么用； 硬是把 法拉利，开成了 拖拉机；</span></span><br><span class="line"><span class="comment">/* getFileByPath('./files/1.txt')</span></span><br><span class="line"><span class="comment">  .then(function (data) &#123;</span></span><br><span class="line"><span class="comment">    console.log(data)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    getFileByPath('./files/2.txt')</span></span><br><span class="line"><span class="comment">      .then(function (data) &#123;</span></span><br><span class="line"><span class="comment">        console.log(data)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        getFileByPath('./files/3.txt')</span></span><br><span class="line"><span class="comment">          .then(function (data) &#123;</span></span><br><span class="line"><span class="comment">            console.log(data)</span></span><br><span class="line"><span class="comment">          &#125;)</span></span><br><span class="line"><span class="comment">      &#125;)</span></span><br><span class="line"><span class="comment">  &#125;) */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取文件1</span></span><br><span class="line"><span class="comment">// 在上一个 .then 中，返回一个新的 promise 实例，可以继续用下一个 .then 来处理</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果 ，前面的 Promise 执行失败，我们不想让后续的Promise 操作被终止，可以为 每个 promise 指定 失败的回调</span></span><br><span class="line"><span class="comment">/* getFileByPath('./files/11.txt')</span></span><br><span class="line"><span class="comment">  .then(function (data) &#123;</span></span><br><span class="line"><span class="comment">    console.log(data)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    // 读取文件2</span></span><br><span class="line"><span class="comment">    return getFileByPath('./files/2.txt')</span></span><br><span class="line"><span class="comment">  &#125;, function (err) &#123;</span></span><br><span class="line"><span class="comment">    console.log('这是失败的结果：' + err.message)</span></span><br><span class="line"><span class="comment">    // return 一个 新的 Promise</span></span><br><span class="line"><span class="comment">    return getFileByPath('./files/2.txt')</span></span><br><span class="line"><span class="comment">  &#125;)</span></span><br><span class="line"><span class="comment">  .then(function (data) &#123;</span></span><br><span class="line"><span class="comment">    console.log(data)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    return getFileByPath('./files/3.txt')</span></span><br><span class="line"><span class="comment">  &#125;)</span></span><br><span class="line"><span class="comment">  .then(function (data) &#123;</span></span><br><span class="line"><span class="comment">    console.log(data)</span></span><br><span class="line"><span class="comment">  &#125;).then(function (data) &#123;</span></span><br><span class="line"><span class="comment">    console.log(data)</span></span><br><span class="line"><span class="comment">  &#125;) */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log('OKOKOK')</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当 我们有这样的需求： 哪怕前面的 Promise 执行失败了，但是，不要影响后续 promise 的正常执行，此时，我们可以单独为 每个 promise，通过 .then 指定一下失败的回调；</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 有时候，我们有这样的需求，个上面的需求刚好相反：如果 后续的Promise 执行，依赖于 前面 Promise 执行的结果，如果前面的失败了，则后面的就没有继续执行下去的意义了，此时，我们想要实现，一旦有报错，则立即终止所有 Promise的执行；</span></span><br><span class="line"></span><br><span class="line">getFileByPath(<span class="string">'./files/1.txt'</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取文件2</span></span><br><span class="line">    <span class="keyword">return</span> getFileByPath(<span class="string">'./files/22.txt'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> getFileByPath(<span class="string">'./files/3.txt'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123; <span class="comment">// catch 的作用： 如果前面有任何的 Promise 执行失败，则立即终止所有 promise 的执行，并 马上进入 catch 去处理 Promise中 抛出的异常；</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'这是自己的处理方式：'</span> + err.message)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></div>



<h3 id="演示Jquery中Promise"><a href="#演示Jquery中Promise" class="headerlink" title="演示Jquery中Promise"></a>演示Jquery中Promise</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">  &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">  &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"ie=edge"</span>&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">  &lt;input type=<span class="string">"button"</span> value=<span class="string">"获取数据"</span> id=<span class="string">"btn"</span>&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script src=<span class="string">"./node_modules/jquery/dist/jquery.min.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  &lt;script&gt;</span></span><br><span class="line"><span class="regexp">    $(function () &#123;</span></span><br><span class="line"><span class="regexp">      $('#btn').on('click', function () &#123;</span></span><br><span class="line"><span class="regexp">        $.ajax(&#123;</span></span><br><span class="line"><span class="regexp">          url: './</span>data.json<span class="string">',</span></span><br><span class="line"><span class="string">          type: '</span><span class="keyword">get</span>',</span><br><span class="line">          dataType: 'json'</span><br><span class="line">        &#125;)</span><br><span class="line">          .then(function (data) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(data)</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>Web前端</category>
      </categories>
      <tags>
        <tag>Web前端</tag>
      </tags>
  </entry>
  <entry>
    <title>并发编程与线程安全（2）：并发编程&amp;线程安全</title>
    <url>/2018/07/28/15327607157902/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[TOC]</p>
<h1 id="第3章-项目准备"><a href="#第3章-项目准备" class="headerlink" title="第3章 项目准备"></a>第3章 项目准备</h1><h2 id="3-1-案例环境初始化"><a href="#3-1-案例环境初始化" class="headerlink" title="3-1 案例环境初始化"></a>3-1 案例环境初始化</h2><p><code>之前演示了线程不安全case,接下来处理这个问题</code></p>
<p>环境搭建与准备：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- Spring Boot</span><br><span class="line">- Git管理代码</span><br><span class="line">- Github</span><br><span class="line">- 使用git将初始化代码托管到[码云]（教程参考：我的[使用git将初始化代码托管到[码云]（项目初始化）](mweblib:&#x2F;&#x2F;15327623035290)）</span><br></pre></td></tr></table></figure></div>
<p>Packaging为war包</p>
<h2 id="3-2-案例准备工作"><a href="#3-2-案例准备工作" class="headerlink" title="3-2 案例准备工作"></a>3-2 案例准备工作</h2><p><strong>一些注解的准备</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.lang.annotation.ElementType;</span><br><span class="line">import java.lang.annotation.Retention;</span><br><span class="line">import java.lang.annotation.RetentionPolicy;</span><br><span class="line">import java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 对于线程安全的类，加入一个@ThreadSafe注解的标示</span><br><span class="line"> * @Target(ElementType.TYPE) 说明作用于类上</span><br><span class="line"> * @Retention(RetentionPolicy.SOURCE) 指定注解作用的范围，在编译的时候就会被忽略掉</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Target(ElementType.TYPE)</span><br><span class="line">@Retention(RetentionPolicy.SOURCE)</span><br><span class="line">public @interface ThreadSafe &#123;</span><br><span class="line">    String value() default &quot;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.lang.annotation.ElementType;</span><br><span class="line">import java.lang.annotation.Retention;</span><br><span class="line">import java.lang.annotation.RetentionPolicy;</span><br><span class="line">import java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 用来标示[线程不安全的类]</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Target(ElementType.TYPE)</span><br><span class="line">@Retention(RetentionPolicy.SOURCE)</span><br><span class="line">public @interface NotThreadSafe &#123;</span><br><span class="line">    String value() default &quot;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.lang.annotation.ElementType;</span><br><span class="line">import java.lang.annotation.Retention;</span><br><span class="line">import java.lang.annotation.RetentionPolicy;</span><br><span class="line">import java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 用来标记[推荐]的类或者写法</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Target(ElementType.TYPE)</span><br><span class="line">@Retention(RetentionPolicy.SOURCE)</span><br><span class="line">public @interface Recommend &#123;</span><br><span class="line">    String value() default &quot;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.lang.annotation.ElementType;</span><br><span class="line">import java.lang.annotation.Retention;</span><br><span class="line">import java.lang.annotation.RetentionPolicy;</span><br><span class="line">import java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 用来标记[不推荐]的类或者写法</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Target(ElementType.TYPE)</span><br><span class="line">@Retention(RetentionPolicy.SOURCE)</span><br><span class="line">public @interface NotRecommend &#123;</span><br><span class="line">    String value() default &quot;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>提交代码</p>
<h2 id="3-3-并发模拟-工具"><a href="#3-3-并发模拟-工具" class="headerlink" title="3-3 并发模拟-工具"></a>3-3 并发模拟-工具</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Postman:Http请求模拟工具</span><br><span class="line">Apache Bench(AB):Apache的工具，测试网站性能</span><br><span class="line">JMeter:Apache开发的压力测试工具</span><br><span class="line">代码：Semaphone、CountDownLatch等</span><br></pre></td></tr></table></figure></div>

<hr>
<p><strong>Postman</strong></p>
<p>技巧1:设置环境<br><a href="/2018/07/28/15327607157902/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-07-30%20%E4%B8%8B%E5%8D%882.19.39.png" data-fancybox="group" data-caption="屏幕快照 2018-07-30 下午2.19.39" class="fancybox"><img alt="屏幕快照 2018-07-30 下午2.19.39" title="屏幕快照 2018-07-30 下午2.19.39" data-src="/2018/07/28/15327607157902/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-07-30%20%E4%B8%8B%E5%8D%882.19.39.png" class="lazyload"></a></p>
<p><a href="/2018/07/28/15327607157902/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-07-30%20%E4%B8%8B%E5%8D%882.19.55.png" data-fancybox="group" data-caption="屏幕快照 2018-07-30 下午2.19.55" class="fancybox"><img alt="屏幕快照 2018-07-30 下午2.19.55" title="屏幕快照 2018-07-30 下午2.19.55" data-src="/2018/07/28/15327607157902/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-07-30%20%E4%B8%8B%E5%8D%882.19.55.png" class="lazyload"></a></p>
<p>使用<br><a href="/2018/07/28/15327607157902/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-07-30%20%E4%B8%8B%E5%8D%882.21.39.png" data-fancybox="group" data-caption="屏幕快照 2018-07-30 下午2.21.39" class="fancybox"><img alt="屏幕快照 2018-07-30 下午2.21.39" title="屏幕快照 2018-07-30 下午2.21.39" data-src="/2018/07/28/15327607157902/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-07-30%20%E4%B8%8B%E5%8D%882.21.39.png" class="lazyload"></a></p>
<p>技巧2:模拟并发<br>新增Collection<br><a href="/2018/07/28/15327607157902/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-07-30%20%E4%B8%8B%E5%8D%882.24.49.png" data-fancybox="group" data-caption="屏幕快照 2018-07-30 下午2.24.49" class="fancybox"><img alt="屏幕快照 2018-07-30 下午2.24.49" title="屏幕快照 2018-07-30 下午2.24.49" data-src="/2018/07/28/15327607157902/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-07-30%20%E4%B8%8B%E5%8D%882.24.49.png" class="lazyload"></a></p>
<hr>
<p><a href="/2018/07/28/15327607157902/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-07-30%20%E4%B8%8B%E5%8D%882.25.34.png" data-fancybox="group" data-caption="屏幕快照 2018-07-30 下午2.25.34" class="fancybox"><img alt="屏幕快照 2018-07-30 下午2.25.34" title="屏幕快照 2018-07-30 下午2.25.34" data-src="/2018/07/28/15327607157902/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-07-30%20%E4%B8%8B%E5%8D%882.25.34.png" class="lazyload"></a></p>
<hr>
<p><a href="/2018/07/28/15327607157902/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-07-30%20%E4%B8%8B%E5%8D%882.28.01.png" data-fancybox="group" data-caption="屏幕快照 2018-07-30 下午2.28.01" class="fancybox"><img alt="屏幕快照 2018-07-30 下午2.28.01" title="屏幕快照 2018-07-30 下午2.28.01" data-src="/2018/07/28/15327607157902/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-07-30%20%E4%B8%8B%E5%8D%882.28.01.png" class="lazyload"></a></p>
<hr>
<p><strong>Apache Bench</strong></p>
<p>下载安装：Mac命令行自带<br>参考：<a href="https://www.cnblogs.com/Ryana/p/6279232.html" target="_blank" rel="noopener">https://www.cnblogs.com/Ryana/p/6279232.html</a></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ab -n 1000 -c 50 http:&#x2F;&#x2F;localhost:8080&#x2F;test</span><br></pre></td></tr></table></figure></div>
<p>请求数为1000 并发数为50</p>
<hr>
<p><strong>JMeter</strong></p>
<p><a href="/2018/07/28/15327607157902/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-04%20%E4%B8%8B%E5%8D%882.00.58.png" data-fancybox="group" data-caption="屏幕快照 2018-08-04 下午2.00.58" class="fancybox"><img alt="屏幕快照 2018-08-04 下午2.00.58" title="屏幕快照 2018-08-04 下午2.00.58" data-src="/2018/07/28/15327607157902/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-04%20%E4%B8%8B%E5%8D%882.00.58.png" class="lazyload"></a><br><a href="/2018/07/28/15327607157902/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-04%20%E4%B8%8B%E5%8D%882.54.51.png" data-fancybox="group" data-caption="屏幕快照 2018-08-04 下午2.54.51" class="fancybox"><img alt="屏幕快照 2018-08-04 下午2.54.51" title="屏幕快照 2018-08-04 下午2.54.51" data-src="/2018/07/28/15327607157902/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-04%20%E4%B8%8B%E5%8D%882.54.51.png" class="lazyload"></a></p>
<p>说明：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">线程数：虚拟用户的数量</span><br><span class="line">循环次数：每个用户请求多少次</span><br></pre></td></tr></table></figure></div>

<p>添加请求：</p>
<p><a href="/2018/07/28/15327607157902/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-04%20%E4%B8%8B%E5%8D%882.55.13.png" data-fancybox="group" data-caption="屏幕快照 2018-08-04 下午2.55.13" class="fancybox"><img alt="屏幕快照 2018-08-04 下午2.55.13" title="屏幕快照 2018-08-04 下午2.55.13" data-src="/2018/07/28/15327607157902/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-04%20%E4%B8%8B%E5%8D%882.55.13.png" class="lazyload"></a><br><a href="/2018/07/28/15327607157902/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-04%20%E4%B8%8B%E5%8D%882.56.49.png" data-fancybox="group" data-caption="屏幕快照 2018-08-04 下午2.56.49" class="fancybox"><img alt="屏幕快照 2018-08-04 下午2.56.49" title="屏幕快照 2018-08-04 下午2.56.49" data-src="/2018/07/28/15327607157902/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-04%20%E4%B8%8B%E5%8D%882.56.49.png" class="lazyload"></a></p>
<p>添加监听：</p>
<p><a href="/2018/07/28/15327607157902/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-04%20%E4%B8%8B%E5%8D%882.56.13.png" data-fancybox="group" data-caption="屏幕快照 2018-08-04 下午2.56.13" class="fancybox"><img alt="屏幕快照 2018-08-04 下午2.56.13" title="屏幕快照 2018-08-04 下午2.56.13" data-src="/2018/07/28/15327607157902/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-04%20%E4%B8%8B%E5%8D%882.56.13.png" class="lazyload"></a></p>
<p>添加日志：</p>
<p><a href="/2018/07/28/15327607157902/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-04%20%E4%B8%8B%E5%8D%882.57.07.png" data-fancybox="group" data-caption="屏幕快照 2018-08-04 下午2.57.07" class="fancybox"><img alt="屏幕快照 2018-08-04 下午2.57.07" title="屏幕快照 2018-08-04 下午2.57.07" data-src="/2018/07/28/15327607157902/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-04%20%E4%B8%8B%E5%8D%882.57.07.png" class="lazyload"></a></p>
<p>运行：</p>
<p><a href="/2018/07/28/15327607157902/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-04%20%E4%B8%8B%E5%8D%882.57.23.png" data-fancybox="group" data-caption="屏幕快照 2018-08-04 下午2.57.23" class="fancybox"><img alt="屏幕快照 2018-08-04 下午2.57.23" title="屏幕快照 2018-08-04 下午2.57.23" data-src="/2018/07/28/15327607157902/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-04%20%E4%B8%8B%E5%8D%882.57.23.png" class="lazyload"></a></p>
<h2 id="3-4-并发模拟-代码"><a href="#3-4-并发模拟-代码" class="headerlink" title="3-4 并发模拟-代码"></a>3-4 并发模拟-代码</h2><p><a href="/2018/07/28/15327607157902/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-04%20%E4%B8%8B%E5%8D%883.08.27.png" data-fancybox="group" data-caption="屏幕快照 2018-08-04 下午3.08.27" class="fancybox"><img alt="屏幕快照 2018-08-04 下午3.08.27" title="屏幕快照 2018-08-04 下午3.08.27" data-src="/2018/07/28/15327607157902/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-04%20%E4%B8%8B%E5%8D%883.08.27.png" class="lazyload"></a><br><a href="/2018/07/28/15327607157902/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-04%20%E4%B8%8B%E5%8D%883.08.36.png" data-fancybox="group" data-caption="屏幕快照 2018-08-04 下午3.08.36" class="fancybox"><img alt="屏幕快照 2018-08-04 下午3.08.36" title="屏幕快照 2018-08-04 下午3.08.36" data-src="/2018/07/28/15327607157902/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-08-04%20%E4%B8%8B%E5%8D%883.08.36.png" class="lazyload"></a></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.machine.concurrency.test;</span><br><span class="line"></span><br><span class="line">import com.machine.concurrency.annotations.NotThreadSafe;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line">import java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 并发测试：最大并发数为50次，每个线程（共5000个）都进行一次count++操作</span><br><span class="line"> * 测试结果：并发操作count++时，不做上锁处理，线程不安全，count最终达不到5000</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Slf4j</span><br><span class="line">@NotThreadSafe</span><br><span class="line">public class ConcurrencyTest &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;** 请求总数 *&#x2F;</span><br><span class="line">    public static int clientTotal &#x3D; 5000;</span><br><span class="line">    &#x2F;** 同时并发执行的线程数 *&#x2F;</span><br><span class="line">    public static int threadTotal &#x3D; 50;</span><br><span class="line"></span><br><span class="line">    public static int count &#x3D; 0;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        &#x2F;&#x2F; 创建线程池</span><br><span class="line">        ExecutorService executorService &#x3D; new ThreadPoolExecutor(0, Integer.MAX_VALUE,</span><br><span class="line">                60L, TimeUnit.SECONDS,</span><br><span class="line">                new SynchronousQueue&lt;&gt;(), r -&gt; new Thread(r,&quot;测试线程&quot;));</span><br><span class="line">        &#x2F;&#x2F; 信号量，闭锁 （允许同时50个并发）</span><br><span class="line">        final Semaphore semaphore &#x3D; new Semaphore(threadTotal);</span><br><span class="line">        final CountDownLatch countDownLatch &#x3D; new CountDownLatch(clientTotal);</span><br><span class="line">        &#x2F;&#x2F; 模拟并发请求</span><br><span class="line">        for (int i &#x3D; 0; i &lt; clientTotal; i++) &#123;</span><br><span class="line">            executorService.execute(()-&gt;&#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    &#x2F;&#x2F; 请求一个信号，如果信号量小于clientTotal，则阻塞</span><br><span class="line">                    semaphore.acquire();</span><br><span class="line">                    add();</span><br><span class="line">                    &#x2F;&#x2F; 释放一个信号</span><br><span class="line">                    semaphore.release();</span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    log.error(&quot;exception&quot;,e);</span><br><span class="line">                &#125;</span><br><span class="line">                countDownLatch.countDown();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; 阻塞直到countDown 的次数为threadTotal (主线程要等5000个线程执行完毕才能继续执行)</span><br><span class="line">        countDownLatch.await();</span><br><span class="line">        &#x2F;&#x2F; 关闭线程池</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">        log.info(&quot;count:&#123;&#125;&quot;,count);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 本质上应该是这个方法线程不安全</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private static void add()&#123;</span><br><span class="line">        &#x2F;&#x2F;同时50个并发 进行count++操作，没有上锁，线程不安全</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">    CountDownLatch典型用法1：某一线程在开始运行前等待n个线程执行完毕。</span><br><span class="line">        将CountDownLatch的计数器初始化为n new CountDownLatch(n) ，</span><br><span class="line">        每当一个任务线程执行完毕，就将计数器减1 countdownlatch.countDown()，</span><br><span class="line">        当计数器的值变为0时，在CountDownLatch上 await() 的线程就会被唤醒。</span><br><span class="line">        一个典型应用场景就是启动一个服务时，主线程需要等待多个组件加载完毕，之后再继续执行。</span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure></div>

<h1 id="第4章-线程安全性"><a href="#第4章-线程安全性" class="headerlink" title="第4章 线程安全性"></a>第4章 线程安全性</h1><p><strong>线程安全性定义</strong></p>
<p>当多个线程访问某个类时，不管运行时环境采用<strong>何种调度方式</strong>或者这些进程将如何交替执行，并且在主调代码中<strong>不需要额外的同步或协同</strong>，这个类都能表现出正确行为，那么就称这个类是线程安全的</p>
<p><strong>三个方面</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">原子性：提供了互斥访问，同一时刻只能有一个线程来对它进行操作</span><br><span class="line"></span><br><span class="line">可见性：一个线程对主内存的修改可以及时的被其他线程观察到</span><br><span class="line"></span><br><span class="line">有序性：一个线程观察其它线程的指令执行顺序，由于重排序的存在，该观察结果一般杂乱无序</span><br></pre></td></tr></table></figure></div>

<h2 id="4-1-原子性-atomic"><a href="#4-1-原子性-atomic" class="headerlink" title="4-1 原子性-atomic"></a>4-1 原子性-atomic</h2><p><strong>原子性-Atomic包</strong></p>
<p><a href="/2018/07/28/15327607157902/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-09-05%20%E4%B8%8B%E5%8D%885.08.40.png" data-fancybox="group" data-caption="屏幕快照 2018-09-05 下午5.08.40" class="fancybox"><img alt="屏幕快照 2018-09-05 下午5.08.40" title="屏幕快照 2018-09-05 下午5.08.40" data-src="/2018/07/28/15327607157902/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-09-05%20%E4%B8%8B%E5%8D%885.08.40.png" class="lazyload"></a></p>
<p>改进3-4的代码：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.machine.concurrency.example.count;</span><br><span class="line">import com.machine.concurrency.annotations.ThreadSafe;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line">import java.util.concurrent.CountDownLatch;</span><br><span class="line">import java.util.concurrent.ExecutorService;</span><br><span class="line">import java.util.concurrent.Executors;</span><br><span class="line">import java.util.concurrent.Semaphore;</span><br><span class="line">import java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line">@Slf4j</span><br><span class="line">@ThreadSafe</span><br><span class="line">public class CountExample2 &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 请求总数</span><br><span class="line">    public static int clientTotal &#x3D; 5000;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 同时并发执行的线程数</span><br><span class="line">    public static int threadTotal &#x3D; 200;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;互斥计数：每次只允许一个进行访问，保证了线程安全</span><br><span class="line">    public static AtomicInteger count &#x3D; new AtomicInteger(0);</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        ExecutorService executorService &#x3D; Executors.newCachedThreadPool();</span><br><span class="line">        final Semaphore semaphore &#x3D; new Semaphore(threadTotal);</span><br><span class="line">        final CountDownLatch countDownLatch &#x3D; new CountDownLatch(clientTotal);</span><br><span class="line">        for (int i &#x3D; 0; i &lt; clientTotal ; i++) &#123;</span><br><span class="line">            executorService.execute(() -&gt; &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    semaphore.acquire();</span><br><span class="line">                    add();</span><br><span class="line">                    semaphore.release();</span><br><span class="line">                &#125; catch (Exception e) &#123;</span><br><span class="line">                    log.error(&quot;exception&quot;, e);</span><br><span class="line">                &#125;</span><br><span class="line">                countDownLatch.countDown();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        countDownLatch.await();</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">        log.info(&quot;count:&#123;&#125;&quot;, count.get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static void add() &#123;</span><br><span class="line">        count.incrementAndGet();</span><br><span class="line">        &#x2F;&#x2F; count.getAndIncrement();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>1.AtomicXXX:CAS 、Unsafe.compareAndSwapInt</strong></p>
<p>看一下AtomicInteger.getAndIncrement的源码</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Atomically increments by one the current value.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the previous value</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndIncrement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="comment">// 主要是调用了unsafe的方法 </span></span><br><span class="line">     <span class="comment">//     private static final Unsafe unsafe = Unsafe.getUnsafe();</span></span><br><span class="line">    <span class="keyword">return</span> unsafe.getAndAddInt(<span class="keyword">this</span>, valueOffset, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*  获取底层当前的值并且+1</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> var1 需要操作的AtomicInteger 对象</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> var2 当前的值 </span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> var4 要增加的值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndAddInt</span><span class="params">(Object var1, <span class="keyword">long</span> var2, <span class="keyword">int</span> var4)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> var5;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="comment">// 获取底层的该对象当前的值</span></span><br><span class="line">            var5 = <span class="keyword">this</span>.getIntVolatile(var1, var2);</span><br><span class="line">            <span class="comment">// 获取完底层的值和自增操作之间，可能系统的值已经又被其他线程改变了</span></span><br><span class="line">            <span class="comment">//如果又被改变了，则重新计算系统底层的值，并重新执行本地方法</span></span><br><span class="line">        &#125; <span class="keyword">while</span>(!<span class="keyword">this</span>.compareAndSwapInt(var1, var2, var5, var5 + var4)); </span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> var5;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 本地的CAS方法核心</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> var1 需要操作的AtomicInteger 对象</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> var2 当前本地变量中的的值 </span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> var4 当前系统从底层传来的值</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> var5 要更新后的值</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Return</span> 如果当前本地变量的值（var2）与底层的值(var4)不等，则返回false，否则更新为var5的值并返回True</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">compareAndSwapInt</span><span class="params">(Object var1, <span class="keyword">long</span> var2, <span class="keyword">int</span> var4, <span class="keyword">int</span> var5)</span></span>;</span><br></pre></td></tr></table></figure></div>

<p><strong>2.AtomicLong、LongAdder</strong></p>
<p>我们看到AtomicInteger在执行CAS操作的时候，是用死循环的方式，如果竞争非常激烈，那么失败量就会很高，性能会受到影响</p>
<p>再看一下1.8以后的LongAdder</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void add(long x) &#123;</span><br><span class="line">        Cell[] as; long b, v; int m; Cell a;</span><br><span class="line">        if ((as &#x3D; cells) !&#x3D; null || !casBase(b &#x3D; base, b + x)) &#123;</span><br><span class="line">            boolean uncontended &#x3D; true;</span><br><span class="line">            if (as &#x3D;&#x3D; null || (m &#x3D; as.length - 1) &lt; 0 ||</span><br><span class="line">                (a &#x3D; as[getProbe() &amp; m]) &#x3D;&#x3D; null ||</span><br><span class="line">                !(uncontended &#x3D; a.cas(v &#x3D; a.value, v + x)))</span><br><span class="line">                longAccumulate(x, null, uncontended);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>补充知识点，jvm对long，double这些64位的变量拆成两个32位的操作</p>
<p>LongAdder的设计思想：核心是将热点数据分离，将内部数据value分成一个数组，每个线程访问时，通过hash等算法映射到其中一个数字进行技术，而最终计数结果为这个数组的求和累加，<br>其中热点数据value会被分离成多个热点单元的数据cell，每个cell独自维护内部的值，当前value的实际值由所有的cell累积合成，从而使热点进行了有效的分离，提高了并行度<br>LongAdder 在低并发的时候通过直接操作base，可以很好的保证和Atomic的性能基本一致，在高并发的场景，通过热点分区来提高并行度<br>缺点：在统计的时候如果有并发更新，可能会导致结果有些误差</p>
<p><strong>3.AtomicReference、AtomicReferenceFieldUpdater</strong></p>
<p>AtomicReference: 用法同AtomicInteger一样，但是可以放各种对象</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicReference;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicExample4</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> AtomicReference&lt;Integer&gt; count = <span class="keyword">new</span> AtomicReference&lt;&gt;(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//public final boolean compareAndSet(V expect, V update)</span></span><br><span class="line">    <span class="comment">// 如果当前值=expect期待值，就将当前值更新为update，并且返回true</span></span><br><span class="line">    <span class="comment">// 否则，就不更新，并且返回</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 2/true</span></span><br><span class="line">        System.out.println(count.compareAndSet(<span class="number">0</span>,<span class="number">2</span>));</span><br><span class="line">        <span class="comment">// 2/false</span></span><br><span class="line">        System.out.println(count.compareAndSet(<span class="number">0</span>,<span class="number">1</span>));</span><br><span class="line">        <span class="comment">// 2/false</span></span><br><span class="line">        count.compareAndSet(<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line">        <span class="comment">// 4/true</span></span><br><span class="line">        count.compareAndSet(<span class="number">2</span>,<span class="number">4</span>);</span><br><span class="line">        <span class="comment">// 4/false</span></span><br><span class="line">        count.compareAndSet(<span class="number">3</span>,<span class="number">5</span>);</span><br><span class="line">        System.out.println(count.get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>AtomicReferenceFieldUpdater</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">@ThreadSafe</span><br><span class="line">public class AtomicExample5 &#123;</span><br><span class="line"></span><br><span class="line">    @Getter</span><br><span class="line">    private volatile int count &#x3D; 100;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * AtomicIntegerFieldUpdater 核心是原子性的去更新某一个类的实例的指定的某一个字段</span><br><span class="line">     * 构造函数第一个参数为类定义，第二个参数为指定字段的属性名，必须是volatile修饰并且非static的字段</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private static AtomicIntegerFieldUpdater&lt;AtomicExample5&gt; updater &#x3D; AtomicIntegerFieldUpdater.newUpdater(AtomicExample5.class,&quot;count&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        AtomicExample5 example5 &#x3D; new AtomicExample5();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 第一次 count&#x3D;100 -&gt; count-&gt;120 返回True</span><br><span class="line">        if(updater.compareAndSet(example5,100,120))&#123;</span><br><span class="line">            log.info(&quot;update success 1:&#123;&#125;&quot;,example5.getCount());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; count&#x3D;120 -&gt; 返回False</span><br><span class="line">        if(updater.compareAndSet(example5,100,120))&#123;</span><br><span class="line">            log.info(&quot;update success 2:&#123;&#125;&quot;,example5.getCount());</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            log.info(&quot;update field:&#123;&#125;&quot;,example5.getCount());</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>4.AtomicStampReference:CAS的ABA问题</strong></p>
<p>ABA问题：在CAS操作的时候，其他线程将变量的值A改成了B由改成了A，本线程使用期望值A与当前变量进行比较的时候，发现A变量没有变，于是CAS就将A值进行了交换操作，这个时候实际上A值已经被其他线程改变过，这与设计思想是不符合的</p>
<p>解决思路：每次变量更新的时候，把变量的版本号加一，这样只要变量被某一个线程修改过，该变量版本号就会发生递增操作，从而解决了ABA变化</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Atomically sets the value of both the reference and stamp</span></span><br><span class="line"><span class="comment"> * to the given update values if the</span></span><br><span class="line"><span class="comment"> * current reference is &#123;<span class="doctag">@code</span> ==&#125; to the expected reference</span></span><br><span class="line"><span class="comment"> * and the current stamp is equal to the expected stamp.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> expectedReference the expected value of the reference</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> newReference the new value for the reference</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> expectedStamp the expected value of the stamp(上面提到的版本号)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> newStamp the new value for the stamp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if successful</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">compareAndSet</span><span class="params">(V   expectedReference,</span></span></span><br><span class="line"><span class="function"><span class="params">                             V   newReference,</span></span></span><br><span class="line"><span class="function"><span class="params">                             <span class="keyword">int</span> expectedStamp,</span></span></span><br><span class="line"><span class="function"><span class="params">                             <span class="keyword">int</span> newStamp)</span> </span>&#123;</span><br><span class="line">    Pair&lt;V&gt; current = pair;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">        expectedReference == current.reference &amp;&amp;</span><br><span class="line">        expectedStamp == current.stamp &amp;&amp;</span><br><span class="line">        ((newReference == current.reference &amp;&amp;</span><br><span class="line">          newStamp == current.stamp) ||</span><br><span class="line">         casPair(current, Pair.of(newReference, newStamp)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>5.AtomicLongArray</strong></p>
<p>可以指定更新一个数组指定索引位置的值</p>
<p><strong>6.AtomicBoolean(平时用的比较多)</strong></p>
<p>compareAndSet方法也值得注意，可以达到同一时间只有一个线程执行这段代码</p>
<h2 id="4-2-原子性-synchronized"><a href="#4-2-原子性-synchronized" class="headerlink" title="4-2 原子性-synchronized"></a>4-2 原子性-synchronized</h2><ul>
<li><p>synchronized：依赖JVM （主要依赖JVM实现锁，因此在这个关键字作用对象的作用范围内，都是同一时刻只能有一个线程进行操作的）</p>
</li>
<li><p>Lock：依赖特殊的CPU指令，代码实现，ReentrantLock</p>
</li>
</ul>
<p>synchronized修饰内容分类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">修饰代码块</span><br><span class="line"></span><br><span class="line">修饰方法</span><br><span class="line"></span><br><span class="line">修饰静态方法</span><br><span class="line"></span><br><span class="line">修饰类</span><br></pre></td></tr></table></figure></div>


<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> gaowenfeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SyncronizedExample1</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修饰一个代码块，作用范围为大括号括起来的</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                log.info(<span class="string">"test1-&#123;&#125;"</span>,i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改方法，作用范围是整个方法，作用对象为调用这个方法的对象</span></span><br><span class="line"><span class="comment">     * 若子类继承父类调用父类的synchronized方法，是带不上synchronized关键字的</span></span><br><span class="line"><span class="comment">     * 原因：synchronized 不属于方法声明的一部分</span></span><br><span class="line"><span class="comment">     * 如果子类也想使用同步需要在方法上声明</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            log.info(<span class="string">"test2-&#123;&#125;"</span>,i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SyncronizedExample1 example1 = <span class="keyword">new</span> SyncronizedExample1();</span><br><span class="line">        SyncronizedExample1 example2 = <span class="keyword">new</span> SyncronizedExample1();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用线程池模拟一个对象的两个进程同时调用一段sync代码的执行过程</span></span><br><span class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 线程pool-1-thread-1,pool-1-thread-2 交叉输出</span></span><br><span class="line">        executorService.execute(()-&gt; example1.test1());</span><br><span class="line">        executorService.execute(()-&gt; example2.test1());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 线程pool-1-thread-1 先从0-9输出，然后pool-1-thread-2 从0到9顺序输出</span></span><br><span class="line">        <span class="comment">// executorService.execute(()-&gt; example1.test1());</span></span><br><span class="line">        <span class="comment">// executorService.execute(()-&gt; example1.test1());</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SyncronizedExample2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修饰类，括号包起来的代码</span></span><br><span class="line"><span class="comment">     * 作用对象为这个类的所有对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (SyncronizedExample2<span class="class">.<span class="keyword">class</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                log.info(<span class="string">"test1-&#123;&#125;"</span>,i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修饰一个静态方法，作用对象为这个类的所有对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            log.info(<span class="string">"test2-&#123;&#125;"</span>,i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SyncronizedExample2 example1 = <span class="keyword">new</span> SyncronizedExample2();</span><br><span class="line">        SyncronizedExample2 example2 = <span class="keyword">new</span> SyncronizedExample2();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用线程池模拟一个对象的两个进程同时调用一段sync代码的执行过程</span></span><br><span class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 线程pool-1-thread-1 先从0-9输出，然后pool-1-thread-2 从0到9顺序输出</span></span><br><span class="line">        executorService.execute(()-&gt; example1.test1());</span><br><span class="line">        executorService.execute(()-&gt; example1.test1());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 线程pool-1-thread-1 先从0-9输出，然后pool-1-thread-2 从0到9顺序输出</span></span><br><span class="line"><span class="comment">//        executorService.execute(()-&gt; example1.test2());</span></span><br><span class="line"><span class="comment">//        executorService.execute(()-&gt; example2.test2());</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>原子性对比</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">synchronized: 不可中断锁，适合竞争不激烈，可读性好</span><br><span class="line"></span><br><span class="line">Lock: 可中断锁，多样化同步，竞争激烈时能维持常态</span><br><span class="line"></span><br><span class="line">Atomic: 竞争激烈时能维持常态，比Lock性能好；只能同步一个值</span><br></pre></td></tr></table></figure></div>

<h2 id="4-3-可见性"><a href="#4-3-可见性" class="headerlink" title="4-3 可见性"></a>4-3 可见性</h2><p>导致共享变量在线程中不可见的原因:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 线程交叉执行</span><br><span class="line">- 重排序结合线程交叉执行</span><br><span class="line">- 共享变量更新后的值没有在工作内存与主内存间及时更新</span><br></pre></td></tr></table></figure></div>



<p><strong>java提供了synchronized和volatile 两种方法来确保可见性</strong></p>
<p>JMM（java内存模型）关于synchronized的两条规定:</p>
<ul>
<li>线程解锁前，必须把共享变量的最新值刷新到主内存</li>
<li>线程加锁时，将清空工作内存中共享变量的值，从而使用共享变量时需要从主内存中重新读取最新的值（注意，加锁和解锁是同一把锁）</li>
</ul>
<p>可见性-volatile：通过加入 <code>内存屏障</code>和禁止重排序优化来实现</p>
<ul>
<li><p>对volatile 变量写操作时，会在写操作后加入一条store屏障指令，将本地内存中的共享变量值刷新到主内存</p>
</li>
<li><p>对volatile变量读操作时，会在读操作前加入一条load屏障指令，从主内存中读取共享变量</p>
</li>
</ul>
<p>volatile写示意图<br><a href="/2018/07/28/15327607157902/15380405541117.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/07/28/15327607157902/15380405541117.jpg" class="lazyload"></a></p>
<p>volatile读示意图<br><a href="/2018/07/28/15327607157902/15380406640929.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/07/28/15327607157902/15380406640929.jpg" class="lazyload"></a></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 并发测试</span><br><span class="line"> * @author gaowenfeng</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Slf4j</span><br><span class="line">@NotThreadSafe</span><br><span class="line">public class CountExample4 extends AbstractExample&#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;** 请求总数 *&#x2F;</span><br><span class="line">    public static int clientTotal &#x3D; 5000;</span><br><span class="line">    &#x2F;** 同时并发执行的线程数 *&#x2F;</span><br><span class="line">    public static int threadTotal &#x3D; 50;</span><br><span class="line"></span><br><span class="line">    public volatile static int count &#x3D; 0;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        new CountExample4().test();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 本质上应该是这个方法线程不安全</span><br><span class="line">     *</span><br><span class="line">     * volatile只能保证 1，2，3的顺序不会被重排序</span><br><span class="line">     * 但是不保证1，2，3的原子执行，也就是说还是有可能有两个线程交叉执行1，导致结果不一致</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Override</span><br><span class="line">    protected void add() &#123;</span><br><span class="line">        &#x2F;&#x2F; 1.取内存中的count值</span><br><span class="line">        &#x2F;&#x2F; 2.count值加1</span><br><span class="line">        &#x2F;&#x2F; 3.重新写会主存</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void countLog() &#123;</span><br><span class="line">        log.info(&quot;count:&#123;&#125;&quot;,count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>volatile使用条件</strong></p>
<p>1.对变量写操作不依赖于当前值<br>2.该变量没有包含在具有其他变量的不必要的式子中</p>
<p>综上，volatile特别适合用来做线程标记量，如下图</p>
<p><a href="/2018/07/28/15327607157902/15380408523633.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2018/07/28/15327607157902/15380408523633.jpg" class="lazyload"></a></p>
<p>  ​</p>
<h2 id="4-4-有序性"><a href="#4-4-有序性" class="headerlink" title="4-4 有序性"></a>4-4 有序性</h2><ul>
<li><p>Java内存模型中，允许编译器和处理器对指令进行重排序，但是重排序过程不会影响到 单线程 程序的执行，却会影响到多线程并发执行的正确性。</p>
</li>
<li><p>保证有序性：volatile、synchronized、Lock</p>
</li>
</ul>
<p><strong>Happens-before原则</strong></p>
<blockquote>
<p>先天有序性，即不需要任何额外的代码控制即可保证有序性，java内存模型一个列出了八种Happens-before规则，如果两个操作的次序不能从这八种规则中推倒出来，则不能保证有序性（虚拟机可随意重排序）</p>
</blockquote>
<ol>
<li><p>程序次序规则：一个线程内，按照代码顺序，书写在前面的操作先行发生于书写在后面的操作。</p>
<p>(这里只是程序的运行结果看起来像是顺序执行，虽然结果是一样的，jvm会对没有变量值依赖的操作进行重排序，这个规则只能保证单线程下执行的有序性，不能保证多线程下的有序性)</p>
</li>
</ol>
<ol start="2">
<li>锁定规则：一个unLock操作先行发生于后面对同一个锁的lock操作。</li>
<li>volatile变量规则：对一个变量的写操作先行发生于后面对这个变量的读操作。</li>
<li>传递规则：如果操作A先行发生于操作B，而操作B又线性发生于操作C，则可以得出操作A先行发生于操作C。</li>
</ol>
<ol start="5">
<li>线程启动规则：Thread对象的start()方法先行发生于此线程的每一个动作。</li>
<li>线程中断规则：对现场interrupt()方法的调用先行发生于被中断线程的代码监测到到中断事件的发生。</li>
<li>线程终结规则：线程中所有的操作都先行发生于线程的终止检测，我们可以通过Thread.join()方法结束、Thread.isAlive()的返回值手段监测到线程已经终止执行。</li>
<li>对象终结规则：一个对象的初始化完成先行发生于他的finalize()方法的开始。</li>
</ol>
<h2 id="4-5-总结"><a href="#4-5-总结" class="headerlink" title="4-5 总结"></a>4-5 总结</h2><ul>
<li><p>原子性：Atomic包、CAS算法、synchronized、Lock</p>
</li>
<li><p>可见性：synchronized、volatile</p>
</li>
<li><p>有序性：happens-before</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Java并发编程与高并发解决方案</category>
      </categories>
      <tags>
        <tag>Java并发编程与高并发解决方案</tag>
      </tags>
  </entry>
  <entry>
    <title>使用git将初始化代码托管到-项目初始化</title>
    <url>/2018/07/28/15327623035290/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[TOC]</p>
<h1 id="在gitee创建项目"><a href="#在gitee创建项目" class="headerlink" title="在gitee创建项目"></a>在gitee创建项目</h1><p>码云(gitee)账号注册：<a href="https://gitee.com/" target="_blank" rel="noopener">https://gitee.com/</a></p>
<p>在gitee创建项目:</p>
<p><a href="/2018/07/28/15327623035290/1.png" data-fancybox="group" data-caption="1" class="fancybox"><img alt="1" title="1" data-src="/2018/07/28/15327623035290/1.png" class="lazyload"></a></p>
<p>跳转页面填写基本信息 &gt; 点击创建 &gt; 跳转到项目地址</p>
<h1 id="初始化Spring-Boot项目"><a href="#初始化Spring-Boot项目" class="headerlink" title="初始化Spring Boot项目"></a>初始化Spring Boot项目</h1><p>URL:<a href="https://start.spring.io/" target="_blank" rel="noopener">https://start.spring.io/</a></p>
<h1 id="git从远程仓库下载项目"><a href="#git从远程仓库下载项目" class="headerlink" title="git从远程仓库下载项目"></a>git从远程仓库下载项目</h1><ul>
<li><p>创建本地仓库：</p>
<p>  创建文件夹&gt;进入文件夹&gt;在改路径下执行<code>git init</code>&gt;路径下会出现.git文件&gt;本地仓库创建成功</p>
</li>
<li><p>关联远程仓库</p>
<p>  创建SSH Key：</p>
  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;hhdwwt@163.com&quot;</span><br></pre></td></tr></table></figure></div>

<p>  把生成的id_rsa.pub粘到码云的SSH公钥里</p>
<p>  测试：</p>
  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ssh -T git@git.oschina.net</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>从远程仓库拿代码到 本地仓库</p>
  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git clone git@gitee.com:machine4869&#x2F;concurrency.git</span><br></pre></td></tr></table></figure></div>

</li>
</ul>
<p><a href="/2018/07/28/15327623035290/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-07-28%20%E4%B8%8B%E5%8D%884.55.46.png" data-fancybox="group" data-caption="屏幕快照 2018-07-28 下午4.55.46" class="fancybox"><img alt="屏幕快照 2018-07-28 下午4.55.46" title="屏幕快照 2018-07-28 下午4.55.46" data-src="/2018/07/28/15327623035290/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-07-28%20%E4%B8%8B%E5%8D%884.55.46.png" class="lazyload"></a></p>
<h1 id="将本地项目提交到远程仓库"><a href="#将本地项目提交到远程仓库" class="headerlink" title="将本地项目提交到远程仓库"></a>将本地项目提交到远程仓库</h1><p>把sprngboot生成的项目拷贝到本地仓库的对应的项目目录下</p>
<p>用IDEA打开项目</p>
<blockquote>
<p>IDEA安装.ignore插件：<a href="https://blog.csdn.net/qq_34590097/article/details/56284935" target="_blank" rel="noopener">https://blog.csdn.net/qq_34590097/article/details/56284935</a></p>
</blockquote>
<p>.gitignore保证有的代码可以不用上传<br>​<br>运行一下项目<br>​<br>.gitignore添加不需要上传的文件<br>​    </p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;.idea&#x2F;</span><br><span class="line">&#x2F;target&#x2F;</span><br><span class="line">&#x2F;*.iml</span><br></pre></td></tr></table></figure></div>

<p><code>git status</code>查看状态<br><code>git add .</code>将所有未被管理的文件加到暂存区<br><code>git commit -am &quot;init&quot;</code>提交到工作区</p>
<p><code>git push</code>远程提交</p>
<p>gitee仓库的代码现在已经和本地仓库同步了</p>
<h1 id="git获取项目子文件夹"><a href="#git获取项目子文件夹" class="headerlink" title="git获取项目子文件夹"></a>git获取项目子文件夹</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init <span class="built_in">test</span> &amp;&amp; <span class="built_in">cd</span> <span class="built_in">test</span>     <span class="comment">#新建仓库并进入文件夹</span></span><br><span class="line">git config core.sparsecheckout <span class="literal">true</span> <span class="comment">#设置允许克隆子目录</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'tt*'</span> &gt;&gt; .git/info/sparse-checkout <span class="comment">#设置要克隆的仓库的子目录路径   //空格别漏</span></span><br><span class="line"></span><br><span class="line">git remote add origin git@gitee.com:machine4869/example-code.git  <span class="comment">#这里换成你要克隆的项目和库</span></span><br><span class="line"></span><br><span class="line">git pull origin master    //下载</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>项目管理</category>
        <category>git</category>
      </categories>
  </entry>
  <entry>
    <title>并发编程与线程安全（1）：并发基础知识</title>
    <url>/2018/07/27/15326929363424/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>参考视频：慕课网【Java并发编程与高并发解决方案】<br>参考笔记：<a href="https://blog.csdn.net/qq_28867949/article/details/80045280" target="_blank" rel="noopener">https://blog.csdn.net/qq_28867949/article/details/80045280</a></p>
<p>代码地址：<a href="https://gitee.com/machine4869/example-code/tree/master/node_concurrency" target="_blank" rel="noopener">node_concurrency</a></p>
</blockquote>
<p>[TOC]</p>
<h1 id="第1章-课程准备"><a href="#第1章-课程准备" class="headerlink" title="第1章 课程准备"></a>第1章 课程准备</h1><h2 id="1-1-课程导学"><a href="#1-1-课程导学" class="headerlink" title="1-1 课程导学"></a>1-1 课程导学</h2><p>并发编程&amp;高并发解决方案</p>
<h2 id="1-2-并发编程初体验"><a href="#1-2-并发编程初体验" class="headerlink" title="1-2 并发编程初体验"></a>1-2 并发编程初体验</h2><p>问题引入：计数功能，同一时间多个进程同时对一个变量计数（并发）,计数会变少（for5000次的结果会小于5000）。</p>
<h2 id="1-3-并发与高并发基本概念"><a href="#1-3-并发与高并发基本概念" class="headerlink" title="1-3 并发与高并发基本概念"></a>1-3 并发与高并发基本概念</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">并发：</span><br><span class="line">同时拥有两个或者多个线程，如果程序在单核处理器上运行多个线程将交替地换入或者换出内存，这些线程是</span><br><span class="line">同时“存在”的，每个线程都处于执行过程中的某个状态，如果运行在多核处理器上，此时，程序中的每个线程都</span><br><span class="line">将分配到一个处理器核上，因此可以同时运行。</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">高并发: </span><br><span class="line">高并发( High Concurrency) 是互联网分布式系统架构设计中必须考虑的因素之一，它通常是指，通过设计</span><br><span class="line">保证系统能够&quot;同时并行处理&quot;很多请求</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对比：</span><br><span class="line">并发：多个线程操作相同的资源，保证线程安全，合理使用资源</span><br><span class="line">高并发：服务能同时处理很多请求，提高程序性能</span><br></pre></td></tr></table></figure></div>

<h1 id="第2章-并发基础"><a href="#第2章-并发基础" class="headerlink" title="第2章 并发基础"></a>第2章 并发基础</h1><h2 id="2-1-CPU多级缓存-缓存一致性"><a href="#2-1-CPU多级缓存-缓存一致性" class="headerlink" title="2-1 CPU多级缓存-缓存一致性"></a>2-1 CPU多级缓存-缓存一致性</h2><p><strong>多级缓存</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    数据的读取和存储都经过高速缓存，CPU核心与高速缓存有一条特殊的快速通道。主存与高速缓存都是连接</span><br><span class="line">在系统总线上（Bus），这条总线同时还用于其他组件的通信...</span><br><span class="line">    在高速缓存出现后不久，系统变得愈加复杂，高速缓存与主存之间的速度差异被拉大，直到加入了另一级</span><br><span class="line">缓存（L2 Cache），新加入的这级缓存比第一缓存更大、更慢。由于加大缓存的方法从经济利益的角度考虑是</span><br><span class="line">行不通的，所以这才有了二级缓存，甚至现在有些系统拥有三级缓存。</span><br></pre></td></tr></table></figure></div>

<p><a href="/2018/07/27/15326929363424/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-07-28%20%E4%B8%8B%E5%8D%881.44.49.png" data-fancybox="group" data-caption="屏幕快照 2018-07-28 下午1.44.49" class="fancybox"><img alt="屏幕快照 2018-07-28 下午1.44.49" title="屏幕快照 2018-07-28 下午1.44.49" data-src="/2018/07/27/15326929363424/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-07-28%20%E4%B8%8B%E5%8D%881.44.49.png" class="lazyload"></a></p>
<p><code>&quot;左图为高速缓存  右图为多级缓存&quot;</code></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CPU高速缓存（英语：CPU Cache，在本文中简称缓存）是用于减少处理器访问内存所需平均时间的部件。</span><br><span class="line">在金字塔式存储体系中它位于自顶向下的第二层，仅次于CPU寄存器。其容量远小于内存，但速度却可以接近处</span><br><span class="line">理器的频率。</span><br></pre></td></tr></table></figure></div>

<p>为什么需要CPU Cache？</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CPU 的频率太快了，快到主存跟不上，这样在处理器时钟周期内，CPU常常需要等待主存，浪费资源。</span><br><span class="line">所以cache 的出现，是为了缓解 CPU 和内存之间速度的不匹配问题</span><br><span class="line">结构：cpu-&gt; cache-&gt; memory).</span><br></pre></td></tr></table></figure></div>

<p>CPU Cache有什么意义？</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1) 时间局部性：如果某个数据被访问，那么在不久的将来它很可能被再次访问</span><br><span class="line">2) 空间局部性：如果某个数据被访问，那么与它相邻的数据很快也可能被访问</span><br></pre></td></tr></table></figure></div>

<hr>
<p> <strong>缓存一致性（MESI）</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">处理器上有一套完整的协议，来保证Cache一致性。比较经典的Cache一致性协议当属MESI协议，奔腾处理器有使用它，很多其他的处理器都是使用它的变种。</span><br><span class="line"></span><br><span class="line">单核Cache中每个Cache line有2个标志：dirty和valid标志，它们很好的描述了Cache和Memory(内存)之间的数据关系(数据是否有效，数据是否被修改)，而在多核处理器中，多个核会共享一些数据，MESI协议就包含了描述共享的状态。</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">M: Modified 修改，指的是该缓存行只被缓存在该CPU的缓存中，并且是被修改过的，因此他与主存中的数据是不一致的，该缓存行中的数据需要在未来的某个时间点（允许其他CPU读取主存相应中的内容之前）写回主存，然后状态变成E（独享）</span><br><span class="line">E：Exclusive 独享 缓存行只被缓存在该CPU的缓存中，是未被修改过的，与主存的数据是一致的，可以在任何时刻当有其他CPU读取该内存时，变成S（共享）状态，当CPU修改该缓存行的内容时，变成M（被修改）的状态</span><br><span class="line">S：Share 共享，意味着该缓存行可能会被多个CPU进行缓存，并且该缓存中的数据与主存数据是一致的，当有一个CPU修改该缓存行时，其他CPU是可以被作废的，变成I(无效的)</span><br><span class="line">I：Invalid 无效的，代表这个缓存是无效的，可能是有其他CPU修改了该缓存行</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">M(Modified)和E(Exclusive)状态的Cache line，数据是独有的，不同点在于M状态的数据是dirty的(和内存的不一致)，E状态的数据是clean的(和内存的一致)。</span><br><span class="line"></span><br><span class="line">S(Shared)状态的Cache line，数据和其他Core的Cache共享。只有clean的数据才能被多个Cache共享。</span><br><span class="line">I(Invalid)表示这个Cache line无效。</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>CPU多级缓存-缓存一致性（MESI）<br>具体相关概念参考博客:<a href="https://blog.csdn.net/qq_28867949/article/details/79991422" target="_blank" rel="noopener">https://blog.csdn.net/qq_28867949/article/details/79991422</a> </p>
</blockquote>
<p><a href="/2018/07/27/15326929363424/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-07-28%20%E4%B8%8B%E5%8D%881.46.23.png" data-fancybox="group" data-caption="屏幕快照 2018-07-28 下午1.46.23" class="fancybox"><img alt="屏幕快照 2018-07-28 下午1.46.23" title="屏幕快照 2018-07-28 下午1.46.23" data-src="/2018/07/27/15326929363424/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-07-28%20%E4%B8%8B%E5%8D%881.46.23.png" class="lazyload"></a></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在MESI协议中，每个Cache的Cache控制器不仅知道自己的读写操作，而且也监听(snoop)其它Cache的读写</span><br><span class="line">操作。每个Cache line所处的状态根据本核和其它核的读写操作在4个状态间进行迁移。</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">local read：读本地缓存的数据</span><br><span class="line">local write：将数据写到本地缓存里面</span><br><span class="line">remote read：将内（主）存中的数据读取到缓存中来</span><br><span class="line">remote write：将缓存中的数据写会到主存里面</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;补充说明：&quot;</span><br><span class="line">    对于各级的Cache，访问速度是不同的，理论上说L1 Cache（一级缓存）有着跟CPU寄存器相同的速度，</span><br><span class="line">但L1 Cache有一个问题，当需要同步Cache和内存之间的内容时，需要锁住Cache的某一块（&quot;术语是Cache</span><br><span class="line"> line&quot;），然后再进行Cache或者内存内容的更新，这段期间这个Cache块是不能被访问的，所以L1 Cache</span><br><span class="line">的速度就没寄存器快，因为它会频繁的有一段时间不可用。</span><br><span class="line">    L1 Cache下面是L2 Cache，甚至L3 Cache，这些都有跟L1 Cache一样的问题，要加锁，同步，并且</span><br><span class="line">L2比L1慢，L3比L2慢，这样速度也就更低了。</span><br></pre></td></tr></table></figure></div>

<p><code>理解16种状态参见上述链接</code></p>
<p><code>总结：每个核都拥有自己的缓存，缓存一致性保证了多核存取共享数据时数据一致</code></p>
<h2 id="2-2-CPU多级缓存-乱序执行优化"><a href="#2-2-CPU多级缓存-乱序执行优化" class="headerlink" title="2-2 CPU多级缓存-乱序执行优化"></a>2-2 CPU多级缓存-乱序执行优化</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;什么是乱序执行优化&quot;：处理器为提高运算速度而做出违背代码原有顺序的优化。</span><br><span class="line"></span><br><span class="line">例如：计算 result &#x3D; a*b</span><br><span class="line">     原本我们的预期顺序是：     a&#x3D;10 --&gt; b&#x3D;200 --&gt; result&#x3D;a*b</span><br><span class="line">     实际上乱序优化后的实际顺序：b&#x3D;200 --&gt; a&#x3D;10 --&gt; result&#x3D;a*b</span><br><span class="line">&quot;结论：处理器这样优化的结果来看，得到结果不会偏离预期目标！！！</span><br><span class="line">      但是,当在多个环境下却并非如此。&quot;</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    处理器为提高运算速度而做出违背代码原有顺序的优化。当然了在正常情况下是不对结果造成影响的。在</span><br><span class="line">单核时代处理器对结果的优化保证不会远离预期目标，但是在多核环境下却并非如此。为什么这么说呢？首先，</span><br><span class="line">在多核条件下会有多个核执行指令，因此每个核的指令都有可能会乱序。另外处理器还引入了L1、L2缓存机</span><br><span class="line">制，这就导致了逻辑上后写入的数据不一定最后写入。</span><br><span class="line"></span><br><span class="line">    这就导致的一个问题，如果我们不做任何处理，实际结果可能和逻辑运行结果大不相同。在一个核上记录</span><br><span class="line">一个标志表示数据已经准备完毕，在另一个核上来判断这个数据是否已经就绪，这时候就会存在风险。标记位先</span><br><span class="line">被写入，但是实际的操作缺并未完成，这个未完成既有可能是没有计算完成，也有可能是缓存没有被及时刷新到</span><br><span class="line">主存之中，使得其他核读到了错误的数据。</span><br></pre></td></tr></table></figure></div>

<p><code>总结：乱序执行优化，在多核条件下，会导致数据错误</code></p>
<h2 id="2-3-JAVA内存模型（JMM）"><a href="#2-3-JAVA内存模型（JMM）" class="headerlink" title="2-3 JAVA内存模型（JMM）"></a>2-3 JAVA内存模型（JMM）</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    为了屏蔽掉各种系统硬件和操作系统的内存访问差异，以实现Java程序在各大平台都能达到一致的并发效</span><br><span class="line">果，Java虚拟机因此定义了Java内存模型，它规范了Java虚拟机与计算机是如何协同工作的。</span><br><span class="line"></span><br><span class="line">    它规定了一个线程如何看到或者共享其他线程一个共享变量的值，以及必须时，如何同步的访问共享变</span><br><span class="line">量。</span><br></pre></td></tr></table></figure></div>

<p>JAVA内存模型规范（即它的作用）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 规定了一个线程如何和何时可以看到其他线程修改过后的共享变量的值</span><br><span class="line">2. 如何以及何时同步的访问共享变量</span><br></pre></td></tr></table></figure></div>

<p>JAVA内存模型：</p>
<p><a href="/2018/07/27/15326929363424/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-07-28%20%E4%B8%8B%E5%8D%881.48.20.png" data-fancybox="group" data-caption="屏幕快照 2018-07-28 下午1.48.20" class="fancybox"><img alt="屏幕快照 2018-07-28 下午1.48.20" title="屏幕快照 2018-07-28 下午1.48.20" data-src="/2018/07/27/15326929363424/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-07-28%20%E4%B8%8B%E5%8D%881.48.20.png" class="lazyload"></a></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Heap(堆)：Java里的堆是一个运行时的数据区，堆是由垃圾回收来负责的，堆的优势是可以动态的分配内存大</span><br><span class="line">         小，生存期也不必事先告诉编译器，他是在运行时动态分配内存的，Java的垃圾回收器会定时收走</span><br><span class="line">         不用的数据，</span><br><span class="line">    缺点：由于要在运行时动态分配，所有存取速度可能会慢一些</span><br><span class="line"></span><br><span class="line">Stack(栈)：栈的优势是存取速度比堆要快，仅次于计算机里的寄存器，栈的数据是可以共享的，</span><br><span class="line">     缺点：是存在栈数据的大小与生存期必须是确定的，缺乏一些灵活性栈中主要存放一些基本类型的</span><br><span class="line">          变量，比如:int、short、long、bytedouble、float、boolean、char、对象句柄，</span><br><span class="line"></span><br><span class="line">    Java内存模型要求调用栈和本地变量存放在线程栈（Thread Stack）上，对象存放在堆上。</span><br><span class="line">    一个本地变量可能存放一个对象的引用，这时引用变量存放在本地栈上，但是对象本身存放在堆上</span><br><span class="line">    成员变量跟随着对象存放在堆上，而不管是原始类型还是引用类型，静态成员变量跟随着类的定义一起存在在堆上</span><br><span class="line"></span><br><span class="line">    存在堆上的对象，可以被持有这个对象的引用的线程访问</span><br><span class="line">    如果两个线程同时访问同一个对象的私有变量，这时他们所拥有的是&quot;这个对象的私有拷贝&quot;(&quot;重要&quot;)</span><br></pre></td></tr></table></figure></div>

<p>计算机硬件架构的简单图示</p>
<p><a href="/2018/07/27/15326929363424/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-07-28%20%E4%B8%8B%E5%8D%881.49.19.png" data-fancybox="group" data-caption="屏幕快照 2018-07-28 下午1.49.19" class="fancybox"><img alt="屏幕快照 2018-07-28 下午1.49.19" title="屏幕快照 2018-07-28 下午1.49.19" data-src="/2018/07/27/15326929363424/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-07-28%20%E4%B8%8B%E5%8D%881.49.19.png" class="lazyload"></a></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;CPU：&quot;一个计算机一般有多个CPU，一个CPU还会有多核。因此意味着每个cpu可能都会运行一个线程，所以计算</span><br><span class="line">    机出现多线程是很有可能的。</span><br><span class="line"></span><br><span class="line">&quot;CPU Registers（寄存器）：&quot;每个CPU都包含一系列的寄存器，他们是CPU内存的基础，CPU在寄存器上执行的</span><br><span class="line">        速度远大于在主存上执行的速度，这是因为计算机访问寄存器的速度远大于主存。</span><br><span class="line"></span><br><span class="line">&quot;CPU Cache（高速缓存）：&quot;由于计算机的存储设备与处理器的处理设备有着几个数量级的差距，所以现代计</span><br><span class="line">    算机都会加入一层读写速度与处理器处理速度接近相同的高级缓存来作为内存与处理器之间的缓冲，将运</span><br><span class="line">    算使用到的数据复制到缓存中，让运算能够快速的执行，当运算结束后，再从缓存同步到内存之中，这</span><br><span class="line">    样，CPU就不需要等待缓慢的内存读写了主（内）存：一个计算机包含一个主存，所有的CPU都可以访问主</span><br><span class="line">    存，主存比缓存容量大的多（CPU访问缓存层的速度快于访问主存的速度！但通常比访问内存寄存器的速度还是要慢点）</span><br><span class="line"></span><br><span class="line">&quot;运作原理：&quot;通常情况下，当一个CPU要读取主存（RAM - Main Mernory）的时候，他会将主存中的数据读</span><br><span class="line">        取到CPU缓存中，甚至将缓存内容读到内部寄存器里面，然后再寄存器执行操作，当运行结束后，会</span><br><span class="line">        将寄存器中的值刷新回缓存中，并在某个时间点将值刷新回主存</span><br></pre></td></tr></table></figure></div>

<p><strong>JAVA内存模型与硬件架构之间的关联</strong></p>
<p><a href="/2018/07/27/15326929363424/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-07-28%20%E4%B8%8B%E5%8D%881.53.07.png" data-fancybox="group" data-caption="屏幕快照 2018-07-28 下午1.53.07" class="fancybox"><img alt="屏幕快照 2018-07-28 下午1.53.07" title="屏幕快照 2018-07-28 下午1.53.07" data-src="/2018/07/27/15326929363424/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-07-28%20%E4%B8%8B%E5%8D%881.53.07.png" class="lazyload"></a></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">每个线程之间共享变量都存放在主内存里面，每个线程都有一个私有的本地内存</span><br><span class="line">本地内存是Java内存模型中抽象的概念，并不是真实存在的（他涵盖了缓存写缓冲区。寄存器，以及其他硬件的优化）</span><br><span class="line">本地内存中存储了以读或者写共享变量的拷贝的一个副本</span><br><span class="line"></span><br><span class="line">从一个更低的层次来说，线程本地内存，他是CPU缓存，寄存器的一个抽象描述，而JVM的静态内存存储模型，</span><br><span class="line">他只是一种对内存模型的物理划分而已，只局限在内存，而且只局限在JVM的内存</span><br><span class="line"></span><br><span class="line">如果线程A和线程B要通信，必须经历两个过程：</span><br><span class="line">1、A将本地内存变量刷新到主内存</span><br><span class="line">2、B从主内存中读取变量</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>举例</p>
</li>
<li><p>下面对上面的描述举个例子。假设主内存的变量为1，线程A、B同时读取，线程A从主内存得到变量值为1，然后存储到自己的本地内存，之后进行+1的操作，最后写回主内存变为2。其实B的操作也是一样的。线程B并不是等线程A写回主内存之后再开始操作的，它们之间不可见的，因此当线程B操作完成将结果2写回主内存时计数就出现了错误，<strong>所以需要引入同步的手段保证并发准确性</strong>。</p>
</li>
</ul>
<hr>
<p><strong>Java内存模型 - 八种同步操作</strong></p>
<p><a href="/2018/07/27/15326929363424/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-07-28%20%E4%B8%8B%E5%8D%882.06.59.png" data-fancybox="group" data-caption="屏幕快照 2018-07-28 下午2.06.59" class="fancybox"><img alt="屏幕快照 2018-07-28 下午2.06.59" title="屏幕快照 2018-07-28 下午2.06.59" data-src="/2018/07/27/15326929363424/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-07-28%20%E4%B8%8B%E5%8D%882.06.59.png" class="lazyload"></a></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.Lock（锁定）：作用于主内存的变量，把一个变量标识变为一条线程独占状态</span><br><span class="line">2.Unlock（解锁）：作用于主内存的变量，把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定</span><br><span class="line">3.Read（读取）：作用于主内存的变量，把一个变量值从主内存传输到线程的工作内存中，以便随后的load动作使用</span><br><span class="line">4.Load（载入）：作用于工作内存的变量，它把Read操作从主内存中得到的变量值放入工作内存的变量副本中</span><br><span class="line">5.Use（使用）：作用于工作内存的变量，把工作内存中的一个变量值传递给执行引擎</span><br><span class="line">6.Assign（赋值）：作用于工作内存的变量，它把一个从执行引擎接受到的值赋值给工作内存的变量</span><br><span class="line">7.Store（存储）：作用于工作内存的变量，把工作内存中的一个变量的值传送到主内存中，以便随后的write的操作</span><br><span class="line">8.Write（写入）：作用于主内存的变量，它把Store操作从工作内存中一个变量的值传送到主内存的变量中</span><br></pre></td></tr></table></figure></div>

<p>Java内存模型 - 同步规则</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.如果要把一个变量从主内存中赋值到工作内存，就需要按顺序得执行read和load操作，如果把变量从工作内</span><br><span class="line">    存中同步回主内存中，就要按顺序得执行store和write操作，但java内存模型只要求上述操作必须按顺</span><br><span class="line">    序执行，没有保证必须是连续执行,也就是说Read和Load、Store和Write之间是可以插入其他指令的</span><br><span class="line">2.不允许read和load、store和write操作之一单独出现</span><br><span class="line">3.不允许一个线程丢弃他的最近assign的操作，即变量在工作内存中改变了之后必须同步到主内存中</span><br><span class="line">4.不允许一个线程无原因地（也就是说必须有assgin操作）把数据从工作内存同步到主内存中</span><br><span class="line">5.一个新的变量只能在主内存中诞生，不允许在工作内存中直接使用一个未被初始化（load或assign）的变</span><br><span class="line">    量。即就是对一个变量实施use和store操作之前，必须先执行过了load和assign操作</span><br><span class="line">6.一个变量在同一时刻只允许一条线程对其进行lock操作，但lock操作可以同时被一条线程重复执行多次，多</span><br><span class="line">    次执行lock后，只有执行相同次数的unlock操作，变量才会解锁，lock和unlock必须成对出现</span><br><span class="line">7.如果一个变量执行lock操作，将会清空工作内存中此变量的值，在执行引擎中使用这个变量前需要重新执行</span><br><span class="line">    load或assign操作初始化变量的值</span><br><span class="line">8.如果一个变量事先没有被lock操作锁定，则不允许他执行unlock操作，也不允许去unlock一个被其他线程</span><br><span class="line">    锁定的变量</span><br><span class="line">9.对一个变量执行unlock操作之前，必须先把此变量同步到主内存中（其实就是执行store和write操作之后）</span><br></pre></td></tr></table></figure></div>

<h2 id="2-4-并发的优势与风险"><a href="#2-4-并发的优势与风险" class="headerlink" title="2-4 并发的优势与风险"></a>2-4 并发的优势与风险</h2><p><a href="/2018/07/27/15326929363424/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-07-28%20%E4%B8%8B%E5%8D%882.15.02.png" data-fancybox="group" data-caption="屏幕快照 2018-07-28 下午2.15.02" class="fancybox"><img alt="屏幕快照 2018-07-28 下午2.15.02" title="屏幕快照 2018-07-28 下午2.15.02" data-src="/2018/07/27/15326929363424/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-07-28%20%E4%B8%8B%E5%8D%882.15.02.png" class="lazyload"></a></p>
<p>并发的优势：</p>
<ul>
<li><p>速度： </p>
<ul>
<li>系统可以同时处理多个请求，等待的时间变短，那么相应的响应更快；</li>
<li>另一方面，复杂的操作可以分成多个进程同时进程；</li>
</ul>
</li>
<li><p>设计：</p>
<ul>
<li>总结：程序设计在某些情况下更简单，也可以有更多的选择</li>
<li>举例：我们有一个应用程序需要从本地系统中读取和处理两个文件，如果你想编写程序，读取和处理数据的时候，你就必须记录哪个文件的读取和处理的状态。相反，如果你使用多线程并发处理，你就可以启动两个线程，每一个线程读取和处理一个文件的读取和操作，线程会在磁盘读取文件的过程中被阻塞，在等待的时候，其他的线程能够使用CPU去处理已经读取完的文件，其结果就是，磁盘总是繁忙的读取文件到内存中，这回带来磁盘和CPU利用率的提升，而且每个线程只需要记录一个文件，因此这个方式也很容易被编程实现。</li>
</ul>
</li>
<li><p>资源利用： </p>
<ul>
<li>CPU能够在等待IO的时候做一些其他的事情</li>
<li>举例：依然是上面的例子，当个应用程序从本地系统中读取和处理文件，从磁盘中读取文件的时候呢，大部分的CPU，时间都用于等待磁盘去读取数据，在这段时间里CPU非常的空闲。它可以做许多事情，通过改变操作顺序更高的利用CPU资源。（这里所说的IO可以是磁盘的IO、网络的IO、或者是用户输入，通常情况下：网络和磁盘的IO比CPU和内存的IO慢很多）</li>
</ul>
</li>
</ul>
<p>并发的风险：</p>
<ul>
<li><p>安全性 </p>
<ul>
<li>总结：多个线程共享数据时可能会产生于期望不相符的结果</li>
</ul>
</li>
<li><p>活跃性 </p>
<ul>
<li>总结：某个操作无法继续进行下去时，就会发生活跃性问题。比如死锁、饥饿等问题…</li>
<li>比如：我们已经知道了，多个线程共享数据时会产生于期望不符的结果，因此我们就会尝试通过加锁等方式来保证我们得到的结果能够符合预期。这个时候呢如果加锁、解锁操作不当、或者有什么异常情况发生，这个时候可能就会引发死锁。</li>
</ul>
</li>
<li><p>性能 </p>
<ul>
<li>总结：线程过多时会使得：CPU 频繁切换，调度时间增多；同步机制；消耗过多内存</li>
<li>说明1：当 CPU 调度不同线程时，它需要更新当前执行线程的数据，程序指针，以及下一个线程的相关信息。这种切换会有额外的时间、空间消耗，我们在开发中应该避免频繁的线程切换。</li>
<li>说明2：多环境情况下必须使用同步机制，这导致了很多编译器想做的优化被抑制。线程过多还会消耗过多内存</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Java并发编程与高并发解决方案</category>
      </categories>
      <tags>
        <tag>Java并发编程与高并发解决方案</tag>
      </tags>
  </entry>
  <entry>
    <title>bootdo已实现(2)</title>
    <url>/2018/07/22/15328488958205/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-用户管理"><a href="#1-用户管理" class="headerlink" title="1.用户管理"></a>1.用户管理</h1><p>点击用户管理  进入页面 页面加载成功时发生了什么</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sys&#x2F;user</span><br><span class="line">UserController</span><br></pre></td></tr></table></figure></div>

<h2 id="01-获取部门tree的数据"><a href="#01-获取部门tree的数据" class="headerlink" title="01:获取部门tree的数据"></a>01:获取部门tree的数据</h2><p>url</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;system&#x2F;sysDept&#x2F;tree	json返回tree，反映部门上下级关系</span><br></pre></td></tr></table></figure></div>

<p>sql</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for &#96;sys_dept&#96;</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS &#96;sys_dept&#96;;</span><br><span class="line">CREATE TABLE &#96;sys_dept&#96; (</span><br><span class="line">  &#96;dept_id&#96; bigint(20) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  &#96;parent_id&#96; bigint(20) DEFAULT NULL COMMENT &#39;上级部门ID，一级部门为0&#39;,</span><br><span class="line">  &#96;name&#96; varchar(50) DEFAULT NULL COMMENT &#39;部门名称&#39;,</span><br><span class="line">  &#96;order_num&#96; int(11) DEFAULT NULL COMMENT &#39;排序&#39;,</span><br><span class="line">  &#96;del_flag&#96; tinyint(4) DEFAULT &#39;0&#39; COMMENT &#39;是否删除  -1：已删除  0：正常&#39;,</span><br><span class="line">  PRIMARY KEY (&#96;dept_id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;16 DEFAULT CHARSET&#x3D;utf8 COMMENT&#x3D;&#39;部门管理&#39;;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Records of sys_dept</span><br><span class="line">-- ----------------------------</span><br><span class="line">INSERT INTO &#96;sys_dept&#96; VALUES (&#39;6&#39;, &#39;0&#39;, &#39;研发部&#39;, &#39;1&#39;, &#39;1&#39;);</span><br><span class="line">INSERT INTO &#96;sys_dept&#96; VALUES (&#39;7&#39;, &#39;6&#39;, &#39;研發一部&#39;, &#39;1&#39;, &#39;1&#39;);</span><br><span class="line">INSERT INTO &#96;sys_dept&#96; VALUES (&#39;8&#39;, &#39;6&#39;, &#39;研发二部&#39;, &#39;2&#39;, &#39;1&#39;);</span><br><span class="line">INSERT INTO &#96;sys_dept&#96; VALUES (&#39;9&#39;, &#39;0&#39;, &#39;销售部&#39;, &#39;2&#39;, &#39;1&#39;);</span><br><span class="line">INSERT INTO &#96;sys_dept&#96; VALUES (&#39;10&#39;, &#39;9&#39;, &#39;销售一部&#39;, &#39;1&#39;, &#39;1&#39;);</span><br><span class="line">INSERT INTO &#96;sys_dept&#96; VALUES (&#39;11&#39;, &#39;0&#39;, &#39;产品部&#39;, &#39;3&#39;, &#39;1&#39;);</span><br><span class="line">INSERT INTO &#96;sys_dept&#96; VALUES (&#39;12&#39;, &#39;11&#39;, &#39;产品一部&#39;, &#39;1&#39;, &#39;1&#39;);</span><br><span class="line">INSERT INTO &#96;sys_dept&#96; VALUES (&#39;13&#39;, &#39;0&#39;, &#39;测试部&#39;, &#39;5&#39;, &#39;1&#39;);</span><br><span class="line">INSERT INTO &#96;sys_dept&#96; VALUES (&#39;14&#39;, &#39;13&#39;, &#39;测试一部&#39;, &#39;1&#39;, &#39;1&#39;);</span><br><span class="line">INSERT INTO &#96;sys_dept&#96; VALUES (&#39;15&#39;, &#39;13&#39;, &#39;测试二部&#39;, &#39;2&#39;, &#39;1&#39;);</span><br></pre></td></tr></table></figure></div>

<p>逆向工程</p>
<p>BuildTree.build</p>
<p>DeptService.getTree</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Tree&lt;DeptDO&gt; <span class="title">getTree</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;DeptDO&gt; sysDepts = deptDao.list(<span class="keyword">new</span> HashMap&lt;String, Object&gt;());</span><br><span class="line">    List&lt;Tree&lt;DeptDO&gt;&gt; trees = <span class="keyword">new</span> ArrayList&lt;Tree&lt;DeptDO&gt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (DeptDO sysDept : sysDepts)&#123;</span><br><span class="line">        Tree&lt;DeptDO&gt; tree = <span class="keyword">new</span> Tree&lt;DeptDO&gt;();</span><br><span class="line">        tree.setId(sysDept.getDeptId().toString());</span><br><span class="line">        tree.setParentId(sysDept.getParentId().toString());</span><br><span class="line">        tree.setText(sysDept.getName());</span><br><span class="line">        Map&lt;String,Object&gt; state = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">        state.put(<span class="string">"opened"</span>,<span class="keyword">true</span>);</span><br><span class="line">        tree.setState(state);</span><br><span class="line">        trees.add(tree);</span><br><span class="line">    &#125;</span><br><span class="line">    Tree&lt;DeptDO&gt; t = BuildTree.build(trees);</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>controller</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"system/sysDept"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DeptService deptService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"tree"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Tree&lt;DeptDO&gt; <span class="title">tree</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Tree&lt;DeptDO&gt; tree = deptService.getTree();</span><br><span class="line">        <span class="keyword">return</span> tree;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>测试：/system/sysDept/tree</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">json</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">"id"</span>:<span class="string">"-1"</span>,<span class="attr">"text"</span>:<span class="string">"顶级节点"</span>,<span class="attr">"state"</span>:&#123;<span class="attr">"opened"</span>:<span class="literal">true</span>&#125;,<span class="attr">"checked"</span>:<span class="literal">true</span>,<span class="attr">"attributes"</span>:<span class="literal">null</span>,<span class="attr">"children"</span>:[&#123;<span class="attr">"id"</span>:<span class="string">"13"</span>,<span class="attr">"text"</span>:<span class="string">"测试部"</span>,<span class="attr">"state"</span>:&#123;<span class="attr">"opened"</span>:<span class="literal">true</span>&#125;,<span class="attr">"checked"</span>:<span class="literal">false</span>,<span class="attr">"attributes"</span>:<span class="literal">null</span>,<span class="attr">"children"</span>:[&#123;<span class="attr">"id"</span>:<span class="string">"15"</span>,<span class="attr">"text"</span>:<span class="string">"测试二部"</span>,<span class="attr">"state"</span>:&#123;<span class="attr">"opened"</span>:<span class="literal">true</span>&#125;,<span class="attr">"checked"</span>:<span class="literal">false</span>,<span class="attr">"attributes"</span>:<span class="literal">null</span>,<span class="attr">"children"</span>:[],<span class="attr">"parentId"</span>:<span class="string">"13"</span>,<span class="attr">"hasParent"</span>:<span class="literal">true</span>,<span class="attr">"hasChildren"</span>:<span class="literal">false</span>&#125;,&#123;<span class="attr">"id"</span>:<span class="string">"14"</span>,<span class="attr">"text"</span>:<span class="string">"测试一部"</span>,<span class="attr">"state"</span>:&#123;<span class="attr">"opened"</span>:<span class="literal">true</span>&#125;,<span class="attr">"checked"</span>:<span class="literal">false</span>,<span class="attr">"attributes"</span>:<span class="literal">null</span>,<span class="attr">"children"</span>:[],<span class="attr">"parentId"</span>:<span class="string">"13"</span>,<span class="attr">"hasParent"</span>:<span class="literal">true</span>,<span class="attr">"hasChildren"</span>:<span class="literal">false</span>&#125;],<span class="attr">"parentId"</span>:<span class="string">"0"</span>,<span class="attr">"hasParent"</span>:<span class="literal">false</span>,<span class="attr">"hasChildren"</span>:<span class="literal">true</span>&#125;,&#123;<span class="attr">"id"</span>:<span class="string">"11"</span>,<span class="attr">"text"</span>:<span class="string">"产品部"</span>,<span class="attr">"state"</span>:&#123;<span class="attr">"opened"</span>:<span class="literal">true</span>&#125;,<span class="attr">"checked"</span>:<span class="literal">false</span>,<span class="attr">"attributes"</span>:<span class="literal">null</span>,<span class="attr">"children"</span>:[&#123;<span class="attr">"id"</span>:<span class="string">"12"</span>,<span class="attr">"text"</span>:<span class="string">"产品一部"</span>,<span class="attr">"state"</span>:&#123;<span class="attr">"opened"</span>:<span class="literal">true</span>&#125;,<span class="attr">"checked"</span>:<span class="literal">false</span>,<span class="attr">"attributes"</span>:<span class="literal">null</span>,<span class="attr">"children"</span>:[],<span class="attr">"parentId"</span>:<span class="string">"11"</span>,<span class="attr">"hasParent"</span>:<span class="literal">true</span>,<span class="attr">"hasChildren"</span>:<span class="literal">false</span>&#125;],<span class="attr">"parentId"</span>:<span class="string">"0"</span>,<span class="attr">"hasParent"</span>:<span class="literal">false</span>,<span class="attr">"hasChildren"</span>:<span class="literal">true</span>&#125;,&#123;<span class="attr">"id"</span>:<span class="string">"9"</span>,<span class="attr">"text"</span>:<span class="string">"销售部"</span>,<span class="attr">"state"</span>:&#123;<span class="attr">"opened"</span>:<span class="literal">true</span>&#125;,<span class="attr">"checked"</span>:<span class="literal">false</span>,<span class="attr">"attributes"</span>:<span class="literal">null</span>,<span class="attr">"children"</span>:[&#123;<span class="attr">"id"</span>:<span class="string">"10"</span>,<span class="attr">"text"</span>:<span class="string">"销售一部"</span>,<span class="attr">"state"</span>:&#123;<span class="attr">"opened"</span>:<span class="literal">true</span>&#125;,<span class="attr">"checked"</span>:<span class="literal">false</span>,<span class="attr">"attributes"</span>:<span class="literal">null</span>,<span class="attr">"children"</span>:[],<span class="attr">"parentId"</span>:<span class="string">"9"</span>,<span class="attr">"hasParent"</span>:<span class="literal">true</span>,<span class="attr">"hasChildren"</span>:<span class="literal">false</span>&#125;],<span class="attr">"parentId"</span>:<span class="string">"0"</span>,<span class="attr">"hasParent"</span>:<span class="literal">false</span>,<span class="attr">"hasChildren"</span>:<span class="literal">true</span>&#125;,&#123;<span class="attr">"id"</span>:<span class="string">"6"</span>,<span class="attr">"text"</span>:<span class="string">"研发部"</span>,<span class="attr">"state"</span>:&#123;<span class="attr">"opened"</span>:<span class="literal">true</span>&#125;,<span class="attr">"checked"</span>:<span class="literal">false</span>,<span class="attr">"attributes"</span>:<span class="literal">null</span>,<span class="attr">"children"</span>:[&#123;<span class="attr">"id"</span>:<span class="string">"8"</span>,<span class="attr">"text"</span>:<span class="string">"研发二部"</span>,<span class="attr">"state"</span>:&#123;<span class="attr">"opened"</span>:<span class="literal">true</span>&#125;,<span class="attr">"checked"</span>:<span class="literal">false</span>,<span class="attr">"attributes"</span>:<span class="literal">null</span>,<span class="attr">"children"</span>:[],<span class="attr">"parentId"</span>:<span class="string">"6"</span>,<span class="attr">"hasParent"</span>:<span class="literal">true</span>,<span class="attr">"hasChildren"</span>:<span class="literal">false</span>&#125;,&#123;<span class="attr">"id"</span>:<span class="string">"7"</span>,<span class="attr">"text"</span>:<span class="string">"研發一部"</span>,<span class="attr">"state"</span>:&#123;<span class="attr">"opened"</span>:<span class="literal">true</span>&#125;,<span class="attr">"checked"</span>:<span class="literal">false</span>,<span class="attr">"attributes"</span>:<span class="literal">null</span>,<span class="attr">"children"</span>:[],<span class="attr">"parentId"</span>:<span class="string">"6"</span>,<span class="attr">"hasParent"</span>:<span class="literal">true</span>,<span class="attr">"hasChildren"</span>:<span class="literal">false</span>&#125;],<span class="attr">"parentId"</span>:<span class="string">"0"</span>,<span class="attr">"hasParent"</span>:<span class="literal">false</span>,<span class="attr">"hasChildren"</span>:<span class="literal">true</span>&#125;],<span class="attr">"parentId"</span>:<span class="string">""</span>,<span class="attr">"hasParent"</span>:<span class="literal">false</span>,<span class="attr">"hasChildren"</span>:<span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="02-列出用户信息"><a href="#02-列出用户信息" class="headerlink" title="02:列出用户信息"></a>02:列出用户信息</h2><p>url</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;sys&#x2F;user&#x2F;list</span><br><span class="line">传入参数params是键值对，用Map接收，包括:limit offset name(按名称查询) deptId</span><br></pre></td></tr></table></figure></div>

<p>sql    测试数据</p>
<p>逆向工程的 mapper.list 可以条件查询，排序，分页</p>
<p>dao service 逆向生成</p>
<p>Query封装查询参数</p>
<p>PageUtils分装分页数据</p>
<p>controller</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/list"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function">PageUtils <span class="title">list</span><span class="params">(@RequestParam Map&lt;String,Object&gt; params)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//query继承map，以key value形式封装所有查询参数</span></span><br><span class="line">    Query query = <span class="keyword">new</span> Query(params);</span><br><span class="line">    List&lt;UserDO&gt; sysUserList = userService.list(query);</span><br><span class="line">    <span class="keyword">int</span> count = userService.count(query);<span class="comment">//查询符合条件的总条数</span></span><br><span class="line">    PageUtils pageUtil = <span class="keyword">new</span> PageUtils(sysUserList,count);</span><br><span class="line">    <span class="keyword">return</span> pageUtil;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>测试 </p>
<p>postman</p>
<p>测分页 limit offset</p>
<p>​    问题：password以密文形式暴露（原版也是）</p>
<p>测试 name deptId</p>
<p>​    name不是模糊查询，是全名匹配</p>
<p>问题：total查的是总记录（原版也是）</p>
<h2 id="03-添加"><a href="#03-添加" class="headerlink" title="03:添加"></a>03:添加</h2><h2 id="04-单个删除"><a href="#04-单个删除" class="headerlink" title="04:单个删除"></a>04:单个删除</h2><h2 id="05-批量删除选中"><a href="#05-批量删除选中" class="headerlink" title="05:批量删除选中"></a>05:批量删除选中</h2><h2 id="06-编辑（修改用户信息）"><a href="#06-编辑（修改用户信息）" class="headerlink" title="06:编辑（修改用户信息）"></a>06:编辑（修改用户信息）</h2><h2 id="07-修改密码"><a href="#07-修改密码" class="headerlink" title="07:修改密码"></a>07:修改密码</h2><h2 id="08-底栏分页信息"><a href="#08-底栏分页信息" class="headerlink" title="08:底栏分页信息"></a>08:底栏分页信息</h2>]]></content>
      <categories>
        <category>JavaEE</category>
      </categories>
      <tags>
        <tag>JavaEE</tag>
      </tags>
  </entry>
  <entry>
    <title>bootdo已实现(1)</title>
    <url>/2018/07/20/15328488619832/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="整合mybatis"><a href="#整合mybatis" class="headerlink" title="整合mybatis"></a>整合mybatis</h1><h2 id="pom"><a href="#pom" class="headerlink" title="pom"></a>pom</h2><p>依赖</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mybatis 分页插件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>逆向工程插件</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis 逆向工程--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">configurationFile</span>&gt;</span>src/main/resources/generatorConfig.xml<span class="tag">&lt;/<span class="name">configurationFile</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">id</span>&gt;</span>Generate MyBatis Artifacts<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">goal</span>&gt;</span>generate<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="yml"><a href="#yml" class="headerlink" title="yml"></a>yml</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">yaml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span> <span class="comment"># ======数据源=========</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://10.211.55.6:3306/mybootdo?useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">machine</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">4869</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">mybatis/**/*Mapper.xml</span>	<span class="comment"># Mapper扫描</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">machine.mybootdo.**.domain</span>	<span class="comment"># 别名</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span>  <span class="comment"># 字段映射用驼峰命名(user_id &gt; userId)</span></span><br></pre></td></tr></table></figure></div>

<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 在springboot启动类上加 @EnableTransactionManagement</span><br><span class="line">2. 在service类或者方法加 @Transactional</span><br></pre></td></tr></table></figure></div>

<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>测试controller</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> machine.mybootdo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> machine.mybootdo.common.config.ApplicationContextRegister;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.MockMvc;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.setup.MockMvcBuilders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.WebApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.Filter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">ControllerTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MockMvc mockMvc;    <span class="comment">//模拟MVC对象</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WebApplicationContext wac;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//加入过滤器</span></span><br><span class="line">        Filter filter = ApplicationContextRegister.getBean(<span class="string">"shiroFilterFactoryBean"</span>);</span><br><span class="line">        <span class="comment">//MockMvcBuilders使用构建MockMvc对象   （项目拦截器有效）</span></span><br><span class="line">        mockMvc = MockMvcBuilders.webAppContextSetup(wac).addFilter(filter).build();</span><br><span class="line">        <span class="comment">//单个类  拦截器无效</span></span><br><span class="line">        <span class="comment">//mockMvc = MockMvcBuilders.standaloneSteup(userController).build();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//模拟post</span></span><br><span class="line">        MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders</span><br><span class="line">                .post(<span class="string">"/login"</span>)</span><br><span class="line">                .param(<span class="string">"username"</span>, <span class="string">"admin"</span>);</span><br><span class="line">                <span class="comment">//.param("password", "123");</span></span><br><span class="line"></span><br><span class="line">        String str = mockMvc.perform(requestBuilder)</span><br><span class="line">                .andReturn().getResponse()</span><br><span class="line">                .getContentAsString();</span><br><span class="line"></span><br><span class="line">        System.out.println(str);</span><br><span class="line">        System.out.println(<span class="string">"======================"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h1 id="开发准备"><a href="#开发准备" class="headerlink" title="开发准备"></a>开发准备</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 逆向工程：</span><br><span class="line">	mapper需要改包名</span><br><span class="line">2. dao需要加@Mapper注释</span><br><span class="line">3. service的接口加 @Service，实现类也加 @Service </span><br><span class="line">4. controller要加controller</span><br><span class="line">5. service实现类要考虑事务 @Transactional </span><br><span class="line">	@Transactional(readOnly &#x3D; true,rollbackFor &#x3D; Exception.class)</span><br></pre></td></tr></table></figure></div>

<h1 id="API管理"><a href="#API管理" class="headerlink" title="API管理"></a>API管理</h1><p>/index：跳转管理页面；加载菜单${menus}；</p>
<h1 id="1-登录（shiro认证）"><a href="#1-登录（shiro认证）" class="headerlink" title="1. 登录（shiro认证）"></a>1. 登录（shiro认证）</h1><p>流程：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">subject.login(token);</span><br><span class="line">&#x2F;&#x2F;此方法请求认证，shiro会调用[自定义realm]验证合法性，若非法，就报错（抱realm里抛出的错误），若合法就正常执行</span><br></pre></td></tr></table></figure></div>

<h2 id="pom-1"><a href="#pom-1" class="headerlink" title="pom"></a>pom</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--shiro--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.shiro&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;shiro-spring&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.3.2&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></div>

<h2 id="表"><a href="#表" class="headerlink" title="表"></a>表</h2><p>sys_user</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- sys_user</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`sys_user`</span> (</span><br><span class="line">  <span class="string">`user_id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户名'</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'密码'</span>,</span><br><span class="line">  <span class="string">`dept_id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`email`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'邮箱'</span>,</span><br><span class="line">  <span class="string">`mobile`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'手机号'</span>,</span><br><span class="line">  <span class="string">`status`</span> <span class="built_in">tinyint</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'状态 0:禁用，1:正常'</span>,</span><br><span class="line">  <span class="string">`user_id_create`</span> <span class="built_in">bigint</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'创建用户id'</span>,</span><br><span class="line">  <span class="string">`gmt_create`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`gmt_modified`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'修改时间'</span>,</span><br><span class="line">  <span class="string">`sex`</span> <span class="built_in">bigint</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'性别'</span>,</span><br><span class="line">  <span class="string">`birth`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'出身日期'</span>,</span><br><span class="line">  <span class="string">`pic_id`</span> <span class="built_in">bigint</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`live_address`</span> <span class="built_in">varchar</span>(<span class="number">500</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'现居住地'</span>,</span><br><span class="line">  <span class="string">`hobby`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'爱好'</span>,</span><br><span class="line">  <span class="string">`province`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'省份'</span>,</span><br><span class="line">  <span class="string">`city`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'所在城市'</span>,</span><br><span class="line">  <span class="string">`district`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'所在地区'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`user_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">138</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`sys_user`</span> <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'admin'</span>, <span class="string">'超级管理员'</span>, <span class="string">'27bd386e70f280e24c2f4f2a549b82cf'</span>, <span class="string">'6'</span>, <span class="string">'admin@example.com'</span>, <span class="string">'17699999999'</span>, <span class="string">'1'</span>, <span class="string">'1'</span>, <span class="string">'2017-08-15 21:40:39'</span>, <span class="string">'2017-08-15 21:41:00'</span>, <span class="string">'96'</span>, <span class="string">'2017-12-14 00:00:00'</span>, <span class="string">'138'</span>, <span class="string">'ccc'</span>, <span class="string">'121;'</span>, <span class="string">'北京市'</span>, <span class="string">'北京市市辖区'</span>, <span class="string">'东城区'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`sys_user`</span> <span class="keyword">VALUES</span> (<span class="string">'2'</span>, <span class="string">'test'</span>, <span class="string">'临时用户'</span>, <span class="string">'6cf3bb3deba2aadbd41ec9a22511084e'</span>, <span class="string">'6'</span>, <span class="string">'test@bootdo.com'</span>, <span class="literal">null</span>, <span class="string">'1'</span>, <span class="string">'1'</span>, <span class="string">'2017-08-14 13:43:05'</span>, <span class="string">'2017-08-14 21:15:36'</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br></pre></td></tr></table></figure></div>



<h2 id="dao-mapper-domain"><a href="#dao-mapper-domain" class="headerlink" title="dao mapper domain"></a>dao mapper domain</h2><p>方法：list</p>
<p>UserDO UserDao UserMapper</p>
<h2 id="ShiroConfig"><a href="#ShiroConfig" class="headerlink" title="ShiroConfig"></a>ShiroConfig</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> machine.mybootdo.system.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> machine.mybootdo.system.shiro.UserRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.spring.web.ShiroFilterFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.mgt.SecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.web.mgt.DefaultWebSecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span>  <span class="comment">//相当于spring核心配置文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">		用户自定义realm域，校验数据合法性</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">UserRealm <span class="title">userRealm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        UserRealm userRealm = <span class="keyword">new</span> UserRealm();</span><br><span class="line">        <span class="keyword">return</span> userRealm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SecurityManager <span class="title">securityManager</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DefaultWebSecurityManager securityManager =  <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">        <span class="comment">//设置realm</span></span><br><span class="line">        securityManager.setRealm(userRealm());</span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">ShiroFilterFactoryBean <span class="title">shiroFilterFactoryBean</span><span class="params">(SecurityManager securityManager)</span> </span>&#123;</span><br><span class="line">        ShiroFilterFactoryBean shiroFilterFactoryBean = <span class="keyword">new</span> ShiroFilterFactoryBean();</span><br><span class="line">        shiroFilterFactoryBean.setSecurityManager(securityManager);</span><br><span class="line">        shiroFilterFactoryBean.setLoginUrl(<span class="string">"/login"</span>);</span><br><span class="line">        shiroFilterFactoryBean.setSuccessUrl(<span class="string">"/index"</span>);</span><br><span class="line">        shiroFilterFactoryBean.setUnauthorizedUrl(<span class="string">"/403"</span>);</span><br><span class="line">        LinkedHashMap&lt;String, String&gt; filterChainDefinitionMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">"/css/**"</span>, <span class="string">"anon"</span>);<span class="comment">//静态资源可以匿名访问</span></span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">"/js/**"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">"/fonts/**"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">"/img/**"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">"/docs/**"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">"/"</span>, <span class="string">"anon"</span>);<span class="comment">//首页</span></span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">"/**"</span>, <span class="string">"authc"</span>);<span class="comment">//其他资源必须认证才能访问</span></span><br><span class="line">        shiroFilterFactoryBean.setFilterChainDefinitionMap(filterChainDefinitionMap);</span><br><span class="line">        <span class="keyword">return</span> shiroFilterFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="UserRealm"><a href="#UserRealm" class="headerlink" title="UserRealm"></a>UserRealm</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> machine.mybootdo.system.shiro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> machine.mybootdo.common.config.ApplicationContextRegister;</span><br><span class="line"><span class="keyword">import</span> machine.mybootdo.system.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> machine.mybootdo.system.domain.UserDO;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.AuthorizationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.AuthorizingRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.PrincipalCollection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span></span>&#123;</span><br><span class="line">    <span class="comment">//授权</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//认证</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line"></span><br><span class="line">        String username = (String) token.getPrincipal();</span><br><span class="line">        <span class="comment">//报错：java.lang.ClassCastException</span></span><br><span class="line">        <span class="comment">//String password = (String) token.getCredentials();</span></span><br><span class="line">        String password = <span class="keyword">new</span> String((<span class="keyword">char</span>[])token.getCredentials());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//校验数据，抛异常</span></span><br><span class="line">        <span class="comment">//  获取容器bean，因为只有该方法需要userDao ，不需要声明为private</span></span><br><span class="line">        UserDao userDao = ApplicationContextRegister.getBean(UserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        map.put(<span class="string">"username"</span>,username);</span><br><span class="line">        List&lt;UserDO&gt; list = userDao.list(map);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//错误：账号不存在</span></span><br><span class="line">        <span class="keyword">if</span> (list==<span class="keyword">null</span> || list.size()==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnknownAccountException(<span class="string">"账号或密码不正确"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        UserDO user = list.get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//错误：密码错误</span></span><br><span class="line">        <span class="keyword">if</span>(!password.equals(user.getPassword()))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IncorrectCredentialsException(<span class="string">"账号或密码不正确"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//错误：账号锁定</span></span><br><span class="line">        <span class="keyword">if</span> (user.getStatus() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LockedAccountException(<span class="string">"账号已被锁定,请联系管理员"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        SimpleAuthenticationInfo info = <span class="keyword">new</span> SimpleAuthenticationInfo(username, password, getName());</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="utils"><a href="#utils" class="headerlink" title="utils"></a>utils</h2><h3 id="ApplicationContextRegister"><a href="#ApplicationContextRegister" class="headerlink" title="ApplicationContextRegister"></a>ApplicationContextRegister</h3><p>getbean方法</p>
<h3 id="R"><a href="#R" class="headerlink" title="R"></a>R</h3><p>表单提交 状态返回</p>
<h2 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h2><p>LoginController.ajaxLogin</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">ajaxLogin</span><span class="params">(String username, String password)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">       --输入校验</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    SecurityManager securityManager = ApplicationContextRegister.getBean(SecurityManager<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    Subject subject = SecurityUtils.getSubject();</span><br><span class="line">    password = MD5Utils.encrypt(username,password);<span class="comment">//密码加密</span></span><br><span class="line">    UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(username,password);</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        subject.login(token);<span class="comment">//会调用UserRealm进行校验，校验失败就抛出异常</span></span><br><span class="line">        <span class="keyword">return</span> R.ok();</span><br><span class="line">    &#125;<span class="keyword">catch</span> (AuthenticationException e)&#123;</span><br><span class="line">        <span class="keyword">return</span> R.error(e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="ui"><a href="#ui" class="headerlink" title="ui"></a>ui</h2><p>ajax post提交 参数：username password</p>
<h1 id="2-加载菜单列表（用户角色菜单）"><a href="#2-加载菜单列表（用户角色菜单）" class="headerlink" title="2. 加载菜单列表（用户角色菜单）"></a>2. 加载菜单列表（用户角色菜单）</h1><p>根据用户id加载用户可操作的菜单列表</p>
<h2 id="表-1"><a href="#表-1" class="headerlink" title="表"></a>表</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sys_user	</span><br><span class="line">sys_role</span><br><span class="line">sys_menu</span><br><span class="line">sys_user_role</span><br><span class="line">sys_role_menu</span><br></pre></td></tr></table></figure></div>



<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- sys_role</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`sys_role`</span> (</span><br><span class="line">  <span class="string">`role_id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`role_name`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'角色名称'</span>,</span><br><span class="line">  <span class="string">`role_sign`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'角色标识'</span>,</span><br><span class="line">  <span class="string">`remark`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'备注'</span>,</span><br><span class="line">  <span class="string">`user_id_create`</span> <span class="built_in">bigint</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'创建用户id'</span>,</span><br><span class="line">  <span class="string">`gmt_create`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`gmt_modified`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`role_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">2</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COMMENT</span>=<span class="string">'角色'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`sys_role`</span> <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'超级用户角色'</span>, <span class="string">'admin'</span>, <span class="string">'拥有最高权限'</span>, <span class="string">'2'</span>, <span class="string">'2017-08-12 00:43:52'</span>, <span class="string">'2017-08-12 19:14:59'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- sys_menu</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`sys_menu`</span> (</span><br><span class="line">  <span class="string">`menu_id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`parent_id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'父菜单ID，一级菜单为0'</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'菜单名称'</span>,</span><br><span class="line">  <span class="string">`url`</span> <span class="built_in">varchar</span>(<span class="number">200</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'菜单URL'</span>,</span><br><span class="line">  <span class="string">`perms`</span> <span class="built_in">varchar</span>(<span class="number">500</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'授权(多个用逗号分隔，如：user:list,user:create)'</span>,</span><br><span class="line">  <span class="string">`type`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'类型   0：目录   1：菜单   2：按钮'</span>,</span><br><span class="line">  <span class="string">`icon`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'菜单图标'</span>,</span><br><span class="line">  <span class="string">`order_num`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'排序'</span>,</span><br><span class="line">  <span class="string">`gmt_create`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`gmt_modified`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'修改时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`menu_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">102</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COMMENT</span>=<span class="string">'菜单管理'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`sys_menu`</span> <span class="keyword">VALUES</span> (<span class="string">'3'</span>, <span class="string">'0'</span>, <span class="string">'系统管理'</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="string">'0'</span>, <span class="string">'fa fa-desktop'</span>, <span class="string">'1'</span>, <span class="string">'2017-08-09 23:06:55'</span>, <span class="string">'2017-08-14 14:13:43'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`sys_menu`</span> <span class="keyword">VALUES</span> (<span class="string">'6'</span>, <span class="string">'3'</span>, <span class="string">'用户管理'</span>, <span class="string">'sys/user/'</span>, <span class="string">'sys:user:user'</span>, <span class="string">'1'</span>, <span class="string">'fa fa-user'</span>, <span class="string">'0'</span>, <span class="string">'2017-08-10 14:12:11'</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- sys_user_role</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`sys_user_role`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`sys_user_role`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`user_id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户ID'</span>,</span><br><span class="line">  <span class="string">`role_id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'角色ID'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">134</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COMMENT</span>=<span class="string">'用户与角色对应关系'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`sys_user_role`</span> <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'1'</span>, <span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`sys_user_role`</span> <span class="keyword">VALUES</span> (<span class="string">'2'</span>, <span class="string">'2'</span>, <span class="string">'1'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- sys_role_menu</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`sys_role_menu`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`role_id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'角色ID'</span>,</span><br><span class="line">  <span class="string">`menu_id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'菜单ID'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">2988</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COMMENT</span>=<span class="string">'角色与菜单对应关系'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`sys_role_menu`</span> <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'1'</span>, <span class="string">'6'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`sys_role_menu`</span> <span class="keyword">VALUES</span> (<span class="string">'2'</span>, <span class="string">'1'</span>, <span class="string">'3'</span>);</span><br></pre></td></tr></table></figure></div>



<h2 id="dao-mapper-domain-1"><a href="#dao-mapper-domain-1" class="headerlink" title="dao mapper domain"></a>dao mapper domain</h2><p>方法：listMenuByUserId</p>
<p>MenuDO</p>
<p>MenuDao</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">List&lt;MenuDO&gt; listMenuByUserId(Long id);</span><br></pre></td></tr></table></figure></div>

<p>MenuMapper.xml</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;listMenuByUserId&quot; resultType&#x3D;&quot;machine.mybootdo.system.domain.MenuDO&quot;&gt;</span><br><span class="line">	select distinct</span><br><span class="line">		m.menu_id , parent_id, name, url,</span><br><span class="line">		perms,&#96;type&#96;,icon,order_num,gmt_create, gmt_modified</span><br><span class="line">	from sys_menu m</span><br><span class="line">	left join sys_role_menu rm on m.menu_id &#x3D; rm.menu_id</span><br><span class="line">	left join sys_user_role ur on rm.role_id &#x3D;ur.role_id</span><br><span class="line">	where ur.user_id &#x3D; #&#123;id&#125;</span><br><span class="line">		and m.type in(0,1)</span><br><span class="line">	order by m.order_num</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure></div>

<p>说明：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 以上sql：列出某个用户所拥有的全部菜单操作</span><br><span class="line">-- 一个用户有多个角色 ，不同的角色有重复的菜单 ；left join后一个用户就会有多个重复菜单，因此要distinct</span><br></pre></td></tr></table></figure></div>

<h2 id="service"><a href="#service" class="headerlink" title="service"></a>service</h2><p>@Transactional(readOnly = true,rollbackFor = Exception.class)</p>
<p>MenuService</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">public List&lt;Tree&lt;MenuDO&gt;&gt; listMenuTree(Long id) &#123;</span><br><span class="line"></span><br><span class="line">	List&lt;Tree&lt;MenuDO&gt;&gt; trees &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">	List&lt;MenuDO&gt; menuDOs &#x3D; menuDao.listMenuByUserId(id);</span><br><span class="line">	for(MenuDO sysMenuDO : menuDOs)&#123;</span><br><span class="line">		Tree&lt;MenuDO&gt; tree &#x3D; new Tree&lt;MenuDO&gt;();</span><br><span class="line">		tree.setId(sysMenuDO.getMenuId().toString());</span><br><span class="line">		tree.setText(sysMenuDO.getName());</span><br><span class="line">		tree.setParentId(sysMenuDO.getParentId().toString());</span><br><span class="line">		Map&lt;String,Object&gt; attributes &#x3D; new HashMap&lt;&gt;();</span><br><span class="line">		attributes.put(&quot;url&quot;,sysMenuDO.getUrl());</span><br><span class="line">		attributes.put(&quot;icon&quot;,sysMenuDO.getIcon());</span><br><span class="line">		tree.setAttributes(attributes);</span><br><span class="line">		trees.add(tree);</span><br><span class="line">	&#125;</span><br><span class="line">	&#x2F;&#x2F;完善Tree里的字段（添加父子关系）</span><br><span class="line">	List&lt;Tree&lt;MenuDO&gt;&gt; list &#x3D; BuildTree.buildList(trees, &quot;0&quot;);</span><br><span class="line">	return list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="controller-1"><a href="#controller-1" class="headerlink" title="controller"></a>controller</h2><p>LoginController extends BaseController</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@GetMapping(&quot;&#x2F;index&quot;)</span><br><span class="line">public String index(Model model)&#123;</span><br><span class="line">    List&lt;Tree&lt;MenuDO&gt;&gt; menus &#x3D; menuService.listMenuTree(getUserId());&#x2F;&#x2F;查询该用户可操作的菜单列表</span><br><span class="line">    model.addAttribute(&quot;menus&quot;,menus);</span><br><span class="line">    return &quot;index_v1&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="utils-1"><a href="#utils-1" class="headerlink" title="utils"></a>utils</h2><p>fastjson</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;fastjson&lt;&#x2F;artifactId&gt;</span><br><span class="line">	&lt;version&gt;1.2.31&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></div>

<h3 id="Tree"><a href="#Tree" class="headerlink" title="Tree"></a>Tree</h3><p>菜单树</p>
<h3 id="BuildTree"><a href="#BuildTree" class="headerlink" title="BuildTree"></a>BuildTree</h3><p>buildList方法    构建菜单树</p>
<h3 id="ShiroUtils"><a href="#ShiroUtils" class="headerlink" title="ShiroUtils"></a>ShiroUtils</h3><h3 id="BaseController"><a href="#BaseController" class="headerlink" title="BaseController"></a>BaseController</h3><h2 id="ui-1"><a href="#ui-1" class="headerlink" title="ui"></a>ui</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;li th:each&#x3D;&quot;menu : $&#123;menus&#125;&quot;&gt;</span><br><span class="line">    &lt;a href&#x3D;&quot;#&quot;&gt;</span><br><span class="line">        &lt;i class&#x3D;&quot;fa fa-home&quot; th:class&#x3D;&quot;$&#123;menu.attributes.icon&#125;&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">        &lt;span class&#x3D;&quot;nav-label&quot; th:text&#x3D;&quot;$&#123;menu.text&#125;&quot;&gt;一级菜单&lt;&#x2F;span&gt; &lt;span class&#x3D;&quot;fa arrow&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">    &lt;&#x2F;a&gt;</span><br><span class="line">    &lt;ul class&#x3D;&quot;nav nav-second-level&quot;&gt;</span><br><span class="line">        &lt;li th:each&#x3D;&quot;cmenu : $&#123;menu.children&#125;&quot;&gt;</span><br><span class="line">            &lt;a class&#x3D;&quot;J_menuItem&quot; href&#x3D;&quot;index_v1.html&quot;</span><br><span class="line">               th:text&#x3D;&quot;$&#123;cmenu.text&#125;&quot; th:href&#x3D;&quot;$&#123;cmenu.attributes.url&#125;&quot;&gt;二级菜单&lt;&#x2F;a&gt;</span><br><span class="line">        &lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;li&gt;</span><br></pre></td></tr></table></figure></div>





<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span></span><br><span class="line">	m.menu_id , parent_id, <span class="keyword">name</span>, <span class="keyword">url</span>,</span><br><span class="line">	perms,<span class="string">`type`</span>,icon,order_num,gmt_create, gmt_modified</span><br><span class="line"><span class="keyword">from</span> sys_menu m</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> sys_role_menu rm <span class="keyword">on</span> m.menu_id = rm.menu_id</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> sys_user_role ur <span class="keyword">on</span> rm.role_id =ur.role_id</span><br><span class="line"><span class="keyword">where</span> ur.user_id = <span class="comment">#&#123;id&#125;</span></span><br><span class="line">	<span class="keyword">and</span> m.type <span class="keyword">in</span>(<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> m.order_num</span><br></pre></td></tr></table></figure></div>

<h1 id="3-shiro-缓存"><a href="#3-shiro-缓存" class="headerlink" title="3. shiro+缓存"></a>3. shiro+缓存</h1><blockquote>
<p>给shiro配置缓存，用户操作时会多次查询认证信息，只需要首次查数据库，之后都从缓存取，减少数据库查询次数，提高效率</p>
</blockquote>
<h2 id="前置知识："><a href="#前置知识：" class="headerlink" title="前置知识："></a>前置知识：</h2><h3 id="springboot-redis-jedis操作"><a href="#springboot-redis-jedis操作" class="headerlink" title="springboot+redis+jedis操作"></a>springboot+redis+jedis操作</h3><p>pom</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--redis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>配置：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">yaml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">	<span class="attr">redis:</span></span><br><span class="line">        <span class="attr">host:</span> <span class="number">10.211</span><span class="number">.55</span><span class="number">.6</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">        <span class="attr">password:</span></span><br><span class="line">        <span class="comment"># 连接超时时间（毫秒）</span></span><br><span class="line">        <span class="attr">timeout:</span> <span class="number">10000</span></span><br><span class="line">        <span class="attr">jedis:</span></span><br><span class="line">          <span class="attr">pool:</span></span><br><span class="line">            <span class="comment"># 连接池中的最大空闲连接</span></span><br><span class="line">            <span class="attr">max-idle:</span> <span class="number">8</span></span><br><span class="line">            <span class="comment"># 连接池中的最小空闲连接</span></span><br><span class="line">            <span class="attr">min-idle:</span> <span class="number">10</span></span><br><span class="line">            <span class="comment"># 连接池最大连接数（使用负值表示没有限制）</span></span><br><span class="line">            <span class="attr">max-active:</span> <span class="number">100</span></span><br><span class="line">            <span class="comment"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span></span><br><span class="line">            <span class="attr">max-wait:</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure></div>

<p>操作类 RedisManager</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisManager</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.redis.host&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String host = <span class="string">"127.0.0.1"</span>;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.redis.port&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port = <span class="number">6379</span>;</span><br><span class="line">    <span class="comment">// 缓存过期时间，0表示不过期</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> expire = <span class="number">0</span>;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.redis.timeout&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> timeout = <span class="number">0</span>;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.redis.password&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String password = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JedisPool jedisPool = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化方法：创建jedisPool</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (jedisPool == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (password != <span class="keyword">null</span> &amp;&amp; !<span class="string">""</span>.equals(password)) &#123;</span><br><span class="line">                jedisPool = <span class="keyword">new</span> JedisPool(<span class="keyword">new</span> JedisPoolConfig(), host, port, timeout, password);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (timeout != <span class="number">0</span>) &#123;</span><br><span class="line">                jedisPool = <span class="keyword">new</span> JedisPool(<span class="keyword">new</span> JedisPoolConfig(), host, port, timeout);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                jedisPool = <span class="keyword">new</span> JedisPool(<span class="keyword">new</span> JedisPoolConfig(), host, port);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * get value from redis</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] get(<span class="keyword">byte</span>[] key) &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] value = <span class="keyword">null</span>;</span><br><span class="line">        Jedis jedis = jedisPool.getResource();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            value = jedis.get(key);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (jedis != <span class="keyword">null</span>) &#123;</span><br><span class="line">                jedis.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * set</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] set(<span class="keyword">byte</span>[] key, <span class="keyword">byte</span>[] value) &#123;</span><br><span class="line">        Jedis jedis = jedisPool.getResource();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            jedis.set(key, value);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.expire != <span class="number">0</span>) &#123;</span><br><span class="line">                jedis.expire(key, <span class="keyword">this</span>.expire);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (jedis != <span class="keyword">null</span>) &#123;</span><br><span class="line">                jedis.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * set</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expire</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] set(<span class="keyword">byte</span>[] key, <span class="keyword">byte</span>[] value, <span class="keyword">int</span> expire) &#123;</span><br><span class="line">        Jedis jedis = jedisPool.getResource();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            jedis.set(key, value);</span><br><span class="line">            <span class="keyword">if</span> (expire != <span class="number">0</span>) &#123;</span><br><span class="line">                jedis.expire(key, expire);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (jedis != <span class="keyword">null</span>) &#123;</span><br><span class="line">                jedis.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * del</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">byte</span>[] key)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = jedisPool.getResource();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            jedis.del(key);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (jedis != <span class="keyword">null</span>) &#123;</span><br><span class="line">                jedis.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * flush</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flushDB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Jedis jedis = jedisPool.getResource();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            jedis.flushDB();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (jedis != <span class="keyword">null</span>) &#123;</span><br><span class="line">                jedis.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * size</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">dbSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Long dbSize = <span class="number">0L</span>;</span><br><span class="line">        Jedis jedis = jedisPool.getResource();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            dbSize = jedis.dbSize();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (jedis != <span class="keyword">null</span>) &#123;</span><br><span class="line">                jedis.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dbSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * keys</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> regex</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;<span class="keyword">byte</span>[]&gt; keys(String pattern) &#123;</span><br><span class="line">        Set&lt;<span class="keyword">byte</span>[]&gt; keys = <span class="keyword">null</span>;</span><br><span class="line">        Jedis jedis = jedisPool.getResource();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            keys = jedis.keys(pattern.getBytes());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (jedis != <span class="keyword">null</span>) &#123;</span><br><span class="line">                jedis.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> keys;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>


<h3 id="springboot-日志slf4j"><a href="#springboot-日志slf4j" class="headerlink" title="springboot+日志slf4j"></a>springboot+日志slf4j</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring-boot-starter-logging依赖了slf4j-api和log4j-api</span><br><span class="line"></span><br><span class="line">SLF4J的全称是Simple Logging Facade for Java，即简单日志门面。SLF4J并不是具体的日志框架，而是作为一个简单门面服务于各类日志框架，如java.util.logging, logback和log4j。</span><br></pre></td></tr></table></figure></div>

<p>使用</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(CommonTest<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//&#123;&#125;表示通配符</span></span><br><span class="line">    logger.info(<span class="string">"Current Time: &#123;&#125;"</span>, System.currentTimeMillis());</span><br><span class="line">    logger.info(<span class="string">"Current Time: "</span> + System.currentTimeMillis());</span><br><span class="line">    logger.trace(<span class="string">"trace log"</span>);</span><br><span class="line">    logger.warn(<span class="string">"warn log"</span>);</span><br><span class="line">    logger.debug(<span class="string">"debug log"</span>);</span><br><span class="line">    logger.info(<span class="string">"info log"</span>);</span><br><span class="line">    logger.error(<span class="string">"error log"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>


<h3 id="java序列化"><a href="#java序列化" class="headerlink" title="java序列化"></a>java序列化</h3><p>概念：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">序列化 (Serialization)将对象的状态信息转换为可以存储或传输的形式的过程(一个对象可以被表示为一个字节序列)。以后，可以通过从存储区中读取或反序列化对象的状态，重新创建该对象。</span><br><span class="line"></span><br><span class="line">java对象实现Serializable接口表示该对象可以序列化</span><br></pre></td></tr></table></figure></div>



<p>将对象序列化为字节序列</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> machine.mybootdo.common.redis.shiro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 对象序列化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerializeUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(SerializeUtils<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 序列化</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> object</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] serialize(Object object) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] result = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ByteArrayOutputStream byteStream = <span class="keyword">new</span> ByteArrayOutputStream(<span class="number">128</span>);</span><br><span class="line">            <span class="keyword">try</span>  &#123;</span><br><span class="line">                <span class="keyword">if</span> (!(object <span class="keyword">instanceof</span> Serializable)) &#123;</span><br><span class="line">                    throw new IllegalArgumentException(SerializeUtils.class.getSimpleName() + " requires a Serializable payload " +</span><br><span class="line">                            <span class="string">"but received an object of type ["</span> + object.getClass().getName() + <span class="string">"]"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                ObjectOutputStream objectOutputStream = <span class="keyword">new</span> ObjectOutputStream(byteStream);</span><br><span class="line">                objectOutputStream.writeObject(object);</span><br><span class="line">                objectOutputStream.flush();</span><br><span class="line">                result =  byteStream.toByteArray();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"Failed to serialize"</span>, ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            logger.error(<span class="string">"Failed to serialize"</span>,ex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 反序列化</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bytes</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">deserialize</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Object result = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isEmpty(bytes)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ByteArrayInputStream byteStream = <span class="keyword">new</span> ByteArrayInputStream(bytes);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ObjectInputStream objectInputStream = <span class="keyword">new</span> ObjectInputStream(byteStream);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    result = objectInputStream.readObject();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"Failed to deserialize object type"</span>, ex);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"Failed to deserialize"</span>, ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">"Failed to deserialize"</span>,e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">(<span class="keyword">byte</span>[] data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (data == <span class="keyword">null</span> || data.length == <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>


<h2 id="法1-内置ehcache缓存"><a href="#法1-内置ehcache缓存" class="headerlink" title="法1.内置ehcache缓存"></a>法1.内置ehcache缓存</h2><p>pom</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sf.ehcache<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ehcache-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>缓存配置 ehcache.xml</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">"http://ehcache.org/ehcache.xsd"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">updateCheck</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">"java.io.tmpdir/Tmp_EhCache"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">defaultCache</span> <span class="attr">eternal</span>=<span class="string">"false"</span> <span class="attr">maxElementsInMemory</span>=<span class="string">"1000"</span></span></span><br><span class="line"><span class="tag">		<span class="attr">overflowToDisk</span>=<span class="string">"false"</span> <span class="attr">diskPersistent</span>=<span class="string">"false"</span> <span class="attr">timeToIdleSeconds</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">		<span class="attr">timeToLiveSeconds</span>=<span class="string">"600"</span> <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">"LRU"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">cache</span> <span class="attr">name</span>=<span class="string">"role"</span> <span class="attr">eternal</span>=<span class="string">"false"</span> <span class="attr">maxElementsInMemory</span>=<span class="string">"10000"</span></span></span><br><span class="line"><span class="tag">		<span class="attr">overflowToDisk</span>=<span class="string">"false"</span> <span class="attr">diskPersistent</span>=<span class="string">"false"</span> <span class="attr">timeToIdleSeconds</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">		<span class="attr">timeToLiveSeconds</span>=<span class="string">"0"</span> <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">"LFU"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--diskStore：</span></span><br><span class="line"><span class="comment">		磁盘存储：将缓存中暂时不使用的对象,转移到硬盘,类似于Windows系统的虚拟内存</span></span><br><span class="line"><span class="comment">		path:指定在硬盘上存储对象的路径</span></span><br><span class="line"><span class="comment">			user.home：用户的家目录。</span></span><br><span class="line"><span class="comment">			user.dir：用户的当前工作目录。</span></span><br><span class="line"><span class="comment">			java.io.tmpdir：Java临时目录。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--defaultCache:</span></span><br><span class="line"><span class="comment">		默认的缓存配置信息,如果不加特殊说明,则所有对象按照此配置项处理</span></span><br><span class="line"><span class="comment">		maxElementsInMemory:设置了缓存的上限,最多存储多少个记录对象</span></span><br><span class="line"><span class="comment">		eternal:代表对象是否永不过期</span></span><br><span class="line"><span class="comment">		timeToIdleSeconds:最大的发呆时间</span></span><br><span class="line"><span class="comment">		timeToLiveSeconds:最大的存活时间</span></span><br><span class="line"><span class="comment">		overflowToDisk:是否允许对象被写入到磁盘</span></span><br><span class="line"><span class="comment">	  --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--cache配置：</span></span><br><span class="line"><span class="comment">		以下属性是必须的：</span></span><br><span class="line"><span class="comment">		name ：cache的标识符，在一个CacheManager中必须唯一。</span></span><br><span class="line"><span class="comment">		maxElementsInMemory ： 在内存中缓存的element的最大数目。</span></span><br><span class="line"><span class="comment">		maxElementsOnDisk：在磁盘上缓存的element的最大数目，默认值为0，表示不限制。</span></span><br><span class="line"><span class="comment">		overflowToDisk ： 设定当内存缓存溢出的时候是否将过期的element缓存到磁盘上。</span></span><br><span class="line"><span class="comment">		eternal：设定缓存的elements是否永远不过期。如果为true，则缓存的数据始终有效，如果为false那么还要根据timeToIdleSeconds，timeToLiveSeconds判断。</span></span><br><span class="line"><span class="comment">		以下属性是可选的：</span></span><br><span class="line"><span class="comment">		diskPersistent ： 在VM重启的时候是否持久化磁盘缓存，默认是false。</span></span><br><span class="line"><span class="comment">		timeToIdleSeconds： 对象空闲时间，指对象在多长时间没有被访问就会失效。只对eternal为false的有效。默认值0，表示一直可以访问</span></span><br><span class="line"><span class="comment">		timeToLiveSeconds： 对象存活时间，指对象从创建到失效所需要的时间。只对eternal为false的有效。默认值0，表示一直可以访问。</span></span><br><span class="line"><span class="comment">		memoryStoreEvictionPolicy ： 当内存缓存达到最大，有新的element加入的时候，移除缓存中element的策略。默认是LRU，可选的有LFU和FIFO</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--置换算法：</span></span><br><span class="line"><span class="comment">		LRU:LRU是Least Recently Used 的缩写 LRU缓存把最近最少使用的数据移除，让给最新读取的数据。而往往最常读取的，也是读取次数最多的，所以，利用LRU缓存，我们能够提高系统的performance(性能)</span></span><br><span class="line"><span class="comment">		LFU:LFU是最近最不常用页面置换算法(Least Frequently Used),也就是淘汰一定时期内被访问次数最少的页!</span></span><br><span class="line"><span class="comment">		FIFO:FIFO(First In First Out ，先进先出)算法是根据先进先出原理来淘汰数据的，实现上是最简单的一种,具体算法如下：</span></span><br><span class="line"><span class="comment">		 1. 新访问的数据插入FIFO队列尾部，数据在FIFO队列中顺序移动；</span></span><br><span class="line"><span class="comment">		 2. 淘汰FIFO队列头部的数据；</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>shiro配置</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ehCacheManager</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> EhCacheManager <span class="title">ehCacheManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    EhCacheManager em = <span class="keyword">new</span> EhCacheManager();</span><br><span class="line">    em.setCacheManagerConfigFile(<span class="string">"classpath:config/ehcache.xml"</span>);</span><br><span class="line">    <span class="keyword">return</span> em;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>再：securityManager.setCacheManager(ehCacheManager());</p>
<h2 id="法2-自定义redis缓存"><a href="#法2-自定义redis缓存" class="headerlink" title="法2.自定义redis缓存"></a>法2.自定义redis缓存</h2><p>RedisCache</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> machine.mybootdo.common.redis.shiro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.cache.Cache;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.cache.CacheException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.CollectionUtils;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 自定义shiro的redis缓存，将数据存到redis中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisCache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Cache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The wrapped Jedis instance.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> RedisManager cache;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The Redis key prefix for the sessions</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String keyPrefix = <span class="string">"shiro_redis_session:"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getKeyPrefix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> keyPrefix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setKeyPrefix</span><span class="params">(String keyPrefix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.keyPrefix = keyPrefix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过一个JedisManager实例构造RedisCache</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedisCache</span><span class="params">(RedisManager cache)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cache == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Cache argument cannot be null."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.cache = cache;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs a cache instance with the specified</span></span><br><span class="line"><span class="comment">     * Redis manager and using a custom key prefix.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cache The cache manager instance</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> prefix The Redis key prefix</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedisCache</span><span class="params">(RedisManager cache,</span></span></span><br><span class="line"><span class="function"><span class="params">                      String prefix)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>( cache );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// set the prefix</span></span><br><span class="line">        <span class="keyword">this</span>.keyPrefix = prefix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得byte[]型的key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] getByteKey(K key)&#123;</span><br><span class="line">        <span class="keyword">if</span>(key <span class="keyword">instanceof</span> String)&#123;</span><br><span class="line">            String preKey = <span class="keyword">this</span>.keyPrefix + key;</span><br><span class="line">            <span class="keyword">return</span> preKey.getBytes();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> SerializeUtils.serialize(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K key)</span> <span class="keyword">throws</span> CacheException </span>&#123;</span><br><span class="line">        logger.debug(<span class="string">"根据key从Redis中获取对象 key ["</span> + key + <span class="string">"]"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (key == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">byte</span>[] rawValue = cache.get(getByteKey(key));</span><br><span class="line">                <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">                V value = (V)SerializeUtils.deserialize(rawValue);</span><br><span class="line">                <span class="keyword">return</span> value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> CacheException(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> <span class="keyword">throws</span> CacheException </span>&#123;</span><br><span class="line">        logger.debug(<span class="string">"根据key从存储 key ["</span> + key + <span class="string">"]"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            cache.set(getByteKey(key), SerializeUtils.serialize(value));</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> CacheException(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(K key)</span> <span class="keyword">throws</span> CacheException </span>&#123;</span><br><span class="line">        logger.debug(<span class="string">"从redis中删除 key ["</span> + key + <span class="string">"]"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            V previous = get(key);</span><br><span class="line">            cache.del(getByteKey(key));</span><br><span class="line">            <span class="keyword">return</span> previous;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> CacheException(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> <span class="keyword">throws</span> CacheException </span>&#123;</span><br><span class="line">        logger.debug(<span class="string">"从redis中删除所有元素"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            cache.flushDB();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> CacheException(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long longSize = <span class="keyword">new</span> Long(cache.dbSize());</span><br><span class="line">            <span class="keyword">return</span> longSize.intValue();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> CacheException(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取匹配前缀的所有key</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;K&gt; <span class="title">keys</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Set&lt;<span class="keyword">byte</span>[]&gt; keys = cache.keys(<span class="keyword">this</span>.keyPrefix + <span class="string">"*"</span>);</span><br><span class="line">            <span class="keyword">if</span> (CollectionUtils.isEmpty(keys)) &#123;</span><br><span class="line">                <span class="keyword">return</span> Collections.emptySet();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                Set&lt;K&gt; newKeys = <span class="keyword">new</span> HashSet&lt;K&gt;();</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">byte</span>[] key:keys)&#123;</span><br><span class="line">                    newKeys.add((K)key);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> newKeys;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> CacheException(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取keys对应的value集合</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;V&gt; <span class="title">values</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Set&lt;<span class="keyword">byte</span>[]&gt; keys = cache.keys(<span class="keyword">this</span>.keyPrefix + <span class="string">"*"</span>);</span><br><span class="line">            <span class="keyword">if</span> (!CollectionUtils.isEmpty(keys)) &#123;</span><br><span class="line">                List&lt;V&gt; values = <span class="keyword">new</span> ArrayList&lt;V&gt;(keys.size());</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">byte</span>[] key : keys) &#123;</span><br><span class="line">                    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">                    V value = get((K)key);</span><br><span class="line">                    <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        values.add(value);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> Collections.unmodifiableList(values);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> CacheException(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>RedisCacheManager</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> machine.mybootdo.common.redis.shiro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.cache.Cache;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.cache.CacheException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.cache.CacheManager;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 自定义shiro的redis缓存管理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisCacheManager</span> <span class="keyword">implements</span> <span class="title">CacheManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory</span><br><span class="line">            .getLogger(RedisCacheManager<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// fast lookup by name map</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ConcurrentMap&lt;String, Cache&gt; caches = <span class="keyword">new</span> ConcurrentHashMap&lt;String, Cache&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RedisManager redisManager;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The Redis key prefix for caches</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String keyPrefix = <span class="string">"shiro_redis_cache:"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getKeyPrefix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> keyPrefix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setKeyPrefix</span><span class="params">(String keyPrefix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.keyPrefix = keyPrefix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//给自定义缓存管理器注入自定义redis缓存</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;K, V&gt; <span class="function">Cache&lt;K, V&gt; <span class="title">getCache</span><span class="params">(String name)</span> <span class="keyword">throws</span> CacheException </span>&#123;</span><br><span class="line">        logger.debug(<span class="string">"获取名称为: "</span> + name + <span class="string">" 的RedisCache实例"</span>);</span><br><span class="line"></span><br><span class="line">        Cache c = caches.get(name);</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// initialize the Redis manager instance</span></span><br><span class="line">            redisManager.init();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// create a new cache instance</span></span><br><span class="line">            c = <span class="keyword">new</span> RedisCache&lt;K, V&gt;(redisManager, keyPrefix);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// add it to the cache collection</span></span><br><span class="line">            caches.put(name, c);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisManager <span class="title">getRedisManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRedisManager</span><span class="params">(RedisManager redisManager)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.redisManager = redisManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>shiro配置</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;spring.redis.host&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String host;</span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;spring.redis.password&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;spring.redis.port&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;spring.redis.timeout&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> timeout;</span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;cacheType&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String cacheType;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义cacheManager，redis实现</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RedisCacheManager <span class="title">redisCacheManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    RedisCacheManager redisCacheManager = <span class="keyword">new</span> RedisCacheManager();</span><br><span class="line">    redisCacheManager.setRedisManager(redisManager());</span><br><span class="line">    <span class="keyword">return</span> redisCacheManager;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//封装了jedis操作</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RedisManager <span class="title">redisManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    RedisManager redisManager = <span class="keyword">new</span> RedisManager();</span><br><span class="line">    redisManager.setHost(host);</span><br><span class="line">    redisManager.setPort(port);</span><br><span class="line">    redisManager.setExpire(<span class="number">1800</span>);<span class="comment">// 配置缓存过期时间</span></span><br><span class="line">    redisManager.setTimeout(timeout);</span><br><span class="line">    redisManager.setPassword(password);</span><br><span class="line">    <span class="keyword">return</span> redisManager;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//securityManager</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SecurityManager <span class="title">securityManager</span><span class="params">()</span></span>&#123;</span><br><span class="line">    DefaultWebSecurityManager securityManager =  <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">    <span class="comment">//设置realm.</span></span><br><span class="line">    securityManager.setRealm(userRealm());</span><br><span class="line">    <span class="comment">// 自定义缓存实现 使用redis</span></span><br><span class="line">    <span class="keyword">if</span>(Constant.CACHE_TYPE_REDIS.equals(cacheType))&#123;</span><br><span class="line">        securityManager.setCacheManager(redisCacheManager());</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        securityManager.setCacheManager(ehCacheManager());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//SessionManager</span></span><br><span class="line">    <span class="keyword">return</span> securityManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p>Constant</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Constant</span> </span>&#123;</span><br><span class="line">    <span class="comment">//缓存方式</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String CACHE_TYPE_REDIS =<span class="string">"redis"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>yml</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">yaml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置缓存和session存储方式，默认ehcache,可选redis</span></span><br><span class="line"><span class="attr">cacheType:</span> <span class="string">ehcache</span></span><br></pre></td></tr></table></figure></div>




<h1 id="4-shiro-授权"><a href="#4-shiro-授权" class="headerlink" title="4. shiro+授权"></a>4. shiro+授权</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">前提就是在Realm的授权方法中查询出权限并返回List&lt;String&gt;形式</span><br></pre></td></tr></table></figure></div>

<h2 id="userRealm"><a href="#userRealm" class="headerlink" title="userRealm"></a>userRealm</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection arg0)</span> </span>&#123;</span><br><span class="line">    Long userId = ShiroUtils.getUserId();</span><br><span class="line">    MenuService menuService = ApplicationContextRegister.getBean(MenuService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    Set&lt;String&gt; perms = menuService.listPerms(userId);</span><br><span class="line">    SimpleAuthorizationInfo info = <span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line">    info.setStringPermissions(perms);</span><br><span class="line">    <span class="keyword">return</span> info;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p>基于角色的访问权限控制</p>
<p>根据用户id列出该用户拥有的权限（菜单）列表</p>
<p>MenuMapper.xml</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"listUserPerms"</span> <span class="attr">resultType</span>=<span class="string">"string"</span>&gt;</span></span><br><span class="line">    select distinct perms </span><br><span class="line">    from sys_menu m</span><br><span class="line">    left join sys_role_menu rm on m.menu_id=rm.menu_id</span><br><span class="line">    left join sys_user_role ur on rm.role_id=ur.role_id</span><br><span class="line">    where ur.user_id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>MenuDao.java</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; listUserPerms(Long id);</span><br></pre></td></tr></table></figure></div>

<p>MenuServiceImpl</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">listPerms</span><span class="params">(Long userId)</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; perms = menuMapper.listUserPerms(userId);</span><br><span class="line">    Set&lt;String&gt; permsSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String perm : perms) &#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(perm)) &#123;</span><br><span class="line">            permsSet.addAll(Arrays.asList(perm.trim().split(<span class="string">","</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> permsSet;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	boolean addAll(Collection&lt;? extends E&gt; c)</span></span><br><span class="line"><span class="comment">	将集合c的所有元素全部加入到set集合里</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	public static &lt;T&gt; List&lt;T&gt; asList(T... a)</span></span><br><span class="line"><span class="comment">	可将数组a转化为list类型</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	perm.trim().split(",")</span></span><br><span class="line"><span class="comment">	menu表的perms字段 如果要写多种权限，则用" , "分隔</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	为什么返回set?</span></span><br><span class="line"><span class="comment">	realm需要Set&lt;String&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div>

<p>StringUtils</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.apache.commons&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;commons-lang3&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;version&gt;3.7&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></div>

<h2 id><a href="#" class="headerlink" title></a></h2><h2 id="方法1：使用xml配置方法（不采用）"><a href="#方法1：使用xml配置方法（不采用）" class="headerlink" title="方法1：使用xml配置方法（不采用）"></a>方法1：使用xml配置方法（不采用）</h2><p>applicationContext-shiro.xml配置</p>
<h2 id="方法2：使用注解方法"><a href="#方法2：使用注解方法" class="headerlink" title="方法2：使用注解方法"></a>方法2：使用注解方法</h2><p>开启aop支持(否则shiro注解无法生效)</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-boot-starter-aop&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></div>



<p>shiro注解支持</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  *  开启shiro aop注解支持.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AuthorizationAttributeSourceAdvisor <span class="title">authorizationAttributeSourceAdvisor</span><span class="params">(SecurityManager securityManager)</span></span>&#123;</span><br><span class="line">    AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor = <span class="keyword">new</span> AuthorizationAttributeSourceAdvisor();</span><br><span class="line">    authorizationAttributeSourceAdvisor.setSecurityManager(securityManager);</span><br><span class="line">    <span class="keyword">return</span> authorizationAttributeSourceAdvisor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p>使用shiro注解</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequiresPermissions</span>(<span class="string">"sys:user:user"</span>)</span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">""</span>)</span><br><span class="line"><span class="function">String <span class="title">user</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> prefix + <span class="string">"/user"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p>执行流程</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">当调用controller的一个方法，由于该 方法加了@RequiresPermissions(&quot;item:query&quot;) ，shiro调用realm获取数据库中的权限信息，看&quot;item:query&quot;是否在权限数据中存在，如果不存在就拒绝访问，如果存在就授权通过。</span><br></pre></td></tr></table></figure></div>



<p>测试</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ok-授权缓存</span><br><span class="line">ok-访问非法权限会发生什么</span><br><span class="line">	会抛出异常AuthorizationException</span><br></pre></td></tr></table></figure></div>



<p>建立一个异常处理器处理非法授权异常403</p>
<p>common.exception.BDExceptionHandler</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BDExceptionHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    	@ControllerAdvic:控制器增强，即把@ControllerAdvice注解内部使用@ExceptionHandler、@InitBinder、@ModelAttribute注解的方法应用到所有的 @RequestMapping注解的方法。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    	应用到所有@RequestMapping注解的方法，在其抛出AuthorizationException异常时执行</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(AuthorizationException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">Object</span> <span class="title">handleAuthorizationException</span>(<span class="title">AuthorizationException</span> <span class="title">e</span>, <span class="title">HttpServletRequest</span> <span class="title">request</span>) </span>&#123;</span><br><span class="line">        logger.error(e.getMessage(), e);</span><br><span class="line">        <span class="keyword">if</span> (HttpServletUtils.jsAjax(request)) &#123;</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="number">403</span>, <span class="string">"未授权"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"error/403"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>common.utils.HttpServletUtils</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpServletUtils</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">jsAjax</span><span class="params">(HttpServletRequest req)</span></span>&#123;</span><br><span class="line">        <span class="comment">//判断是否为ajax请求，默认不是</span></span><br><span class="line">        <span class="keyword">boolean</span> isAjaxRequest = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.isBlank(req.getHeader(<span class="string">"x-requested-with"</span>)) &amp;&amp; req.getHeader(<span class="string">"x-requested-with"</span>).equals(<span class="string">"XMLHttpRequest"</span>))&#123;</span><br><span class="line">            isAjaxRequest = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> isAjaxRequest;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>JavaEE</category>
      </categories>
      <tags>
        <tag>JavaEE</tag>
      </tags>
  </entry>
  <entry>
    <title>redis学习笔记</title>
    <url>/2018/06/04/15326723152601/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>参考：【itheima】</p>
</blockquote>
<p>[TOC]</p>
<h1 id="1-redis介绍"><a href="#1-redis介绍" class="headerlink" title="1 redis介绍"></a>1 redis介绍</h1><h2 id="1-1-什么是redis"><a href="#1-1-什么是redis" class="headerlink" title="1.1 什么是redis"></a>1.1 什么是redis</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">— redis是一个nosql数据库（非关系型数据库）</span><br><span class="line">— 关系型：以二维表形式存储数据</span><br><span class="line">— 非关系型数据库：以键值队形式存储数据（key，value形式）</span><br></pre></td></tr></table></figure></div>

<h2 id="1-2-redis应用领域"><a href="#1-2-redis应用领域" class="headerlink" title="1.2 redis应用领域"></a>1.2 redis应用领域</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 分布式缓存</span><br><span class="line">- 分布式sesson：分布式集群的时候，一个服务器就是一个session，那么用户登录后session如何在系统中流转？使用redis</span><br><span class="line">- 保存博客或论坛回复等。总之用在数据量大，并发量高的情况下。</span><br></pre></td></tr></table></figure></div>

<h2 id="1-3-关系型和非关系型数据库"><a href="#1-3-关系型和非关系型数据库" class="headerlink" title="1.3 关系型和非关系型数据库"></a>1.3 关系型和非关系型数据库</h2><p><strong>为什么关系型（mysql）数据库适应不了互联网（高并发，数据量大）？</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 因为硬盘的读取速度是硬伤；内存虽快，但容量小，且断电了内容就没了；</span><br><span class="line">- redis就是把数据存在内存里，因为快，所以广泛应用于互联网项目;</span><br><span class="line">- redis优点：存取快，官方称读取可达30万次每秒，写在10万次每秒，具体限制于硬件。</span><br><span class="line">- redis缺点：对持久化支持不良好（内存）</span><br><span class="line">- 总结：所以redis都不会单独使用（一般和关系型数据库配套使用，作为缓存功能）</span><br></pre></td></tr></table></figure></div>

<p>— 参考阅读：</p>
<p>​    关系型数据库的不足：<a href="http://blog.sina.com.cn/s/blog_5755b8ed01017oor.html" target="_blank" rel="noopener">http://blog.sina.com.cn/s/blog_5755b8ed01017oor.html</a></p>
<p>​    全面梳理关系型数据库和 NoSQL 的使用情景：<a href="https://www.oschina.net/news/71132/nosql-use-case" target="_blank" rel="noopener">https://www.oschina.net/news/71132/nosql-use-case</a></p>
<h1 id="2-redis安装运行"><a href="#2-redis安装运行" class="headerlink" title="2 redis安装运行"></a>2 redis安装运行</h1><h3 id="2-1-redis安装环境"><a href="#2-1-redis安装环境" class="headerlink" title="2.1 redis安装环境"></a>2.1 redis安装环境</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- redis是C语言开发，建议在linux上运行</span><br><span class="line">- linux上需要C编译器，安装gcc环境</span><br></pre></td></tr></table></figure></div>

<h3 id="2-2-redis安装步骤"><a href="#2-2-redis安装步骤" class="headerlink" title="2.2 redis安装步骤"></a>2.2 redis安装步骤</h3><ul>
<li><p>源码下载：<a href="http://download.redis.io/releases/" target="_blank" rel="noopener">http://download.redis.io/releases/</a></p>
</li>
<li><p>版本：redis-4.0.9.tar.gz</p>
</li>
<li><p>上传：sfpt</p>
<p>解压：tar -zxvf redis-4.0.9.tar.gz</p>
</li>
<li><p>进入解压后的目录进行编译：make</p>
<p>安装到指定目录：make PREFIX=/home/machine/redis install</p>
<p>在该目录下会出现一个bin文件，redis-cli：客户端，redis-server：服务端</p>
</li>
<li><p>前端启动服务端：./redis-server</p>
<p>启动客户端：./redis-cli    出现 127.0.0.1:6379&gt;  表示已连接到redis服务端</p>
</li>
<li><p>客户端使用：set key1 1；get key1；</p>
</li>
</ul>
<h3 id="2-3-redis启动"><a href="#2-3-redis启动" class="headerlink" title="2.3 redis启动"></a>2.3 redis启动</h3><p>前端启动：./redis-server</p>
<p>后端启动：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 将redis源码包（redis-4.0.9）里的redis.conf拷贝到redis安装路径的bin目录下</span><br><span class="line">	cp redis.conf &#x2F;home&#x2F;machine&#x2F;redis&#x2F;bin&#x2F;</span><br><span class="line">- 修改bin&#x2F;redis.conf：将daemonize no 改为 daemonize yes</span><br><span class="line">- 启动：.&#x2F;redis-server redis.conf</span><br><span class="line">- redis默认使用6379端口，在redis.conf中修改，修改防火墙配置开放6379端口</span><br></pre></td></tr></table></figure></div>

<p>启动：./redis-server redis.conf</p>
<p>关闭：./redis-cli shutdown</p>
<p>ps：shutdown命令会先保存未保存的数据，再关闭。拒绝暴力关闭，会丢数据。</p>
<h3 id="bug：解决远程无法连接redis服务端问题"><a href="#bug：解决远程无法连接redis服务端问题" class="headerlink" title="bug：解决远程无法连接redis服务端问题"></a>bug：解决远程无法连接redis服务端问题</h3><ol>
<li>首先开启6379端口</li>
</ol>
<ol start="2">
<li><p>如果telnet无法访问6379：</p>
<p>1&gt; 查看redis进程：ps -ef | grep redis </p>
<p><code>machine  14973     1  0 23:34 ?        00:00:00 ./redis-server 127.0.0.1:6379</code></p>
<p>发现只有本机127.0.0.1能使用，telnet连不通6379</p>
<p>2&gt; 因为在redis.conf中有个配置 bind 127.0.0.1 这个是默认只有本机访问，把这个注释掉就好了</p>
<p><code># bind 127.0.0.1</code></p>
<p>3&gt; 然后重启redis</p>
<p><code>./redis-cli shutdown</code></p>
<p><code>./redis-server redis.conf</code></p>
<p>3&gt; 再查看：ps -ef | grep redis </p>
<p><code>machine  15026     1  0 23:55 ?        00:00:00 ./**redis**-server *:6379</code></p>
<p>*表示允许其他机子访问了</p>
</li>
<li><p>如果报错：<code>redis.clients.jedis.exceptions.JedisDataException: DENIED Redis is running in protected mode because protected mode is enabled</code></p>
<p>修改redis.conf ，将protected-mode yes 改为 protected-mode no，重启服务</p>
</li>
</ol>
<h1 id="3-jedis"><a href="#3-jedis" class="headerlink" title="3 jedis"></a>3 jedis</h1><h2 id="3-1-jedis介绍"><a href="#3-1-jedis介绍" class="headerlink" title="3.1 jedis介绍"></a>3.1 jedis介绍</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 用来操作操作redis的jar。相当于使用JDBC操作SQL</span><br><span class="line">- github：https:&#x2F;&#x2F;github.com&#x2F;xetorthio&#x2F;jedis</span><br></pre></td></tr></table></figure></div>

<h2 id="3-2-jedis使用"><a href="#3-2-jedis使用" class="headerlink" title="3.2 jedis使用"></a>3.2 jedis使用</h2><p>jar包</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;redis.clients&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jedis&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.9.0&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></div>

<p>基本操作</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisTests</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//快速开始</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建客户端，连接redis服务端</span></span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"10.211.55.6"</span>, <span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//存取数据</span></span><br><span class="line">        jedis.set(<span class="string">"key2"</span>,<span class="string">"2"</span>);</span><br><span class="line">        String key2 = jedis.get(<span class="string">"key2"</span>);</span><br><span class="line">        System.out.println(key2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭连接</span></span><br><span class="line">        jedis.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">//连接池</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testJedisPool</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建连接池</span></span><br><span class="line">        JedisPool jedisPool = <span class="keyword">new</span> JedisPool(<span class="string">"10.211.55.6"</span>, <span class="number">6379</span>);</span><br><span class="line">        <span class="comment">//获取连接</span></span><br><span class="line">        Jedis jedis = jedisPool.getResource();</span><br><span class="line">        <span class="comment">//存取</span></span><br><span class="line">        String key2 = jedis.get(<span class="string">"key2"</span>);</span><br><span class="line">        System.out.println(key2);</span><br><span class="line">        <span class="comment">//关闭连接，会自动放回池子供别人使用，否则，连接耗尽就</span></span><br><span class="line">        jedis.close();</span><br><span class="line">        <span class="comment">//关闭连接池</span></span><br><span class="line">        jedisPool.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>有bug就参见上一节：【bug：解决远程无法连接redis服务端问题】</p>
<h1 id="4-redis数据类型"><a href="#4-redis数据类型" class="headerlink" title="4 redis数据类型"></a>4 redis数据类型</h1><h2 id="4-1-字符串String"><a href="#4-1-字符串String" class="headerlink" title="4.1 字符串String"></a>4.1 字符串String</h2><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><ol>
<li><p>赋值</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SET key value</span><br><span class="line">127.0.0.1:6379&gt; set test 123</span><br><span class="line">OK</span><br></pre></td></tr></table></figure></div>


</li>
</ol>
<ol start="2">
<li><p>取值</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET key</span><br><span class="line">127.0.0.1:6379&gt; get test</span><br><span class="line">&quot;123“</span><br></pre></td></tr></table></figure></div>

<p>ps：当键不存在时返回空结果</p>
</li>
<li><p>删除</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Del key</span><br><span class="line">127.0.0.1:6379&gt; del test</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>数值增减</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 递增数字</span><br><span class="line">INCR key</span><br><span class="line">当存储的字符串是整数时，Redis提供了一个实用的命令INCR，其作用是让当前键值递增，并返回递增后的值。</span><br><span class="line">127.0.0.1:6379&gt; incr key1</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; incr key1</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; incr key1</span><br><span class="line">(integer) 3 </span><br><span class="line"></span><br><span class="line">- 递减数值</span><br><span class="line">DECR key</span><br><span class="line"></span><br><span class="line">- 增加指定的整数</span><br><span class="line">INCRBY key increment</span><br><span class="line">示例： </span><br><span class="line">127.0.0.1:6379&gt; incrby key1 2</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; incrby key1 2</span><br><span class="line">(integer) 7</span><br><span class="line">127.0.0.1:6379&gt; incrby key1 2</span><br><span class="line">(integer) 9</span><br></pre></td></tr></table></figure></div>

<p>​</p>
</li>
</ol>
<h2 id="4-2-散列Hash"><a href="#4-2-散列Hash" class="headerlink" title="4.2 散列Hash"></a>4.2 散列Hash</h2><h3 id="使用string的问题"><a href="#使用string的问题" class="headerlink" title="使用string的问题"></a>使用string的问题</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">假设有User对象以JSON序列化的形式存储到Redis中，User对象有id，username、password、age、name等属性，存储的过程如下： </span><br><span class="line">保存、更新： </span><br><span class="line">User对象 &gt; json(string) &gt; redis </span><br><span class="line">如果在业务上只是更新age属性，其他的属性并不做更新我应该怎么做呢？ 如果仍然采用上边的方法在传输、处理时会造成资源浪费，下边讲的hash可以很好的解决这个问题。</span><br></pre></td></tr></table></figure></div>



<h3 id="redis-hash介绍"><a href="#redis-hash介绍" class="headerlink" title="redis hash介绍"></a>redis hash介绍</h3><p>hash叫散列类型，它提供了字段和字段值的映射。字段值只能是字符串类型，不支持散列类型、集合类型等其它类型。一个对象转换成hashmap存放在redis中</p>
<p><strong>应用场合：</strong>一般应用于将redis作为分布式缓存，存储数据库中的数据对象。</p>
<h3 id="命令-1"><a href="#命令-1" class="headerlink" title="命令"></a>命令</h3><ol>
<li><p>赋值</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HSET key field value	一次只能设置一个字段值</span><br><span class="line">127.0.0.1:6379&gt; hset user username zhangsan </span><br><span class="line">(integer) 1</span><br><span class="line">-----------------------------</span><br><span class="line">HMSET key field value [field value ...]		一次可以设置多个字段值</span><br><span class="line">127.0.0.1:6379&gt; hmset user age 20 username lisi </span><br><span class="line">OK</span><br><span class="line">-----------------------------</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>取值</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HGET key field			一次只能获取一个字段值</span><br><span class="line">127.0.0.1:6379&gt; hget user username</span><br><span class="line">&quot;zhangsan“</span><br><span class="line">-----------------------------</span><br><span class="line">HMGET key field [field ...]				一次可以获取多个字段值</span><br><span class="line">127.0.0.1:6379&gt; hmget user age username</span><br><span class="line">1) &quot;20&quot;</span><br><span class="line">2) &quot;lisi&quot;</span><br><span class="line">-----------------------------</span><br><span class="line">HGETALL key</span><br><span class="line">127.0.0.1:6379&gt; hgetall user</span><br><span class="line">1) &quot;age&quot;</span><br><span class="line">2) &quot;20&quot;</span><br><span class="line">3) &quot;username&quot;</span><br><span class="line">4) &quot;lisi&quot;</span><br><span class="line">-----------------------------</span><br><span class="line">HSET命令不区分插入和更新操作，当执行插入操作时HSET命令返回1，当执行更新操作时返回0.</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>删除字段</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">可以删除一个或多个字段，返回值是被删除的字段个数 </span><br><span class="line">HDEL key field [field ...]</span><br><span class="line">127.0.0.1:6379&gt; hdel user age</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hdel user age name</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; hdel user age username</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>增加数字</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HINCRBY key field increment</span><br><span class="line">127.0.0.1:6379&gt; hincrby user age 2	将用户的年龄加2</span><br><span class="line">(integer) 22</span><br><span class="line">127.0.0.1:6379&gt; hget user age		获取用户的年龄</span><br><span class="line">&quot;22“</span><br></pre></td></tr></table></figure></div>

<p>​</p>
</li>
</ol>
<h2 id="4-3-列表List"><a href="#4-3-列表List" class="headerlink" title="4.3 列表List"></a>4.3 列表List</h2><h3 id="ArrayList与LinkedList的区别"><a href="#ArrayList与LinkedList的区别" class="headerlink" title="ArrayList与LinkedList的区别"></a>ArrayList与LinkedList的区别</h3><p>​    ArrayList使用数组方式存储数据，所以根据索引查询数据速度快，而新增或者删除元素时需要设计到位移操作，所以比较慢。</p>
<p>​    LinkedList使用双向链接方式存储数据，每个元素都记录前后元素的指针，所以插入、删除数据时只是更改前后元素的指针指向即可，速度非常快，然后通过下标查询元素时需要从头开始索引，所以比较慢，但是如果查询前几个元素或后几个元素速度比较快。</p>
<h3 id="redis-list介绍"><a href="#redis-list介绍" class="headerlink" title="redis list介绍"></a>redis list介绍</h3><p>​    列表类型（list）可以存储一个有序的字符串列表，常用的操作是向列表两端添加元素，或者获得列表的某一个片段。</p>
<p>​           列表类型内部是使用双向链表（double linked list）实现的，所以向列表两端添加元素的时间复杂度为0(1)，获取越接近两端的元素速度就越快。<strong>这意味着即使是一个有几千万个元素的列表，获取头部或尾部的10条记录也是极快的。</strong></p>
<p><strong>应用场景：</strong>评论列表</p>
<p>思路：在redis中创建商品评论列表。用户发布商品评论，将评论信息转成json存储到list中。用户在页面查询评论        列表，从redis中取出json数据展示到页面。</p>
<p>定义商品评论列表key：商品编号为1001的商品评论key：items: comment:1001</p>
<p>192.168.101.3:7001&gt; LPUSH items:comment:1001’{“id”:1,”name”:”商品不错，很好！！”,”date”:1430295077289}’</p>
<h3 id="命令-2"><a href="#命令-2" class="headerlink" title="命令"></a>命令</h3><ol>
<li><p>向列表两端增加元素</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LPUSH key value [value ...]</span><br><span class="line">RPUSH key value [value ...]</span><br><span class="line">向列表左边增加元素 </span><br><span class="line">127.0.0.1:6379&gt; lpush list1 1 2 3</span><br><span class="line">(integer) 3</span><br><span class="line">向列表右边增加元素 </span><br><span class="line">127.0.0.1:6379&gt; rpush list1 4 5 6</span><br><span class="line">(integer) 3</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>查看列表</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LRANGE key start stop</span><br><span class="line">LRANGE命令是列表类型最常用的命令之一，获取列表中的某一片段，将返回start、stop之间的所有元素（包含两端的元素），索引从0开始。索引可以是负数，如：“-1”代表最后边的一个元素。 </span><br><span class="line">127.0.0.1:6379&gt; lrange list1 0 2</span><br><span class="line">1) &quot;2&quot;</span><br><span class="line">2) &quot;1&quot;</span><br><span class="line">3) &quot;4&quot;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>从列表两端弹出元素</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LPOP key</span><br><span class="line">RPOP key</span><br><span class="line">LPOP命令从列表左边弹出一个元素，会分两步完成，第一步是将列表左边的元素从列表中移除，第二步是返回被移除的元素值。 </span><br><span class="line">127.0.0.1:6379&gt; lpop list1</span><br><span class="line">&quot;3“</span><br><span class="line">127.0.0.1:6379&gt; rpop list1</span><br><span class="line">&quot;6“</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>获取列表中元素的个数</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LLEN key</span><br><span class="line">127.0.0.1:6379&gt; llen list1</span><br><span class="line">(integer) 2</span><br></pre></td></tr></table></figure></div>

<p>​</p>
</li>
</ol>
<h2 id="4-4-集合Set"><a href="#4-4-集合Set" class="headerlink" title="4.4 集合Set"></a>4.4 集合Set</h2><h3 id="redis-set介绍"><a href="#redis-set介绍" class="headerlink" title="redis set介绍"></a>redis set介绍</h3><p>在集合中的每个元素都是不同的，且没有顺序。</p>
<h3 id="命令-3"><a href="#命令-3" class="headerlink" title="命令"></a>命令</h3><ol>
<li><p>增加/删除元素</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SADD key member [member ...]</span><br><span class="line">SREM key member [member ...]</span><br><span class="line">127.0.0.1:6379&gt; sadd set a b c</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; sadd set a</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; srem set c d</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>获得集合中的所有元素</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SMEMBERS key</span><br><span class="line">127.0.0.1:6379&gt; smembers set</span><br><span class="line">1) &quot;b&quot;</span><br><span class="line">2) &quot;a”</span><br></pre></td></tr></table></figure></div>

<p>判断元素是否在集合中，<strong>无论集合中有多少元素都可以极速的返回结果</strong>。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SISMEMBER key member</span><br><span class="line">127.0.0.1:6379&gt; sismember set a</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; sismember set h</span><br><span class="line">(integer) 0</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>集合的差集运算A-B</p>
<p>属于A并且不属于B的元素构成的集合</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SDIFF key [key ...]</span><br><span class="line">127.0.0.1:6379&gt; sadd setA 1 2 3</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; sadd setB 2 3 4</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; sdiff setA setB </span><br><span class="line">1) &quot;1&quot;</span><br><span class="line">127.0.0.1:6379&gt; sdiff setB setA </span><br><span class="line">1) &quot;4&quot;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>集合的交集运算A ∩ B</p>
<p>属于A且属于B的元素构成的集合</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SINTER key [key ...]</span><br><span class="line">127.0.0.1:6379&gt; sinter setA setB </span><br><span class="line">1) &quot;2&quot;</span><br><span class="line">2) &quot;3&quot;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>集合的并集运算A ∪ B</p>
<p>属于A或者属于B的元素构成的集合</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SUNION key [key ...]</span><br><span class="line">127.0.0.1:6379&gt; sunion setA setB</span><br><span class="line">1) &quot;1&quot;</span><br><span class="line">2) &quot;2&quot;</span><br><span class="line">3) &quot;3&quot;</span><br><span class="line">4) &quot;4&quot;</span><br></pre></td></tr></table></figure></div>

<p>​</p>
</li>
</ol>
<h2 id="4-5-有序集合sorted-set"><a href="#4-5-有序集合sorted-set" class="headerlink" title="4.5 有序集合sorted set"></a>4.5 有序集合sorted set</h2><h3 id="redis-sorted-set介绍"><a href="#redis-sorted-set介绍" class="headerlink" title="redis sorted set介绍"></a>redis sorted set介绍</h3><p>有序集合与列表对比</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在某些方面有序集合和列表类型有些相似。 </span><br><span class="line">1、二者都是有序的。 </span><br><span class="line">2、二者都可以获得某一范围的元素。 </span><br><span class="line">但是，二者有着很大区别： </span><br><span class="line">1、列表类型是通过链表实现的，获取靠近两端的数据速度极快，而当元素增多后，访问中间数据的速度会变慢。 </span><br><span class="line">2、有序集合类型使用散列表实现，所有即使读取位于中间部分的数据也很快。 </span><br><span class="line">3、列表中不能简单的调整某个元素的位置，但是有序集合可以（通过更改分数实现） </span><br><span class="line">4、有序集合要比列表类型更耗内存。</span><br></pre></td></tr></table></figure></div>

<p><strong>应用场景：</strong>排行榜</p>
<p>根据商品销售量对商品进行排行显示，定义sorted set集合，商品销售量为元素的分数。</p>
<p>定义商品销售排行榜key：items:sellsort</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">写入商品销售量：</span><br><span class="line">商品编号1001的销量是9，商品编号1002的销量是10</span><br><span class="line">192.168.101.3:7007&gt; ZADD items:sellsort9 1001 10 1002</span><br><span class="line"></span><br><span class="line">商品编号1001的销量加1</span><br><span class="line">192.168.101.3:7001&gt; ZINCRBY items:sellsort 1 1001</span><br><span class="line"></span><br><span class="line">商品销量前10名：</span><br><span class="line">192.168.101.3:7001&gt; ZRANGE items:sellsort 0 9 withscores</span><br></pre></td></tr></table></figure></div>









<h3 id="命令-4"><a href="#命令-4" class="headerlink" title="命令"></a>命令</h3><ol>
<li><p>增加元素</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">向有序集合中加入一个元素和该元素的分数，如果该元素已经存在则会用新的分数替换原有的分数。返回值是新加入到集合中的元素个数，不包含之前已经存在的元素。 </span><br><span class="line">ZADD key score member [score member ...]</span><br><span class="line">127.0.0.1:6379&gt; zadd scoreboard 80 zhangsan 89 lisi 94 wangwu </span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; zadd scoreboard 97 lisi </span><br><span class="line">(integer) 0</span><br><span class="line">获取元素的分数 </span><br><span class="line">ZSCORE key member</span><br><span class="line">127.0.0.1:6379&gt; zscore scoreboard lisi </span><br><span class="line">&quot;97&quot;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>删除元素</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ZREM key member [member ...]</span><br><span class="line">移除有序集key中的一个或多个成员，不存在的成员将被忽略。</span><br><span class="line">当key存在但不是有序集类型时，返回一个错误。</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; zrem scoreboard lisi</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>获得排名在某个范围的元素列表</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">获得排名在某个范围的元素列表 </span><br><span class="line">ZRANGE key start stop [WITHSCORES]			照元素分数从小到大的顺序返回索引从start到stop之间的所有元素（包含两端的元素）</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; zrange scoreboard 0 2</span><br><span class="line">1) &quot;zhangsan&quot;</span><br><span class="line">2) &quot;wangwu&quot;</span><br><span class="line">3) &quot;lisi“</span><br><span class="line"></span><br><span class="line">-----------------------------</span><br><span class="line">ZREVRANGE key start stop [WITHSCORES]		照元素分数从大到小的顺序返回索引从start到stop之间的所有元素（包含两端的元素）</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; zrevrange scoreboard 0 2</span><br><span class="line">1) &quot; lisi &quot;</span><br><span class="line">2) &quot;wangwu&quot;</span><br><span class="line">3) &quot; zhangsan “</span><br><span class="line"></span><br><span class="line">-----------------------------</span><br><span class="line">如果需要获得元素的分数的可以在命令尾部加上WITHSCORES参数 </span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; zrange scoreboard 0 1 WITHSCORES</span><br><span class="line">1) &quot;zhangsan&quot;</span><br><span class="line">2) &quot;80&quot;</span><br><span class="line">3) &quot;wangwu&quot;</span><br><span class="line">4) &quot;94&quot;</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<h1 id="5-redis其他命令"><a href="#5-redis其他命令" class="headerlink" title="5 redis其他命令"></a>5 redis其他命令</h1><h2 id="keys命令"><a href="#keys命令" class="headerlink" title="keys命令"></a>keys命令</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">返回满足给定pattern 的所有key</span><br><span class="line">redis 127.0.0.1:6379&gt; keys mylist*</span><br><span class="line">1) &quot;mylist&quot;</span><br><span class="line">2) &quot;mylist5&quot;</span><br><span class="line">3) &quot;mylist6&quot;</span><br><span class="line">4) &quot;mylist7&quot;</span><br><span class="line">5) &quot;mylist8&quot;</span><br></pre></td></tr></table></figure></div>



<h2 id="服务器命令"><a href="#服务器命令" class="headerlink" title="服务器命令"></a>服务器命令</h2><p>ping</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">测试连接是否存活</span><br><span class="line">redis 127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br><span class="line">&#x2F;&#x2F;执行下面命令之前，我们停止redis 服务器</span><br><span class="line">redis 127.0.0.1:6379&gt; ping</span><br><span class="line">Could not connect to Redis at 127.0.0.1:6379: Connection refused</span><br><span class="line">&#x2F;&#x2F;执行下面命令之前，我们启动redis 服务器</span><br><span class="line">not connected&gt; ping</span><br><span class="line">PONG</span><br></pre></td></tr></table></figure></div>













<h1 id="6-redis持久化方案"><a href="#6-redis持久化方案" class="headerlink" title="6 redis持久化方案"></a>6 redis持久化方案</h1><p>​    Redis的高性能是由于其将所有数据都存储在了内存中，为了使Redis在重启之后仍能保证数据不丢失，需要将数据从内存中同步到硬盘中，这一过程就是持久化。</p>
<p>​           Redis支持两种方式的持久化，一种是RDB方式，一种是AOF方式。可以单独使用其中一种或将二者结合使用。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RDB：间隔一段时间就保存</span><br><span class="line">	优点：快</span><br><span class="line">	缺点：断电之前来不及保存最后一次，数据丢失</span><br><span class="line">	</span><br><span class="line">AOF：一有变化就保存</span><br><span class="line">    优点：影响性能</span><br><span class="line">    缺点：不丢数据</span><br></pre></td></tr></table></figure></div>



<p>​    </p>
<h1 id="7-主从复制"><a href="#7-主从复制" class="headerlink" title="7 主从复制"></a>7 主从复制</h1><p>​    备份机制，通过redis的主从复制机制就可以避免这种单点故障 </p>
]]></content>
      <categories>
        <category>数据库</category>
        <category>redis</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>文章收藏</title>
    <url>/2018/05/21/15326681619163/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>【Mac下安装Maven】<br><a href="https://blog.csdn.net/u011886447/article/details/70200922" target="_blank" rel="noopener">https://blog.csdn.net/u011886447/article/details/70200922</a></p>
<p>【两种方法上传本地文件到github】<br><a href="https://blog.csdn.net/pql925/article/details/72772660" target="_blank" rel="noopener">https://blog.csdn.net/pql925/article/details/72772660</a></p>
<p>【java实现定时任务 Schedule - CSDN博客】<br><a href="https://blog.csdn.net/xinyuan_java/article/details/51602088" target="_blank" rel="noopener">https://blog.csdn.net/xinyuan_java/article/details/51602088</a></p>
<p>【使用MySQLWorkBench绘制ER图 - CSDN博客】<br> <a href="https://blog.csdn.net/xujiayin/article/details/51689749" target="_blank" rel="noopener">https://blog.csdn.net/xujiayin/article/details/51689749</a></p>
<p>【IntelliJ IDEA2017 + tomcat 即改即生效 实现热部署 - 骑着蜗牛望太阳 - 博客园】<br><a href="https://www.cnblogs.com/1024zy/p/6344000.html" target="_blank" rel="noopener">https://www.cnblogs.com/1024zy/p/6344000.html</a></p>
<p>【CentOS下安装JDK的三种方法_Linux教程_Linux公社-Linux系统门户网站】</p>
<p> <a href="https://www.linuxidc.com/Linux/2016-09/134941.htm" target="_blank" rel="noopener">https://www.linuxidc.com/Linux/2016-09/134941.htm</a></p>
<p>【CentOS7安装 Tomcat 8 完整步骤 - CSDN博客】<br> <a href="https://blog.csdn.net/default7/article/details/54925702" target="_blank" rel="noopener">https://blog.csdn.net/default7/article/details/54925702</a></p>
<p>【mybatis使用逆向工程时分页插件的使用 - CSDN博客】<br><a href="https://blog.csdn.net/u012184337/article/details/67637115" target="_blank" rel="noopener">https://blog.csdn.net/u012184337/article/details/67637115</a></p>
<p>【js页面跳转的问题(跳转到父页面、最外层页面、本页面)_javascript技巧_脚本之家】<br><a href="http://www.jb51.net/article/40583.htm" target="_blank" rel="noopener">http://www.jb51.net/article/40583.htm</a></p>
<p>【Sublime格式化json - CSDN博客】<br><a href="https://blog.csdn.net/tz2101/article/details/44958093" target="_blank" rel="noopener">https://blog.csdn.net/tz2101/article/details/44958093</a></p>
<p>【使用lombok提高编码效率】<br>入门教程：<a href="https://segmentfault.com/a/1190000011433462" target="_blank" rel="noopener">https://segmentfault.com/a/1190000011433462</a></p>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>【转】MySQL5.7安装与配置（YUM）</title>
    <url>/2018/05/21/15326672933319/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>安装环境：CentOS7 64位 MINI版，安装MySQL5.7</p>
<h1 id="1、配置YUM源"><a href="#1、配置YUM源" class="headerlink" title="1、配置YUM源"></a>1、配置YUM源</h1><p>在MySQL官网中下载YUM源rpm安装包：<a href="http://dev.mysql.com/downloads/repo/yum/" target="_blank" rel="noopener">http://dev.mysql.com/downloads/repo/yum/</a><br><a href="/2018/05/21/15326672933319/p11.png" data-fancybox="group" data-caption="p11" class="fancybox"><img alt="p11" title="p11" data-src="/2018/05/21/15326672933319/p11.png" class="lazyload"></a></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 下载mysql源安装包</span><br><span class="line">shell&gt; wget http:&#x2F;&#x2F;dev.mysql.com&#x2F;get&#x2F;mysql57-community-release-el7-8.noarch.rpm</span><br><span class="line"># 安装mysql源</span><br><span class="line">shell&gt; yum localinstall mysql57-community-release-el7-8.noarch.rpm</span><br><span class="line">检查mysql源是否安装成功</span><br><span class="line">shell&gt; yum repolist enabled | grep &quot;mysql.*-community.*&quot;</span><br></pre></td></tr></table></figure></div>


<p><a href="/2018/05/21/15326672933319/p12.png" data-fancybox="group" data-caption="p12" class="fancybox"><img alt="p12" title="p12" data-src="/2018/05/21/15326672933319/p12.png" class="lazyload"></a></p>
<p>看到上图所示表示安装成功。 </p>
<h1 id="2、安装MySQL"><a href="#2、安装MySQL" class="headerlink" title="2、安装MySQL"></a>2、安装MySQL</h1><p>shell&gt; yum install mysql-community-server</p>
<h1 id="3、启动MySQL服务"><a href="#3、启动MySQL服务" class="headerlink" title="3、启动MySQL服务"></a>3、启动MySQL服务</h1><p>shell&gt; systemctl start mysqld<br>查看MySQL的启动状态<br>shell&gt; systemctl status mysqld</p>
<p>mysqld.service - MySQL Server<br>   Loaded: loaded (/usr/lib/systemd/system/mysqld.service; disabled; vendor preset: disabled)<br>   Active: active (running) since 五 2016-06-24 04:37:37 CST; 35min ago<br>Main PID: 2888 (mysqld)<br>   CGroup: /system.slice/mysqld.service<br>​           └─2888 /usr/sbin/mysqld –daemonize –pid-file=/var/run/mysqld/mysqld.pid</p>
<p>6月 24 04:37:36 localhost.localdomain systemd[1]: Starting MySQL Server…<br>6月 24 04:37:37 localhost.localdomain systemd[1]: Started MySQL Server.</p>
<h1 id="4、开机启动"><a href="#4、开机启动" class="headerlink" title="4、开机启动"></a>4、开机启动</h1><p>shell&gt; systemctl enable mysqld<br>shell&gt; systemctl daemon-reload</p>
<h1 id="5、修改root本地登录密码"><a href="#5、修改root本地登录密码" class="headerlink" title="5、修改root本地登录密码"></a>5、修改root本地登录密码</h1><p>mysql安装完成之后，在/var/log/mysqld.log文件中给root生成了一个默认密码。通过下面的方式找到root默认密码，然后登录mysql进行修改：<br>shell&gt; grep ‘temporary password’ /var/log/mysqld.log</p>
<p><a href="/2018/05/21/15326672933319/p14.png" data-fancybox="group" data-caption="p14" class="fancybox"><img alt="p14" title="p14" data-src="/2018/05/21/15326672933319/p14.png" class="lazyload"></a></p>
<p>shell&gt; mysql -uroot -p<br>mysql&gt; ALTER USER ‘root’@’localhost’ IDENTIFIED BY ‘MyNewPass4!’;<br>注意：mysql5.7默认安装了密码安全检查插件（validate_password），默认密码检查策略要求密码必须包含：大小写字母、数字和特殊符号，并且长度不能少于8位。否则会提示ERROR 1819 (HY000): Your password does not satisfy the current policy requirements错误，如下图所示： </p>
<p><a href="/2018/05/21/15326672933319/p15.png" data-fancybox="group" data-caption="p15" class="fancybox"><img alt="p15" title="p15" data-src="/2018/05/21/15326672933319/p15.png" class="lazyload"></a></p>
<p>在/etc/my.cnf<br>如果不需要密码策略，添加my.cnf文件中添加如下配置禁用即可：<br>validate_password = off<br>重新启动mysql服务使配置生效：<br>systemctl restart mysqld</p>
<h1 id="6、添加远程登录用户"><a href="#6、添加远程登录用户" class="headerlink" title="6、添加远程登录用户"></a>6、添加远程登录用户</h1><p>默认只允许root帐户在本地登录，如果要在其它机器上连接mysql，必须修改root允许远程连接，或者添加一个允许远程连接的帐户，为了安全起见，我添加一个新的帐户：<br>mysql&gt; GRANT ALL PRIVILEGES ON <em>.</em> TO ‘yangxin’@’%’ IDENTIFIED BY ‘Yangxin0917!’ WITH GRANT OPTION;</p>
<p>**还要防火墙 开启3306端口</p>
<h1 id="7、配置默认编码为utf8"><a href="#7、配置默认编码为utf8" class="headerlink" title="7、配置默认编码为utf8"></a>7、配置默认编码为utf8</h1><p>修改/etc/my.cnf配置文件，在[mysqld]下添加编码配置，如下所示：<br>[mysqld]<br>character_set_server=utf8<br>init_connect=’SET NAMES utf8’<br>重新启动mysql服务 : systemctl restart mysqld<br>查看数据库默认编码如下所示： show variables like ‘%character%’;</p>
<p><a href="/2018/05/21/15326672933319/p17.png" data-fancybox="group" data-caption="p17" class="fancybox"><img alt="p17" title="p17" data-src="/2018/05/21/15326672933319/p17.png" class="lazyload"></a></p>
<hr>
<p>默认配置文件路径：<br>配置文件：/etc/my.cnf<br>日志文件：/var/log//var/log/mysqld.log<br>服务启动脚本：/usr/lib/systemd/system/mysqld.service<br>socket文件：/var/run/mysqld/mysqld.pid</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>RESTful架构&amp;前后端分离</title>
    <url>/2018/05/21/15326678665906/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>RESTful：<br>​    【理解RESTful架构】<br>​        <a href="http://www.ruanyifeng.com/blog/2011/09/restful.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2011/09/restful.html</a><br>​    【REST风格框架实战：从MVC到前后端分离】<br>​        <a href="https://blog.csdn.net/justloveyou_/article/details/74379479" target="_blank" rel="noopener">https://blog.csdn.net/justloveyou_/article/details/74379479</a></p>
<p>前后端分离：<br>​    【对于前后端分离技术的理解和实现】<br>​        <a href="https://blog.csdn.net/zxh2075/article/details/78405879" target="_blank" rel="noopener">https://blog.csdn.net/zxh2075/article/details/78405879</a><br>​    【CORS实现AJAX跨域的分析以及Spring实现】<br>​        <a href="https://blog.csdn.net/haoyifen/article/details/52653778" target="_blank" rel="noopener">https://blog.csdn.net/haoyifen/article/details/52653778</a><br>​    【跨域资源共享 CORS 详解】<br>​        <a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2016/04/cors.html</a><br>​    【前后端分离！Vue、Angular、React——单页面WebApp尝试（一）】<br>​        <a href="https://baijiahao.baidu.com/s?id=1584051278393436127&amp;wfr=spider&amp;for=pc&amp;isFailFlag=1" target="_blank" rel="noopener">https://baijiahao.baidu.com/s?id=1584051278393436127&amp;wfr=spider&amp;for=pc&amp;isFailFlag=1</a></p>
]]></content>
      <categories>
        <category>JavaEE</category>
      </categories>
      <tags>
        <tag>JavaEE</tag>
      </tags>
  </entry>
  <entry>
    <title>BUG解决</title>
    <url>/2018/05/21/15326686553417/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>【Maven项目mybatis Invalid bound statement (not found)解决方法 - CSDN博客】<br>URL:  <a href="https://blog.csdn.net/qasrc6/article/details/52796323" target="_blank" rel="noopener">https://blog.csdn.net/qasrc6/article/details/52796323</a></p>
<p>【mac上的chrome解决跨域问题（打不开本地文件请求） - CSDN博客】<br><a href="https://blog.csdn.net/sanlingwu/article/details/79193213" target="_blank" rel="noopener">https://blog.csdn.net/sanlingwu/article/details/79193213</a></p>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>笔记-数据结构</title>
    <url>/2018/05/18/15326692970995/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="笔记-数据结构"><a href="#笔记-数据结构" class="headerlink" title="笔记-数据结构"></a>笔记-数据结构</h1><a id="more"></a>

<blockquote>
<p>参考：《天勤-数据结构高分笔记》</p>
</blockquote>
<p>[TOC]</p>
<h1 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h1><h1 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h1><h1 id="栈和队列"><a href="#栈和队列" class="headerlink" title="栈和队列"></a>栈和队列</h1><h1 id="串"><a href="#串" class="headerlink" title="串"></a>串</h1><h1 id="数组，矩阵与广义表"><a href="#数组，矩阵与广义表" class="headerlink" title="数组，矩阵与广义表"></a>数组，矩阵与广义表</h1><h1 id="树与二叉树"><a href="#树与二叉树" class="headerlink" title="树与二叉树"></a>树与二叉树</h1><h1 id="图"><a href="#图" class="headerlink" title="图"></a>图</h1><h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><h2 id="选择类排序"><a href="#选择类排序" class="headerlink" title="选择类排序"></a>选择类排序</h2><h3 id="简单选择排序"><a href="#简单选择排序" class="headerlink" title="简单选择排序"></a>简单选择排序</h3><ul>
<li><p>思路：从无序序列中选一个最小的关键字与无序序列的第一位交换，从而无序序列-1，有序序列+1；如此循环</p>
</li>
<li><p>代码</p>
  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> 从无序序列中选一个最小的关键字与无序序列的第一位交换，从而无序序列-1，有序序列+1；如此循环</span><br><span class="line">*&#x2F; </span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">void SelectSort(int R[],int n)&#123;&#x2F;&#x2F;R:disoder array n:array long</span><br><span class="line"> </span><br><span class="line"> int i,j,k,temp;</span><br><span class="line"> for(i&#x3D;0;i&lt;n;++i)&#123;&#x2F;&#x2F;pick one from disorder to order every time</span><br><span class="line">  k&#x3D;i;&#x2F;&#x2F;R[k] store the smallest</span><br><span class="line">  for(j&#x3D;i+1;j&lt;n;++j)&#123;&#x2F;&#x2F;pick the smallest</span><br><span class="line">   if(R[j]&lt;R[k])&#123;</span><br><span class="line">    k&#x3D;j;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F;swith it(R[j-1]) with the [first disorder one] </span><br><span class="line">  temp&#x3D;R[k];</span><br><span class="line">  R[k]&#x3D;R[i];</span><br><span class="line">  R[i]&#x3D;temp;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main(int argc, char const *argv[])</span><br><span class="line">&#123;</span><br><span class="line"> int R[]&#x3D;&#123;49,38,65,97,76,13,27,49&#125;;</span><br><span class="line"> int n &#x3D; sizeof(R)&#x2F;sizeof(int);</span><br><span class="line"> int i;</span><br><span class="line">    SelectSort(R,n);</span><br><span class="line">    for(i&#x3D;0;i&lt;n;++i)&#123;</span><br><span class="line">     printf(&quot;%4d&quot;,R[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

</li>
</ul>
<h1 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h1>]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
  </entry>
  <entry>
    <title>SpringBoot学习笔记</title>
    <url>/2018/05/18/15326725480153/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>​    笔记参考：</p>
<p>​    慕课网【2小时学会SpringBoot】</p>
<p>​    《JavaEE开发的颠覆者 Spring Boot实战 》</p>
</blockquote>
<p>[TOC]</p>
<h1 id="1-Spring-Boot开始"><a href="#1-Spring-Boot开始" class="headerlink" title="1 Spring Boot开始"></a>1 Spring Boot开始</h1><h2 id="1-1-SpringBoot介绍"><a href="#1-1-SpringBoot介绍" class="headerlink" title="1.1 SpringBoot介绍"></a>1.1 SpringBoot介绍</h2><pre><code>- SpringBoot和SpringMVC的关系：SpringBoot是SpringMVC的升级版，两者没有必然的联系
- SpringBoot的特点
    1.化繁为简，简化配置
    2.备受关注，是下一代框架
    3.微服务的入门级微框架
- 微服务
    SpringBoot -&gt; SpringCloud -&gt; 微服务

- 课程目录
    1.第一个SpringBoot程序
- 官方文档：https://docs.spring.io/spring-boot/docs/2.0.0.RELEASE/reference/html/  </code></pre><h2 id="1-2-第一个SpringBoot应用"><a href="#1-2-第一个SpringBoot应用" class="headerlink" title="1.2 第一个SpringBoot应用"></a>1.2 第一个SpringBoot应用</h2><p>使用IntelliJ IDEA</p>
<p>具体步骤：</p>
<pre><code>new prpject
-&gt; spring initializr 
-&gt;Defaut
-&gt; web--&gt;web</code></pre><blockquote>
<p>应用创建成功后，会生成相应的目录和文件。<br>其中有一个Application类,它是程序的入口:表示启动springboot</p>
</blockquote>
<pre><code>@SpringBootApplication
public class FirstspringbootApplication {

    public static void main(String[] args) {
        SpringApplication.run(FirstspringbootApplication.class, args);
    }
}</code></pre><p>springboot就是一个maven工程</p>
<p>写一个HelloController：</p>
<pre><code>@RestController     //等同于同时加上了@Controller和@ResponseBody
public class HelloController {

    @RequestMapping(&quot;/hello&quot;)
    public String say(){
        return &quot;hello spring boot&quot;;
    }
}</code></pre><blockquote>
<p>运行 Application的main(),会启动,由于springboot自动内置了servlet容器，所以不需要类似传统的方式，先部署到容器再启动容器。</p>
</blockquote>
<blockquote>
<p><a href="http://localhost:8080/hello" target="_blank" rel="noopener">http://localhost:8080/hello</a>, 就可以在浏览器上看到</p>
</blockquote>
<blockquote>
<p><strong>Application</strong>启动类类放在最外侧,即包含所有子包</p>
<p>原因:spring-boot会自动加载启动类所在包下及其子包下的所有组件.</p>
</blockquote>
<p><strong>其他启动项目的方式：</strong></p>
<pre><code>2. 进入项目根目录，在命令行写：
        mvn spring-boot:run
3. 进入项目&gt;target目录，有jar文件
        java -jar myspringboot-0.0.1-SNAPAHOT.jar</code></pre><h2 id="1-3-项目属性配置"><a href="#1-3-项目属性配置" class="headerlink" title="1.3 项目属性配置"></a>1.3 项目属性配置</h2><h3 id="两种配置文件"><a href="#两种配置文件" class="headerlink" title="两种配置文件"></a>两种配置文件</h3><p>默认application.properties文件</p>
<pre><code>server.port=8081
server.context-path=/sb</code></pre><p>推荐application.yml<br>​<br>    server:<br>        port: 8081<br>        servlet:<br>          context-path: /sb</p>
<blockquote>
<p>port:[空格]8081 ，yml语法必须有空格</p>
</blockquote>
<p>访问：<a href="http://localhost:8081/sb/hello" target="_blank" rel="noopener">http://localhost:8081/sb/hello</a></p>
<h3 id="自定义的属性"><a href="#自定义的属性" class="headerlink" title="自定义的属性"></a>自定义的属性</h3><p>yml:</p>
<pre><code>server:
  port: 8080
  context-path: /sb

girl:
  name: B
  age: 18
  content: &quot;name: ${name},age: ${age}&quot;</code></pre><p>pojo:</p>
<pre><code>@ConfigurationProperties(prefix = &quot;girl&quot;) //将yml文件中前缀为girl 的属性 注入到 此类
@Component  //bean交给Spring管理
public class Girl {
    private String name;
    private String age;
    private String content;
    //set get
}</code></pre><p>controller:</p>
<pre><code>@RestController
public class HelloController {

    //注入配置文件里的name值
    @Value(&quot;${girl.name}&quot;)
    private String name;

    //自动注入
    @Autowired
    private Girl girl;

    @RequestMapping(&quot;/hello&quot;)
    public String say(){
        String s = name+&quot;====&quot;+girl;
        return s;
    }
}</code></pre><h3 id="多环境配置"><a href="#多环境配置" class="headerlink" title="多环境配置"></a>多环境配置</h3><p>application.yml</p>
<pre><code>spring:
  profiles:
    active: dev</code></pre><p>用于开发环境的application-dev.yml</p>
<pre><code>server:
    port: 8081
    servlet:
      context-path: /sb

girl:
  name: 大白
  age: 18
  content: &quot;name: ${girl.name},age: ${girl.age}&quot;</code></pre><h2 id="1-4-Controller的简单使用"><a href="#1-4-Controller的简单使用" class="headerlink" title="1.4 Controller的简单使用"></a>1.4 Controller的简单使用</h2><pre><code>@Controller
@RestController: Spring4引入，@Controller+ @ResponseBody
@RequestMapping</code></pre><h3 id="获取参数"><a href="#获取参数" class="headerlink" title="获取参数"></a>获取参数</h3><pre><code>@PathVariable: 获取url中的数据
@RequestParam：获取请求参数的值 
@GetMapping: 组合注解</code></pre><p>@PathVariable</p>
<pre><code>@RequestMapping(&quot;/hello/{id}&quot;)
public String say(@PathVariable Integer id){

    return id.toString();
}</code></pre><blockquote>
<p>url:<a href="http://localhost:8081/sb/hello/1357" target="_blank" rel="noopener">http://localhost:8081/sb/hello/1357</a></p>
</blockquote>
<p>@RequestParam</p>
<p>若url格式为 <a href="http://localhost:8081/sb/hello?id=100" target="_blank" rel="noopener">http://localhost:8081/sb/hello?id=100</a></p>
<p>则使用@RequestParam</p>
<pre><code>@RequestMapping(&quot;/hello&quot;)
public String say(@RequestParam(&quot;id&quot;) Integer id){

    return id.toString();
}</code></pre><p>@GetMapping,@PostMapping</p>
<pre><code>是组合注解，@GetMapping=@RequestMapping(method=RequestMethod.GET)</code></pre><h1 id="2-SpringBoot运行原理"><a href="#2-SpringBoot运行原理" class="headerlink" title="2 SpringBoot运行原理"></a>2 SpringBoot运行原理</h1><h2 id="2-1-自动配置"><a href="#2-1-自动配置" class="headerlink" title="2.1 自动配置"></a>2.1 自动配置</h2><p>自动配置原理：基于条件配置bean</p>
<p>关于自动配置的源码包：</p>
<p><a href="/2018/05/18/15326725480153/1.png" data-fancybox="group" data-caption="1" class="fancybox"><img alt="1" title="1" data-src="/2018/05/18/15326725480153/1.png" class="lazyload"></a></p>
<p>查看启用和未启用的自动配置：</p>
<p>​    在yml文件中添加。debug: true</p>
<p>​    启动后控制台会输出Positive matches:（已启用）和Negative matches:（未启用）</p>
<h2 id="2-2-运作原理"><a href="#2-2-运作原理" class="headerlink" title="2.2 运作原理"></a>2.2 运作原理</h2><p>@SpringBootApplication注解是一个组合注解，源码如下</p>
<p><a href="/2018/05/18/15326725480153/2.png" data-fancybox="group" data-caption="2" class="fancybox"><img alt="2" title="2" data-src="/2018/05/18/15326725480153/2.png" class="lazyload"></a></p>
<p>它的核心功能由@EnableAutoConfiguration提供。@EnableAutoConfiguration源码如下：</p>
<p><a href="/2018/05/18/15326725480153/3.png" data-fancybox="group" data-caption="3" class="fancybox"><img alt="3" title="3" data-src="/2018/05/18/15326725480153/3.png" class="lazyload"></a></p>
<p>AutoConfigurationImportSelector使用SpringFactoriesLoader.loadFactoryNames方法扫描具有META-INF/spring.factories文件的jar包。</p>
<p>打开spring-boot-autoconfigure-2.0.2.RELEASE.jar的spring.factories，查看文件中声明了哪些自动配置</p>
<p><a href="/2018/05/18/15326725480153/4.png" data-fancybox="group" data-caption="4" class="fancybox"><img alt="4" title="4" data-src="/2018/05/18/15326725480153/4.png" class="lazyload"></a></p>
<h2 id="2-3-核心注解"><a href="#2-3-核心注解" class="headerlink" title="2.3 核心注解"></a>2.3 核心注解</h2><p>简单分析@ConditionalOnWebApplication注解</p>
<p><a href="/2018/05/18/15326725480153/5.png" data-fancybox="group" data-caption="5" class="fancybox"><img alt="5" title="5" data-src="/2018/05/18/15326725480153/5.png" class="lazyload"></a></p>
<p>能看出，此注解使用的条件是：OnWebApplicationCondition，下面看这个条件是如何构造的，</p>
<p>​    从isWebApplication方法可以看出判断条件</p>
<h2 id="2-4-实例分析：http的编码配置"><a href="#2-4-实例分析：http的编码配置" class="headerlink" title="2.4 实例分析：http的编码配置"></a>2.4 实例分析：http的编码配置</h2><p>分析一个简单的springboot内置自动配置功能：http的编码配置</p>
<p>常规：在web.xml中配置filter:</p>
<p><a href="/2018/05/18/15326725480153/6.png" data-fancybox="group" data-caption="6" class="fancybox"><img alt="6" title="6" data-src="/2018/05/18/15326725480153/6.png" class="lazyload"></a></p>
<p>自动配置要满足的条件：</p>
<p>1）能配置CharaterEncodingFilter这个类</p>
<p>2）能配置encoding和farceEncoding两个参数</p>
<p><strong>1. 配置参数</strong></p>
<p>查看源码</p>
<p><a href="/2018/05/18/15326725480153/7.png" data-fancybox="group" data-caption="7" class="fancybox"><img alt="7" title="7" data-src="/2018/05/18/15326725480153/7.png" class="lazyload"></a></p>
<p>![屏幕快照 2018-05-18 下午9.36.14](/Users/machine/Desktop/屏幕快照 2018-05-18 下午9.36.14.png)</p>
<p>代码说明：</p>
<p>​    1）在application.yml文件中的前缀是 spring.http.encoding</p>
<p>​    2）默认编码为UTF-8，若要修改，则使用spring.http.encoding.charset=”编码”</p>
<p><strong>2.配置bean</strong></p>
<p><a href="/2018/05/18/15326725480153/8.png" data-fancybox="group" data-caption="8" class="fancybox"><img alt="8" title="8" data-src="/2018/05/18/15326725480153/8.png" class="lazyload"></a></p>
<p>代码解释：</p>
<p>​    1）EnableConfigurationProperties属性注入</p>
<p>​    2）基于条件配置bean: ConditionalOnXXXX</p>
<h2 id="2-5-实战：给自定义类实现自动配置"><a href="#2-5-实战：给自定义类实现自动配置" class="headerlink" title="2.5 实战：给自定义类实现自动配置"></a>2.5 实战：给自定义类实现自动配置</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 自己写一个自动配置 和 starter pom</span><br><span class="line">- 要求：某个类存在时，自动配置这个类的bean，并可在applicarion.properties中设置bean</span><br><span class="line">- 源码文件：springbootstarterhelllo</span><br></pre></td></tr></table></figure></div>

<p>(1)新建maven工程</p>
<p>(2)在pom中添加</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>(3)属性配置</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"hello"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String MSG = <span class="string">"world"</span>; <span class="comment">//默认配置</span></span><br><span class="line">    <span class="keyword">private</span> String msg = MSG;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMsg</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>(4)判断依据类: 根据此类存在与否来，在创建这个类的bean</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String msg;<span class="comment">//就是要配置这个默认值（某个类的某个属性的默认值）</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello "</span>+msg;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMsg</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>(5)自动配置类：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnClass;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(HelloProperties<span class="class">.<span class="keyword">class</span>)   //注入</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnClass</span>(<span class="title">Hello</span>.<span class="title">class</span>) //当路径下有指定类</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnProperty</span>(<span class="title">prefix</span> </span>= <span class="string">"hello"</span>,value = <span class="string">"enabled"</span>,matchIfMissing = <span class="keyword">true</span>)	<span class="comment">//指定属性书否有指定值</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HelloProperties helloProperties;<span class="comment">//已含hello属性的默认值</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        返回注入了默认值的Hello</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span>(Hello<span class="class">.<span class="keyword">class</span>) //当容器里没有指定<span class="title">bean</span></span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">Hello</span> <span class="title">hello</span>()</span>&#123;</span><br><span class="line">        Hello hello = <span class="keyword">new</span> Hello();</span><br><span class="line">        hello.setMsg(helloProperties.getMsg());</span><br><span class="line">        <span class="keyword">return</span> hello;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>(6)注册配置</p>
<p><a href="/2018/05/18/15326725480153/9.png" data-fancybox="group" data-caption="9" class="fancybox"><img alt="9" title="9" data-src="/2018/05/18/15326725480153/9.png" class="lazyload"></a></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration&#x3D;\</span><br><span class="line">machine.hello.HelloAutoConfiguration</span><br></pre></td></tr></table></figure></div>

<p>(7)将以上项目发布到本地仓库，在springboot项目中添加依赖</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;machine&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-helllo&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></div>

<p>(8)使用starter</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span>     <span class="comment">//等同于同时加上了@Controller和@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Hello hello; <span class="comment">//通过spring自动配置完成的 属性默认值</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello "</span>+ hello.getMsg();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>(9)手动配置属性,在yml中添加</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hello:</span><br><span class="line">    msg: machine</span><br></pre></td></tr></table></figure></div>



<h1 id="3-SpringBoot开发干货"><a href="#3-SpringBoot开发干货" class="headerlink" title="3 SpringBoot开发干货"></a>3 SpringBoot开发干货</h1><h2 id="3-1-Thymeleaf模版引擎"><a href="#3-1-Thymeleaf模版引擎" class="headerlink" title="3.1 Thymeleaf模版引擎"></a>3.1 Thymeleaf模版引擎</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. Spring Boot包括对以下模板引擎的自动配置支持：FreeMarker  Groovy  Thymeleaf  Mustache</span><br><span class="line">2. 如果可能，应避免使用JSP，当使用嵌入式servlet容器时，JSP有问题</span><br><span class="line">3. Spring Boot应用推荐Thymeleaf，完美支持SpringMVC</span><br></pre></td></tr></table></figure></div>

<h3 id="Thymeleaf基础知识"><a href="#Thymeleaf基础知识" class="headerlink" title="Thymeleaf基础知识"></a>Thymeleaf基础知识</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 是一个java类库，是xml&#x2F;css&#x2F;html模版引擎，作为MVC的View</span><br><span class="line">- 提供模块与springMVC集成，可完全替代JSP</span><br></pre></td></tr></table></figure></div>

<p>使用语法教程见【Thymeleaf常用.md】</p>
<h3 id="与SpringMVC集成"><a href="#与SpringMVC集成" class="headerlink" title="与SpringMVC集成"></a>与SpringMVC集成</h3><h3 id="SpringBoot的Thymeleaf支持"><a href="#SpringBoot的Thymeleaf支持" class="headerlink" title="SpringBoot的Thymeleaf支持"></a>SpringBoot的Thymeleaf支持</h3><p>springboot 通过哦org.springframework.boot.autoconfigure.thymeleaf实现自动配置</p>
<p>查看ThymeleafProperties源码，可以看到默认设置的属性，前缀为spring.thymeleaf</p>
<p>部分代码如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> String prefix = <span class="string">"classpath:/templates/"</span>;	<span class="comment">//默认模版放置路径</span></span><br><span class="line"><span class="keyword">private</span> String suffix = <span class="string">".html"</span>;					<span class="comment">//默认后缀</span></span><br><span class="line"><span class="keyword">private</span> String mode = <span class="string">"HTML"</span>;</span><br><span class="line"><span class="keyword">private</span> Charset encoding;</span><br></pre></td></tr></table></figure></div>

<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p>(1)新增starter pom</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></div>

<p>(2)pojo</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="comment">//set get</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>(3)Controller</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">say</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setName(<span class="string">"黄老邪"</span>);</span><br><span class="line">    user.setAge(<span class="number">1024</span>);</span><br><span class="line">    model.addAttribute(<span class="string">"user"</span>,user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"main"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>(4)页面 classpath:resources/templates</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.name&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.age&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>



<h2 id="3-2-SpringBoot整合Mybatis"><a href="#3-2-SpringBoot整合Mybatis" class="headerlink" title="3.2 SpringBoot整合Mybatis"></a>3.2 SpringBoot整合Mybatis</h2><h3 id="基本整合"><a href="#基本整合" class="headerlink" title="基本整合"></a>基本整合</h3><blockquote>
<p> 使用mybatis官方提供的mybatis-spring-boot-starter方案</p>
<p>官网文档：<a href="http://www.mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/index.html" target="_blank" rel="noopener">http://www.mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/index.html</a></p>
<p>​           <a href="https://github.com/mybatis/spring-boot-starter/wiki/Quick-Start" target="_blank" rel="noopener">https://github.com/mybatis/spring-boot-starter/wiki/Quick-Start</a></p>
</blockquote>
<p>(1)starter pom : 选mybatis，mysql</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.mybatis.spring.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.3.2&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;scope&gt;runtime&lt;&#x2F;scope&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></div>

<p>(2)数据源</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">datasource:</span><br><span class="line">    url: jdbc:mysql:&#x2F;&#x2F;10.211.55.6:3306&#x2F;jdbc</span><br><span class="line">    username: machine</span><br><span class="line">    password: 4869</span><br><span class="line">    driver-class-name: com.mysql.jdbc.Driver</span><br></pre></td></tr></table></figure></div>

<p>MyBatis-Spring-Boot-Starter将：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 自动检测现有的数据源</span><br><span class="line">- 自动将数据源注入SqlSessionFactory</span><br><span class="line">- 自动创建从SqlSessionFactory获取的SqlSessionTemplate实例</span><br><span class="line">- 自动扫描您的映射器，将它们链接到SqlSessionTemplate并将它们注册到Spring上下文，以便将它们注入到bean中</span><br></pre></td></tr></table></figure></div>

<p>(3)在启动类添加mapper包扫描</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@MapperScan(&quot;machine.springboot01.mapper&quot;)</span><br><span class="line">public class Springboot01Application &#123;</span><br><span class="line"></span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">		SpringApplication.run(Springboot01Application.class, args);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这样springboot启动时候会自动扫描包（不建议在每个mapper类中加@Mapper）</p>
<p>(4)Mapper类编写（基于注解，还有原始的基于xml的）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"SELECT * FROM USER"</span>)</span><br><span class="line">    <span class="meta">@Results</span>(&#123;	<span class="comment">//若字段相同，Results可以不写</span></span><br><span class="line">        <span class="meta">@Result</span>(property = <span class="string">"username"</span>,  column = <span class="string">"username"</span>),</span><br><span class="line">        <span class="meta">@Result</span>(property = <span class="string">"id"</span>, column = <span class="string">"id"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	<span class="doctag">@Select</span> 是查询类的注解，所有的查询均使用这个</span></span><br><span class="line"><span class="comment">    <span class="doctag">@Result</span> 修饰返回的结果集，关联实体类属性和数据库字段一一对应，如果实体类属性和数据库属性名保持一致，就不需要这个属性来修饰。</span></span><br><span class="line"><span class="comment">    <span class="doctag">@Insert</span> 插入数据库使用，直接传入实体类会自动解析属性到对应的值</span></span><br><span class="line"><span class="comment">    <span class="doctag">@Update</span> 负责修改，也可以直接传入对象</span></span><br><span class="line"><span class="comment">    <span class="doctag">@delete</span> 负责删除</span></span><br><span class="line"><span class="comment">**/</span></span><br></pre></td></tr></table></figure></div>

<p>pojo</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class User &#123;</span><br><span class="line">    private String id;</span><br><span class="line">    private String username;</span><br><span class="line">    private String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>table    </p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE &#96;USER&#96; (</span><br><span class="line">  &#96;id&#96; int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  &#96;username&#96; varchar(20) DEFAULT NULL,</span><br><span class="line">  &#96;email&#96; varchar(40) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;5 DEFAULT CHARSET&#x3D;utf8;</span><br></pre></td></tr></table></figure></div>

<p>(5)测试</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">Springboot01ApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFind</span><span class="params">()</span></span>&#123;</span><br><span class="line">		List&lt;User&gt; userList = userMapper.findAll();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="关于事务"><a href="#关于事务" class="headerlink" title="关于事务"></a>关于事务</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">springboot自动开启了JDBC事务管理，不需要手动添加</span><br><span class="line"></span><br><span class="line">只要在需要使用事务的类或方法上使用@Transactional注解</span><br></pre></td></tr></table></figure></div>

<h3 id="逆向工程"><a href="#逆向工程" class="headerlink" title="逆向工程"></a>逆向工程</h3><p>使用maven插件方式生成逆向工程</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">   &lt;groupId&gt;org.mybatis.generator&lt;&#x2F;groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">   &lt;version&gt;1.3.5&lt;&#x2F;version&gt;</span><br><span class="line">   &lt;configuration&gt;</span><br><span class="line">      &lt;configurationFile&gt;src&#x2F;main&#x2F;resources&#x2F;generatorConfig.xml&lt;&#x2F;configurationFile&gt;</span><br><span class="line">      &lt;verbose&gt;true&lt;&#x2F;verbose&gt;</span><br><span class="line">      &lt;overwrite&gt;true&lt;&#x2F;overwrite&gt;</span><br><span class="line">   &lt;&#x2F;configuration&gt;</span><br><span class="line">   &lt;executions&gt;</span><br><span class="line">      &lt;execution&gt;</span><br><span class="line">         &lt;id&gt;Generate MyBatis Artifacts&lt;&#x2F;id&gt;</span><br><span class="line">         &lt;goals&gt;</span><br><span class="line">            &lt;goal&gt;generate&lt;&#x2F;goal&gt;</span><br><span class="line">         &lt;&#x2F;goals&gt;</span><br><span class="line">      &lt;&#x2F;execution&gt;</span><br><span class="line">   &lt;&#x2F;executions&gt;</span><br><span class="line">   &lt;dependencies&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">         &lt;groupId&gt;org.mybatis.generator&lt;&#x2F;groupId&gt;</span><br><span class="line">         &lt;artifactId&gt;mybatis-generator-core&lt;&#x2F;artifactId&gt;</span><br><span class="line">         &lt;version&gt;1.3.5&lt;&#x2F;version&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">         &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">         &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">         &lt;scope&gt;runtime&lt;&#x2F;scope&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line">   &lt;&#x2F;dependencies&gt;</span><br><span class="line">&lt;&#x2F;plugin&gt;</span><br></pre></td></tr></table></figure></div>

<p>在以上路径添加generatorConfig.xml</p>
<p>使用 mvn mybatis-generator:generate 或用IEDA即可</p>
<h3 id="分页插件"><a href="#分页插件" class="headerlink" title="分页插件"></a>分页插件</h3><p>pagehelper项目地址<a href="https://github.com/pagehelper" target="_blank" rel="noopener">https://github.com/pagehelper</a></p>
<p>​                    <a href="https://github.com/pagehelper/pagehelper-spring-boot" target="_blank" rel="noopener">https://github.com/pagehelper/pagehelper-spring-boot</a></p>
<p>pom</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 分页插件 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.github.pagehelper&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;pagehelper-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2.5&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></div>

<p>配置</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">不需要配置，自动注入配置</span><br></pre></td></tr></table></figure></div>

<p>使用</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	1. PageHelper.startPage 静态方法调用</span></span><br><span class="line"><span class="comment">		- 参数说明：</span></span><br><span class="line"><span class="comment">				pageNum 开始页数</span></span><br><span class="line"><span class="comment">	  			pageSize 每页显示的数据条数</span></span><br><span class="line"><span class="comment">		- 使用方法：</span></span><br><span class="line"><span class="comment">				在你需要进行分页的 MyBatis 查询方法前调用 PageHelper.startPage 静态方法即可，紧跟在这个方法后的第一个MyBatis 查询方法会被进行分页。	</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	2. 使用PageInfo的用法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPageHelper</span><span class="params">()</span></span>&#123; </span><br><span class="line">    PageHelper.startPage(<span class="number">0</span>,<span class="number">2</span>);</span><br><span class="line">    List&lt;User&gt; userList = userMapper.findAll();<span class="comment">//结果userList里面只有2条数据</span></span><br><span class="line">    </span><br><span class="line">    PageInfo page = <span class="keyword">new</span> PageInfo(userList);<span class="comment">//用PageInfo对结果进行包装</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">		提供了很多属性</span></span><br><span class="line"><span class="comment">		page.getPageNum();</span></span><br><span class="line"><span class="comment">		page.getPageSize();</span></span><br><span class="line"><span class="comment">		page.getStartRow();//第一条记录的标号</span></span><br><span class="line"><span class="comment">		page.getEndRow();//最后一条记录的标号</span></span><br><span class="line"><span class="comment">		page.getTotal();//总记录数</span></span><br><span class="line"><span class="comment">		page.getPages();//总页数</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="3-3-统一异常处理器"><a href="#3-3-统一异常处理器" class="headerlink" title="3.3 统一异常处理器"></a>3.3 统一异常处理器</h2><h2 id="3-4-开发热部署"><a href="#3-4-开发热部署" class="headerlink" title="3.4 开发热部署"></a>3.4 开发热部署</h2><p>基于IDEA的springboot热部署</p>
<p>1 关闭模版缓存</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  thymeleaf:</span><br><span class="line">      cache: false  # 关闭模版缓存，利于页面开发测试</span><br></pre></td></tr></table></figure></div>

<p>2 pom</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--热部署--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-devtools&lt;&#x2F;artifactId&gt;</span><br><span class="line">	&lt;optional&gt;true&lt;&#x2F;optional&gt;&lt;!--依赖不会传递--&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></div>

<p>3 IDEA设置</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. preperences &gt; Build ,Execution,Deplment &gt; compiler &gt; build project automatically</span><br><span class="line">2. cmd+shift+a &gt; 输入Registry回车 &gt; 勾选 complier.automake.allow.when.app.running</span><br></pre></td></tr></table></figure></div>

<p>效果：修改类 &gt; 会重启</p>
<h2 id="3-5-项目部署到linux"><a href="#3-5-项目部署到linux" class="headerlink" title="3.5 项目部署到linux"></a>3.5 项目部署到linux</h2><p> <strong>springboot部署到linux</strong></p>
<h3 id="jar形式"><a href="#jar形式" class="headerlink" title="jar形式"></a><strong>jar形式</strong></h3><p>1 打包：mvn package</p>
<p>2 测试运行：java -jar XXX.jar 即可</p>
<p>3 注册为linux服务</p>
<p>(1)修改spring-boot-maven-plugin</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;plugins&gt;</span><br><span class="line">    &lt;plugin&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;configuration&gt;</span><br><span class="line">        	&lt;executable&gt;true&lt;&#x2F;executable&gt;</span><br><span class="line">        &lt;&#x2F;configuration&gt;</span><br><span class="line">    &lt;&#x2F;plugin&gt;</span><br><span class="line">&lt;&#x2F;plugins&gt;</span><br></pre></td></tr></table></figure></div>

<p>然后package打包</p>
<p>(2)注册为linux服务</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. linux安装jdk</span><br><span class="line">2. 上传jar</span><br><span class="line">3. 基于Systemd注册服务</span><br><span class="line">	见笔记【linux-基于Systemd注册服务】</span><br><span class="line">4. 开启服务</span><br><span class="line">	sudo systemctl start machine-bootdo</span><br></pre></td></tr></table></figure></div>





]]></content>
      <categories>
        <category>Spring</category>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记-微信小程序学习</title>
    <url>/2018/05/17/15326693355030/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>参考：【慕课网】</p>
</blockquote>
<p>[TOC]</p>
<h1 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h1><h2 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h2><p>开发文档：<a href="http://developers.weixin.qq.com/miniprogram/dev/api/" target="_blank" rel="noopener">http://developers.weixin.qq.com/miniprogram/dev/api/</a></p>
<p>开发者工具：扫码登录，创建小程序项目(普通快速模版)</p>
<p><strong>app.json说明</strong></p>
<p>代码如下</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;pages&quot;:[</span><br><span class="line">    &quot;pages&#x2F;index&#x2F;index&quot;,</span><br><span class="line">    &quot;pages&#x2F;logs&#x2F;logs&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;window&quot;:&#123;</span><br><span class="line">    &quot;backgroundTextStyle&quot;:&quot;light&quot;,</span><br><span class="line">    &quot;navigationBarBackgroundColor&quot;: &quot;#fff&quot;,</span><br><span class="line">    &quot;navigationBarTitleText&quot;: &quot;WeChat&quot;,</span><br><span class="line">    &quot;navigationBarTextStyle&quot;:&quot;black&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>pages开发工具会自动在里面添加项目所有页面</p>
<h2 id="开发开始"><a href="#开发开始" class="headerlink" title="开发开始"></a>开发开始</h2><h3 id="初步"><a href="#初步" class="headerlink" title="初步"></a>初步</h3><p>新建页面：在pages目录下新建list目录，在list目录下新建page,名字叫list</p>
<p>更改标题：在list.json中添加</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;navigationBarTitleText&quot;: &quot;区域信息列表&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>组件介绍：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">view：类似于div</span><br><span class="line">scroll-view：可滚动视图区域</span><br><span class="line">text：文本</span><br><span class="line">	 &lt;text&gt;&#123;&#123;text&#125;&#125;&lt;&#x2F;text&gt;</span><br><span class="line">navigator：页面链接，相当于a</span><br><span class="line">button：按钮</span><br></pre></td></tr></table></figure></div>

<h3 id="后台通过json与页面交互"><a href="#后台通过json与页面交互" class="headerlink" title="后台通过json与页面交互"></a>后台通过json与页面交互</h3><p>设置：项目设置&gt;不校验合法域名、web-view（业务域名）、TLS 版本以及 HTTPS 证书</p>
<p>​    这样<a href="http://localhost:8080/sb/hello这种域名才会有效" target="_blank" rel="noopener">http://localhost:8080/sb/hello这种域名才会有效</a></p>
<p>list.wxml</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span>&gt;</span>数据：&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>list.js</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面显示</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  onShow: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">    wx.request(&#123;</span><br><span class="line">      url: <span class="string">'http://localhost:8080/sb/hello'</span>,</span><br><span class="line">      success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;   </span><br><span class="line">        <span class="keyword">var</span> mydata = res.data;<span class="comment">//json的内容</span></span><br><span class="line">        <span class="built_in">console</span>.log(mydata);</span><br><span class="line">        that.setData(&#123; <span class="attr">msg</span>: mydata &#125;); <span class="comment">//给页面参数&#123;&#123;msg&#125;&#125;注入值</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	- url请求返回的是json</span></span><br><span class="line"><span class="comment">	- wx.request的content-type 默认为 'application/json'</span></span><br><span class="line"><span class="comment">	- res.data就在控制台打印出了json串</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div>





]]></content>
      <categories>
        <category>Web前端</category>
      </categories>
      <tags>
        <tag>Web前端</tag>
      </tags>
  </entry>
  <entry>
    <title>shiro学习笔记</title>
    <url>/2018/05/17/15326723779885/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>参考：【itheima】</p>
</blockquote>
<p>[TOC]</p>
<h1 id="传统认证方式与shiro对比"><a href="#传统认证方式与shiro对比" class="headerlink" title="传统认证方式与shiro对比"></a>传统认证方式与shiro对比</h1><p>传统：用户请求到达Action—&gt;调用Service—&gt;返回结果，若成功，就保存session—&gt;返回视图</p>
<p>shiro：用户请求到达Action—&gt;调用shiro实现认证—&gt;从shiro获取认证结果—&gt;若成功，就保存session</p>
<h1 id="shiro概述"><a href="#shiro概述" class="headerlink" title="shiro概述"></a>shiro概述</h1><p>apache的安全框架，解决系统<strong>认证和授权</strong>问题，同时提供回话管理，数据加密</p>
<p><a href="/2018/05/17/15326723779885/1.png" data-fancybox="group" data-caption="1" class="fancybox"><img alt="1" title="1" data-src="/2018/05/17/15326723779885/1.png" class="lazyload"></a></p>
<p><strong>Authentication</strong>：身份认证/登录，验证用户是不是拥有相应的身份；</p>
<p><strong>Authorization</strong>：授权，即权限验证，验证某个已认证的用户是否拥有某个权限；即判断用户是否能做事情，常见的如：验证某个用户是否拥有某个角色。或者细粒度的验证某个用户对某个资源是否具有某个权限；</p>
<p><strong>Session Manager</strong>：会话管理，即用户登录后就是一次会话，在没有退出之前，它的所有信息都在会话中；会话可以是普通JavaSE环境的，也可以是如Web环境的；</p>
<p><strong>Cryptography</strong>：加密，保护数据的安全性，如密码加密存储到数据库，而不是明文存储；</p>
<p>Caching：缓存，比如用户登录后，其用户信息、拥有的角色/权限不必每次去查(放在缓存里调用就行)，这样可以提高效率；</p>
<h1 id="shiro与应用程序交互过程"><a href="#shiro与应用程序交互过程" class="headerlink" title="shiro与应用程序交互过程"></a>shiro与应用程序交互过程</h1><p>从外部看API：</p>
<p><a href="/2018/05/17/15326723779885/1-7477069.png" data-fancybox="group" data-caption="1-7477069" class="fancybox"><img alt="1-7477069" title="1-7477069" data-src="/2018/05/17/15326723779885/1-7477069.png" class="lazyload"></a></p>
<p>1、应用代码通过Subject来进行认证和授权，而Subject又委托给SecurityManager；</p>
<p>2、我们需要给Shiro的SecurityManager注入Realm，从而让SecurityManager能得到合法的用户及其权限进行判断。</p>
<h1 id="shiro的过滤器"><a href="#shiro的过滤器" class="headerlink" title="shiro的过滤器"></a>shiro的过滤器</h1><p>权限拦截器</p>
<table>
<thead>
<tr>
<th>过滤器简称</th>
<th>对应的java类</th>
</tr>
</thead>
<tbody><tr>
<td>anon</td>
<td>org.apache.shiro.web.filter.authc.AnonymousFilter</td>
</tr>
<tr>
<td>authc</td>
<td>org.apache.shiro.web.filter.authc.FormAuthenticationFilter</td>
</tr>
<tr>
<td>authcBasic</td>
<td>org.apache.shiro.web.filter.authc.BasicHttpAuthenticationFilter</td>
</tr>
<tr>
<td>perms</td>
<td>org.apache.shiro.web.filter.authz.PermissionsAuthorizationFilter</td>
</tr>
<tr>
<td>port</td>
<td>org.apache.shiro.web.filter.authz.PortFilter</td>
</tr>
<tr>
<td>rest</td>
<td>org.apache.shiro.web.filter.authz.HttpMethodPermissionFilter</td>
</tr>
<tr>
<td>roles</td>
<td>org.apache.shiro.web.filter.authz.RolesAuthorizationFilter</td>
</tr>
<tr>
<td>ssl</td>
<td>org.apache.shiro.web.filter.authz.SslFilter</td>
</tr>
<tr>
<td>user</td>
<td>org.apache.shiro.web.filter.authc.UserFilter</td>
</tr>
<tr>
<td>logout</td>
<td>org.apache.shiro.web.filter.authc.LogoutFilter</td>
</tr>
</tbody></table>
<p>jsp shiro标签</p>
<table>
<thead>
<tr>
<th><strong>标签名称</strong></th>
<th><strong>标签条件（均是显示标签内容）</strong></th>
</tr>
</thead>
<tbody><tr>
<td>&lt;shiro:authenticated &gt;</td>
<td>登录之后</td>
</tr>
<tr>
<td>&lt;shiro:notAuthenticated &gt;</td>
<td>不在登录状态时</td>
</tr>
<tr>
<td>&lt;shiro:guest &gt;</td>
<td>用户在没有RememberMe时</td>
</tr>
<tr>
<td>&lt;shiro:user &gt;</td>
<td>用户在RememberMe时</td>
</tr>
<tr>
<td>&lt;shiro:hasAnyRoles name=*”abc,123”  &gt;*</td>
<td>在有abc或者123角色时</td>
</tr>
<tr>
<td>&lt;shiro:hasRole name=*”abc”&gt;*</td>
<td>拥有角色abc</td>
</tr>
<tr>
<td>&lt;shiro:lacksRole name=*”abc”&gt;*</td>
<td>没有角色abc</td>
</tr>
<tr>
<td>&lt;shiro:hasPermission name=*”abc”&gt;*</td>
<td>拥有权限资源abc</td>
</tr>
<tr>
<td>&lt;shiro:lacksPermission name=*”abc”&gt;*</td>
<td>没有abc权限资源</td>
</tr>
<tr>
<td>&lt;shiro:principal &gt;</td>
<td>默认显示用户名称</td>
</tr>
</tbody></table>
<h1 id="springboot整合shiro"><a href="#springboot整合shiro" class="headerlink" title="springboot整合shiro"></a>springboot整合shiro</h1><blockquote>
<p>参考：<a href="https://blog.csdn.net/ityouknow/article/details/73836159" target="_blank" rel="noopener">https://blog.csdn.net/ityouknow/article/details/73836159</a></p>
</blockquote>
<h2 id="pom"><a href="#pom" class="headerlink" title="pom"></a>pom</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.shiro&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;shiro-spring&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.3.2&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></div>

<p>建表</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用户表</span><br><span class="line">DROP TABLE IF EXISTS &#96;module&#96;;</span><br><span class="line">CREATE TABLE &#96;module&#96; (</span><br><span class="line">  &#96;mid&#96; int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  &#96;mname&#96; varchar(255) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;mid&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;5 DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Records of module</span><br><span class="line">-- ----------------------------</span><br><span class="line">INSERT INTO &#96;module&#96; VALUES (&#39;1&#39;, &#39;add&#39;);</span><br><span class="line">INSERT INTO &#96;module&#96; VALUES (&#39;2&#39;, &#39;delete&#39;);</span><br><span class="line">INSERT INTO &#96;module&#96; VALUES (&#39;3&#39;, &#39;query&#39;);</span><br><span class="line">INSERT INTO &#96;module&#96; VALUES (&#39;4&#39;, &#39;update&#39;);</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for module_role</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS &#96;module_role&#96;;</span><br><span class="line">CREATE TABLE &#96;module_role&#96; (</span><br><span class="line">  &#96;rid&#96; int(11) DEFAULT NULL,</span><br><span class="line">  &#96;mid&#96; int(11) DEFAULT NULL,</span><br><span class="line">  KEY &#96;rid&#96; (&#96;rid&#96;),</span><br><span class="line">  KEY &#96;mid&#96; (&#96;mid&#96;),</span><br><span class="line">  CONSTRAINT &#96;mid&#96; FOREIGN KEY (&#96;mid&#96;) REFERENCES &#96;module&#96; (&#96;mid&#96;),</span><br><span class="line">  CONSTRAINT &#96;rid&#96; FOREIGN KEY (&#96;rid&#96;) REFERENCES &#96;role&#96; (&#96;rid&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Records of module_role</span><br><span class="line">-- ----------------------------</span><br><span class="line">INSERT INTO &#96;module_role&#96; VALUES (&#39;1&#39;, &#39;1&#39;);</span><br><span class="line">INSERT INTO &#96;module_role&#96; VALUES (&#39;1&#39;, &#39;2&#39;);</span><br><span class="line">INSERT INTO &#96;module_role&#96; VALUES (&#39;1&#39;, &#39;3&#39;);</span><br><span class="line">INSERT INTO &#96;module_role&#96; VALUES (&#39;1&#39;, &#39;4&#39;);</span><br><span class="line">INSERT INTO &#96;module_role&#96; VALUES (&#39;2&#39;, &#39;1&#39;);</span><br><span class="line">INSERT INTO &#96;module_role&#96; VALUES (&#39;2&#39;, &#39;3&#39;);</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for role</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS &#96;role&#96;;</span><br><span class="line">CREATE TABLE &#96;role&#96; (</span><br><span class="line">  &#96;rid&#96; int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  &#96;rname&#96; varchar(255) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;rid&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;3 DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Records of role</span><br><span class="line">-- ----------------------------</span><br><span class="line">INSERT INTO &#96;role&#96; VALUES (&#39;1&#39;, &#39;admin&#39;);</span><br><span class="line">INSERT INTO &#96;role&#96; VALUES (&#39;2&#39;, &#39;customer&#39;);</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for user</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS &#96;user&#96;;</span><br><span class="line">CREATE TABLE &#96;user&#96; (</span><br><span class="line">  &#96;uid&#96; int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  &#96;username&#96; varchar(255) DEFAULT NULL,</span><br><span class="line">  &#96;password&#96; varchar(255) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;uid&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;3 DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Records of user</span><br><span class="line">-- ----------------------------</span><br><span class="line">INSERT INTO &#96;user&#96; VALUES (&#39;1&#39;, &#39;hlhdidi&#39;, &#39;123&#39;);</span><br><span class="line">INSERT INTO &#96;user&#96; VALUES (&#39;2&#39;, &#39;xyycici&#39;, &#39;1992&#39;);</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for user_role</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS &#96;user_role&#96;;</span><br><span class="line">CREATE TABLE &#96;user_role&#96; (</span><br><span class="line">  &#96;uid&#96; int(11) DEFAULT NULL,</span><br><span class="line">  &#96;rid&#96; int(11) DEFAULT NULL,</span><br><span class="line">  KEY &#96;u_fk&#96; (&#96;uid&#96;),</span><br><span class="line">  KEY &#96;r_fk&#96; (&#96;rid&#96;),</span><br><span class="line">  CONSTRAINT &#96;r_fk&#96; FOREIGN KEY (&#96;rid&#96;) REFERENCES &#96;role&#96; (&#96;rid&#96;),</span><br><span class="line">  CONSTRAINT &#96;u_fk&#96; FOREIGN KEY (&#96;uid&#96;) REFERENCES &#96;user&#96; (&#96;uid&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Records of user_role</span><br><span class="line">-- ----------------------------</span><br><span class="line">INSERT INTO &#96;user_role&#96; VALUES (&#39;1&#39;, &#39;1&#39;);</span><br><span class="line">INSERT INTO &#96;user_role&#96; VALUES (&#39;2&#39;, &#39;2&#39;);</span><br></pre></td></tr></table></figure></div>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>密码比较器</p>
<p>缓存</p>
<p>realm</p>
<p>MD5</p>
<p>视频看完，根据bootdo里的代码，过一遍流程，然后把相关类里的方法看懂</p>
<p>MD5Hash</p>
<p>token：界面来的用户名和密码</p>
<p>info:数据库的加密数据 info.getcredients</p>
<h1 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h1><p><a href="https://www.w3cschool.cn/shiro/" target="_blank" rel="noopener">https://www.w3cschool.cn/shiro/</a></p>
]]></content>
      <categories>
        <category>JavaEE</category>
      </categories>
      <tags>
        <tag>JavaEE</tag>
      </tags>
  </entry>
  <entry>
    <title>前端常用总结</title>
    <url>/2018/05/17/15328462199039/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[TOC]</p>
<h1 id="jquery"><a href="#jquery" class="headerlink" title="jquery"></a>jquery</h1><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><h3 id="ready-fn"><a href="#ready-fn" class="headerlink" title="ready(fn)"></a>ready(fn)</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	- 功能：在DOM加载完成时运行的代码</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 在这里写你的代码...</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//可以简写为</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 你可以在这里继续使用$作为别名...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div>

<h3 id="on-events-selector-data-fn"><a href="#on-events-selector-data-fn" class="headerlink" title="on(events,[selector],[data],fn)"></a>on(events,[selector],[data],fn)</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	- 功能：在选择元素上绑定一个或多个事件</span></span><br><span class="line"><span class="comment">	- 输入参数：</span></span><br><span class="line"><span class="comment">		- events：要绑定的【事件】类型，如“click”</span></span><br><span class="line"><span class="comment">		- fn：该事件被触发时执行的函数，false值也可以做一个函数的简写。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//描述：在p元素上绑定click事件，当p元素被点击时，触发function内的方法执行</span></span><br><span class="line">$(<span class="string">"p"</span>).on(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	alert( $(<span class="keyword">this</span>).text() );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div>

<h3 id="submit-data-fn"><a href="#submit-data-fn" class="headerlink" title="submit([[data],fn])"></a>submit([[data],fn])</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	- 功能：当提交表单时，会发生 submit 事件（只是提交这个动作，不是提交成功）。该事件只适用于表单元素(&lt;form&gt;)。</span></span><br><span class="line"><span class="comment">	- 输入参数：</span></span><br><span class="line"><span class="comment">		- fn：在每一个匹配元素的submit事件中绑定的处理函数。</span></span><br><span class="line"><span class="comment">		- </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//描述：提交表单</span></span><br><span class="line">$(<span class="string">"#xxxForm"</span>).submit();</span><br><span class="line"><span class="comment">//如果你要阻止表单提交 ~可用作提交条件判定的场合</span></span><br><span class="line">$(<span class="string">"#xxxForm"</span>).submit( <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125; );</span><br></pre></td></tr></table></figure></div>

<h2 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h2><h3 id="serialize"><a href="#serialize" class="headerlink" title="serialize()"></a>serialize()</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">	- 功能：序列表表格内容为字符串。(用于 Ajax POST请求)</span><br><span class="line">*&#x2F;</span><br><span class="line">$(&quot;form&quot;).serialize();</span><br><span class="line">&#x2F;&#x2F;字符串内容如下</span><br><span class="line">name&#x3D;122&amp;email&#x3D;122</span><br></pre></td></tr></table></figure></div>







<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	- 功能：</span></span><br><span class="line"><span class="comment">	- 输入参数：</span></span><br><span class="line"><span class="comment">		- </span></span><br><span class="line"><span class="comment">		- </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//描述：</span></span><br></pre></td></tr></table></figure></div>

<h1 id="jquery插件"><a href="#jquery插件" class="headerlink" title="jquery插件"></a>jquery插件</h1><h2 id="jQuery-Validation-Plugin"><a href="#jQuery-Validation-Plugin" class="headerlink" title="jQuery Validation Plugin"></a>jQuery Validation Plugin</h2><p>url：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">官方：http:&#x2F;&#x2F;jqueryvalidation.org&#x2F;</span><br><span class="line">菜鸟教程：http:&#x2F;&#x2F;www.runoob.com&#x2F;jquery&#x2F;jquery-plugin-validate.html</span><br></pre></td></tr></table></figure></div>

<h3 id="validate-options"><a href="#validate-options" class="headerlink" title="validate([options])"></a>validate([options])</h3><p><strong>rules+massage</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	描述：根据校验规则，对表单输入进行校验</span></span><br><span class="line"><span class="comment">	解释：</span></span><br><span class="line"><span class="comment">		- validate（在form上绑定校验事件），当表单提交时，会触发此方法进行校验</span></span><br><span class="line"><span class="comment">			～若校验失败，进行message的显示，并且拦截提交操作（不会请求服务器）</span></span><br><span class="line"><span class="comment">			～若校验成功，则放行，提交表单</span></span><br><span class="line"><span class="comment">			</span></span><br><span class="line"><span class="comment">		- rule中的属性name，email是表单里元素（&lt;input&gt;）的name值不是id</span></span><br><span class="line"><span class="comment">		</span></span><br><span class="line"><span class="comment">		- 若不加messages字段，会采用系统自定义提示信息，可以用中文插件</span></span><br><span class="line"><span class="comment">			- 方法:在页面引入messages_zh.min.js即可</span></span><br><span class="line"><span class="comment">            </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">$(<span class="string">"#myform"</span>).validate(&#123;</span><br><span class="line">  rules: &#123;</span><br><span class="line">    name: <span class="string">"required"</span>,</span><br><span class="line">    email: &#123;</span><br><span class="line">      required: <span class="literal">true</span>,</span><br><span class="line">      email: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  messages: &#123;</span><br><span class="line">    name: <span class="string">"Please specify your name"</span>,</span><br><span class="line">    email: &#123;</span><br><span class="line">      required: <span class="string">"We need your email address to contact you"</span>,</span><br><span class="line">      email: <span class="string">"Your email address must be in the format of name@domain.com"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div>



<h1 id="干货类"><a href="#干货类" class="headerlink" title="干货类"></a>干货类</h1><h2 id="Bug解决：顶层页面嵌套在框架里"><a href="#Bug解决：顶层页面嵌套在框架里" class="headerlink" title="Bug解决：顶层页面嵌套在框架里"></a>Bug解决：顶层页面嵌套在框架里</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在顶层页面的head标签内添加--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (<span class="built_in">window</span>.top !== <span class="built_in">window</span>.self) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.top.location = <span class="built_in">window</span>.location;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>


]]></content>
      <categories>
        <category>Web前端</category>
      </categories>
      <tags>
        <tag>Web前端</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML/CSS随课笔记</title>
    <url>/2018/04/29/15328463804116/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>【itheima】HTML/CSS课程随堂记录</p>
</blockquote>
<h1 id="sublim"><a href="#sublim" class="headerlink" title="sublim"></a>sublim</h1><h2 id="sublim快捷键"><a href="#sublim快捷键" class="headerlink" title="sublim快捷键"></a>sublim快捷键</h2><p>骨架：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">html:5+tab键盘</span><br><span class="line">!+tab</span><br></pre></td></tr></table></figure></div>

<p>标签生成：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 生成标签 直接输入标签名 按tab键即可   比如  div   然后tab 键， 就可以生成 &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">2. 如果想要生成多个相同标签  加上 * 就可以了 比如   div*3  就可以快速生成3个div</span><br><span class="line">3. 如果有父子级关系的标签，可以用 &gt;  比如   ul &gt; li就可以了</span><br><span class="line">4. 如果有兄弟关系的标签，用  +  就可以了 比如 div+p  </span><br><span class="line">5. 如果生成带有类名或者id名字的，  直接写  .demo  或者  #two   tab 键就可以了</span><br></pre></td></tr></table></figure></div>



<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>Emmet:</p>
<p>——快速生成html骨架,标签</p>
<h1 id="html补充"><a href="#html补充" class="headerlink" title="html补充"></a>html补充</h1><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">align</span>=<span class="string">"center"</span> <span class="attr">cellspacing</span>=<span class="string">"0"</span> <span class="attr">cellpadding</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">th</span>&gt;</span>head1<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">th</span>&gt;</span>head2<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>h1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>h2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">tbody</span>&gt;</span>		</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<h1 id="css补充"><a href="#css补充" class="headerlink" title="css补充"></a>css补充</h1><h2 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器"></a>通配符选择器</h2><p>​    不推荐使用，实际项目采用罗列标签的方法</p>
<h2 id="后代选择器-和-子元素选择器"><a href="#后代选择器-和-子元素选择器" class="headerlink" title="后代选择器 和 子元素选择器"></a>后代选择器 和 子元素选择器</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">css</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> <span class="selector-tag">strong</span> &#123;<span class="attribute">color</span>:red;&#125;	 <span class="comment">/*后代选择器：h1所有子孙strong都能选*/</span></span><br><span class="line"><span class="selector-tag">h1</span> &gt; <span class="selector-tag">strong</span> &#123;<span class="attribute">color</span>:red;&#125; <span class="comment">/*子元素选择器：只能选h1的子元素（不能选孙）*/</span></span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is <span class="tag">&lt;<span class="name">strong</span>&gt;</span>very<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> <span class="tag">&lt;<span class="name">strong</span>&gt;</span>very<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> important.<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is <span class="tag">&lt;<span class="name">em</span>&gt;</span>really <span class="tag">&lt;<span class="name">strong</span>&gt;</span>very<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span> important.<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure></div>



<h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">子绝父相</span><br></pre></td></tr></table></figure></div>



<h2 id="一些开发约定"><a href="#一些开发约定" class="headerlink" title="一些开发约定"></a>一些开发约定</h2><p>字体：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 网页字体普遍使用14px，字号尽量使用双数（ie6有单数bug）</span><br><span class="line">2. 为了照顾不同电脑的字体安装问题，我们尽量只使用宋体和微软雅黑中文字体</span><br></pre></td></tr></table></figure></div>



<h1 id="京东项目（CSS-DIV练手）"><a href="#京东项目（CSS-DIV练手）" class="headerlink" title="京东项目（CSS+DIV练手）"></a>京东项目（CSS+DIV练手）</h1><p>css初始化：normalize.css</p>
<p>目录结构：</p>
<p>​    <a href="/2018/04/29/15328463804116/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-07-29%20%E4%B8%8B%E5%8D%882.42.52.png" data-fancybox="group" data-caption="屏幕快照 2018-07-29 下午2.42.52" class="fancybox"><img alt="屏幕快照 2018-07-29 下午2.42.52" title="屏幕快照 2018-07-29 下午2.42.52" data-src="/2018/04/29/15328463804116/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-07-29%20%E4%B8%8B%E5%8D%882.42.52.png" class="lazyload"></a></p>
<p>标题和图标：</p>
<p>css分文件</p>
<p>头部 小叉 字体图标</p>
<h1 id="开发常规"><a href="#开发常规" class="headerlink" title="开发常规"></a>开发常规</h1><h2 id="css-div布局"><a href="#css-div布局" class="headerlink" title="css+div布局"></a>css+div布局</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. css初始化 normalize.css 和一些样式清除</span><br><span class="line"></span><br><span class="line">2. 子绝父相(子绝的话，父只要定位就行，所以子绝父绝也是可以的)</span><br><span class="line"></span><br><span class="line">3. 行内块之间有间隙,用float可以清除间隙</span><br><span class="line"></span><br><span class="line">4. 加了定位的行内元素 不用转换 就能设置宽高</span><br><span class="line"></span><br><span class="line">5. 若一个盒子里某个孩子浮动了，按道理，所有的孩子都应该浮动的。</span><br><span class="line"></span><br><span class="line">6. 若盒子里的元素都浮动了，而父盒子又没有高度（子盒子有），则父盒子撑不起高度，效果就是子盒子跑到父盒子外面去了。解决方案：清除浮动</span><br><span class="line"></span><br><span class="line">7. 浮动的元素默认上对齐，若要中对齐，解决方案：absolute定位，脱标</span><br><span class="line"></span><br><span class="line">8. 如何让文字链接垂直居中:用a撑起盒子高度，其他父盒子均不写高度，然后line-height&#x3D;高度 即可</span><br><span class="line">	.XXX a &#123;</span><br><span class="line">        height: 18px;</span><br><span class="line">		line-height: 18px;</span><br><span class="line">	&#125;</span><br><span class="line">9. 解决行内块（行内元素的间隙）：</span><br><span class="line">	1&gt; 浮动</span><br><span class="line">	2&gt; 父类 font-size:0;</span><br><span class="line">10. 盒子里面的图片大小设置 </span><br><span class="line">    .fs_user_head img &#123;</span><br><span class="line">        width: 100%;</span><br><span class="line">        height: auto; &#x2F;*随宽度等比缩放*&#x2F;</span><br><span class="line">    &#125;</span><br><span class="line">    若父盒子有形状，就在父盒子里写overflow:hidden切去border外的部分</span><br><span class="line">    </span><br><span class="line">11. CSS3盒子模型</span><br><span class="line">box-sizing: border-box;   &#x2F;* padding border  不撑开盒子 *&#x2F;</span><br><span class="line">* &#123;</span><br><span class="line">    box-sizing: border-box; &#x2F;*使用CSS3盒子模型：内减模式*&#x2F;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p>插入视频：</p>
<ol>
<li>优酷，分享iframe,嵌入即可</li>
<li>h5的视频</li>
</ol>
]]></content>
      <categories>
        <category>Web前端</category>
      </categories>
      <tags>
        <tag>Web前端</tag>
      </tags>
  </entry>
  <entry>
    <title>【转】javaSE-多线程（2）</title>
    <url>/2018/04/26/20180426111753/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>笔记来源：itheima</p>
</blockquote>
<h3 id="25-01-多线程-单例设计模式-掌握"><a href="#25-01-多线程-单例设计模式-掌握" class="headerlink" title="25.01_多线程(单例设计模式)(掌握)"></a>25.01_多线程(单例设计模式)(掌握)</h3><ul>
<li><p>单例设计模式：保证类在内存中只有一个对象。</p>
</li>
<li><p>如何保证类在内存中只有一个对象呢？</p>
<ul>
<li>(1)控制类的创建，不让其他类来创建本类的对象。private</li>
<li>(2)在本类中定义一个本类的对象。Singleton s;</li>
<li>(3)提供公共的访问方式。  public static Singleton getInstance(){return s}</li>
</ul>
</li>
<li><p>代码<br>  ​        </p>
  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.heima.thread;</span><br><span class="line"></span><br><span class="line">public class Demo1_Singleton &#123;</span><br><span class="line"></span><br><span class="line">	&#x2F;**</span><br><span class="line">	 * @param args</span><br><span class="line">	 * * 单例设计模式：保证类在内存中只有一个对象。</span><br><span class="line">	 *&#x2F;</span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		&#x2F;&#x2F;Singleton s1 &#x3D; new Singleton();</span><br><span class="line">		</span><br><span class="line">		Singleton s1 &#x3D; Singleton.s;				&#x2F;&#x2F;成员变量被私有,不能通过类名.调用</span><br><span class="line">		&#x2F;&#x2F;Singleton.s &#x3D; null;</span><br><span class="line">		Singleton s2 &#x3D; Singleton.s;</span><br><span class="line">		</span><br><span class="line">		System.out.println(s1 &#x3D;&#x3D; s2);</span><br><span class="line">		</span><br><span class="line">	&#x2F;*	Singleton s1 &#x3D; Singleton.getInstance();</span><br><span class="line">		Singleton s2 &#x3D; Singleton.getInstance();</span><br><span class="line">		</span><br><span class="line">		System.out.println(s1 &#x3D;&#x3D; s2);*&#x2F;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line"> * 饿汉式</span><br><span class="line"> </span><br><span class="line">class Singleton &#123;</span><br><span class="line">	&#x2F;&#x2F;1,私有构造方法,其他类不能访问该构造方法了</span><br><span class="line">	private Singleton()&#123;&#125;</span><br><span class="line">	&#x2F;&#x2F;2,创建本类对象</span><br><span class="line">	private static Singleton s &#x3D; new Singleton();</span><br><span class="line">	&#x2F;&#x2F;3,对外提供公共的访问方法</span><br><span class="line">	public static Singleton getInstance() &#123;				&#x2F;&#x2F;获取实例</span><br><span class="line">		return s;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;*&#x2F;</span><br><span class="line">&#x2F;*</span><br><span class="line"> * 懒汉式,单例的延迟加载模式</span><br><span class="line"> *&#x2F;</span><br><span class="line">&#x2F;*class Singleton &#123;</span><br><span class="line">	&#x2F;&#x2F;1,私有构造方法,其他类不能访问该构造方法了</span><br><span class="line">	private Singleton()&#123;&#125;</span><br><span class="line">	&#x2F;&#x2F;2,声明一个引用</span><br><span class="line">	private static Singleton s ;</span><br><span class="line">	&#x2F;&#x2F;3,对外提供公共的访问方法</span><br><span class="line">	public static Singleton getInstance() &#123;				&#x2F;&#x2F;获取实例</span><br><span class="line">		if(s &#x3D;&#x3D; null) &#123;</span><br><span class="line">			&#x2F;&#x2F;线程1等待,线程2等待</span><br><span class="line">			s &#x3D; new Singleton();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		return s;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;*&#x2F;</span><br><span class="line">&#x2F;*</span><br><span class="line"> * 饿汉式和懒汉式的区别</span><br><span class="line"> * 1,饿汉式是空间换时间,懒汉式是时间换空间</span><br><span class="line"> * 2,在多线程访问时,饿汉式不会创建多个对象,而懒汉式有可能会创建多个对象</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line">class Singleton &#123;</span><br><span class="line">	&#x2F;&#x2F;1,私有构造方法,其他类不能访问该构造方法了</span><br><span class="line">	private Singleton()&#123;&#125;</span><br><span class="line">	&#x2F;&#x2F;2,声明一个引用</span><br><span class="line">	public static final Singleton s &#x3D; new Singleton();</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

</li>
</ul>
<h3 id="25-02-多线程-Runtime类"><a href="#25-02-多线程-Runtime类" class="headerlink" title="25.02_多线程(Runtime类)"></a>25.02_多线程(Runtime类)</h3><ul>
<li><p>Runtime类是一个单例类</p>
<ul>
<li><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.heima.thread;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class Demo2_Runtime &#123;</span><br><span class="line"></span><br><span class="line">	&#x2F;**</span><br><span class="line">	 * @param args</span><br><span class="line">	 * @throws IOException </span><br><span class="line">	 *&#x2F;</span><br><span class="line">	public static void main(String[] args) throws IOException &#123;</span><br><span class="line">		Runtime r &#x3D; Runtime.getRuntime();			&#x2F;&#x2F;获取运行时对象</span><br><span class="line">		&#x2F;&#x2F;r.exec(&quot;shutdown -s -t 300&quot;);</span><br><span class="line">		r.exec(&quot;shutdown -a&quot;);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

</li>
</ul>
</li>
</ul>
<h3 id="25-03-多线程-Timer-掌握"><a href="#25-03-多线程-Timer-掌握" class="headerlink" title="25.03_多线程(Timer)(掌握)"></a>25.03_多线程(Timer)(掌握)</h3><ul>
<li>Timer类:计时器<br>  ​      <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.heima.thread;</span><br><span class="line"></span><br><span class="line">import java.util.Date;</span><br><span class="line">import java.util.Timer;</span><br><span class="line">import java.util.TimerTask;</span><br><span class="line"></span><br><span class="line">public class Demo3_Timer &#123;</span><br><span class="line"></span><br><span class="line">	&#x2F;**</span><br><span class="line">	 * @param args</span><br><span class="line">	 * @throws InterruptedException </span><br><span class="line">	 *&#x2F;</span><br><span class="line">	public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">		Timer t &#x3D; new Timer();</span><br><span class="line">		&#x2F;&#x2F;在指定时间安排指定任务</span><br><span class="line">		&#x2F;&#x2F;第一个参数,是安排的任务,第二个参数是执行的时间,第三个参数是过多长时间再重复执行</span><br><span class="line">		t.schedule(new MyTimerTask(), new Date(188, 6, 1, 14, 22, 50),3000);	</span><br><span class="line">		</span><br><span class="line">		while(true) &#123;</span><br><span class="line">			Thread.sleep(1000);</span><br><span class="line">			System.out.println(new Date());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class MyTimerTask extends TimerTask &#123;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	public void run() &#123;</span><br><span class="line">		System.out.println(&quot;起床背英语单词&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

</li>
</ul>
<h3 id="25-04-多线程-两个线程间的通信-掌握"><a href="#25-04-多线程-两个线程间的通信-掌握" class="headerlink" title="25.04_多线程(两个线程间的通信)(掌握)"></a>25.04_多线程(两个线程间的通信)(掌握)</h3><ul>
<li>1.什么时候需要通信<ul>
<li>多个线程并发执行时, 在默认情况下CPU是随机切换线程的</li>
<li>如果我们希望他们有规律的执行, 就可以使用通信, 例如每个线程执行一次打印</li>
</ul>
</li>
<li>2.怎么通信<ul>
<li>如果希望线程等待, 就调用wait()</li>
<li>如果希望唤醒等待的线程, 就调用notify();</li>
<li>这两个方法必须在同步代码中执行, 并且使用同步锁对象来调用</li>
</ul>
</li>
<li>demo<br>​        <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.heima.thread2;</span><br><span class="line"></span><br><span class="line">public class Demo1_Notify &#123;</span><br><span class="line"></span><br><span class="line">	&#x2F;**</span><br><span class="line">	 * @param args</span><br><span class="line">	 * 等待唤醒机制</span><br><span class="line">	 *&#x2F;</span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		final Printer p &#x3D; new Printer();</span><br><span class="line">		</span><br><span class="line">		new Thread() &#123;</span><br><span class="line">			public void run() &#123;</span><br><span class="line">				while(true) &#123;</span><br><span class="line">					try &#123;</span><br><span class="line">						p.print1();</span><br><span class="line">					&#125; catch (InterruptedException e) &#123;</span><br><span class="line">						</span><br><span class="line">						e.printStackTrace();</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;.start();</span><br><span class="line">		</span><br><span class="line">		new Thread() &#123;</span><br><span class="line">			public void run() &#123;</span><br><span class="line">				while(true) &#123;</span><br><span class="line">					try &#123;</span><br><span class="line">						p.print2();</span><br><span class="line">					&#125; catch (InterruptedException e) &#123;</span><br><span class="line">						</span><br><span class="line">						e.printStackTrace();</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;.start();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;等待唤醒机制</span><br><span class="line">class Printer &#123;</span><br><span class="line">	private int flag &#x3D; 1;</span><br><span class="line">	public void print1() throws InterruptedException &#123;							</span><br><span class="line">		synchronized(this) &#123;</span><br><span class="line">			if(flag !&#x3D; 1) &#123;</span><br><span class="line">				this.wait();					&#x2F;&#x2F;当前线程等待</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.print(&quot;黑&quot;);</span><br><span class="line">			System.out.print(&quot;马&quot;);</span><br><span class="line">			System.out.print(&quot;程&quot;);</span><br><span class="line">			System.out.print(&quot;序&quot;);</span><br><span class="line">			System.out.print(&quot;员&quot;);</span><br><span class="line">			System.out.print(&quot;\r\n&quot;);</span><br><span class="line">			flag &#x3D; 2;</span><br><span class="line">			this.notify();						&#x2F;&#x2F;随机唤醒单个等待的线程</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public void print2() throws InterruptedException &#123;</span><br><span class="line">		synchronized(this) &#123;</span><br><span class="line">			if(flag !&#x3D; 2) &#123;</span><br><span class="line">				this.wait();</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.print(&quot;传&quot;);</span><br><span class="line">			System.out.print(&quot;智&quot;);</span><br><span class="line">			System.out.print(&quot;播&quot;);</span><br><span class="line">			System.out.print(&quot;客&quot;);</span><br><span class="line">			System.out.print(&quot;\r\n&quot;);</span><br><span class="line">			flag &#x3D; 1;</span><br><span class="line">			this.notify();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

</li>
</ul>
<h3 id="25-05-多线程-三个或三个以上间的线程通信"><a href="#25-05-多线程-三个或三个以上间的线程通信" class="headerlink" title="25.05_多线程(三个或三个以上间的线程通信)"></a>25.05_多线程(三个或三个以上间的线程通信)</h3><ul>
<li><p>多个线程通信的问题</p>
<ul>
<li>notify()方法是随机唤醒一个线程</li>
<li>notifyAll()方法是唤醒所有线程</li>
<li>JDK5之前无法唤醒指定的一个线程</li>
<li>如果多个线程之间通信, 需要使用notifyAll()通知所有线程, 用while来反复判断条件</li>
</ul>
</li>
<li><p>demo</p>
  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.heima.thread2;</span><br><span class="line"></span><br><span class="line">public class Demo2_NotifyAll &#123;</span><br><span class="line"></span><br><span class="line">	&#x2F;**</span><br><span class="line">	 * @param args</span><br><span class="line">	 *&#x2F;</span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		final Printer2 p &#x3D; new Printer2();</span><br><span class="line">		new Thread() &#123;</span><br><span class="line">			public void run() &#123;</span><br><span class="line">				while(true) &#123;</span><br><span class="line">					try &#123;</span><br><span class="line">						p.print1();</span><br><span class="line">					&#125; catch (InterruptedException e) &#123;</span><br><span class="line">						</span><br><span class="line">						e.printStackTrace();</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;.start();</span><br><span class="line">		</span><br><span class="line">		new Thread() &#123;</span><br><span class="line">			public void run() &#123;</span><br><span class="line">				while(true) &#123;</span><br><span class="line">					try &#123;</span><br><span class="line">						p.print2();</span><br><span class="line">					&#125; catch (InterruptedException e) &#123;</span><br><span class="line">						</span><br><span class="line">						e.printStackTrace();</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;.start();</span><br><span class="line">		</span><br><span class="line">		new Thread() &#123;</span><br><span class="line">			public void run() &#123;</span><br><span class="line">				while(true) &#123;</span><br><span class="line">					try &#123;</span><br><span class="line">						p.print3();</span><br><span class="line">					&#125; catch (InterruptedException e) &#123;</span><br><span class="line">						</span><br><span class="line">						e.printStackTrace();</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;.start();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*1,在同步代码块中,用哪个对象锁,就用哪个对象调用wait方法</span><br><span class="line"> * 2,为什么wait方法和notify方法定义在Object这类中?</span><br><span class="line"> * 	因为锁对象可以是任意对象,Object是所有的类的基类,所以wait方法和notify方法需要定义在Object这个类中</span><br><span class="line"> * 3,sleep方法和wait方法的区别?</span><br><span class="line"> * a,sleep方法必须传入参数,参数就是时间,时间到了自动醒来</span><br><span class="line"> *   wait方法可以传入参数也可以不传入参数,传入参数就是在参数的时间结束后等待,不传入参数就是直接等待</span><br><span class="line"> * b,sleep方法在同步函数或同步代码块中,不释放锁,睡着了也抱着锁睡</span><br><span class="line"> * 	wait方法在同步函数或者同步代码块中,释放锁</span><br><span class="line"> *&#x2F; </span><br><span class="line">class Printer2 &#123;</span><br><span class="line">	private int flag &#x3D; 1;</span><br><span class="line">	public void print1() throws InterruptedException &#123;							</span><br><span class="line">		synchronized(this) &#123;</span><br><span class="line">			while(flag !&#x3D; 1) &#123;</span><br><span class="line">				this.wait();					&#x2F;&#x2F;当前线程等待</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.print(&quot;黑&quot;);</span><br><span class="line">			System.out.print(&quot;马&quot;);</span><br><span class="line">			System.out.print(&quot;程&quot;);</span><br><span class="line">			System.out.print(&quot;序&quot;);</span><br><span class="line">			System.out.print(&quot;员&quot;);</span><br><span class="line">			System.out.print(&quot;\r\n&quot;);</span><br><span class="line">			flag &#x3D; 2;</span><br><span class="line">			&#x2F;&#x2F;this.notify();						&#x2F;&#x2F;随机唤醒单个等待的线程</span><br><span class="line">			this.notifyAll();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public void print2() throws InterruptedException &#123;</span><br><span class="line">		synchronized(this) &#123;</span><br><span class="line">			while(flag !&#x3D; 2) &#123;</span><br><span class="line">				this.wait();					&#x2F;&#x2F;线程2在此等待</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.print(&quot;传&quot;);</span><br><span class="line">			System.out.print(&quot;智&quot;);</span><br><span class="line">			System.out.print(&quot;播&quot;);</span><br><span class="line">			System.out.print(&quot;客&quot;);</span><br><span class="line">			System.out.print(&quot;\r\n&quot;);</span><br><span class="line">			flag &#x3D; 3;</span><br><span class="line">			&#x2F;&#x2F;this.notify();</span><br><span class="line">			this.notifyAll();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public void print3() throws InterruptedException &#123;</span><br><span class="line">		synchronized(this) &#123;</span><br><span class="line">			while(flag !&#x3D; 3) &#123;</span><br><span class="line">				this.wait();						&#x2F;&#x2F;线程3在此等待,if语句是在哪里等待,就在哪里起来</span><br><span class="line">													&#x2F;&#x2F;while循环是循环判断,每次都会判断标记</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.print(&quot;i&quot;);</span><br><span class="line">			System.out.print(&quot;t&quot;);</span><br><span class="line">			System.out.print(&quot;h&quot;);</span><br><span class="line">			System.out.print(&quot;e&quot;);</span><br><span class="line">			System.out.print(&quot;i&quot;);</span><br><span class="line">			System.out.print(&quot;m&quot;);</span><br><span class="line">			System.out.print(&quot;a&quot;);</span><br><span class="line">			System.out.print(&quot;\r\n&quot;);</span><br><span class="line">			flag &#x3D; 1;</span><br><span class="line">			&#x2F;&#x2F;this.notify();</span><br><span class="line">			this.notifyAll();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>


</li>
</ul>
<pre><code><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 25.06_多线程(JDK1.5的新特性互斥锁)(掌握)</span><br><span class="line">* 1.同步</span><br><span class="line"></span><br><span class="line">  * 使用ReentrantLock类的lock()和unlock()方法进行同步</span><br><span class="line">* 2.通信</span><br><span class="line">	* 使用ReentrantLock类的newCondition()方法可以获取Condition对象</span><br><span class="line">	* 需要等待的时候使用Condition的await()方法, 唤醒的时候用signal()方法</span><br><span class="line">	* 不同的线程使用不同的Condition, 这样就能区分唤醒的时候找哪个线程了</span><br><span class="line">* demo</span><br></pre></td></tr></table></figure></div>
package com.heima.thread2;

import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;

public class Demo3_ReentrantLock {

    /**
     * @param args
     */
    public static void main(String[] args) {
        final Printer3 p = new Printer3();

        new Thread() {
            public void run() {
                while(true) {
                    try {
                        p.print1();
                    } catch (InterruptedException e) {

                        e.printStackTrace();
                    }
                }
            }
        }.start();

        new Thread() {
            public void run() {
                while(true) {
                    try {
                        p.print2();
                    } catch (InterruptedException e) {

                        e.printStackTrace();
                    }
                }
            }
        }.start();

        new Thread() {
            public void run() {
                while(true) {
                    try {
                        p.print3();
                    } catch (InterruptedException e) {

                        e.printStackTrace();
                    }
                }
            }
        }.start();
    }

}

class Printer3 {
    private ReentrantLock r = new ReentrantLock();
    private Condition c1 = r.newCondition();
    private Condition c2 = r.newCondition();
    private Condition c3 = r.newCondition();

    private int flag = 1;
    public void print1() throws InterruptedException {                            
        r.lock();                                //获取锁
            if(flag != 1) {
                c1.await();
            }
            System.out.print(&quot;黑&quot;);
            System.out.print(&quot;马&quot;);
            System.out.print(&quot;程&quot;);
            System.out.print(&quot;序&quot;);
            System.out.print(&quot;员&quot;);
            System.out.print(&quot;\r\n&quot;);
            flag = 2;
            //this.notify();                        //随机唤醒单个等待的线程
            c2.signal();
        r.unlock();                                //释放锁
    }

    public void print2() throws InterruptedException {
        r.lock();
            if(flag != 2) {
                c2.await();
            }
            System.out.print(&quot;传&quot;);
            System.out.print(&quot;智&quot;);
            System.out.print(&quot;播&quot;);
            System.out.print(&quot;客&quot;);
            System.out.print(&quot;\r\n&quot;);
            flag = 3;
            //this.notify();
            c3.signal();
        r.unlock();
    }

    public void print3() throws InterruptedException {
        r.lock();
            if(flag != 3) {
                c3.await();
            }
            System.out.print(&quot;i&quot;);
            System.out.print(&quot;t&quot;);
            System.out.print(&quot;h&quot;);
            System.out.print(&quot;e&quot;);
            System.out.print(&quot;i&quot;);
            System.out.print(&quot;m&quot;);
            System.out.print(&quot;a&quot;);
            System.out.print(&quot;\r\n&quot;);
            flag = 1;
            c1.signal();
        r.unlock();
    }
}
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div></code></pre><h3 id="25-07-多线程-线程组的概述和使用-了解"><a href="#25-07-多线程-线程组的概述和使用-了解" class="headerlink" title="25.07_多线程(线程组的概述和使用)(了解)"></a>25.07_多线程(线程组的概述和使用)(了解)</h3><ul>
<li><p>A:线程组概述</p>
<ul>
<li>Java中使用ThreadGroup来表示线程组，它可以对一批线程进行分类管理，Java允许程序直接对线程组进行控制。</li>
<li>默认情况下，所有的线程都属于主线程组。<ul>
<li>public final ThreadGroup getThreadGroup()//通过线程对象获取他所属于的组</li>
<li>public final String getName()//通过线程组对象获取他组的名字</li>
</ul>
</li>
<li>我们也可以给线程设置分组<ul>
<li>1,ThreadGroup(String name) 创建线程组对象并给其赋值名字</li>
<li>2,创建线程对象</li>
<li>3,Thread(ThreadGroup?group, Runnable?target, String?name) </li>
<li>4,设置整组的优先级或者守护线程</li>
</ul>
</li>
<li>B:案例演示<ul>
<li>线程组的使用,默认是主线程组</li>
</ul>
</li>
</ul>
</li>
<li><pre><code>MyRunnable mr = new MyRunnable();</code></pre><p>  ​    Thread t1 = new Thread(mr, “张三”);<br>  ​    Thread t2 = new Thread(mr, “李四”);<br>  ​    //获取线程组<br>  ​    // 线程类里面的方法：public final ThreadGroup getThreadGroup()<br>  ​    ThreadGroup tg1 = t1.getThreadGroup();<br>  ​    ThreadGroup tg2 = t2.getThreadGroup();<br>  ​    // 线程组里面的方法：public final String getName()<br>  ​    String name1 = tg1.getName();<br>  ​    String name2 = tg2.getName();<br>  ​    System.out.println(name1);<br>  ​    System.out.println(name2);<br>  ​    // 通过结果我们知道了：线程默认情况下属于main线程组<br>  ​    // 通过下面的测试，你应该能够看到，默任情况下，所有的线程都属于同一个组<br>  ​    System.out.println(Thread.currentThread().getThreadGroup().getName());</p>
<ul>
<li>自己设定线程组</li>
</ul>
</li>
<li><p>// ThreadGroup(String name)<br>​    ThreadGroup tg = new ThreadGroup(“这是一个新的组”);</p>
<p>MyRunnable mr = new MyRunnable();<br>// Thread(ThreadGroup group, Runnable target, String name)<br>Thread t1 = new Thread(tg, mr, “张三”);<br>Thread t2 = new Thread(tg, mr, “李四”);</p>
<p>System.out.println(t1.getThreadGroup().getName());<br>System.out.println(t2.getThreadGroup().getName());</p>
<p>//通过组名称设置后台线程，表示该组的线程都是后台线程<br>tg.setDaemon(true);</p>
</li>
<li><p>demo</p>
  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.heima.thread2;</span><br><span class="line"></span><br><span class="line">public class Demo4_ThreadGroup &#123;</span><br><span class="line"></span><br><span class="line">	&#x2F;**</span><br><span class="line">	 * @param args</span><br><span class="line">	 * ThreadGroup</span><br><span class="line">	 *&#x2F;</span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		&#x2F;&#x2F;demo1();</span><br><span class="line">		ThreadGroup tg &#x3D; new ThreadGroup(&quot;我是一个新的线程组&quot;);		&#x2F;&#x2F;创建新的线程组</span><br><span class="line">		MyRunnable mr &#x3D; new MyRunnable();						&#x2F;&#x2F;创建Runnable的子类对象</span><br><span class="line">		</span><br><span class="line">		Thread t1 &#x3D; new Thread(tg, mr, &quot;张三&quot;);					&#x2F;&#x2F;将线程t1放在组中</span><br><span class="line">		Thread t2 &#x3D; new Thread(tg, mr, &quot;李四&quot;);					&#x2F;&#x2F;将线程t2放在组中</span><br><span class="line">		</span><br><span class="line">		System.out.println(t1.getThreadGroup().getName());		&#x2F;&#x2F;获取组名</span><br><span class="line">		System.out.println(t2.getThreadGroup().getName());</span><br><span class="line">		</span><br><span class="line">		tg.setDaemon(true);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public static void demo1() &#123;</span><br><span class="line">		MyRunnable mr &#x3D; new MyRunnable();</span><br><span class="line">		Thread t1 &#x3D; new Thread(mr, &quot;张三&quot;);</span><br><span class="line">		Thread t2 &#x3D; new Thread(mr, &quot;李四&quot;);</span><br><span class="line">		</span><br><span class="line">		ThreadGroup tg1 &#x3D; t1.getThreadGroup();</span><br><span class="line">		ThreadGroup tg2 &#x3D; t2.getThreadGroup();</span><br><span class="line">		</span><br><span class="line">		System.out.println(tg1.getName());				&#x2F;&#x2F;默认的是主线程</span><br><span class="line">		System.out.println(tg2.getName());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class MyRunnable implements Runnable &#123;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	public void run() &#123;</span><br><span class="line">		for(int i &#x3D; 0; i &lt; 1000; i++) &#123;</span><br><span class="line">			System.out.println(Thread.currentThread().getName() + &quot;....&quot; + i);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

</li>
</ul>
<h3 id="25-08-多线程-线程的五种状态-掌握"><a href="#25-08-多线程-线程的五种状态-掌握" class="headerlink" title="25.08_多线程(线程的五种状态)(掌握)"></a>25.08_多线程(线程的五种状态)(掌握)</h3><ul>
<li><p>看图说话</p>
</li>
<li><p>新建,就绪,运行,阻塞,死亡</p>
<p>  <a href="/2018/04/26/20180426111753/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E5%9B%BE-1.png" data-fancybox="group" data-caption="线程状态图" class="fancybox"><img alt="线程状态图" title="线程状态图" data-src="/2018/04/26/20180426111753/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E5%9B%BE-1.png" class="lazyload"></a></p>
</li>
</ul>
<h3 id="25-09-多线程-线程池的概述和使用-了解"><a href="#25-09-多线程-线程池的概述和使用-了解" class="headerlink" title="25.09_多线程(线程池的概述和使用)(了解)"></a>25.09_多线程(线程池的概述和使用)(了解)</h3><ul>
<li><p>A:线程池概述</p>
<ul>
<li>程序启动一个新线程成本是比较高的，因为它涉及到要与操作系统进行交互。而使用线程池可以很好的提高性能，尤其是当程序中要创建大量生存期很短的线程时，更应该考虑使用线程池。线程池里的每一个线程代码结束后，并不会死亡，而是再次回到线程池中成为空闲状态，等待下一个对象来使用。在JDK5之前，我们必须手动实现自己的线程池，从JDK5开始，Java内置支持线程池</li>
</ul>
</li>
<li><p>B:内置线程池的使用概述</p>
<ul>
<li>JDK5新增了一个Executors工厂类来产生线程池，有如下几个方法<ul>
<li>public static ExecutorService newFixedThreadPool(int nThreads)</li>
<li>public static ExecutorService newSingleThreadExecutor()</li>
<li>这些方法的返回值是ExecutorService对象，该对象表示一个线程池，可以执行Runnable对象或者Callable对象代表的线程。它提供了如下方法</li>
<li>Future&lt;?&gt; submit(Runnable task)</li>
<li><t> Future<t> submit(Callable<t> task)</t></t></t></li>
</ul>
</li>
<li>使用步骤：<ul>
<li>创建线程池对象</li>
<li>创建Runnable实例</li>
<li>提交Runnable实例</li>
<li>关闭线程池</li>
</ul>
</li>
<li>C:案例演示<ul>
<li>提交的是Runnable</li>
</ul>
</li>
</ul>
</li>
<li><p>  ​    </p>
  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.heima.thread2;</span><br><span class="line"></span><br><span class="line">import java.util.concurrent.ExecutorService;</span><br><span class="line">import java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line">public class Demo5_Executors &#123;</span><br><span class="line"></span><br><span class="line">	&#x2F;**</span><br><span class="line">	 * public static ExecutorService newFixedThreadPool(int nThreads)</span><br><span class="line">	 * public static ExecutorService newSingleThreadExecutor()</span><br><span class="line">	 *&#x2F;</span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		ExecutorService pool &#x3D; Executors.newFixedThreadPool(2);&#x2F;&#x2F;创建线程池</span><br><span class="line">		pool.submit(new MyRunnable());				&#x2F;&#x2F;将线程放进池子里并执行</span><br><span class="line">		pool.submit(new MyRunnable());</span><br><span class="line">		</span><br><span class="line">		pool.shutdown();							&#x2F;&#x2F;关闭线程池</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

</li>
</ul>
<h3 id="25-10-多线程-多线程程序实现的方式3-了解"><a href="#25-10-多线程-多线程程序实现的方式3-了解" class="headerlink" title="25.10_多线程(多线程程序实现的方式3)(了解)"></a>25.10_多线程(多线程程序实现的方式3)(了解)</h3><ul>
<li><p>提交的是Callable</p>
</li>
<li><p>  ​    </p>
  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.heima.thread2;</span><br><span class="line"></span><br><span class="line">import java.util.concurrent.Callable;</span><br><span class="line">import java.util.concurrent.ExecutionException;</span><br><span class="line">import java.util.concurrent.ExecutorService;</span><br><span class="line">import java.util.concurrent.Executors;</span><br><span class="line">import java.util.concurrent.Future;</span><br><span class="line"></span><br><span class="line">public class Demo6_Callable &#123;</span><br><span class="line"></span><br><span class="line">	&#x2F;**</span><br><span class="line">	 * @param args</span><br><span class="line">	 * @throws ExecutionException </span><br><span class="line">	 * @throws InterruptedException </span><br><span class="line">	 *&#x2F;</span><br><span class="line">	public static void main(String[] args) throws InterruptedException, ExecutionException &#123;</span><br><span class="line">		ExecutorService pool &#x3D; Executors.newFixedThreadPool(2);&#x2F;&#x2F;创建线程池</span><br><span class="line">		Future&lt;Integer&gt; f1 &#x3D; pool.submit(new MyCallable(100));				&#x2F;&#x2F;将线程放进池子里并执行</span><br><span class="line">		Future&lt;Integer&gt; f2 &#x3D; pool.submit(new MyCallable(50));</span><br><span class="line">		</span><br><span class="line">		System.out.println(f1.get());</span><br><span class="line">		System.out.println(f2.get());</span><br><span class="line">		</span><br><span class="line">		pool.shutdown();							&#x2F;&#x2F;关闭线程池</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class MyCallable implements Callable&lt;Integer&gt; &#123;</span><br><span class="line">	private int num;</span><br><span class="line">	public MyCallable(int num) &#123;</span><br><span class="line">		this.num &#x3D; num;</span><br><span class="line">	&#125;</span><br><span class="line">	@Override</span><br><span class="line">	public Integer call() throws Exception &#123;</span><br><span class="line">		int sum &#x3D; 0;</span><br><span class="line">		for(int i &#x3D; 1; i &lt;&#x3D; num; i++) &#123;</span><br><span class="line">			sum +&#x3D; i;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		return sum;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>多线程程序实现的方式3的好处和弊端</p>
<ul>
<li><p>好处：</p>
<ul>
<li>可以有返回值</li>
<li>可以抛出异常</li>
</ul>
</li>
<li><p>弊端：</p>
<ul>
<li>代码比较复杂，所以一般不用</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>JavaSE</tag>
      </tags>
  </entry>
  <entry>
    <title>【转】javaSE-多线程（1）</title>
    <url>/2018/04/26/20180426111752/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>笔记来源：itheima</p>
</blockquote>
<h3 id="24-01-多线程-多线程的引入-了解"><a href="#24-01-多线程-多线程的引入-了解" class="headerlink" title="24.01_多线程(多线程的引入)(了解)"></a>24.01_多线程(多线程的引入)(了解)</h3><ul>
<li>1.什么是线程<ul>
<li>线程是程序执行的一条路径, 一个进程中可以包含多条线程</li>
<li>多线程并发执行可以提高程序的效率, 可以同时完成多项工作</li>
</ul>
</li>
<li>2.多线程的应用场景<ul>
<li>红蜘蛛同时共享屏幕给多个电脑</li>
<li>迅雷开启多条线程一起下载</li>
<li>QQ同时和多个人一起视频</li>
<li>服务器同时处理多个客户端请求</li>
</ul>
</li>
</ul>
<h3 id="24-02-多线程-多线程并行和并发的区别-了解"><a href="#24-02-多线程-多线程并行和并发的区别-了解" class="headerlink" title="24.02_多线程(多线程并行和并发的区别)(了解)"></a>24.02_多线程(多线程并行和并发的区别)(了解)</h3><ul>
<li>并行就是两个任务同时运行，就是甲任务进行的同时，乙任务也在进行。(需要多核CPU)</li>
<li>并发是指两个任务都请求运行，而处理器只能按受一个任务，就把这两个任务安排轮流进行，由于时间间隔较短，使人感觉两个任务都在运行。</li>
<li>比如我跟两个网友聊天，左手操作一个电脑跟甲聊，同时右手用另一台电脑跟乙聊天，这就叫并行。</li>
<li>如果用一台电脑我先给甲发个消息，然后立刻再给乙发消息，然后再跟甲聊，再跟乙聊。这就叫并发。</li>
</ul>
<h3 id="24-03-多线程-Java程序运行原理和JVM的启动是多线程的吗-了解"><a href="#24-03-多线程-Java程序运行原理和JVM的启动是多线程的吗-了解" class="headerlink" title="24.03_多线程(Java程序运行原理和JVM的启动是多线程的吗)(了解)"></a>24.03_多线程(Java程序运行原理和JVM的启动是多线程的吗)(了解)</h3><ul>
<li><p>A:Java程序运行原理</p>
<ul>
<li>Java命令会启动java虚拟机，启动JVM，等于启动了一个应用程序，也就是启动了一个进程。该进程会自动启动一个 “主线程” ，然后主线程去调用某个类的 main 方法。</li>
</ul>
</li>
<li><p>B:JVM的启动是多线程的吗</p>
<ul>
<li>JVM启动至少启动了垃圾回收线程和主线程，所以是多线程的。</li>
</ul>
</li>
</ul>
<h3 id="24-04-多线程-多线程程序实现的方式1-掌握"><a href="#24-04-多线程-多线程程序实现的方式1-掌握" class="headerlink" title="24.04_多线程(多线程程序实现的方式1)(掌握)"></a>24.04_多线程(多线程程序实现的方式1)(掌握)</h3><ul>
<li><p>1.继承Thread</p>
<ul>
<li><p>定义类继承Thread</p>
</li>
<li><p>重写run方法</p>
</li>
<li><p>把新线程要做的事写在run方法中</p>
</li>
<li><p>创建线程对象</p>
</li>
<li><p>开启新线程, 内部会自动执行run方法</p>
</li>
<li><pre><code>public class Demo2_Thread {

    /**
     * @param args
     */
    public static void main(String[] args) {
        MyThread mt = new MyThread();                            //4,创建自定义类的对象
        mt.start();                                                //5,开启线程

        for(int i = 0; i &lt; 3000; i++) {
            System.out.println(&quot;bb&quot;);
        }
    }

}
class MyThread extends Thread {                                    //1,定义类继承Thread
    public void run() {                                            //2,重写run方法
        for(int i = 0; i &lt; 3000; i++) {                            //3,将要执行的代码,写在run方法中
            System.out.println(&quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot;);
        }
    }
}</code></pre></li>
</ul>
</li>
</ul>
<h3 id="24-05-多线程-多线程程序实现的方式2-掌握"><a href="#24-05-多线程-多线程程序实现的方式2-掌握" class="headerlink" title="24.05_多线程(多线程程序实现的方式2)(掌握)"></a>24.05_多线程(多线程程序实现的方式2)(掌握)</h3><ul>
<li><p>2.实现Runnable</p>
<ul>
<li><p>定义类实现Runnable接口</p>
</li>
<li><p>实现run方法</p>
</li>
<li><p>把新线程要做的事写在run方法中</p>
</li>
<li><p>创建自定义的Runnable的子类对象</p>
</li>
<li><p>创建Thread对象, 传入Runnable</p>
</li>
<li><p>调用start()开启新线程, 内部会自动调用Runnable的run()方法</p>
<pre><code>public class Demo3_Runnable {</code></pre><p>  ​        /**<br>  ​         * @param args<br>  ​         */<br>  ​        public static void main(String[] args) {<br>  ​            MyRunnable mr = new MyRunnable();                        //4,创建自定义类对象<br>  ​            //Runnable target = new MyRunnable();<br>  ​            Thread t = new Thread(mr);                                //5,将其当作参数传递给Thread的构造函数<br>  ​            t.start();                                                //6,开启线程<br>  ​            </p>
<pre><code>        for(int i = 0; i &lt; 3000; i++) {
            System.out.println(&quot;bb&quot;);
        }
    }
}

class MyRunnable implements Runnable {                            //1,自定义类实现Runnable接口
    @Override
    public void run() {                                            //2,重写run方法
        for(int i = 0; i &lt; 3000; i++) {                            //3,将要执行的代码,写在run方法中
            System.out.println(&quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot;);
        }
    }

}</code></pre></li>
</ul>
</li>
</ul>
<h3 id="24-06-多线程-实现Runnable的原理-了解"><a href="#24-06-多线程-实现Runnable的原理-了解" class="headerlink" title="24.06_多线程(实现Runnable的原理)(了解)"></a>24.06_多线程(实现Runnable的原理)(了解)</h3><ul>
<li>查看源码<ul>
<li>1,看Thread类的构造函数,传递了Runnable接口的引用 </li>
<li>2,通过init()方法找到传递的target给成员变量的target赋值</li>
<li>3,查看run方法,发现run方法中有判断,如果target不为null就会调用Runnable接口子类对象的run方法</li>
</ul>
</li>
</ul>
<h3 id="24-07-多线程-两种方式的区别-掌握"><a href="#24-07-多线程-两种方式的区别-掌握" class="headerlink" title="24.07_多线程(两种方式的区别)(掌握)"></a>24.07_多线程(两种方式的区别)(掌握)</h3><ul>
<li><p>查看源码的区别:</p>
<ul>
<li>a.继承Thread : 由于子类重写了Thread类的run(), 当调用start()时, 直接找子类的run()方法</li>
<li>b.实现Runnable : 构造函数中传入了Runnable的引用, 成员变量记住了它, start()调用run()方法时内部判断成员变量Runnable的引用是否为空, 不为空编译时看的是Runnable的run(),运行时执行的是子类的run()方法</li>
</ul>
</li>
<li><p>继承Thread</p>
<ul>
<li>好处是:可以直接使用Thread类中的方法,代码简单</li>
<li>弊端是:如果已经有了父类,就不能用这种方法</li>
</ul>
</li>
<li><p>实现Runnable接口</p>
<ul>
<li>好处是:即使自己定义的线程类有了父类也没关系,因为有了父类也可以实现接口,而且接口是可以多实现的</li>
<li>弊端是:不能直接使用Thread中的方法需要先获取到线程对象后,才能得到Thread的方法,代码复杂</li>
</ul>
</li>
</ul>
<h3 id="24-08-多线程-匿名内部类实现线程的两种方式-掌握"><a href="#24-08-多线程-匿名内部类实现线程的两种方式-掌握" class="headerlink" title="24.08_多线程(匿名内部类实现线程的两种方式)(掌握)"></a>24.08_多线程(匿名内部类实现线程的两种方式)(掌握)</h3><ul>
<li><p>继承Thread类</p>
<pre><code>new Thread() {                                                    //1,new 类(){}继承这个类</code></pre><p>  ​        public void run() {                                            //2,重写run方法<br>  ​            for(int i = 0; i &lt; 3000; i++) {                            //3,将要执行的代码,写在run方法中<br>  ​                System.out.println(“aaaaaaaaaaaaaaaaaaaaaaaaaaaa”);<br>  ​            }<br>  ​        }<br>  ​    }.start();</p>
</li>
<li><p>实现Runnable接口<br>  ​        </p>
<pre><code>new Thread(new Runnable(){                                        //1,new 接口(){}实现这个接口</code></pre><p>  ​        public void run() {                                            //2,重写run方法<br>  ​            for(int i = 0; i &lt; 3000; i++) {                            //3,将要执行的代码,写在run方法中<br>  ​                System.out.println(“bb”);<br>  ​            }<br>  ​        }<br>  ​    }).start(); </p>
</li>
</ul>
<h3 id="24-09-多线程-获取名字和设置名字-掌握"><a href="#24-09-多线程-获取名字和设置名字-掌握" class="headerlink" title="24.09_多线程(获取名字和设置名字)(掌握)"></a>24.09_多线程(获取名字和设置名字)(掌握)</h3><ul>
<li><p>1.获取名字</p>
<ul>
<li>通过getName()方法获取线程对象的名字</li>
</ul>
</li>
<li><p>2.设置名字</p>
<ul>
<li><p>通过构造函数可以传入String类型的名字</p>
</li>
<li><pre><code>new Thread(&quot;xxx&quot;) {</code></pre><p>  ​        public void run() {<br>  ​            for(int i = 0; i &lt; 1000; i++) {<br>  ​                System.out.println(this.getName() + “….aaaaaaaaaaaaaaaaaaaaaaa”);<br>  ​            }<br>  ​        }<br>  ​    }.start();<br>  ​    </p>
<pre><code>new Thread(&quot;yyy&quot;) {
    public void run() {
        for(int i = 0; i &lt; 1000; i++) {
            System.out.println(this.getName() + &quot;....bb&quot;);
        }
    }
}.start(); </code></pre></li>
<li><p>通过setName(String)方法可以设置线程对象的名字</p>
</li>
<li><pre><code>Thread t1 = new Thread() {</code></pre><p>  ​        public void run() {<br>  ​            for(int i = 0; i &lt; 1000; i++) {<br>  ​                System.out.println(this.getName() + “….aaaaaaaaaaaaaaaaaaaaaaa”);<br>  ​            }<br>  ​        }<br>  ​    };<br>  ​    </p>
<pre><code>Thread t2 = new Thread() {
    public void run() {
        for(int i = 0; i &lt; 1000; i++) {
            System.out.println(this.getName() + &quot;....bb&quot;);
        }
    }
};
t1.setName(&quot;芙蓉姐姐&quot;);
t2.setName(&quot;凤姐&quot;);

t1.start();
t2.start();</code></pre></li>
</ul>
</li>
</ul>
<h3 id="24-10-多线程-获取当前线程的对象-掌握"><a href="#24-10-多线程-获取当前线程的对象-掌握" class="headerlink" title="24.10_多线程(获取当前线程的对象)(掌握)"></a>24.10_多线程(获取当前线程的对象)(掌握)</h3><ul>
<li>Thread.currentThread(), 主线程也可以获取<ul>
<li><pre><code>new Thread(new Runnable() {</code></pre>  ​        public void run() {<br>  ​            for(int i = 0; i &lt; 1000; i++) {<br>  ​                System.out.println(Thread.currentThread().getName() + “…aaaaaaaaaaaaaaaaaaaaa”);<br>  ​            }<br>  ​        }<br>  ​    }).start();<br>  ​    <pre><code>new Thread(new Runnable() {
    public void run() {
        for(int i = 0; i &lt; 1000; i++) {
            System.out.println(Thread.currentThread().getName() + &quot;...bb&quot;);
        }
    }
}).start();
Thread.currentThread().setName(&quot;我是主线程&quot;);                    //获取主函数线程的引用,并改名字
System.out.println(Thread.currentThread().getName());        //获取主函数线程的引用,并获取名字</code></pre></li>
</ul>
</li>
</ul>
<h3 id="24-11-多线程-休眠线程-掌握"><a href="#24-11-多线程-休眠线程-掌握" class="headerlink" title="24.11_多线程(休眠线程)(掌握)"></a>24.11_多线程(休眠线程)(掌握)</h3><ul>
<li><p>Thread.sleep(毫秒,纳秒), 控制当前线程休眠若干毫秒1秒= 1000毫秒 1秒 = 1000 * 1000 * 1000纳秒 1000000000</p>
<pre><code>new Thread() {</code></pre><p>  ​            public void run() {<br>  ​                for(int i = 0; i &lt; 10; i++) {<br>  ​                    System.out.println(getName() + “…aaaaaaaaaaaaaaaaaaaaaa”);<br>  ​                    try {<br>  ​                        Thread.sleep(10);<br>  ​                    } catch (InterruptedException e) {<br>  ​                        e.printStackTrace();<br>  ​                    }<br>  ​                }<br>  ​            }<br>  ​        }.start();<br>  ​        </p>
<pre><code>new Thread() {
    public void run() {
        for(int i = 0; i &lt; 10; i++) {
            System.out.println(getName() + &quot;...bb&quot;);
            try {
                Thread.sleep(10);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}.start();</code></pre></li>
</ul>
<h3 id="24-12-多线程-守护线程-掌握"><a href="#24-12-多线程-守护线程-掌握" class="headerlink" title="24.12_多线程(守护线程)(掌握)"></a>24.12_多线程(守护线程)(掌握)</h3><ul>
<li><p>setDaemon(), 设置一个线程为守护线程, 该线程不会单独执行, 当其他非守护线程都执行结束后, 自动退出</p>
<ul>
<li><pre><code>Thread t1 = new Thread() {</code></pre><p>  ​        public void run() {<br>  ​            for(int i = 0; i &lt; 50; i++) {<br>  ​                System.out.println(getName() + “…aaaaaaaaaaaaaaaaaaaaaa”);<br>  ​                try {<br>  ​                    Thread.sleep(10);<br>  ​                } catch (InterruptedException e) {<br>  ​                    e.printStackTrace();<br>  ​                }<br>  ​            }<br>  ​        }<br>  ​    };<br>  ​    </p>
<pre><code>Thread t2 = new Thread() {
    public void run() {
        for(int i = 0; i &lt; 5; i++) {
            System.out.println(getName() + &quot;...bb&quot;);
            try {
                Thread.sleep(10);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
};

t1.setDaemon(true);                        //将t1设置为守护线程

t1.start();
t2.start();</code></pre></li>
</ul>
</li>
</ul>
<h3 id="24-13-多线程-加入线程-掌握"><a href="#24-13-多线程-加入线程-掌握" class="headerlink" title="24.13_多线程(加入线程)(掌握)"></a>24.13_多线程(加入线程)(掌握)</h3><ul>
<li><p>join(), 当前线程暂停, 等待指定的线程执行结束后, 当前线程再继续</p>
</li>
<li><p>join(int), 可以等待指定的毫秒之后继续</p>
<ul>
<li><pre><code>final Thread t1 = new Thread() {</code></pre><p>  ​        public void run() {<br>  ​            for(int i = 0; i &lt; 50; i++) {<br>  ​                System.out.println(getName() + “…aaaaaaaaaaaaaaaaaaaaaa”);<br>  ​                try {<br>  ​                    Thread.sleep(10);<br>  ​                } catch (InterruptedException e) {<br>  ​                    e.printStackTrace();<br>  ​                }<br>  ​            }<br>  ​        }<br>  ​    };<br>  ​    </p>
<pre><code>Thread t2 = new Thread() {
    public void run() {
        for(int i = 0; i &lt; 50; i++) {
            if(i == 2) {
                try {
                    //t1.join();                        //插队,加入
                    t1.join(30);                        //加入,有固定的时间,过了固定时间,继续交替执行
                    Thread.sleep(10);
                } catch (InterruptedException e) {

                    e.printStackTrace();
                }
            }
            System.out.println(getName() + &quot;...bb&quot;);

        }
    }
};

t1.start();
t2.start();</code></pre></li>
</ul>
</li>
</ul>
<h3 id="24-14-多线程-礼让线程-了解"><a href="#24-14-多线程-礼让线程-了解" class="headerlink" title="24.14_多线程(礼让线程)(了解)"></a>24.14_多线程(礼让线程)(了解)</h3><ul>
<li>yield让出cpu</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.heima.threadmethod;</span><br><span class="line"></span><br><span class="line">public class Demo6_Yield &#123;</span><br><span class="line"></span><br><span class="line">	&#x2F;**</span><br><span class="line">	 * yield让出cpu礼让线程</span><br><span class="line">	 *&#x2F;</span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		new MyThread().start();</span><br><span class="line">		new MyThread().start();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class MyThread extends Thread &#123;</span><br><span class="line">	public void run() &#123;</span><br><span class="line">		for(int i &#x3D; 1; i &lt;&#x3D; 1000; i++) &#123;</span><br><span class="line">			if(i % 10 &#x3D;&#x3D; 0) &#123;</span><br><span class="line">				Thread.yield();						&#x2F;&#x2F;让出CPU</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println(getName() + &quot;...&quot; + i);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="24-15-多线程-设置线程的优先级-了解"><a href="#24-15-多线程-设置线程的优先级-了解" class="headerlink" title="24.15_多线程(设置线程的优先级)(了解)"></a>24.15_多线程(设置线程的优先级)(了解)</h3><ul>
<li>setPriority()设置线程的优先级</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.heima.threadmethod;</span><br><span class="line"></span><br><span class="line">public class Demo7_Priority &#123;</span><br><span class="line"></span><br><span class="line">	&#x2F;**</span><br><span class="line">	 * @param args</span><br><span class="line">	 *&#x2F;</span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		Thread t1 &#x3D; new Thread()&#123;</span><br><span class="line">			public void run() &#123;</span><br><span class="line">				for(int i &#x3D; 0; i &lt; 100; i++) &#123;</span><br><span class="line">					System.out.println(getName() + &quot;...aaaaaaaaa&quot; );</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;;</span><br><span class="line">		</span><br><span class="line">		Thread t2 &#x3D; new Thread()&#123;</span><br><span class="line">			public void run() &#123;</span><br><span class="line">				for(int i &#x3D; 0; i &lt; 100; i++) &#123;</span><br><span class="line">					System.out.println(getName() + &quot;...bb&quot; );</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;;</span><br><span class="line">		</span><br><span class="line">		&#x2F;&#x2F;t1.setPriority(10);					设置最大优先级</span><br><span class="line">		&#x2F;&#x2F;t2.setPriority(1);</span><br><span class="line">		</span><br><span class="line">		t1.setPriority(Thread.MIN_PRIORITY);		&#x2F;&#x2F;设置最小的线程优先级</span><br><span class="line">		t2.setPriority(Thread.MAX_PRIORITY);		&#x2F;&#x2F;设置最大的线程优先级</span><br><span class="line">		</span><br><span class="line">		t1.start();</span><br><span class="line">		t2.start();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="24-16-多线程-同步代码块-掌握"><a href="#24-16-多线程-同步代码块-掌握" class="headerlink" title="24.16_多线程(同步代码块)(掌握)"></a>24.16_多线程(同步代码块)(掌握)</h3><ul>
<li>1.什么情况下需要同步<ul>
<li>当多线程并发, 有多段代码同时执行时, 我们希望某一段代码执行的过程中CPU不要切换到其他线程工作. 这时就需要同步.</li>
<li>如果两段代码是同步的, 那么同一时间只能执行一段, 在一段代码没执行结束之前, 不会执行另外一段代码.</li>
</ul>
</li>
<li>2.同步代码块<ul>
<li>使用synchronized关键字加上一个锁对象来定义一段代码, 这就叫同步代码块</li>
<li>多个同步代码块如果使用相同的锁对象, 那么他们就是同步的</li>
</ul>
</li>
</ul>
<pre><code><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Demo1_Synchronized &#123;</span><br><span class="line"></span><br><span class="line">	&#x2F;**</span><br><span class="line">	 * @param args</span><br><span class="line">	 * 同步代码块</span><br><span class="line">	 *&#x2F;</span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		final Printer p &#x3D; new Printer();</span><br><span class="line">		</span><br><span class="line">		new Thread() &#123;</span><br><span class="line">			public void run() &#123;</span><br><span class="line">				while(true) &#123;</span><br><span class="line">					p.print1();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;.start();</span><br><span class="line">		</span><br><span class="line">		new Thread() &#123;</span><br><span class="line">			public void run() &#123;</span><br><span class="line">				while(true) &#123;</span><br><span class="line">					p.print2();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;.start();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Printer &#123;</span><br><span class="line">	Demo d &#x3D; new Demo();</span><br><span class="line">	public void print1() &#123;</span><br><span class="line">		&#x2F;&#x2F;synchronized(new Demo()) &#123;							&#x2F;&#x2F;同步代码块,锁机制,锁对象可以是任意的</span><br><span class="line">		synchronized(d) &#123;</span><br><span class="line">			System.out.print(&quot;黑&quot;);</span><br><span class="line">			System.out.print(&quot;马&quot;);</span><br><span class="line">			System.out.print(&quot;程&quot;);</span><br><span class="line">			System.out.print(&quot;序&quot;);</span><br><span class="line">			System.out.print(&quot;员&quot;);</span><br><span class="line">			System.out.print(&quot;\r\n&quot;);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public void print2() &#123;</span><br><span class="line">		&#x2F;&#x2F;synchronized(new Demo()) &#123;							&#x2F;&#x2F;锁对象不能用匿名对象,因为匿名对象不是同一个对象</span><br><span class="line">		synchronized(d) &#123;		</span><br><span class="line">			System.out.print(&quot;传&quot;);</span><br><span class="line">			System.out.print(&quot;智&quot;);</span><br><span class="line">			System.out.print(&quot;播&quot;);</span><br><span class="line">			System.out.print(&quot;客&quot;);</span><br><span class="line">			System.out.print(&quot;\r\n&quot;);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Demo&#123;&#125;</span><br></pre></td></tr></table></figure></div></code></pre><h3 id="24-17-多线程-同步方法-掌握"><a href="#24-17-多线程-同步方法-掌握" class="headerlink" title="24.17_多线程(同步方法)(掌握)"></a>24.17_多线程(同步方法)(掌握)</h3><ul>
<li>使用synchronized关键字修饰一个方法, 该方法中所有的代码都是同步的</li>
</ul>
<pre><code><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.heima.syn;</span><br><span class="line"></span><br><span class="line">public class Demo2_Synchronized &#123;</span><br><span class="line"></span><br><span class="line">	&#x2F;**</span><br><span class="line">	 * @param args</span><br><span class="line">	 * 同步代码块</span><br><span class="line">	 *&#x2F;</span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		final Printer2 p &#x3D; new Printer2();</span><br><span class="line">		</span><br><span class="line">		new Thread() &#123;</span><br><span class="line">			public void run() &#123;</span><br><span class="line">				while(true) &#123;</span><br><span class="line">					p.print1();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;.start();</span><br><span class="line">		</span><br><span class="line">		new Thread() &#123;</span><br><span class="line">			public void run() &#123;</span><br><span class="line">				while(true) &#123;</span><br><span class="line">					p.print2();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;.start();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Printer2 &#123;</span><br><span class="line">	Demo d &#x3D; new Demo();</span><br><span class="line">	&#x2F;&#x2F;非静态的同步方法的锁对象是神马?</span><br><span class="line">	&#x2F;&#x2F;答:非静态的同步方法的锁对象是this</span><br><span class="line">	&#x2F;&#x2F;静态的同步方法的锁对象是什么?</span><br><span class="line">	&#x2F;&#x2F;是该类的字节码对象</span><br><span class="line">	public static synchronized void print1() &#123;							&#x2F;&#x2F;同步方法只需要在方法上加synchronized关键字即可</span><br><span class="line">		System.out.print(&quot;黑&quot;);</span><br><span class="line">		System.out.print(&quot;马&quot;);</span><br><span class="line">		System.out.print(&quot;程&quot;);</span><br><span class="line">		System.out.print(&quot;序&quot;);</span><br><span class="line">		System.out.print(&quot;员&quot;);</span><br><span class="line">		System.out.print(&quot;\r\n&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public static void print2() &#123;</span><br><span class="line">		&#x2F;&#x2F;synchronized(new Demo()) &#123;							&#x2F;&#x2F;锁对象不能用匿名对象,因为匿名对象不是同一个对象</span><br><span class="line">		synchronized(Printer2.class) &#123;		</span><br><span class="line">			System.out.print(&quot;传&quot;);</span><br><span class="line">			System.out.print(&quot;智&quot;);</span><br><span class="line">			System.out.print(&quot;播&quot;);</span><br><span class="line">			System.out.print(&quot;客&quot;);</span><br><span class="line">			System.out.print(&quot;\r\n&quot;);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></code></pre><h3 id="24-18-多线程-线程安全问题-掌握"><a href="#24-18-多线程-线程安全问题-掌握" class="headerlink" title="24.18_多线程(线程安全问题)(掌握)"></a>24.18_多线程(线程安全问题)(掌握)</h3><ul>
<li>多线程并发操作同一数据时, 就有可能出现线程安全问题</li>
<li>使用同步技术可以解决这种问题, 把操作数据的代码进行同步, 不要多个线程一起操作<br>  ​          <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.heima.syn;</span><br><span class="line"></span><br><span class="line">public class Demo3_Ticket &#123;</span><br><span class="line"></span><br><span class="line">	&#x2F;**</span><br><span class="line">	 * 需求:铁路售票,一共100张,通过四个窗口卖完.</span><br><span class="line">	 *&#x2F;</span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		new Ticket().start();</span><br><span class="line">		new Ticket().start();</span><br><span class="line">		new Ticket().start();</span><br><span class="line">		new Ticket().start();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Ticket extends Thread &#123;</span><br><span class="line">	private static int ticket &#x3D; 100;</span><br><span class="line">	&#x2F;&#x2F;private static Object obj &#x3D; new Object();		&#x2F;&#x2F;如果用引用数据类型成员变量当作锁对象,必须是静态的</span><br><span class="line">	public void run() &#123;</span><br><span class="line">		while(true) &#123;</span><br><span class="line">			synchronized(Ticket.class) &#123;</span><br><span class="line">				if(ticket &lt;&#x3D; 0) &#123;</span><br><span class="line">					break;</span><br><span class="line">				&#125;</span><br><span class="line">				try &#123;</span><br><span class="line">					Thread.sleep(10);				&#x2F;&#x2F;线程1睡,线程2睡,线程3睡,线程4睡</span><br><span class="line">				&#125; catch (InterruptedException e) &#123;</span><br><span class="line">					</span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">				System.out.println(getName() + &quot;...这是第&quot; + ticket-- + &quot;号票&quot;);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

</li>
</ul>
<h3 id="24-19-多线程-火车站卖票的例子用实现Runnable接口-掌握"><a href="#24-19-多线程-火车站卖票的例子用实现Runnable接口-掌握" class="headerlink" title="24.19_多线程(火车站卖票的例子用实现Runnable接口)(掌握)"></a>24.19_多线程(火车站卖票的例子用实现Runnable接口)(掌握)</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.heima.syn;</span><br><span class="line"></span><br><span class="line">public class Demo4_Ticket &#123;</span><br><span class="line"></span><br><span class="line">	&#x2F;**</span><br><span class="line">	 * @param args</span><br><span class="line">	 * 火车站卖票的例子用实现Runnable接口</span><br><span class="line">	 *&#x2F;</span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		MyTicket mt &#x3D; new MyTicket();</span><br><span class="line">		new Thread(mt).start();</span><br><span class="line">		new Thread(mt).start();</span><br><span class="line">		new Thread(mt).start();</span><br><span class="line">		new Thread(mt).start();</span><br><span class="line">		</span><br><span class="line">		&#x2F;*Thread t1 &#x3D; new Thread(mt);				&#x2F;&#x2F;多次启动一个线程是非法的</span><br><span class="line">		t1.start();</span><br><span class="line">		t1.start();</span><br><span class="line">		t1.start();</span><br><span class="line">		t1.start();*&#x2F;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class MyTicket implements Runnable &#123;</span><br><span class="line">	private int tickets &#x3D; 100;</span><br><span class="line">	@Override</span><br><span class="line">	public void run() &#123;</span><br><span class="line">		while(true) &#123;</span><br><span class="line">			synchronized(this) &#123;</span><br><span class="line">				if(tickets &lt;&#x3D; 0) &#123;</span><br><span class="line">					break;</span><br><span class="line">				&#125;</span><br><span class="line">				try &#123;</span><br><span class="line">					Thread.sleep(10);				&#x2F;&#x2F;线程1睡,线程2睡,线程3睡,线程4睡</span><br><span class="line">				&#125; catch (InterruptedException e) &#123;</span><br><span class="line">					</span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">				System.out.println(Thread.currentThread().getName() + &quot;...这是第&quot; + tickets-- + &quot;号票&quot;);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="24-20-多线程-死锁-了解"><a href="#24-20-多线程-死锁-了解" class="headerlink" title="24.20_多线程(死锁)(了解)"></a>24.20_多线程(死锁)(了解)</h3><ul>
<li>多线程同步的时候, 如果同步代码嵌套, 使用相同锁, 就有可能出现死锁<ul>
<li>尽量不要嵌套使用<br>  ​    <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.heima.syn;</span><br><span class="line"></span><br><span class="line">public class Demo5_DeadLock &#123;</span><br><span class="line">  &#x2F;&#x2F;synchronized(s1)：s1是一把锁，它只有释放后，才能被另一个同步块使用，所以会出现死锁（互相等待）的情况</span><br><span class="line">	&#x2F;**</span><br><span class="line">	 * @param args</span><br><span class="line">	 *&#x2F;</span><br><span class="line">	private static String s1 &#x3D; &quot;筷子左&quot;;</span><br><span class="line">	private static String s2 &#x3D; &quot;筷子右&quot;;</span><br><span class="line"></span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		new Thread() &#123;</span><br><span class="line">			public void run() &#123;</span><br><span class="line">				while(true) &#123;</span><br><span class="line">					synchronized(s1) &#123;</span><br><span class="line">						System.out.println(getName() + &quot;...获取&quot; + s1 + &quot;等待&quot; + s2);</span><br><span class="line">						synchronized(s2) &#123;</span><br><span class="line">							System.out.println(getName() + &quot;...拿到&quot; + s2 + &quot;开吃&quot;);</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;.start();</span><br><span class="line">		</span><br><span class="line">		new Thread() &#123;</span><br><span class="line">			public void run() &#123;</span><br><span class="line">				while(true) &#123;</span><br><span class="line">					synchronized(s2) &#123;</span><br><span class="line">						System.out.println(getName() + &quot;...获取&quot; + s2 + &quot;等待&quot; + s1);</span><br><span class="line">						synchronized(s1) &#123;</span><br><span class="line">							System.out.println(getName() + &quot;...拿到&quot; + s1 + &quot;开吃&quot;);</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;.start();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

</li>
</ul>
</li>
</ul>
<h3 id="24-21-多线程-以前的线程安全的类回顾-掌握"><a href="#24-21-多线程-以前的线程安全的类回顾-掌握" class="headerlink" title="24.21_多线程(以前的线程安全的类回顾)(掌握)"></a>24.21_多线程(以前的线程安全的类回顾)(掌握)</h3><ul>
<li>A:回顾以前说过的线程安全问题<ul>
<li>看源码：Vector,StringBuffer,Hashtable,Collections.synchroinzed(xxx)</li>
<li>Vector是线程安全的,ArrayList是线程不安全的</li>
<li>StringBuffer是线程安全的,StringBuilder是线程不安全的</li>
<li>Hashtable是线程安全的,HashMap是线程不安全的<h3 id="24-22-多线程-总结"><a href="#24-22-多线程-总结" class="headerlink" title="24.22_多线程(总结)"></a>24.22_多线程(总结)</h3></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>JavaSE</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis笔记（一）</title>
    <url>/2018/04/20/15326649627690/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>参考：【itheima】</p>
</blockquote>
<p>[toc]</p>
<h1 id="mybatis概述"><a href="#mybatis概述" class="headerlink" title="mybatis概述"></a>mybatis概述</h1><h2 id="jdbc问题总结"><a href="#jdbc问题总结" class="headerlink" title="jdbc问题总结"></a>jdbc问题总结</h2><ul>
<li>没有数据库连接池，浪费资源</li>
<li>sql硬编码，无法维护</li>
</ul>
<h2 id="mybatis概述-1"><a href="#mybatis概述-1" class="headerlink" title="mybatis概述"></a>mybatis概述</h2><ul>
<li>是apache的项目</li>
<li>对jdbc进行封装</li>
<li>xml+各种statement，最终将sql执行结果映射成java对象返回</li>
<li>官网中文文档地址：<a href="http://www.mybatis.org/mybatis-3/zh/index.html" target="_blank" rel="noopener">http://www.mybatis.org/mybatis-3/zh/index.html</a><h2 id="mybatis架构"><a href="#mybatis架构" class="headerlink" title="mybatis架构"></a>mybatis架构</h2><a href="/2018/04/20/15326649627690/Mybatis01.jpg" data-fancybox="group" data-caption="Mybatis01" class="fancybox"><img alt="Mybatis01" title="Mybatis01" data-src="/2018/04/20/15326649627690/Mybatis01.jpg" class="lazyload"></a></li>
</ul>
<ol>
<li><p>mybatis配置</p>
<ul>
<li>SqlMapConfig.xml，此文件作为mybatis的全局配置文件，配置了mybatis的运行环境等信息。</li>
<li>mapper.xml文件即sql映射文件，文件中配置了操作数据库的sql语句。此文件需要在SqlMapConfig.xml中加载。</li>
</ul>
</li>
<li><p>通过mybatis环境等配置信息构造SqlSessionFactory即会话工厂</p>
</li>
<li><p>由会话工厂创建sqlSession即会话，操作数据库需要通过sqlSession进行。</p>
</li>
<li><p>mybatis底层自定义了Executor执行器接口操作数据库，Executor接口有两个实现，一个是基本执行器、一个是缓存执行器。</p>
</li>
<li><p>Mapped Statement也是mybatis一个底层封装对象，它包装了mybatis配置信息及sql映射信息等。mapper.xml文件中一个sql对应一个Mapped Statement对象，sql的id即是Mapped statement的id。</p>
</li>
<li><p>Mapped Statement对sql执行输入参数进行定义，包括HashMap、基本类型、pojo，Executor通过Mapped Statement在执行sql前将输入的java对象映射至sql中，输入参数映射就是jdbc编程中对preparedStatement设置参数。</p>
</li>
<li><p>Mapped Statement对sql执行输出结果进行定义，包括HashMap、基本类型、pojo，Executor通过Mapped Statement在执行sql后将输出结果映射至java对象中，输出结果映射过程相当于jdbc编程中对结果的解析处理过程。</p>
</li>
</ol>
<h1 id="入门程序"><a href="#入门程序" class="headerlink" title="入门程序"></a>入门程序</h1><h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2><ul>
<li><p>下载：<a href="https://github.com/mybatis/mybatis-3/releases" target="_blank" rel="noopener">https://github.com/mybatis/mybatis-3/releases</a></p>
</li>
<li><p>文件结构</p>
<ul>
<li>mybatis-3.2.7.jar—-mybatis的核心包</li>
<li>lib—-mybatis的依赖包</li>
<li>mybatis-3.2.7.pdf—-mybatis使用手册</li>
</ul>
</li>
<li><p>jar包：</p>
<ul>
<li>mybatis核心包，依赖包，数据驱动包</li>
</ul>
</li>
<li><p>log4j.properties</p>
<ul>
<li><p>在classpath下创建log4j.properties如下：</p>
  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Global logging configuration</span><br><span class="line">log4j.rootLogger&#x3D;DEBUG, stdout</span><br><span class="line"># Console output...</span><br><span class="line">log4j.appender.stdout&#x3D;org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.layout&#x3D;org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern&#x3D;%5p [%t] - %m%n</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>mybatis默认使用log4j作为输出日志信息。</p>
</li>
</ul>
</li>
<li><p>SqlMapConfig.xml</p>
  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span> /&gt;</span></span><br><span class="line">   </span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://10.211.55.6:3306/mybatis?characterEncoding=utf-8"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"machine"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"4869"</span> /&gt;</span></span><br><span class="line">   </span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>PO类</p>
<ul>
<li><p>Po类作为 mybatis进行sql映射使用，po类通常与数据库表对应</p>
  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class User &#123;</span><br><span class="line">   </span><br><span class="line">    private int id;</span><br><span class="line">    private String username;</span><br><span class="line">    private String sex;</span><br><span class="line">    private Date birthday;</span><br><span class="line">    private String address;</span><br><span class="line">   </span><br><span class="line">    &#x2F;&#x2F;set,get...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
</ul>
</li>
<li><p>sql映射文件</p>
<ul>
<li><p>在classpath下的sqlmap目录下创建sql映射文件Users.xml</p>
  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">        &lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;</span><br><span class="line">        &lt;!DOCTYPE mapper</span><br><span class="line">                PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Mapper 3.0&#x2F;&#x2F;EN&quot;</span><br><span class="line">                &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">        &lt;mapper namespace&#x3D;&quot;test&quot;&gt;</span><br><span class="line">        &lt;!--</span><br><span class="line">            namespace: 用来隔离sql语句</span><br><span class="line">            例如：User user &#x3D; sqlSession.selectOne(&quot;test.findUserById&quot;, 10);</span><br><span class="line">        --&gt;</span><br><span class="line">        &lt;&#x2F;mapper&gt;</span><br><span class="line">        &#96;&#96;&#96;  </span><br><span class="line"></span><br><span class="line">- 加载映射文件</span><br><span class="line">    - 添加在SqlMapConfig.xml下</span><br></pre></td></tr></table></figure></div>
   <mappers>
      <mapper resource="sqlmap/User.xml">
  </mapper></mappers>
  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   </span><br><span class="line">## 根据id查询用户信息</span><br><span class="line"></span><br><span class="line">- user.xml，在mapper下</span><br></pre></td></tr></table></figure></div>
<!-- 根据id获取用户信息 -->
<select id="findUserById" parametertype="int" resulttype="com.machine.po.User">
  SELECT * FROM User where id = #{id}
</select>
<!--
  parameterType：定义输入到sql中的映射类型，
  #{id}: 表示使用preparedstatement设置占位符号并将输入变量id传到sql。
  resultType：定义结果映射类型。</li>
<li><p>-&gt;   </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   </span><br><span class="line">- 数据库sql文件</span><br></pre></td></tr></table></figure>
<p>CREATE TABLE User(<br>   id INT PRIMARY KEY AUTO_INCREMENT,<br>   username VARCHAR(20),<br>   sex VARCHAR(20) ,<br>   birthday DATE,<br>   address VARCHAR(20)<br>);</p>
<p>INSERT INTO User VALUES(NULL,’tom’,’男’,’1995-11-20’,’成都’);<br>INSERT INTO User VALUES(NULL,’fox’,’女’,’1995-11-21’,’上海’);<br>INSERT INTO User VALUES(NULL,’james’,’男’,’1995-11-22’,’北京’);</p>
<p>select * from User</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   </span><br><span class="line">- 测试程序</span><br></pre></td></tr></table></figure>
<p>public class Mybatis_first {</p>
<p>   private SqlSessionFactory sqlsessionFactory;</p>
<p>   @Before<br>   public void createSqlSessionFactory() throws Exception{</p>
<pre><code>//加载核心文件
InputStream inputStream = Resources.getResourceAsStream(&quot;SqlMapConfig.xml&quot;);

//创建工厂
sqlsessionFactory = new SqlSessionFactoryBuilder().build(inputStream);</code></pre><p>   }</p>
<p>   @Test<br>   public void testFindUserById(){</p>
<pre><code>//创建数据库会话实例sqlSession
SqlSession sqlSession = sqlsessionFactory.openSession();

//将查询结果 封装成pojo
//查询单例
User user = sqlSession.selectOne(&quot;test.findUserById&quot;, 1);//sql语句的id,传入的值 #{id}

System.out.println(user);

//关闭
sqlSession.close();</code></pre><p>   }<br>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   </span><br><span class="line">## 根据用户名查询用户信息</span><br></pre></td></tr></table></figure>
<!-- 根据用户名获取用户信息，%%模糊查询，用${}拼接 -->
<select id="findUserByName" parametertype="java.lang.String" resulttype="com.machine.po.User">
SELECT * FROM User where username LIKE '%${value}%'
</select>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
//查询多例
List<user> list = sqlSession.selectList("test.findUserByName", "t");

</user></li>
</ul>
</li>
</ul>
<p>System.out.println(list);</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 添加用户</span><br></pre></td></tr></table></figure></div>
<insert id="insertUser" parametertype="com.machine.po.User">
    INSERT INTO User(username,birthday,sex,address)
    VALUES(#{username},#{birthday},#{sex},#{address})
</insert>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
User user = new User();
user.setUsername("xiaoming");
user.setBirthday(new Date());
user.setSex("女");
user.setAddress("海南");

<p>sqlSession.selectOne(“test.insertUser”,user);</p>
<p>//提交事务<br>sqlSession.commit();</p>
<p>//…</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 删除用户</span><br></pre></td></tr></table></figure></div>
<delete id="deleteUserById" parametertype="int">
    DELETE FROM User WHERE id = #{id}
</delete>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
sqlSession.delete("test.deleteUserById",11);
sqlSession.commit();
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 修改用户</span><br></pre></td></tr></table></figure></div>
<update id="updateUser" parametertype="com.machine.po.User">
    UPDATE User SET
    username = #{username},
    sex = #{sex},
    birthday = #{birthday},
    address = #{address}
    WHERE id = #{id}
</update>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
User user = new User();
user.setId(10);
user.setUsername("wq");
user.setSex("男");
user.setAddress("四川");
user.setBirthday(new Date());

<p>//若有的字段不想更新，必须先查询先前的值，再注入进去，不然（不写的话），那个字段的值会变空<br>sqlSession.update(“test.updateUser”,user);</p>
<p>sqlSession.commit();</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"># 小结 对比</span><br><span class="line">## $&#123;&#125; 和 #&#123;&#125;</span><br><span class="line"></span><br><span class="line">- ‘#&#123;&#125;’ 实现preparedStatement向**占位符中**设置值，自动进行java类型和jdbc类型转换，#&#123;&#125;括号中可以是value或其它名称。</span><br><span class="line">- ‘$&#123;&#125;’ 只是**拼接**sql串，不进行jdbc类型转换，括号中只能是value。</span><br><span class="line"></span><br><span class="line">## selectOne和selectList</span><br><span class="line">- 动态代理对象调用sqlSession.selectOne()和sqlSession.selectList()是根据mapper接口方法的返回值决定，如果返回list则调用selectList方法，如果返回单个对象则调用selectOne方法。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## mysql自增主键返回</span><br></pre></td></tr></table></figure></div>
<insert id="insertUser" parametertype="com.machine.po.User">
    <!--
        after: 先插入数据，再查询返回id
        keyProperty：要注入的po类的属性
        resultType：返回值类型
        也可以用SELECT MAX(id) FROM User
    -->
    <selectkey keyproperty="id" order="AFTER" resulttype="java.lang.Integer">
        SELECT LAST_INSERT_ID()
    </selectkey>

<pre><code>INSERT INTO User(username,birthday,sex,address)
VALUES(#{username},#{birthday},#{sex},#{address})</code></pre></insert>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
User user = new User();

<p>user.setUsername(“maxiao”);<br>user.setBirthday(new Date());<br>user.setSex(“女”);<br>user.setAddress(“合肥”);</p>
<p>System.out.println(“=====”+user.getId());</p>
<p>sqlSession.insert(“test.insertUser”,user);<br>//提交事务<br>sqlSession.commit();</p>
<p>System.out.println(“=====”+user.getId());</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## mysql使用uuid实现主键</span><br><span class="line"></span><br><span class="line">- select uuid()生成主键，再注入po，再把po插入数据库</span><br><span class="line">- 修改User 的 id 字段为String类型</span><br></pre></td></tr></table></figure></div>
<pre><code>&lt;insert id=&quot;insertUser&quot; parameterType=&quot;com.machine.po.User&quot; &gt;
    &lt;!--before: 将uuid的值注入po，再插入数据库--&gt;
    &lt;selectKey keyProperty=&quot;id&quot; order=&quot;BEFORE&quot; resultType=&quot;java.lang.String&quot;&gt;
        select uuid()
    &lt;/selectKey&gt;

    INSERT INTO User(id,username,birthday,sex,address)
    VALUES(#{id},#{username},#{birthday},#{sex},#{address})
&lt;/insert&gt;
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## Mybatis解决jdbc编程的问题</span><br><span class="line">- 有数据库链接池</span><br><span class="line">- sql与java代码分离</span><br><span class="line">- 自动将java对象映射至sql语句，parameterType</span><br><span class="line">- 自动将sql执行结果映射至java对象，resultType</span><br><span class="line"></span><br><span class="line">## mybatis与hibernate不同</span><br><span class="line">- Mysql需自己编写sql语句，不完全是一个ORM框架</span><br><span class="line">- 原生态sql，灵活度高，适合对关系数据模型要求不高的软件开发（互联网软件、企业运营类软件）</span><br><span class="line">- 无法做到数据库无关性，如果需要实现支持多种数据库的软件则需要自定义多套sql映射文件，工作量大</span><br><span class="line">- Hibernate对象&#x2F;关系映射能力强，数据库无关性好，对于关系模型要求高的软件（例如需求固定的定制化软件）如果用hibernate开发可以节省很多代码，提高效率。</span><br><span class="line">- Hibernate的学习门槛高，要精通门槛更高，而且怎么设计O&#x2F;R映射，在性能和对象模型之间如何权衡，以及怎样用好Hibernate需要具有很强的经验和能力才行。</span><br><span class="line">- 所以框架只有适合才是最好</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## SqlSession的使用范围</span><br><span class="line">- SqlSessionFactoryBuilder</span><br><span class="line">    - SqlSessionFactoryBuilder用于创建SqlSessionFacoty，SqlSessionFacoty一旦创建完成就不需要SqlSessionFactoryBuilder了，所以可以将SqlSessionFactoryBuilder当成一个工具类使用，最佳使用范围是方法范围即**方法体内局部变量**。</span><br><span class="line">- SqlSessionFactory</span><br><span class="line">    - SqlSessionFactory是一个接口，接口中定义了openSession的不同重载方法，SqlSessionFactory的最佳使用范围是整个应用运行期间，一旦创建后可以重复使用，通常以**单例**模式管理SqlSessionFactory。</span><br><span class="line">- SqlSession</span><br><span class="line">    - SqlSession是一个面向用户的接口， sqlSession中定义了数据库操作方法。</span><br><span class="line">    - 每个线程都应该有它自己的SqlSession实例。SqlSession的实例不能共享使用，它也是线程不安全的。因此最佳的范围是请求或方法范围。绝对不能将SqlSession实例的引用放在一个类的静态字段或实例字段中。</span><br><span class="line">    - 打开一个 SqlSession；使用完毕就要关闭它。通常把这个关闭操作放到 finally 块中以确保每次都能执行关闭。</span><br><span class="line">   </span><br><span class="line"># DAO开发方法</span><br><span class="line">## 原始Dao开发方法(不推荐)</span><br><span class="line"></span><br><span class="line">- 程序员编写Dao接口和Dao实现类</span><br></pre></td></tr></table></figure></div>
public interface UserDao {
    public User getUserById(int id);
    public void InsertUser(User user);
}
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure></div>
public class UserDaoImpl implements UserDao{

    //注入sqlSessionFactory
    private SqlSessionFactory sqlSessionFactory;
    public UserDaoImpl(SqlSessionFactory sqlSessionFactory){
        this.sqlSessionFactory = sqlSessionFactory;
    }


    @Override
    public User getUserById(int id) {
        SqlSession sqlSession = sqlSessionFactory.openSession();
        User user = null;
        try {

            user = sqlSession.selectOne(&quot;test.findUserById&quot;,id);
        }finally {
            sqlSession.close();
        }
        return user;
    }

    @Override
    public void InsertUser(User user) {
        SqlSession sqlSession = sqlSessionFactory.openSession();
        try{
            sqlSession.insert(&quot;test.insertUser&quot;,user);
            sqlSession.commit();
        }finally {
            sqlSession.close();
        }
    }
}

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure></div>
@Test
public void testDao(){
    UserDao userDao = new UserDaoImpl(sqlsessionFactory);

    User user = userDao.getUserById(1);
    System.out.println(user);


    User user2 = new User();
    user2.setUsername(&quot;er&quot;);
    user2.setSex(&quot;女&quot;);
    user2.setBirthday(new Date());
    user2.setAddress(&quot;西雅图&quot;);

    userDao.InsertUser(user2);
}
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   </span><br><span class="line">- 原始dao开发存在以下问题</span><br><span class="line">    - 代码重复：通过SqlSessionFactory创建SqlSession，调用SqlSession的数据库操作方法</span><br><span class="line">    - 调用sqlSession的数据库操作方法需要指定statement的id，这里存在硬编码，不利于开发维护</span><br><span class="line"></span><br><span class="line">## Mapper接口开发方法（推荐）</span><br><span class="line"></span><br><span class="line">- Mapper动态代理方式</span><br><span class="line">- 开发规范</span><br><span class="line">    - 程序员只需编写Mapper接口（相当于Dao接口），由Mybatis框架 根据接口定义 创建接口的**动态代理**对象，代理对象的方法体同上边Dao接口实现类方法。</span><br><span class="line">    - Mapper接口开发需要遵循以下规范：</span><br><span class="line">        1. Mapper.xml文件中的namespace与mapper接口的类路径相同。</span><br><span class="line">        2. Mapper接口方法名和Mapper.xml中定义的每个statement的id相同</span><br><span class="line">        3. Mapper接口方法的输入参数类型和mapper.xml中定义的每个sql 的parameterType的类型相同</span><br><span class="line">        4. Mapper接口方法的输出参数类型和mapper.xml中定义的每个sql的resultType的类型相同</span><br><span class="line">- Mapper.xml(映射文件)</span><br><span class="line">    - 定义mapper映射文件UserMapper.xml（内容同Users.xml），需要修改namespace的值为 UserMapper接口路径。将UserMapper.xml放在classpath 下mapper目录 下。</span><br></pre></td></tr></table></figure></div>
    &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
    &lt;!DOCTYPE mapper
            PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
            &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
    &lt;!--namespace: mapper接口路径--&gt;
    &lt;mapper namespace=&quot;com.machine.mapper.UserMapper&quot;&gt;

        &lt;select id=&quot;findUserById&quot; parameterType=&quot;int&quot; resultType=&quot;com.machine.po.User&quot;&gt;
            SELECT * FROM User where id = #{id}
        &lt;/select&gt;

        &lt;select id=&quot;findUserByName&quot; parameterType=&quot;java.lang.String&quot; resultType=&quot;com.machine.po.User&quot;&gt;
            SELECT * FROM User where username LIKE &apos;%${value}%&apos;
        &lt;/select&gt;

        &lt;insert id=&quot;insertUser&quot; parameterType=&quot;com.machine.po.User&quot; &gt;

            &lt;selectKey keyProperty=&quot;id&quot; order=&quot;AFTER&quot; resultType=&quot;java.lang.Integer&quot;&gt;
                SELECT LAST_INSERT_ID()
            &lt;/selectKey&gt;

            INSERT INTO User(username,birthday,sex,address)
            VALUES(#{username},#{birthday},#{sex},#{address})
        &lt;/insert&gt;

    &lt;/mapper&gt;

    <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   </span><br><span class="line">- XxxMapper.java(接口文件)</span><br></pre></td></tr></table></figure></div>
public interface UserMapper {
    public User findUserById(int id) throws Exception;
    public List&lt;User&gt; findUserByName(String username) throws Exception;
    public void insertUser(User user) throws Exception;

}

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line">- 加载UserMapper.xml文件(核心文件中)</span><br></pre></td></tr></table></figure></div>
&lt;mapper resource=&quot;mapper/UserMapper.xml&quot; /&gt;
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   </span><br><span class="line">- 测试代码</span><br></pre></td></tr></table></figure></div>
@Test
public void testMapper1() throws Exception {
    SqlSession sqlSession = sqlsessionFactory.openSession();

    //获取mapper接口的 代理对象 ,
    // sqlSession.getMapper（）返回的是对象 ，用接口接受
    UserMapper userMapper = sqlSession.getMapper(UserMapper.class);

    System.out.println(&quot;=====按id查找&quot;);
    User user = userMapper.findUserById(2);
    System.out.println(user);

    System.out.println(&quot;=====按name查找&quot;);
    List&lt;User&gt; users = userMapper.findUserByName(&quot;m&quot;);
    System.out.println(users);

    System.out.println(&quot;=====添加&quot;);
    User user2 = new User();
    user2.setUsername(&quot;tt&quot;);
    user2.setAddress(&quot;马达加斯加&quot;);
    user2.setBirthday(new Date());
    user2.setSex(&quot;男&quot;);
    userMapper.insertUser(user2);

    //提交事务，关闭session
    sqlSession.commit();
    sqlSession.close();
}

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   </span><br><span class="line">- mybatis官方推荐使用mapper代理方法开发mapper接口</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># SqlMapConfig.xml配置文件</span><br><span class="line">## 配置内容</span><br><span class="line">- 顺序如下：</span><br><span class="line"></span><br><span class="line">    &#96;&#96;&#96;t</span><br><span class="line">    properties（属性）</span><br><span class="line">    settings（全局配置参数）</span><br><span class="line">    typeAliases（类型别名）</span><br><span class="line">    typeHandlers（类型处理器）</span><br><span class="line">    objectFactory（对象工厂）</span><br><span class="line">    plugins（插件）</span><br><span class="line">    environments（环境集合属性对象）</span><br><span class="line">        environment（环境子属性对象）</span><br><span class="line">            transactionManager（事务管理）</span><br><span class="line">            dataSource（数据源）</span><br><span class="line">    mappers（映射器）</span><br></pre></td></tr></table></figure></div></code></pre><h2 id="properties（属性）"><a href="#properties（属性）" class="headerlink" title="properties（属性）"></a>properties（属性）</h2><ul>
<li><p>在classpath下定义db.properties文件</p>
  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    jdbc.driver&#x3D;com.mysql.jdbc.Driver</span><br><span class="line">    jdbc.url&#x3D;jdbc:mysql:&#x2F;&#x2F;10.211.55.6:3306&#x2F;mybatis?characterEncoding&#x3D;utf-8</span><br><span class="line">    jdbc.username&#x3D;machine</span><br><span class="line">    jdbc.password&#x3D;4869</span><br><span class="line">    &#96;&#96;&#96;   </span><br><span class="line">   </span><br><span class="line">- SqlMapConfig.xml引用如下：</span><br></pre></td></tr></table></figure></div>
  <properties resource="db.properties">

  <environments default="development">
      <environment id="development">
          <transactionmanager type="JDBC">

<pre><code>    &lt;dataSource type=&quot;POOLED&quot;&gt;
        &lt;property name=&quot;driver&quot; value=&quot;${jdbc.driver}&quot; /&gt;
        &lt;property name=&quot;url&quot; value=&quot;${jdbc.url}&quot; /&gt;
        &lt;property name=&quot;username&quot; value=&quot;${jdbc.username}&quot; /&gt;
        &lt;property name=&quot;password&quot; value=&quot;${jdbc.password}&quot; /&gt;
    &lt;/dataSource&gt;
&lt;/environment&gt;</code></pre>  </transactionmanager></environment></environments>
  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   </span><br><span class="line">- MyBatis 将按照下面的顺序来加载属性：</span><br><span class="line">    - 在 properties 元素体内定义的属性首先被读取</span><br><span class="line">    - 然后会读取properties 元素中resource或 url 加载的属性，它会覆盖已读取的同名属性</span><br><span class="line"></span><br><span class="line">## typeAliases（类型别名）</span><br><span class="line"></span><br><span class="line">- mybatis支持别名</span><br><span class="line">   </span><br><span class="line">    &#96;&#96;&#96;t</span><br><span class="line">    别名          映射的类型</span><br><span class="line">    _byte       byte</span><br><span class="line">    _long       long</span><br><span class="line">    _short      short</span><br><span class="line">    _int        int</span><br><span class="line">    _integer    int</span><br><span class="line">    _double     double</span><br><span class="line">    _float      float</span><br><span class="line">    _boolean    boolean</span><br><span class="line">    string      String</span><br><span class="line">    byte        Byte</span><br><span class="line">    long        Long</span><br><span class="line">    short       Short</span><br><span class="line">    int         Integer</span><br><span class="line">    integer     Integer</span><br><span class="line">    double      Double</span><br><span class="line">    float       Float</span><br><span class="line">    boolean     Boolean</span><br><span class="line">    date        Date</span><br><span class="line">    decimal     BigDecimal</span><br><span class="line">    bigdecimal  BigDecimal</span><br><span class="line">    map         Map</span><br></pre></td></tr></table></figure></div>
</properties></li>
<li><p>自定义别名</p>
<ul>
<li><p>在SqlMapConfig.xml中配置：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;typeAliases&gt;</span><br><span class="line">    &lt;!--单个定义别名--&gt;</span><br><span class="line">    &lt;typeAlias alias&#x3D;&quot;user&quot; type&#x3D;&quot;com.machine.po.User&quot; &#x2F;&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">        使用扫描法 批量定义别名</span><br><span class="line">        定义后，别名&#x3D;类名，不区分大小写，单建议按java命名规则（userMapper）</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;package name&#x3D;&quot;com.machine.po&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;typeAliases&gt;</span><br></pre></td></tr></table></figure></div>

</li>
</ul>
</li>
</ul>
<h2 id="mappers（映射器）"><a href="#mappers（映射器）" class="headerlink" title="mappers（映射器）"></a>mappers（映射器）</h2><ul>
<li><p><code>&lt;mapper resource=&quot; &quot; /&gt;</code></p>
<ul>
<li>使用相对于类路径的资源,<ul>
<li>如：<code>&lt;mapper resource=&quot;sqlmap/User.xml&quot; /&gt;</code></li>
</ul>
</li>
</ul>
</li>
<li><p><code>&lt;mapper class=&quot; &quot; /&gt;</code></p>
<ul>
<li>使用mapper接口类路径,<ul>
<li>如： <code>&lt;mapper class=&quot;com.machine.mapper.UserMapper&quot;/&gt;</code></li>
</ul>
</li>
<li>注意：此种方法要求mapper接口名称和mapper映射文件名称相同，且放在同一个目录中</li>
</ul>
</li>
<li><p><code>&lt;package name=&quot;&quot;/&gt;</code></p>
<ul>
<li>注册指定包下的所有mapper接口，<ul>
<li>如：<code>&lt;package name=&quot;com.machine.mapper&quot;/&gt;</code></li>
</ul>
</li>
<li>注意：此种方法要求mapper接口名称和mapper映射文件名称相同，且放在同一个目录中</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis笔记（二）</title>
    <url>/2018/04/20/15326651019569/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>参考：【itheima】</p>
</blockquote>
<p>[toc]</p>
<h1 id="输入映射和输出映射"><a href="#输入映射和输出映射" class="headerlink" title="输入映射和输出映射"></a>输入映射和输出映射</h1><p>每个sql是一个statement</p>
<h2 id="parameterType-输入类型"><a href="#parameterType-输入类型" class="headerlink" title="parameterType(输入类型)"></a>parameterType(输入类型)</h2><ol>
<li><p>传递简单类型</p>
<ul>
<li>参考Mybatis笔记（一）</li>
</ul>
</li>
<li><p>传递pojo对象</p>
<ul>
<li>ognl表达式解析对象字段的值，#{}或者${}括号中的值为pojo属性名称</li>
</ul>
</li>
<li><p>传递pojo包装对象</p>
<ul>
<li><p>开发中通过pojo传递查询条件，查询条件是综合的查询条件，不仅包括用户查询条件还包括其它的查询条件（比如将用户购买商品信息也作为查询条件），这时可以使用包装对象传递输入参数。</p>
</li>
<li><p>代码</p>
<p>  定义别名</p>
  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        使用扫描法 批量定义别名</span></span><br><span class="line"><span class="comment">        定义后，别名=类名，不区分大小写，单建议按java命名规则（userMapper）</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.machine.vo"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>  包装对象</p>
  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueryVo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.user = user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>  mapper接口</p>
  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findUserByQueryVo</span><span class="params">(QueryVo queryVo)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>  mapper映射</p>
  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    parameterType:mapper接口中方法名的输入参数：queryVo</span></span><br><span class="line"><span class="comment">        public List&lt;User&gt; findUserByQueryVo(QueryVo queryVo)</span></span><br><span class="line"><span class="comment">    $&#123;user.username&#125;: queryVo类中的属性，使用ognl表达式取值</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserByQueryVo"</span> <span class="attr">parameterType</span>=<span class="string">"queryVo"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">resultType</span>=<span class="string">"com.machine.po.User"</span> &gt;</span></span><br><span class="line">    SELECT * FROM User WHERE username like '%$&#123;user.username&#125;%'</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>  测试代码</p>
  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">QueryVo queryVo = <span class="keyword">new</span> QueryVo();</span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setUsername(<span class="string">"m"</span>);</span><br><span class="line">queryVo.setUser(user);</span><br><span class="line"></span><br><span class="line">List&lt;User&gt; userList = userMapper.findUserByQueryVo(queryVo);</span><br></pre></td></tr></table></figure></div>

</li>
</ul>
</li>
</ol>
<h2 id="resultType-输出类型"><a href="#resultType-输出类型" class="headerlink" title="resultType(输出类型)"></a>resultType(输出类型)</h2><ol>
<li>输出简单类型</li>
<li>输出pojo对象</li>
<li>输出pojo列表 List&lt;&gt;</li>
</ol>
<h2 id="resultMap"><a href="#resultMap" class="headerlink" title="resultMap"></a>resultMap</h2><ul>
<li><p>resultType可以指定pojo将查询结果映射为pojo，但需要pojo的属性名和sql查询的<strong>列名一致</strong>方可映射成功。</p>
</li>
<li><p>如果sql查询字段名和pojo的属性名不一致，可以通过resultMap将字段名和属性名作一个<strong>对应关系</strong>，resultMap实质上还需要将查询结果映射到pojo对象中。</p>
</li>
<li><p>代码</p>
  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">    id:resultMap唯一标志</span><br><span class="line">    type：最终映射的java对象</span><br><span class="line">--&gt;</span><br><span class="line">&lt;resultMap id&#x3D;&quot;userResultMap&quot; type&#x3D;&quot;user&quot; &gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">        id:主键</span><br><span class="line">        result：普通列</span><br><span class="line">        column：sql列名</span><br><span class="line">        property：pojo属性名字</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;id column&#x3D;&quot;id_&quot; property&#x3D;&quot;id&quot; &#x2F;&gt;</span><br><span class="line">    &lt;result column&#x3D;&quot;username_&quot; property&#x3D;&quot;username&quot; &#x2F;&gt;</span><br><span class="line">    &lt;result column&#x3D;&quot;sex_&quot; property&#x3D;&quot;sex&quot; &#x2F;&gt;</span><br><span class="line">    &lt;result column&#x3D;&quot;birthday_&quot; property&#x3D;&quot;birthday&quot; &#x2F;&gt;</span><br><span class="line">    &lt;result column&#x3D;&quot;address_&quot; property&#x3D;&quot;address&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;resultMap&gt;</span><br><span class="line">&lt;!--此时查询出来的 数据库列名 和pojo名 不对应 需要用resultMap转换--&gt;</span><br><span class="line">&lt;select id&#x3D;&quot;findUserById&quot; parameterType&#x3D;&quot;int&quot; resultMap&#x3D;&quot;userResultMap&quot;&gt;</span><br><span class="line">   select id id_ ,</span><br><span class="line">username username_ ,</span><br><span class="line">sex sex_ ,</span><br><span class="line">birthday birthday_ ,</span><br><span class="line">address address_</span><br><span class="line">   from User</span><br><span class="line">   where id &#x3D; #&#123;id&#125;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure></div>

<p>  测试代码：</p>
  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">User user &#x3D; userMapper.findUserById(2);</span><br></pre></td></tr></table></figure></div>

</li>
</ul>
<h1 id="动态sql"><a href="#动态sql" class="headerlink" title="动态sql"></a>动态sql</h1><h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><p>mapper接口</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public List&lt;User&gt; findUserBySexAndUsername(User user);</span><br></pre></td></tr></table></figure></div>

<p>mapper映射</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;findUserBySexAndUsername&quot; parameterType&#x3D;&quot;user&quot; resultType&#x3D;&quot;user&quot;&gt;</span><br><span class="line">    select * from User where 1&#x3D;1</span><br><span class="line">    &lt;if test&#x3D;&quot;username !&#x3D; null and username!&#x3D;&#39;&#39;&quot;&gt;</span><br><span class="line">        and username like &#39;%$&#123;username&#125;%&#39;</span><br><span class="line">    &lt;&#x2F;if&gt;</span><br><span class="line">    &lt;if test&#x3D;&quot;sex!&#x3D;null and sex!&#x3D;&#39;&#39;&quot;&gt;</span><br><span class="line">        and sex &#x3D; #&#123;sex&#125;</span><br><span class="line">    &lt;&#x2F;if&gt;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure></div>

<p>测试代码</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">User user &#x3D; new User();</span><br><span class="line">user.setUsername(&quot;m&quot;);</span><br><span class="line">&#x2F;&#x2F;user.setSex(&quot;男&quot;);</span><br><span class="line">List&lt;User&gt; userList &#x3D; userMapper.findUserBySexAndUsername(user);</span><br><span class="line">System.out.println(userList);</span><br></pre></td></tr></table></figure></div>

<h2 id="where"><a href="#where" class="headerlink" title="where"></a>where</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--where可以自动处理第一个and--&gt;</span><br><span class="line">&lt;select id&#x3D;&quot;findUserBySexAndUsername&quot; parameterType&#x3D;&quot;user&quot; resultType&#x3D;&quot;user&quot;&gt;</span><br><span class="line">    select * from User</span><br><span class="line">    &lt;where&gt;</span><br><span class="line">        &lt;if test&#x3D;&quot;username !&#x3D; null and username!&#x3D;&#39;&#39;&quot;&gt;</span><br><span class="line">            and username like &#39;%$&#123;username&#125;%&#39;</span><br><span class="line">        &lt;&#x2F;if&gt;</span><br><span class="line">        &lt;if test&#x3D;&quot;sex!&#x3D;null and sex!&#x3D;&#39;&#39;&quot;&gt;</span><br><span class="line">            and sex &#x3D; #&#123;sex&#125;</span><br><span class="line">        &lt;&#x2F;if&gt;</span><br><span class="line">    &lt;&#x2F;where&gt;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure></div>

<h2 id="Sql片段-抽取where"><a href="#Sql片段-抽取where" class="headerlink" title="Sql片段(抽取where)"></a>Sql片段(抽取where)</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">    1.抽取，达到sql重用的目的</span><br><span class="line">    2.将where条件抽取出来放入sql</span><br><span class="line">    3.使用include引用</span><br><span class="line">--&gt;</span><br><span class="line">&lt;sql id&#x3D;&quot;query_where_user&quot;&gt;</span><br><span class="line">    &lt;if test&#x3D;&quot;username !&#x3D; null and username!&#x3D;&#39;&#39;&quot;&gt;</span><br><span class="line">        and username like &#39;%$&#123;username&#125;%&#39;</span><br><span class="line">    &lt;&#x2F;if&gt;</span><br><span class="line">    &lt;if test&#x3D;&quot;sex!&#x3D;null and sex!&#x3D;&#39;&#39;&quot;&gt;</span><br><span class="line">        and sex &#x3D; #&#123;sex&#125;</span><br><span class="line">    &lt;&#x2F;if&gt;</span><br><span class="line">&lt;&#x2F;sql&gt;</span><br><span class="line">&lt;!--where可以自动处理第一个and--&gt;</span><br><span class="line">&lt;select id&#x3D;&quot;findUserBySexAndUsername&quot; parameterType&#x3D;&quot;user&quot; resultType&#x3D;&quot;user&quot;&gt;</span><br><span class="line">    select * from User</span><br><span class="line">    &lt;where&gt;</span><br><span class="line">       &lt;include refid&#x3D;&quot;query_where_user&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;where&gt;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure></div>

<h2 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h2><ul>
<li><p>使用场景</p>
<ul>
<li>parameterType传入参数有List</li>
<li>需求如： select * from User where username like ‘%m%’ and id in(1,3,5)</li>
</ul>
</li>
<li><p>代码</p>
  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class QueryVo &#123;</span><br><span class="line">    private User user;</span><br><span class="line">    private List&lt;Integer&gt; ids;</span><br><span class="line"></span><br><span class="line">   &#x2F;&#x2F;setter getter</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public interface UserMapper &#123;</span><br><span class="line">    </span><br><span class="line">    public List&lt;User&gt; findUserByQueryVo(QueryVo queryVo) throws Exception;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;findUserByQueryVo&quot; parameterType&#x3D;&quot;queryVo&quot;</span><br><span class="line">        resultType&#x3D;&quot;user&quot; &gt;</span><br><span class="line">    select * from User</span><br><span class="line">    where username like &#39;%$&#123;user.username&#125;%&#39;</span><br><span class="line">    &lt;foreach collection&#x3D;&quot;ids&quot; open&#x3D;&quot; and id in(&quot; close&#x3D;&quot;)&quot; separator&#x3D;&quot;,&quot; item&#x3D;&quot;id&quot;&gt;</span><br><span class="line">        #&#123;id&#125;</span><br><span class="line">    &lt;&#x2F;foreach&gt;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure></div>

<p>  测试代码</p>
  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">QueryVo queryVo &#x3D; new QueryVo();</span><br><span class="line"></span><br><span class="line">User user &#x3D; new User();</span><br><span class="line">user.setUsername(&quot;m&quot;);</span><br><span class="line">queryVo.setUser(user);</span><br><span class="line"></span><br><span class="line">List&lt;Integer&gt; ids &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">ids.add(1);</span><br><span class="line">ids.add(3);</span><br><span class="line">ids.add(5);</span><br><span class="line">queryVo.setIds(ids);</span><br><span class="line"></span><br><span class="line">List&lt;User&gt; userList &#x3D; userMapper.findUserByQueryVo(queryVo);</span><br></pre></td></tr></table></figure></div>

</li>
</ul>
<h1 id="关联查询"><a href="#关联查询" class="headerlink" title="关联查询"></a>关联查询</h1><h2 id="用户订单模型"><a href="#用户订单模型" class="headerlink" title="用户订单模型"></a>用户订单模型</h2><pre><code>一个用户可以下多个订单，一个订单只对应一个用户</code></pre><h2 id="一对一查询"><a href="#一对一查询" class="headerlink" title="一对一查询"></a>一对一查询</h2><ul>
<li><p>案例：查询订单信息，关联查询用户信息</p>
</li>
<li><p>方法一：自动映射（定义专门的PO作为输出类型）</p>
<p>  sql:</p>
  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">orders.*,</span><br><span class="line">user.username,</span><br><span class="line">userss.address</span><br><span class="line">FROM</span><br><span class="line">orders,</span><br><span class="line">user</span><br><span class="line">WHERE orders.user_id &#x3D; user.id</span><br></pre></td></tr></table></figure></div>

<p>  po类:</p>
  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class OrdersCustom extends Orders &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;继承Orders,再添加User属性即可</span><br><span class="line">    private String username;&#x2F;&#x2F; 用户名称</span><br><span class="line">    private String address;&#x2F;&#x2F; 用户地址</span><br><span class="line">    &#x2F;&#x2F;set get</span><br></pre></td></tr></table></figure></div>

<p>  Mapper.xml:</p>
  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 查询所有订单信息 --&gt;</span><br><span class="line">&lt;select id&#x3D;&quot;findOrdersList&quot; resultType&#x3D;&quot;cn.itcast.mybatis.po.OrdersCustom&quot;&gt;</span><br><span class="line">SELECT</span><br><span class="line">orders.*,</span><br><span class="line">user.username,</span><br><span class="line">user.address</span><br><span class="line">FROM</span><br><span class="line">orders,user</span><br><span class="line">WHERE orders.user_id &#x3D; user.id</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure></div>

<p>  Mapper接口:</p>
  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public List&lt;OrdersCustom&gt; findOrdersList() throws Exception;</span><br></pre></td></tr></table></figure></div>

<p>  测试：</p>
  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">List&lt;OrdersCustom&gt; list &#x3D; userMapper.findOrdersList();</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>方法二：手动映射（在Orders类里包含User类）</p>
  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Orders &#123;</span><br><span class="line">    private int id;</span><br><span class="line">    private String createTime;</span><br><span class="line">    private String state;</span><br><span class="line">    </span><br><span class="line">    private User user;</span><br></pre></td></tr></table></figure></div>

  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 查询订单关联用户信息使用resultmap --&gt;</span><br><span class="line">&lt;resultMap type&#x3D;&quot;com.machine.po.Orders&quot; id&#x3D;&quot;orderUserResultMap&quot;&gt;</span><br><span class="line">    &lt;id column&#x3D;&quot;id&quot; property&#x3D;&quot;id&quot;&#x2F;&gt;</span><br><span class="line">    &lt;result column&#x3D;&quot;user_id&quot; property&#x3D;&quot;userId&quot;&#x2F;&gt;</span><br><span class="line">    &lt;result column&#x3D;&quot;number&quot; property&#x3D;&quot;number&quot;&#x2F;&gt;</span><br><span class="line">    &lt;result column&#x3D;&quot;createtime&quot; property&#x3D;&quot;createtime&quot;&#x2F;&gt;</span><br><span class="line">    &lt;result column&#x3D;&quot;note&quot; property&#x3D;&quot;note&quot;&#x2F;&gt;</span><br><span class="line">    &lt;!-- </span><br><span class="line">        一对一关联映射 </span><br><span class="line">        association：表示进行关联查询单条记录    </span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">        property:Orders对象的user属性</span><br><span class="line">        javaType：user属性对应 的类型</span><br><span class="line">     --&gt;</span><br><span class="line">    &lt;association property&#x3D;&quot;user&quot; javaType&#x3D;&quot;com.machine.po.User&quot;&gt;</span><br><span class="line">        &lt;!-- </span><br><span class="line">            column:user表的主键对应的列</span><br><span class="line">            property：user对象中id属性</span><br><span class="line">        --&gt;</span><br><span class="line">        &lt;id column&#x3D;&quot;user_id&quot; property&#x3D;&quot;id&quot;&#x2F;&gt;</span><br><span class="line">        &lt;result column&#x3D;&quot;username&quot; property&#x3D;&quot;username&quot;&#x2F;&gt;</span><br><span class="line">        &lt;result column&#x3D;&quot;address&quot; property&#x3D;&quot;address&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;association&gt;</span><br><span class="line">&lt;&#x2F;resultMap&gt;</span><br><span class="line"></span><br><span class="line">&lt;select id&#x3D;&quot;findOrdersWithUserResultMap&quot; resultMap&#x3D;&quot;orderUserResultMap&quot;&gt;</span><br><span class="line">    SELECT</span><br><span class="line">    o.id,</span><br><span class="line">    o.user_id,</span><br><span class="line">    o.number,</span><br><span class="line">    o.createtime,</span><br><span class="line">    o.note,</span><br><span class="line">    u.username,</span><br><span class="line">    u.address</span><br><span class="line">    FROM</span><br><span class="line">    orders o</span><br><span class="line">    JOIN &#96;user&#96; u ON u.id &#x3D; o.user_id</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure></div>

</li>
</ul>
<h2 id="一对多查询"><a href="#一对多查询" class="headerlink" title="一对多查询"></a>一对多查询</h2><ul>
<li><p>查询用户信息及 关联的订单信息    </p>
</li>
<li><p>代码</p>
<p>  pojo</p>
  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class User &#123;</span><br><span class="line"></span><br><span class="line">    private int id;</span><br><span class="line">    private String username;</span><br><span class="line">    private String sex;</span><br><span class="line">    private Date birthday;</span><br><span class="line">    private String address;</span><br><span class="line"></span><br><span class="line">    private List&lt;Orders&gt; ordersList;</span><br><span class="line">    &#x2F;&#x2F;set get</span><br></pre></td></tr></table></figure></div>

<p>  mapper.xml</p>
  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userOrdersRM"</span> <span class="attr">type</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sex"</span> <span class="attr">property</span>=<span class="string">"sex"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">property</span>=<span class="string">"birthday"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"address"</span> <span class="attr">property</span>=<span class="string">"address"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        一对多映射关系</span></span><br><span class="line"><span class="comment">        property: User类中对应集合 属性名</span></span><br><span class="line"><span class="comment">        ofType：集合的类型 此处使用别名</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"ordersList"</span> <span class="attr">ofType</span>=<span class="string">"orders"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"orderId"</span> <span class="attr">property</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"createTime"</span> <span class="attr">property</span>=<span class="string">"createTime"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"state"</span> <span class="attr">property</span>=<span class="string">"state"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserOrders"</span> <span class="attr">resultMap</span>=<span class="string">"userOrdersRM"</span>&gt;</span></span><br><span class="line">    select u.* ,</span><br><span class="line"> o.id orderId,</span><br><span class="line"> o.create_time createTime,</span><br><span class="line"> o.state</span><br><span class="line">    from user u</span><br><span class="line">    LEFT JOIN orders o ON u.id = o.user_id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>  接口</p>
  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public List&lt;User&gt; findUserOrders();</span><br></pre></td></tr></table></figure></div>

<p>  测试：</p>
  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">List&lt;User&gt; userOrdersList &#x3D; userMapper.findUserOrders();</span><br></pre></td></tr></table></figure></div>

</li>
</ul>
<h1 id="Mybatis整合Spring"><a href="#Mybatis整合Spring" class="headerlink" title="Mybatis整合Spring"></a>Mybatis整合Spring</h1><h2 id="整合思路"><a href="#整合思路" class="headerlink" title="整合思路"></a>整合思路</h2><ol>
<li>SqlSessionFactory对象应该放到spring容器中作为单例存在。</li>
<li>传统dao的开发方式中，应该从spring容器中获得sqlsession对象。</li>
<li>Mapper代理形式中，应该从spring容器中直接获得mapper的代理对象。</li>
<li>数据库的连接以及数据库连接池事务管理都交给spring容器来完成。</li>
</ol>
<h2 id="整合需要的jar包"><a href="#整合需要的jar包" class="headerlink" title="整合需要的jar包"></a>整合需要的jar包</h2><ol>
<li>spring的jar包</li>
<li>Mybatis的jar包</li>
<li>Spring+mybatis的整合包。</li>
<li>Mysql的数据库驱动jar包。</li>
<li>数据库连接池的jar包。</li>
</ol>
<h2 id="整合的步骤"><a href="#整合的步骤" class="headerlink" title="整合的步骤"></a>整合的步骤</h2><pre><code>第一步：创建一个java工程。
第二步：导入jar包。（上面提到的jar包）
第三步：mybatis的配置文件sqlmapConfig.xml
第四步：编写Spring的配置文件
    1、数据库连接及连接池
    2、事务管理（暂时可以不配置）
    3、sqlsessionFactory对象，配置到spring容器中
    4、mapeer代理对象或者是dao实现类配置到spring容器中。
第五步：编写dao或者mapper文件
第六步：测试。</code></pre><p>SqlMapConfig.xml</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Config 3.0&#x2F;&#x2F;EN&quot;</span><br><span class="line">        &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-config.dtd&quot;&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;typeAliases&gt;</span><br><span class="line">        &lt;!--扫描包，配置别名--&gt;</span><br><span class="line">        &lt;package name&#x3D;&quot;com.machine.ms.po&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;typeAliases&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource&#x3D;&quot;sqlmap&#x2F;userMapper.xml&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;mappers&gt;</span><br><span class="line">&lt;&#x2F;configuration&gt;</span><br></pre></td></tr></table></figure></div>

<p>applicationContext.xml</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;</span><br><span class="line">       xmlns:tx&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx&quot;</span><br><span class="line">       xmlns:aop&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&quot;</span><br><span class="line"></span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;</span><br><span class="line">       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd</span><br><span class="line">       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd</span><br><span class="line">       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx&#x2F;spring-tx.xsd</span><br><span class="line">       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&#x2F;spring-aop.xsd&quot;&gt; &lt;!-- bean definitions here --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--加载配置文件--&gt;</span><br><span class="line">    &lt;context:property-placeholder location&#x3D;&quot;classpath:db.properties&quot; &#x2F;&gt;</span><br><span class="line">    &lt;!--数据库连接池--&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;dataSource&quot; class&#x3D;&quot;org.apache.commons.dbcp.BasicDataSource&quot;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;driverClassName&quot; value&#x3D;&quot;$&#123;jdbc.driver&#125;&quot; &#x2F;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;$&#123;jdbc.url&#125;&quot; &#x2F;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;$&#123;jdbc.username&#125;&quot;&#x2F;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;$&#123;jdbc.password&#125;&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--Spring管理sqlSessionFactory，使用mybatis-spring整合包--&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;sqlSessionFactory&quot; class&#x3D;&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class="line">        &lt;!--数据库连接池--&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot;&#x2F;&gt;</span><br><span class="line">        &lt;!--加载mybatis全局配置文件--&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;configLocation&quot; value&#x3D;&quot;classpath:mybatis&#x2F;SqlMapConfig.xml&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure></div>

<p>db.properties</p>
<h2 id="Dao的开发"><a href="#Dao的开发" class="headerlink" title="Dao的开发"></a>Dao的开发</h2><h3 id="传统Daok开发方式（不重要）"><a href="#传统Daok开发方式（不重要）" class="headerlink" title="传统Daok开发方式（不重要）"></a>传统Daok开发方式（不重要）</h3><p>接口+实现类来完成。需要dao实现类需要继承SqlsessionDaoSupport类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public interface UserDao &#123;</span><br><span class="line">    public User getUserById(int id);</span><br><span class="line">    public void InsertUser(User user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class UserDaoImpl extends SqlSessionDaoSupport implements UserDao &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public User getUserById(int id) &#123;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;SqlSessionDaoSupport提供获得SqlSession的方法，</span><br><span class="line">        &#x2F;&#x2F;但在配置&lt;bean&gt;时 要注入sqlSessionFactory</span><br><span class="line">        SqlSession sqlSession &#x3D; super.getSqlSession();</span><br><span class="line">        User user &#x3D; sqlSession.selectOne(&quot;user.findUserById&quot;, id);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;不要手动关闭sqlSession</span><br><span class="line">        &#x2F;&#x2F;sqlSession.close();</span><br><span class="line"></span><br><span class="line">        return user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void InsertUser(User user) &#123;</span><br><span class="line">        SqlSession sqlSession &#x3D; super.getSqlSession();</span><br><span class="line">        sqlSession.insert(&quot;user.insertUser&quot;,user);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;手动事务提交不被Spring允许</span><br><span class="line">        &#x2F;&#x2F;sqlSession.commit();</span><br><span class="line">        &#x2F;&#x2F;但手动不要关闭SqlSession</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--传统DAO开发，需要给支持类（父类） 注入sqlSessionFactory--&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;userDao&quot; class&#x3D;&quot;com.machine.ms.dao.UserDaoImpl&quot;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;sqlSessionFactory&quot; ref&#x3D;&quot;sqlSessionFactory&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;mapper namespace&#x3D;&quot;user&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id&#x3D;&quot;findUserById&quot; parameterType&#x3D;&quot;int&quot; resultType&#x3D;&quot;user&quot;&gt;</span><br><span class="line">        SELECT * FROM user where id &#x3D; #&#123;id&#125;</span><br><span class="line">    &lt;&#x2F;select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;insert id&#x3D;&quot;insertUser&quot; parameterType&#x3D;&quot;user&quot; &gt;</span><br><span class="line">        INSERT INTO user(username,birthday,sex,address)</span><br><span class="line">        VALUES(#&#123;username&#125;,#&#123;birthday&#125;,#&#123;sex&#125;,#&#123;address&#125;)</span><br><span class="line">    &lt;&#x2F;insert&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;mapper&gt;</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;mappers&gt;</span><br><span class="line">    &lt;mapper resource&#x3D;&quot;sqlmap&#x2F;User.xml&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;mappers&gt;</span><br></pre></td></tr></table></figure></div>

<p>测试：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ApplicationContext context =</span><br><span class="line">            <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"spring/applicationContext.xml"</span>);</span><br><span class="line">    UserDao userDao = (UserDao)context.getBean(<span class="string">"userDao"</span>);</span><br><span class="line"></span><br><span class="line">    User user = userDao.getUserById(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(user);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//System.out.println("========");</span></span><br><span class="line">    <span class="comment">//User user2 = new User();</span></span><br><span class="line">    <span class="comment">//user2.setUsername("uuu");</span></span><br><span class="line">    <span class="comment">//userDao.InsertUser(user);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="Mapper代理形式开发Dao（不重要）"><a href="#Mapper代理形式开发Dao（不重要）" class="headerlink" title="Mapper代理形式开发Dao（不重要）"></a>Mapper代理形式开发Dao（不重要）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 配置mapper代理对象 --&gt;</span><br><span class="line">&lt;bean class&#x3D;&quot;com.machine.ms.mapper.MapperFactoryBean&quot;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;mapperInterface&quot; value&#x3D;&quot;com.machine.ms.mapper.UserMapper&quot;&#x2F;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;sqlSessionFactory&quot; ref&#x3D;&quot;sqlSessionFactory&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure></div>



<h3 id="扫描包的形式配置mapper-推荐"><a href="#扫描包的形式配置mapper-推荐" class="headerlink" title="扫描包的形式配置mapper(推荐)"></a>扫描包的形式配置mapper(推荐)</h3><ul>
<li><p>mybatis mapper开发规范：见Mybatis笔记（一）</p>
<ul>
<li>namespace</li>
<li>方法名=id名</li>
<li>…</li>
</ul>
</li>
<li><p>配置</p>
  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">    使用扫描包 的形式 创建mapper代理对象</span><br><span class="line">    遵守规范：UserMapper.java 和UserMapper放在同一个mapper包下</span><br><span class="line">--&gt;</span><br><span class="line">&lt;bean class&#x3D;&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;basePackage&quot; value&#x3D;&quot;com.machine.ms.mapper&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure></div>

<p>  以上配置后，不需要以下配置</p>
  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;mappers&gt;</span><br><span class="line">    &lt;!--扫描包--&gt;</span><br><span class="line">    &lt;package name&#x3D;&quot;com.machine.ms.mapper&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;mappers&gt;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>代码总结</p>
<p>  SqlMapConfig.xml</p>
  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Config 3.0&#x2F;&#x2F;EN&quot;</span><br><span class="line">        &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-config.dtd&quot;&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;typeAliases&gt;</span><br><span class="line">        &lt;!--扫描包，配置别名--&gt;</span><br><span class="line">        &lt;package name&#x3D;&quot;com.machine.ms.po&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;typeAliases&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;configuration&gt;</span><br></pre></td></tr></table></figure></div>

<p>  applicationContext.xml</p>
  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;</span><br><span class="line">       xmlns:tx&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx&quot;</span><br><span class="line">       xmlns:aop&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&quot;</span><br><span class="line"></span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;</span><br><span class="line">       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd</span><br><span class="line">       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd</span><br><span class="line">       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx&#x2F;spring-tx.xsd</span><br><span class="line">       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&#x2F;spring-aop.xsd&quot;&gt; &lt;!-- bean definitions here --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--加载配置文件--&gt;</span><br><span class="line">    &lt;context:property-placeholder location&#x3D;&quot;classpath:db.properties&quot; &#x2F;&gt;</span><br><span class="line">    &lt;!--数据库连接池--&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;dataSource&quot; class&#x3D;&quot;org.apache.commons.dbcp.BasicDataSource&quot;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;driverClassName&quot; value&#x3D;&quot;$&#123;jdbc.driver&#125;&quot; &#x2F;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;$&#123;jdbc.url&#125;&quot; &#x2F;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;$&#123;jdbc.username&#125;&quot;&#x2F;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;$&#123;jdbc.password&#125;&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--Spring管理sqlSessionFactory，使用mybatis-spring整合包--&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;sqlSessionFactory&quot; class&#x3D;&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class="line">        &lt;!--数据库连接池--&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot;&#x2F;&gt;</span><br><span class="line">        &lt;!--加载mybatis全局配置文件--&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;configLocation&quot; value&#x3D;&quot;classpath:mybatis&#x2F;SqlMapConfig.xml&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!--使用扫描包 的形式 创建mapper代理对象--&gt;</span><br><span class="line">    &lt;bean class&#x3D;&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;basePackage&quot; value&#x3D;&quot;com.machine.ms.mapper&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure></div>

<p>  UserMapper.xml</p>
  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Mapper 3.0&#x2F;&#x2F;EN&quot;</span><br><span class="line">        &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace&#x3D;&quot;com.machine.ms.mapper.UserMapper&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id&#x3D;&quot;findUserById&quot; parameterType&#x3D;&quot;int&quot; resultType&#x3D;&quot;user&quot;&gt;</span><br><span class="line">        SELECT * FROM user where id &#x3D; #&#123;id&#125;</span><br><span class="line">    &lt;&#x2F;select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;insert id&#x3D;&quot;insertUser&quot; parameterType&#x3D;&quot;user&quot; &gt;</span><br><span class="line">        INSERT INTO user(username,birthday,sex,address)</span><br><span class="line">        VALUES(#&#123;username&#125;,#&#123;birthday&#125;,#&#123;sex&#125;,#&#123;address&#125;)</span><br><span class="line">    &lt;&#x2F;insert&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;mapper&gt;</span><br></pre></td></tr></table></figure></div>

<p>  UserMapper.java</p>
  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public interface UserMapper &#123;</span><br><span class="line">    public User findUserById(int id);</span><br><span class="line">    public void InsertUser(User user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>  测试：</p>
  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test2()&#123;</span><br><span class="line">    ApplicationContext context &#x3D;</span><br><span class="line">            new ClassPathXmlApplicationContext(&quot;classpath:spring&#x2F;applicationContext.xml&quot;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;Spring返回mapper代理对象</span><br><span class="line">    UserMapper userMapper &#x3D; context.getBean(UserMapper.class);</span><br><span class="line"></span><br><span class="line">    User user &#x3D; userMapper.findUserById(2);</span><br><span class="line">    System.out.println(user);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>


</li>
</ul>
<h1 id="Mybatis-逆向工程"><a href="#Mybatis-逆向工程" class="headerlink" title="Mybatis 逆向工程"></a>Mybatis 逆向工程</h1>]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring笔记（一）</title>
    <url>/2018/04/20/15326651794162/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>参考：【itheima】</p>
</blockquote>
<p>[toc]</p>
<h1 id="Spring概述"><a href="#Spring概述" class="headerlink" title="Spring概述"></a>Spring概述</h1><h2 id="Spring概况"><a href="#Spring概况" class="headerlink" title="Spring概况"></a>Spring概况</h2><pre><code>- 特征：
    * 开源框架，企业级应用，轻量级
    * 核心：控制反转（IOC）,面向切面（AOP）
    * 松耦合，低入侵，简化java开发
- Spring官网
    * 官网：http://spring.io/
    * Spring包下载：http://repo.springsource.org/libs-release-local/org/springframework/spring</code></pre><h2 id="Spring框架图"><a href="#Spring框架图" class="headerlink" title="Spring框架图"></a>Spring框架图</h2><p><a href="/2018/04/20/15326651794162/Spring01.jpg" data-fancybox="group" data-caption="Spring01" class="fancybox"><img alt="Spring01" title="Spring01" data-src="/2018/04/20/15326651794162/Spring01.jpg" class="lazyload"></a></p>
<h1 id="Spring的IOC容器"><a href="#Spring的IOC容器" class="headerlink" title="Spring的IOC容器"></a>Spring的IOC容器</h1><h2 id="IOC底层实现原理"><a href="#IOC底层实现原理" class="headerlink" title="IOC底层实现原理"></a>IOC底层实现原理</h2><pre><code>* 涉及技术：XML配置文件，dom4j解决XML，工厂，设计模式，反射
* 分析IOC实现原理</code></pre><p><a href="/2018/04/20/15326651794162/Spring02.jpg" data-fancybox="group" data-caption="Spring02" class="fancybox"><img alt="Spring02" title="Spring02" data-src="/2018/04/20/15326651794162/Spring02.jpg" class="lazyload"></a></p>
<h2 id="IOC操作的两种方式"><a href="#IOC操作的两种方式" class="headerlink" title="IOC操作的两种方式"></a>IOC操作的两种方式</h2><pre><code>* 配置文件
* 注解</code></pre><h2 id="IOC开始案例-xml方式"><a href="#IOC开始案例-xml方式" class="headerlink" title="IOC开始案例(xml方式)"></a>IOC开始案例(xml方式)</h2><p>jar包：核心包4个+依赖包</p>
<p><a href="/2018/04/20/15326651794162/Spring04.jpg" data-fancybox="group" data-caption="Spring04" class="fancybox"><img alt="Spring04" title="Spring04" data-src="/2018/04/20/15326651794162/Spring04.jpg" class="lazyload"></a></p>
<p>user类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"add.........."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>配置文件bean1.xml</p>
<pre><code>路径和名字没做规定，但建议放在src下，官网建议名字applicationContext.xml</code></pre><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.machine.ioc.User"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>测试代码（junit）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//1.加载spring核心配置bean1.xml</span></span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean1.xml"</span>);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    // 加载多个配置文件</span></span><br><span class="line"><span class="comment">    ApplicationContext ctx = new ClassPathXmlApplicationContext(</span></span><br><span class="line"><span class="comment">            new String[]&#123;"MultithreadTaskBeans.xml", "common.xml"&#125;);</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//2.得到对象</span></span><br><span class="line">    User user=(User)context.getBean(<span class="string">"user"</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        user.add();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="Spring的Bean管理：xml方式"><a href="#Spring的Bean管理：xml方式" class="headerlink" title="Spring的Bean管理：xml方式"></a>Spring的Bean管理：xml方式</h1><h2 id="bean实例化的3种方式"><a href="#bean实例化的3种方式" class="headerlink" title="bean实例化的3种方式"></a>bean实例化的3种方式</h2><h3 id="使用类的无参构造创建-重点"><a href="#使用类的无参构造创建-重点" class="headerlink" title="使用类的无参构造创建(重点)"></a>使用类的无参构造创建(重点)</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.machine.ioc.User"</span> /&gt;</span></span><br></pre></td></tr></table></figure></div>

<pre><code>- 以上配置自动寻找User类的无参构造(没写默认有，写了有参构造必须显示写出无参构造才行)
- 若类没有无参构造报错</code></pre><h3 id="使用静态工厂创建"><a href="#使用静态工厂创建" class="headerlink" title="使用静态工厂创建"></a>使用静态工厂创建</h3><p>静态工厂类：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> User <span class="title">getUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>配置文件：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.machine.ioc.Factory"</span> <span class="attr">factory-method</span>=<span class="string">"getUser"</span>/&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>测试代码：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean1.xml"</span>);</span><br><span class="line">User user = (User)context.getBean(<span class="string">"user"</span>);</span><br><span class="line">System.out.println(user);</span><br></pre></td></tr></table></figure></div>

<h3 id="使用实例工场创建"><a href="#使用实例工场创建" class="headerlink" title="使用实例工场创建"></a>使用实例工场创建</h3><p>工厂类的方法为非静态方法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>配置文件</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--先实例化工厂--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"factory"</span> <span class="attr">class</span>=<span class="string">"com.machine.ioc.Factory"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">factory-bean</span>=<span class="string">"factory"</span> <span class="attr">factory-method</span>=<span class="string">"getUser"</span>/&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>测试代码同上</p>
<h2 id="bean标签常用属性"><a href="#bean标签常用属性" class="headerlink" title="bean标签常用属性"></a>bean标签常用属性</h2><pre><code>* id：根据id值得到配置对象，名字任取(不能有特殊符号)，建议类名首字母小写；
* class：对象所在类的全路径；
* name：和id一样功能，但可以包含特殊符号，属于遗留问题，一般不用
* scope：bean的作用范围
    * singleton        :默认，单例，多次请求对应同一个对象
    * prototype        :多例，每次请求都创建新对象
    * request        :WEB项目，将对象存到request域中
    * session        :WEB项目，将对象存到session域中
    * globalSession:单点登录（一般不用）</code></pre><h2 id="属性注入"><a href="#属性注入" class="headerlink" title="属性注入"></a>属性注入</h2><pre><code>概念：创建对象时，向类里的属性注入值</code></pre><h3 id="属性注入的3种方式"><a href="#属性注入的3种方式" class="headerlink" title="属性注入的3种方式"></a>属性注入的3种方式</h3><h4 id="set注入"><a href="#set注入" class="headerlink" title="set注入"></a>set注入</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//注入</span></span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setName(<span class="string">"Tom"</span>);</span><br></pre></td></tr></table></figure></div>
<h4 id="有参构造注入"><a href="#有参构造注入" class="headerlink" title="有参构造注入"></a>有参构造注入</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//注入</span></span><br><span class="line">User user = <span class="keyword">new</span> User(<span class="string">"Tom"</span>);</span><br></pre></td></tr></table></figure></div>

<h4 id="接口注入-很少用"><a href="#接口注入-很少用" class="headerlink" title="接口注入(很少用)"></a>接口注入(很少用)</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Dao</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DaoImpl</span> <span class="keyword">implements</span> <span class="title">Dao</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="Spring支持的属性注入方式"><a href="#Spring支持的属性注入方式" class="headerlink" title="Spring支持的属性注入方式"></a>Spring支持的属性注入方式</h3><pre><code>[set注入]和[有参构造注入]</code></pre><h4 id="有参构造注入-1"><a href="#有参构造注入-1" class="headerlink" title="有参构造注入"></a>有参构造注入</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bean2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Bean2</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"------"</span>+name);</span><br><span class="line">   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--有参构造注入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bean2"</span> <span class="attr">class</span>=<span class="string">"com.machine.property.Bean2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"Tom"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bean2.test();</span><br></pre></td></tr></table></figure></div>

<h4 id="set注入（重点）"><a href="#set注入（重点）" class="headerlink" title="set注入（重点）"></a>set注入（重点）</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bean2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"------"</span>+name);</span><br><span class="line">   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--set注入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bean2"</span> <span class="attr">class</span>=<span class="string">"com.machine.property.Bean2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"Marry"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="对象类型的注入"><a href="#对象类型的注入" class="headerlink" title="对象类型的注入"></a>对象类型的注入</h3><p>Service类注入Dao对象</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"dao....."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"service....."</span>);</span><br><span class="line">        userDao.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"com.machine.property.UserDao"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.machine.property.UserService"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userDao"</span> <span class="attr">ref</span>=<span class="string">"userDao"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="名称空间P的注入方式（很少用）"><a href="#名称空间P的注入方式（很少用）" class="headerlink" title="名称空间P的注入方式（很少用）"></a>名称空间P的注入方式（很少用）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--引入P名称空间--&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:p&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;p&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!--</span><br><span class="line">   使用 p 名称空间：</span><br><span class="line">   * 普通属性: p:属性名称&#x3D;””</span><br><span class="line">   * 对象类型属性: p:属性名称-ref&#x3D;””</span><br><span class="line">   --&gt;</span><br><span class="line">   &lt;bean id&#x3D;&quot;car&quot; class&#x3D;&quot;com.machine.property.Car&quot; &#x2F;&gt;</span><br><span class="line">   &lt;bean id&#x3D;&quot;user&quot; class&#x3D;&quot;com.machine.property.User&quot;</span><br><span class="line">      p:name&#x3D;&quot;Marry&quot; p:car-ref&#x3D;&quot;car&quot;&gt;&lt;&#x2F;bean&gt;</span><br><span class="line">&#96;&#96;&#96; </span><br><span class="line"></span><br><span class="line">### 注入复杂类型</span><br><span class="line">    1. 数组</span><br><span class="line">    2. List集合</span><br><span class="line">    3. Map集合</span><br><span class="line">    4. properties类型</span><br></pre></td></tr></table></figure></div>
<p>public class Bean3 {<br>    private String[] arrs;<br>    private List<string> list;<br>    private Map&lt;String,String&gt; map;<br>    private Properties properties;</string></p>
<pre><code>//省略set方法

public void test(){
    System.out.println(arrs);
    System.out.println(list);
    System.out.println(map);
 System.out.println(properties);
}</code></pre><p>}</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#96;&#96;&#96;xml</span><br><span class="line">&lt;bean id&#x3D;&quot;bean3&quot; class&#x3D;&quot;com.machine.property.Bean3&quot;&gt;</span><br><span class="line">      &lt;!--数组--&gt;</span><br><span class="line">      &lt;property name&#x3D;&quot;arrs&quot;&gt;</span><br><span class="line">         &lt;list&gt;</span><br><span class="line">            &lt;value&gt;a&lt;&#x2F;value&gt;</span><br><span class="line">            &lt;value&gt;b&lt;&#x2F;value&gt;</span><br><span class="line">            &lt;value&gt;c&lt;&#x2F;value&gt;</span><br><span class="line">         &lt;&#x2F;list&gt;</span><br><span class="line">      &lt;&#x2F;property&gt;</span><br><span class="line">      &lt;!--List集合--&gt;</span><br><span class="line">      &lt;property name&#x3D;&quot;list&quot;&gt;</span><br><span class="line">         &lt;list&gt;</span><br><span class="line">            &lt;value&gt;a&lt;&#x2F;value&gt;</span><br><span class="line">            &lt;value&gt;b&lt;&#x2F;value&gt;</span><br><span class="line">            &lt;value&gt;c&lt;&#x2F;value&gt;</span><br><span class="line">         &lt;&#x2F;list&gt;</span><br><span class="line">      &lt;&#x2F;property&gt;</span><br><span class="line">      &lt;!--map集合--&gt;</span><br><span class="line">      &lt;property name&#x3D;&quot;map&quot;&gt;</span><br><span class="line">         &lt;map&gt;</span><br><span class="line">            &lt;entry key&#x3D;&quot;a&quot; value&#x3D;&quot;1&quot; &#x2F;&gt;</span><br><span class="line">            &lt;entry key&#x3D;&quot;b&quot; value&#x3D;&quot;2&quot; &#x2F;&gt;</span><br><span class="line">            &lt;entry key&#x3D;&quot;c&quot; value&#x3D;&quot;3&quot; &#x2F;&gt;</span><br><span class="line">         &lt;&#x2F;map&gt;</span><br><span class="line">      &lt;&#x2F;property&gt;</span><br><span class="line">      &lt;!--Properties的注入--&gt;</span><br><span class="line">      &lt;property name&#x3D;&quot;properties&quot;&gt;</span><br><span class="line">         &lt;props&gt;</span><br><span class="line">            &lt;prop key&#x3D;&quot;username&quot;&gt;root&lt;&#x2F;prop&gt;</span><br><span class="line">            &lt;prop key&#x3D;&quot;password&quot;&gt;123&lt;&#x2F;prop&gt;</span><br><span class="line">         &lt;&#x2F;props&gt;</span><br><span class="line">      &lt;&#x2F;property&gt;</span><br><span class="line">   &lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure></div>

<h3 id="IOC和DI的区别"><a href="#IOC和DI的区别" class="headerlink" title="IOC和DI的区别"></a>IOC和DI的区别</h3><pre><code>1. IOC: 控制反转，把对象创建交给spring进行配置
2. DI: 依赖注入，向类里面的属性中设置值

3. 关系：依赖注入不能单独存在，需要在ioc基础之上完成操作</code></pre><h1 id="Spring的Bean管理：注解方式（推荐）"><a href="#Spring的Bean管理：注解方式（推荐）" class="headerlink" title="Spring的Bean管理：注解方式（推荐）"></a>Spring的Bean管理：注解方式（推荐）</h1><pre><code>注解介绍
    1. 代码里面特殊标记，使用注解可以完成功能
    2. 注解写法 @注解名称(属性名称=属性值)
    3. 注解使用在类上面，方法上面 和 属性上面</code></pre><h2 id="Spring注解开发准备"><a href="#Spring注解开发准备" class="headerlink" title="Spring注解开发准备"></a>Spring注解开发准备</h2><p>导入jar包</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-导入基本的jar包</span><br><span class="line">-导入aop的jar包:</span><br><span class="line">    spring-aop-4.2.4.RELEASE.jar</span><br></pre></td></tr></table></figure></div>

<p>创建类，创建方法</p>
<p>在spring配置文件中 引入新约束 context</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">    xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">    xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot; xsi:schemaLocation&#x3D;&quot;</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd&quot;&gt; &lt;!-- bean definitions here --&gt;</span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure></div>

<p>开启注解扫描</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--开启注解扫描--&gt;</span><br><span class="line">&lt;!--方式1：扫描包里的类，方法，属性--&gt;</span><br><span class="line">&lt;context:component-scan base-package&#x3D;&quot;com.machine.aop&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--方式2：只扫描属性上的注解（很少用）--&gt;</span><br><span class="line">&lt;!--&lt;context:annotation-config &#x2F;&gt;--&gt;</span><br></pre></td></tr></table></figure></div>

<h2 id="使用注解创建对象"><a href="#使用注解创建对象" class="headerlink" title="使用注解创建对象"></a>使用注解创建对象</h2><p>在类上使用注解</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Component(value &#x3D; &quot;user&quot;)  &#x2F;&#x2F;等同 &lt;bean id&#x3D;&quot;user&quot; class&#x3D;&quot;com.machine.aop.User&quot; &#x2F;&gt;</span><br><span class="line">public class User &#123;</span><br><span class="line">    public void test()&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;user..........&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>创建对象的4个注解</p>
<pre><code>-Spring提供@Component的3个衍生注解
    @Controller
    @Service
    @Repository
-目前来讲，4个注解功能一致，都创建对象，只是为了让标注类本身用途清晰
-Spring后续版本会对其增强</code></pre><p>scope注解</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Component(value &#x3D; &quot;user&quot;)  &#x2F;&#x2F;等同 &lt;bean id&#x3D;&quot;user&quot; class&#x3D;&quot;com.machine.aop.User&quot; &#x2F;&gt;</span><br><span class="line">@Scope(value &#x3D; &quot;prototype&quot;) &#x2F;&#x2F;多例</span><br><span class="line">public class User &#123;</span><br><span class="line">    &#x2F;&#x2F;...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="使用注解注入属性"><a href="#使用注解注入属性" class="headerlink" title="使用注解注入属性"></a>使用注解注入属性</h2><p>@Autowired</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Component(value &#x3D; &quot;userDao&quot;)</span><br><span class="line">public class UserDao &#123;</span><br><span class="line">    &#x2F;&#x2F;...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class UserService &#123;</span><br><span class="line">    &#x2F;&#x2F;@Autowired原理：通过类名（UserDao）找，与 @Component(value &#x3D; &quot;userDao&quot;)的value无关</span><br><span class="line">    @Autowired</span><br><span class="line">    private UserDao userDao;</span><br><span class="line">    &#x2F;&#x2F;注解方式不需要set方法</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>@Resource</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@Resource原理，通过@Component(value = "userDao")的value找</span></span><br><span class="line"><span class="meta">@Resource</span>(name = <span class="string">"userDao"</span>)</span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br></pre></td></tr></table></figure></div>

<h2 id="XML和注解方式混合使用"><a href="#XML和注解方式混合使用" class="headerlink" title="XML和注解方式混合使用"></a>XML和注解方式混合使用</h2><pre><code>1. 创建对象使用 配置文件
2. 注入属性使用 注解方式</code></pre>]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC笔记（二）</title>
    <url>/2018/04/20/15326656335063/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[toc]</p>
<h1 id="SSM整合"><a href="#SSM整合" class="headerlink" title="SSM整合"></a>SSM整合</h1><pre><code>-- jar包
    spring(包括 springmvc)、mybatis、mybatis-spring 整合包、数据库驱动、第三方连接池</code></pre><hr>
<pre><code>-- Dao
    -- 目标: spring 管理 SqlSessionFactory、mapper

    -- db.properties

        <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jdbc.driver&#x3D;com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mybatis</span><br><span class="line">jdbc.username&#x3D;XXXX</span><br><span class="line">jdbc.password&#x3D;XXXX</span><br></pre></td></tr></table></figure></div>

    -- log4j.properties

        <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Global logging configuration，建议开发环境中要用debug</span><br><span class="line">log4j.rootLogger&#x3D;DEBUG, stdout</span><br><span class="line"># Console output... </span><br><span class="line">log4j.appender.stdout&#x3D;org.apache.log4j.ConsoleAppender </span><br><span class="line">log4j.appender.stdout.layout&#x3D;org.apache.log4j.PatternLayout </span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern&#x3D;%5p [%t] - %m%n</span><br></pre></td></tr></table></figure></div>

    -- sqlMapConfig.xml
        -- 在 classpath 下创建 mybatis/sqlMapConfig.xml

            <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt; </span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Config 3.0&#x2F;&#x2F;EN&quot; &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-config.dtd&quot;&gt; </span><br><span class="line"></span><br><span class="line">&lt;typeAliases&gt;</span><br><span class="line">    &lt;!--扫描包，配置别名--&gt;</span><br><span class="line">    &lt;package name&#x3D;&quot;com.machine.ms.po&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;typeAliases&gt;</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">	&lt;!-- </span><br><span class="line">		使用自动扫描器时，mapper.xml文件如果和mapper.java接口在一个目录则此处不用 定义mappers </span><br><span class="line">		&lt;mappers&gt;</span><br><span class="line">			&lt;package name&#x3D;&quot;cn.itcast.ssm.mapper&quot; &#x2F;&gt;</span><br><span class="line">		&lt;&#x2F;mappers&gt;</span><br><span class="line">	--&gt;</span><br><span class="line">	</span><br><span class="line">&lt;&#x2F;configuration&gt;</span><br></pre></td></tr></table></figure></div>

    -- applicationContext-dao.xml

        <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot; </span><br><span class="line">	xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">	xmlns:mvc&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc&quot; </span><br><span class="line">	xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot; </span><br><span class="line">	xmlns:aop&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&quot;</span><br><span class="line">	xmlns:tx&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx&quot; </span><br><span class="line"></span><br><span class="line">	xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans-3.2.xsd http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc&#x2F;spring-mvc-3.2.xsd http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context</span><br><span class="line">http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context-3.2.xsd http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&#x2F;spring-aop-3.2.xsd http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx&#x2F;spring-tx-3.2.xsd &quot;&gt;</span><br><span class="line"></span><br><span class="line">	&lt;!-- 加载配置文件 --&gt;</span><br><span class="line">	&lt;context:property-placeholder location&#x3D;&quot;classpath:db.properties&quot;&#x2F;&gt; </span><br><span class="line"></span><br><span class="line">	&lt;!-- 数据库连接池 --&gt;</span><br><span class="line">	&lt;bean id&#x3D;&quot;dataSource&quot; class&#x3D;&quot;org.apache.commons.dbcp.BasicDataSource&quot;</span><br><span class="line">		destroy-method&#x3D;&quot;close&quot;&gt;</span><br><span class="line">		&lt;property name&#x3D;&quot;driverClassName&quot; value&#x3D;&quot;$&#123;jdbc.driver&#125;&quot;&#x2F;&gt; </span><br><span class="line">		&lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;$&#123;jdbc.url&#125;&quot;&#x2F;&gt;</span><br><span class="line">		&lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;$&#123;jdbc.username&#125;&quot;&#x2F;&gt; </span><br><span class="line">		&lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;$&#123;jdbc.password&#125;&quot;&#x2F;&gt;</span><br><span class="line">		&lt;property name&#x3D;&quot;maxActive&quot; value&#x3D;&quot;30&quot;&#x2F;&gt;</span><br><span class="line">		&lt;property name&#x3D;&quot;maxIdle&quot; value&#x3D;&quot;5&quot;&#x2F;&gt; &lt;&#x2F;bean&gt;</span><br><span class="line"></span><br><span class="line">	&lt;!-- 让spring管理sqlsessionfactory 使用mybatis和spring整合包中的 --&gt; </span><br><span class="line">	&lt;bean id&#x3D;&quot;sqlSessionFactory&quot; class&#x3D;&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt; </span><br><span class="line">		&lt;!-- 数据库连接池 --&gt;</span><br><span class="line">		&lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot; &#x2F;&gt; </span><br><span class="line">		&lt;!-- 加载mybatis的全局配置文件 --&gt;</span><br><span class="line">		&lt;property name&#x3D;&quot;configLocation&quot;	value&#x3D;&quot;classpath:mybatis&#x2F;SqlMapConfig.xml&quot; &#x2F;&gt; </span><br><span class="line">	&lt;&#x2F;bean&gt;</span><br><span class="line"></span><br><span class="line">	&lt;!-- mapper扫描器: 扫描包，自动生成mapper代理--&gt;</span><br><span class="line">	&lt;bean class&#x3D;&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;</span><br><span class="line">		&lt;property name&#x3D;&quot;basePackage&quot; value&#x3D;&quot;cn.itcast.springmvc.mapper&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">		&lt;property name&#x3D;&quot;sqlSessionFactoryBeanName&quot; value&#x3D;&quot;sqlSessionFactory&quot;&#x2F;&gt;</span><br><span class="line">	&lt;&#x2F;bean&gt; </span><br><span class="line"></span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure></div>

    -- ItemsMapper.xml

        逆向工程

    --  ItemsMapper.java   

        逆向工程</code></pre><hr>
<pre><code>-- Service
    -- 目标:
        1、Service 由 spring 管理
        2、spring 对 Service 进行事务控制。

    -- applicationContext-service.xml

    -- applicationContext-transaction.xml 

        <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot; </span><br><span class="line">	xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">	xmlns:mvc&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc&quot; </span><br><span class="line">	xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot; </span><br><span class="line">	xmlns:aop&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&quot;</span><br><span class="line">	xmlns:tx&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx&quot; </span><br><span class="line"></span><br><span class="line">	xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans-3.2.xsd http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc&#x2F;spring-mvc-3.2.xsd http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context</span><br><span class="line">http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context-3.2.xsd http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&#x2F;spring-aop-3.2.xsd http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx&#x2F;spring-tx-3.2.xsd &quot;&gt;</span><br><span class="line"></span><br><span class="line">	&lt;!-- 事务管理器 --&gt;</span><br><span class="line">	&lt;bean id&#x3D;&quot;transactionManager&quot; class&#x3D;&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager &quot;&gt;</span><br><span class="line">		&lt;!-- 数据源 --&gt;</span><br><span class="line">		&lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot;&#x2F;&gt; </span><br><span class="line">	&lt;&#x2F;bean&gt;</span><br><span class="line"></span><br><span class="line">	&lt;!-- 通知 --&gt;</span><br><span class="line">	&lt;tx:advice id&#x3D;&quot;txAdvice&quot; transaction-manager&#x3D;&quot;transactionManager&quot;&gt;</span><br><span class="line">		&lt;tx:attributes&gt; </span><br><span class="line">			&lt;!-- 传播行为--&gt;</span><br><span class="line">			&lt;tx:method name&#x3D;&quot;save*&quot; propagation&#x3D;&quot;REQUIRED&quot;&#x2F;&gt;</span><br><span class="line">			&lt;tx:method name&#x3D;&quot;insert*&quot; propagation&#x3D;&quot;REQUIRED&quot;&#x2F;&gt;</span><br><span class="line">			&lt;tx:method name&#x3D;&quot;delete*&quot; propagation&#x3D;&quot;REQUIRED&quot;&#x2F;&gt;</span><br><span class="line">			&lt;tx:method name&#x3D;&quot;update*&quot; propagation&#x3D;&quot;REQUIRED&quot;&#x2F;&gt;</span><br><span class="line">			&lt;tx:method name&#x3D;&quot;find*&quot; propagation&#x3D;&quot;SUPPORTS&quot; read-only&#x3D;&quot;true&quot;&#x2F;&gt; </span><br><span class="line">			&lt;tx:method name&#x3D;&quot;get*&quot; propagation&#x3D;&quot;SUPPORTS&quot; read-only&#x3D;&quot;true&quot;&#x2F;&gt;</span><br><span class="line">			&lt;!--</span><br><span class="line">				* REQUIRED（默认值)：若A中有事务,B使用A中的事务(不用再开).如果没有，B就会开启一个新的事务,并将A包含进来。</span><br><span class="line">				* SUPPORTS：若A中有事务,B使用A中的事务.如果A中没有事务.那么B也不使用事务.</span><br><span class="line">			--&gt;</span><br><span class="line">		&lt;&#x2F;tx:attributes&gt;</span><br><span class="line">	&lt;&#x2F;tx:advice&gt;</span><br><span class="line"></span><br><span class="line">	&lt;!-- 切面 --&gt; </span><br><span class="line">	&lt;aop:config&gt;</span><br><span class="line">	&lt;aop:advisor advice-ref&#x3D;&quot;txAdvice&quot;</span><br><span class="line">	pointcut&#x3D;&quot;execution(* cn.itcast.springmvc.service.impl.*.*(..))&quot;&#x2F;&gt; </span><br><span class="line">	&lt;&#x2F;aop:config&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure></div>

    -- OrderService.java

        <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public interface OrderService &#123;</span><br><span class="line">	&#x2F;&#x2F;商品查询列表</span><br><span class="line">	public List&lt;Items&gt; findItemsList(QueryVo queryVo)throws Exception&#123;</span><br><span class="line">	</span><br><span class="line">		@Autowired</span><br><span class="line">		private ItemsMapper itemsMapper;</span><br><span class="line">		@Override</span><br><span class="line">		public List&lt;Items&gt; findItemsList(QueryVo queryVo) throws Exception &#123; </span><br><span class="line">		&#x2F;&#x2F;查询商品信息</span><br><span class="line">		return itemsMapper.findItemsList(queryVo); </span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></code></pre><hr>
<pre><code>-- Action

    -- springmvc.xml

        <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot; </span><br><span class="line">            xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">            xmlns:mvc&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc&quot; </span><br><span class="line">            xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot; </span><br><span class="line">            xmlns:aop&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&quot;</span><br><span class="line">            xmlns:tx&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx&quot; </span><br><span class="line"></span><br><span class="line">            xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans-3.2.xsd http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc&#x2F;spring-mvc-3.2.xsd http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context-3.2.xsd http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&#x2F;spring-aop-3.2.xsd http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx&#x2F;spring-tx-3.2.xsd &quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&lt;!-- 扫描controller注解,多个包中间使用半角逗号分隔 --&gt; </span><br><span class="line">	&lt;context:component-scan base-package&#x3D;&quot;cn.itcast.ssm.controller&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">	&lt;!--</span><br><span class="line">		&lt;bean class&#x3D;&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">		&lt;bean class&#x3D;&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMap pingHandlerAdapter&quot;&#x2F;&gt;</span><br><span class="line">	--&gt;</span><br><span class="line">	&lt;!--</span><br><span class="line">		&lt;mvc:annotation-driven&gt;</span><br><span class="line">		自动加载RequestMappingHandlerMapping和RequestMappingHandlerAdapter</span><br><span class="line">		替代注解处理器和适配器的配置</span><br><span class="line">	--&gt;</span><br><span class="line"></span><br><span class="line">	&lt;mvc:annotation-driven &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">	&lt;!-- ViewResolver --&gt;</span><br><span class="line">	&lt;bean class&#x3D;&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;</span><br><span class="line">		&lt;property name&#x3D;&quot;viewClass&quot; value&#x3D;&quot;org.springframework.web.servlet.view.JstlView&quot; &#x2F;&gt;</span><br><span class="line">		&lt;property name&#x3D;&quot;prefix&quot; value&#x3D;&quot;&#x2F;WEB-INF&#x2F;jsp&#x2F;&quot; &#x2F;&gt;</span><br><span class="line">		&lt;property name&#x3D;&quot;suffix&quot; value&#x3D;&quot;.jsp&quot; &#x2F;&gt; </span><br><span class="line">  &lt;&#x2F;bean&gt;</span><br><span class="line">    </span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure></div>

    -- web.xml

        -- 加载 spring 容器，配置 springmvc 前置控制器

        <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;web-app </span><br><span class="line">    xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot; </span><br><span class="line">	xmlns&#x3D;&quot;http:&#x2F;&#x2F;java.sun.com&#x2F;xml&#x2F;ns&#x2F;javaee&quot;</span><br><span class="line">	xmlns:web&#x3D;&quot;http:&#x2F;&#x2F;java.sun.com&#x2F;xml&#x2F;ns&#x2F;javaee&#x2F;web-app_2_5.xsd&quot; </span><br><span class="line">	xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;java.sun.com&#x2F;xml&#x2F;ns&#x2F;javaee</span><br><span class="line">http:&#x2F;&#x2F;java.sun.com&#x2F;xml&#x2F;ns&#x2F;javaee&#x2F;web-app_2_5.xsd&quot; id&#x3D;&quot;WebApp_ID&quot; version&#x3D;&quot;2.5&quot;&gt; </span><br><span class="line"></span><br><span class="line">	&lt;display-name&gt;springmvc&lt;&#x2F;display-name&gt;</span><br><span class="line"></span><br><span class="line">	&lt;!-- 加载spring容器 --&gt; </span><br><span class="line">	&lt;context-param&gt;</span><br><span class="line">		&lt;param-name&gt;contextConfigLocation&lt;&#x2F;param-name&gt;</span><br><span class="line">		&lt;!--</span><br><span class="line">			指定spring核心配置的位置</span><br><span class="line">			默认配置文件路径：WEB-INF&#x2F;applicationContext.xml </span><br><span class="line">		--&gt;</span><br><span class="line">		&lt;param-value&gt;&#x2F;WEB-INF&#x2F;classes&#x2F;spring&#x2F;applicationContext.xml,&#x2F;WEB-INF&#x2F;classes&#x2F;spring&#x2F;applicationContext-*.xml&lt;&#x2F;param-value&gt;</span><br><span class="line">	&lt;&#x2F;context-param&gt;</span><br><span class="line"></span><br><span class="line">	&lt;!--配置监听器，在服务器启动时 启动Spring框架--&gt;</span><br><span class="line">	&lt;listener&gt;</span><br><span class="line">		&lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;&#x2F;listener-class&gt;</span><br><span class="line">	&lt;&#x2F;listener&gt;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	&lt;!-- 解决post乱码 --&gt; </span><br><span class="line">	&lt;filter&gt;</span><br><span class="line">		&lt;filter-name&gt;CharacterEncodingFilter&lt;&#x2F;filter-name&gt;</span><br><span class="line">		&lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;&#x2F;filter-class&gt;</span><br><span class="line">	       &lt;init-param&gt;</span><br><span class="line">	           &lt;param-name&gt;encoding&lt;&#x2F;param-name&gt;</span><br><span class="line">	           &lt;param-value&gt;utf-8&lt;&#x2F;param-value&gt;</span><br><span class="line">	       &lt;&#x2F;init-param&gt;</span><br><span class="line">	&lt;&#x2F;filter&gt;</span><br><span class="line"></span><br><span class="line">	&lt;filter-mapping&gt; </span><br><span class="line">		&lt;filter-name&gt;CharacterEncodingFilter&lt;&#x2F;filter-name&gt; </span><br><span class="line">		&lt;url-pattern&gt;&#x2F;*&lt;&#x2F;url-pattern&gt;</span><br><span class="line">	&lt;&#x2F;filter-mapping&gt;</span><br><span class="line">		</span><br><span class="line"></span><br><span class="line">	&lt;!-- springmvc的前端控制器 --&gt; </span><br><span class="line">	&lt;servlet&gt;</span><br><span class="line">       &lt;servlet-name&gt;springmvc&lt;&#x2F;servlet-name&gt;</span><br><span class="line">		&lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;&#x2F;servlet-class&gt;</span><br><span class="line"></span><br><span class="line">		&lt;!-- contextConfigLocation不是必须的， 如果不配置 contextConfigLocation， springmvc的配置文件默认在:WEB-INF&#x2F;servlet的 name+&quot;-servlet.xml&quot; --&gt;</span><br><span class="line">		&lt;init-param&gt;</span><br><span class="line">			&lt;param-name&gt;contextConfigLocation&lt;&#x2F;param-name&gt; </span><br><span class="line">			&lt;param-value&gt;classpath:spring&#x2F;springmvc.xml&lt;&#x2F;param-value&gt;</span><br><span class="line">		 &lt;&#x2F;init-param&gt;</span><br><span class="line">		       &lt;load-on-startup&gt;1&lt;&#x2F;load-on-startup&gt;</span><br><span class="line">	&lt;&#x2F;servlet&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&lt;servlet-mapping&gt;</span><br><span class="line">	    &lt;servlet-name&gt;springmvc&lt;&#x2F;servlet-name&gt;</span><br><span class="line">	    &lt;url-pattern&gt;*.action&lt;&#x2F;url-pattern&gt;</span><br><span class="line">	&lt;&#x2F;servlet-mapping&gt;</span><br><span class="line">	&lt;welcome-file-list&gt; </span><br><span class="line">		&lt;welcome-file&gt;index.html&lt;&#x2F;welcome-file&gt; </span><br><span class="line">		&lt;welcome-file&gt;index.htm&lt;&#x2F;welcome-file&gt; </span><br><span class="line">		&lt;welcome-file&gt;index.jsp&lt;&#x2F;welcome-file&gt; </span><br><span class="line">		&lt;welcome-file&gt;default.html&lt;&#x2F;welcome-file&gt; </span><br><span class="line">		&lt;welcome-file&gt;default.htm&lt;&#x2F;welcome-file&gt; </span><br><span class="line">		&lt;welcome-file&gt;default.jsp&lt;&#x2F;welcome-file&gt;</span><br><span class="line">	&lt;&#x2F;welcome-file-list&gt;</span><br><span class="line">&lt;&#x2F;web-app&gt;</span><br></pre></td></tr></table></figure></div>

    --  OrderController

        <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class OrderController &#123; </span><br><span class="line">	@Autowired</span><br><span class="line">	private OrderService orderService;</span><br><span class="line">	</span><br><span class="line">	@RequestMapping(&quot;&#x2F;queryItem.action&quot;)</span><br><span class="line">	public ModelAndView queryItem() throws Exception &#123;</span><br><span class="line">		&#x2F;&#x2F; 商品列表</span><br><span class="line">		List&lt;Items&gt; itemsList &#x3D; orderService.findItemsList(null);</span><br><span class="line">		&#x2F;&#x2F; 创建modelAndView准备填充数据、设置视图 </span><br><span class="line">		ModelAndView modelAndView &#x3D; new ModelAndView();</span><br><span class="line">		&#x2F;&#x2F; 填充数据</span><br><span class="line">		modelAndView.addObject(&quot;itemsList&quot;, itemsList);</span><br><span class="line">		&#x2F;&#x2F; 视图 </span><br><span class="line">		modelAndView.setViewName(&quot;order&#x2F;itemsList&quot;);</span><br><span class="line">		return modelAndView; </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

    -- 测试
        http://localhost:8080/springmvc_mybatis/queryItem.action</code></pre><h1 id="注解开发：基础"><a href="#注解开发：基础" class="headerlink" title="注解开发：基础"></a>注解开发：基础</h1><h2 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h2><pre><code>-- URL 路径映射
    -- @RequestMapping(value=&quot;/item&quot;)或@RequestMapping(&quot;/item)
    -- value 的值是数组，可以将多个 url 映射到同一个方法

-- 窄化请求映射
    -- 在 class 上添加@RequestMapping(url)指定通用请求前缀，限制此类下的所有方法请求url必须以请求前缀开头，通过此方法对url 进行分类管理

    -- 如下: 
        -- @RequestMapping 放在类名上边，设置请求前缀 

            @Controller 
            @RequestMapping(&quot;/item&quot;)
            class UserController{

            }

        -- 方法名上边设置请求映射 url:

            @RequestMapping(&quot;/queryItem &quot;)
            public void add(){

            }

        -- 访问地址为:/item/queryItem


-- 请求方法限定

    1. 限定 GET 方法
        -- @RequestMapping(value=&quot;/editItem&quot;,method=RequestMethod.GET)
        -- 如果通过 Post 访问则报错:HTTP Status 405 - Request method &apos;POST&apos; not supported

    2. 限定POST方法
        -- @RequestMapping(method = RequestMethod.POST)
        -- 如果通过 Post 访问则报错:HTTP Status 405 - Request method &apos;GET&apos; not supported

    3. GET和POST都可以
        -- @RequestMapping(method={RequestMethod.GET,RequestMethod.POST})</code></pre><h2 id="controller方法返回值"><a href="#controller方法返回值" class="headerlink" title="controller方法返回值"></a>controller方法返回值</h2><h3 id="返回-ModelAndView"><a href="#返回-ModelAndView" class="headerlink" title="返回 ModelAndView"></a>返回 ModelAndView</h3><pre><code>controller 方法中定义 ModelAndView 对象并返回，对象中可添加 model 数据、指定 view。</code></pre><h3 id="返回-void"><a href="#返回-void" class="headerlink" title="返回 void"></a>返回 void</h3><pre><code>-- 在 controller 方法形参上可以定义 request 和 response，使用 request 或 response 指定响 应结果

    1、使用 request 转向页面，如下: request.getRequestDispatcher(&quot;页面路径&quot;).forward(request, response);
    2、也可以通过 response 页面重定向: response.sendRedirect(&quot;url&quot;)
    3、也可以通过 response 指定响应结果，例如响应 json 数据如下: 
        response.setCharacterEncoding(&quot;utf-8&quot;); 
        response.setContentType(&quot;application/json;charset=utf-8&quot;); 
        response.getWriter().write(&quot;json 串&quot;);</code></pre><h3 id="返回字符串"><a href="#返回字符串" class="headerlink" title="返回字符串"></a>返回字符串</h3><pre><code>1. 逻辑视图名
    controller 方法返回字符串可以指定逻辑视图名，通过视图解析器解析为物理视图地址。
    return &quot;item/editItem&quot;;

2. Redirect 重定向
    - Contrller 方法返回结果重定向到一个 url 地址，如下商品修改提交后重定向到商品查询方法， 参数无法带到商品查询方法中。

    <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">    - 重定向到queryItem.action地址,request无法带过去</span><br><span class="line">    - redirect 方式相当于“response.sendRedirect()”</span><br><span class="line">    - 如果要传参数可以 &#x2F;item&#x2F;queryItem.action 后边加参数，如下：</span><br><span class="line">        return &quot;redirect:queryItem.action?...&amp;...&quot;</span><br><span class="line">*&#x2F;</span><br><span class="line">return &quot;redirect:queryItem.action&quot;;</span><br></pre></td></tr></table></figure></div>

3. forward 转发
    - controller 方法执行后继续执行另一个 controller 方法，如下商品修改提交后转向到商品修改页面，修改商品的 id 参数可以带到商品修改方法中。

    /*
        - 结果转发到editItem.action，request可以带过去
        - forward 方式相当于“request.getRequestDispatcher().forward(request,response)”
        - 和转发前的请求 共用一个 request 和 response。所以转发前请求的参数在转发后仍然可以读取到
    */
    return &quot;forward:editItem.action&quot;;</code></pre><h2 id="参数绑定"><a href="#参数绑定" class="headerlink" title="参数绑定"></a>参数绑定</h2><h3 id="参数绑定介绍"><a href="#参数绑定介绍" class="headerlink" title="参数绑定介绍"></a>参数绑定介绍</h3><pre><code>-- 处理器适配器在执行 Handler 之前需要把 http 请求的 key/value 数据绑定到 Handler 方 法形参数上。
    public void add(HttpServletRequest request){

    }

-- 注解适配器对RequestMapping标记的方法进行适配，对方法中的形参会进行参数绑定

-- 3.X 之后 springmvc 就开始使用 Converter 进行参数绑定。</code></pre><h3 id="默认支持的参数类型"><a href="#默认支持的参数类型" class="headerlink" title="默认支持的参数类型"></a>默认支持的参数类型</h3><pre><code>1. HttpServletRequest
    通过 request 对象获取请求信息

2. HttpServletResponse
    通过 response 处理响应信息

3.  HttpSession
    通过 session 对象得到 session 中存放的对象

4. Model/ModelMap
    -- ModelMap 是 Model 接口的实现类，通过 Model 或 ModelMap 向页面传递数据，如下:

        <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Items item &#x3D; itemService.findItemById(id); </span><br><span class="line">model.addAttribute(&quot;item&quot;, item);</span><br><span class="line">&#x2F;*</span><br><span class="line">    - 页面通过$&#123;item.XXXX&#125;获取 item 对象的属性值</span><br><span class="line">    - 使用 Model 和 ModelMap 的效果一样，如果直接使用 Model，springmvc 会实例化 ModelMap</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure></div></code></pre><h3 id="简单类型"><a href="#简单类型" class="headerlink" title="简单类型"></a>简单类型</h3><pre><code>-- 当请求的参数名称和处理器形参**名称一致**时会将请求参数与形参进行绑定

-- 简单类型

    1. 整型

        public String editItem(Model model,Integer id) throws Exception{

        }

    2. 字符串
    3. 单精度/双精度
    4. 布尔型

        -- 处理器方法:
            public String editItem(Model model,Integer id,Boolean status) throws Exception

        -- 请求 url:
            http://localhost:8080/springmvc_mybatis/item/editItem.action?id=2&amp;status=false
            说明:对于布尔类型的参数，请求的参数值为 true 或 false。

    -- @RequestParam
        -- 使用@RequestParam 常用于处理简单类型的绑定。

            value:参数名字，即入参的请求参数名字，如value=“item_id”表示请求的参数区中的名 字为item_id的参数的值将传入; required:是否必须，默认是true，表示请求中一定要有相应的参数，否则将报;
                TTP Status 400 - Required Integer parameter &apos;XXXX&apos; is not present
            defaultV alue:默认值，表示如果请求中没有同名参数时的默认值

        --  定义如下:

             public String editItem(@RequestParam(value=&quot;item_id&quot;,required=true) String id) {
                /*
                    - 形参名称为 id，但是这里使用 value=&quot; item_id&quot;限定请求的参数名为 item_id，所以页面传递 参数的名必须为 item_id。
                    - required=true：如果请求参数中没有 item_id 将跑出异常

                    - 可以使用 defaultvalue 设置默认值，即使 required=true 也可以不传 item_id 参数值
                */
             }</code></pre><h3 id="pojo"><a href="#pojo" class="headerlink" title="pojo"></a>pojo</h3><pre><code>1. 简单 pojo
    -- 将 pojo 对象中的属性名于传递进来的属性名对应，如果传进来的参数名称和对象中的属性名称一致则将参数值设置在 pojo 对象中

    -- 页面定义如下：
         &lt;input type=&quot;text&quot; name=&quot;name&quot;/&gt; 
         &lt;input type=&quot;text&quot; name=&quot;price&quot;/&gt;

    -- Contrller 方法定义如下:

        @RequestMapping(&quot;/editItemSubmit&quot;)
        public String editItemSubmit(Items items)throws Exception{ 

            /*
                请求的参数名称和 pojo 的属性名称一致，会自动将请求参数赋值给 pojo 的属性。
            */
            System.out.println(items);
        }


2. 包装 pojo

    -- 如果采用类似 struts 中[对象.属性]的方式命名，需要将 pojo 对象作为一个包装对象的属性， action 中以该包装对象作为形参。

    -- 包装对象定义如下:

        Public class QueryVo { 
            private Items items;
        }

    -- 页面定义:
        &lt;input type=&quot;text&quot; name=&quot;items.name&quot; /&gt; 
        &lt;input type=&quot;text&quot; name=&quot;items.price&quot; /&gt;
    -- Controller 方法定义如下:

        public String useraddsubmit(Model model,QueryVo queryVo)throws Exception{ 
            System.out.println(queryVo.getItems());
        }</code></pre><h3 id="自定义参数绑定"><a href="#自定义参数绑定" class="headerlink" title="自定义参数绑定"></a>自定义参数绑定</h3><pre><code>-- 需求: 根据业务需求自定义日期格式进行参数绑定 
-- Converter
    -- 自定义 Converter

        public class CustomDateConverter implements Converter&lt;String, Date&gt; {
            @Override
            public Date convert(String source) { 
                try {
                    SimpleDateFormat simpleDateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);
                    return simpleDateFormat.parse(source);
                }catch (Exception e) {
                    e.printStackTrace();
                }
                return null;
            }
        }


    -- 配置方式 1

        &lt;mvc:annotation-driven conversion-service=&quot;conversionService&quot; /&gt;
        &lt;!-- conversionService --&gt;
        &lt;bean id=&quot;conversionService&quot; class=&quot;org.springframework.format.support.FormattingConversionServic eFactoryBean&quot;&gt;
            &lt;!-- 转换器 --&gt;
            &lt;property name=&quot;converters&quot;&gt;
                &lt;list&gt; 
                    &lt;bean class=&quot;cn.itcast.ssm.controller.converter.CustomDateConverter&quot;/&gt; 
                &lt;/list&gt;
            &lt;/property&gt;

        &lt;/bean&gt;

    -- 配置方式 2

        &lt;!--注解适配器 --&gt; 
        &lt;bean class=&quot;org.springframework.web.servlet.mvc.method.annotation.Request MappingHandlerAdapter&quot;&gt;
            &lt;property name=&quot;webBindingInitializer&quot; ref=&quot;customBinder&quot; /&gt;
        &lt;/bean&gt;

        &lt;!-- 自定义webBinder --&gt; 
        &lt;bean id=&quot;customBinder&quot; class=&quot;org.springframework.web.bind.support.ConfigurableWebBindingIn itializer&quot;&gt;
            &lt;property name=&quot;conversionService&quot; ref=&quot;conversionService&quot; /&gt; 
        &lt;/bean&gt;
        &lt;!-- conversionService --&gt;
        &lt;bean id=&quot;conversionService&quot;
        class=&quot;org.springframework.format.support.FormattingConversionServic eFactoryBean&quot;&gt;
        &lt;!-- 转换器 --&gt;
            &lt;property name=&quot;converters&quot;&gt;
                &lt;list&gt; 
                    &lt;bean class=&quot;cn.itcast.ssm.controller.converter.CustomDateConverter&quot;/&gt; 
                &lt;/list&gt;
            &lt;/property&gt;
        &lt;/bean&gt;            </code></pre><h3 id="集合类"><a href="#集合类" class="headerlink" title="集合类"></a>集合类</h3><pre><code>-- 字符串数组

    -- 页面选中多个 checkbox 向 controller 方法传递
        &lt;input type=&quot;checkbox&quot; name=&quot;item_id&quot; value=&quot;001&quot;/&gt; 
        &lt;input type=&quot;checkbox&quot; name=&quot;item_id&quot; value=&quot;002&quot;/&gt; 
        &lt;input type=&quot;checkbox&quot; name=&quot;item_id&quot; value=&quot;002&quot;/&gt;

    -- Controller 方法中可以用 String[]接收，定义如下:
        public String deleteitem(String[] item_id)throws Exception{ 
            System.out.println(item_id);
        }

-- List

    -- List中存放对象，并将定义的 List 放在包装类中，action 使用包装对象接收。

        Public class QueryVo {
            Private List&lt;Items&gt; itemList;//商品列表
            //get/set 方法.. 
        }

    -- 页面定义如下:

        &lt;c:forEach items=&quot;${itemsList }&quot; var=&quot;item&quot; varStatus=&quot;s&quot;&gt; 
            &lt;tr&gt;
                &lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;itemsList[${s.index }].name&quot; value=&quot;${item.name }&quot;/&gt;&lt;/td&gt;
                &lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;itemsList[${s.index }].price&quot; value=&quot;${item.price }&quot;/&gt;&lt;/td&gt;
                .....
                .....
            &lt;/tr&gt;
        &lt;/c:forEach&gt;

    -- Contrller 方法定义如下:

        public String useraddsubmit(Model model,QueryVo queryVo)throws Exception{ 
            System.out.println(queryVo.getItemList());
        }

-- Map

    -- 包装类中定义 Map 对象如下:

        Public class QueryVo {
            private Map&lt;String, Object&gt; itemInfo = new HashMap&lt;String, Object&gt;();
            //get/set 方法..
        }

    -- 页面定义如下:

        姓名:&lt;inputtype=&quot;text&quot;name=&quot;itemInfo[&apos;name&apos;]&quot;/&gt; 
        年龄:&lt;inputtype=&quot;text&quot;name=&quot;itemInfo[&apos;price&apos;]&quot;/&gt;

    -- Contrller 方法定义如下:
        public String useraddsubmit(Model model,QueryVo queryVo)throws Exception{ 
            System.out.println(queryVo.getStudentinfo());
        }</code></pre><h2 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h2><h3 id="中文乱码"><a href="#中文乱码" class="headerlink" title="中文乱码"></a>中文乱码</h3><pre><code>-- POST乱码可在web.xml中配置
-- post 请求乱码解决方法有两个:
    1. 修改 tomcat 配置文件添加编码与工程编码一致
        &lt;Connector URIEncoding=&quot;utf-8&quot; connectionTimeout=&quot;20000&quot; port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot; redirectPort=&quot;8443&quot;/&gt;
    2. 另外一种方法对参数进行重新编码:
         String userName new String(request.getParamter(&quot;userName&quot;).getBytes(&quot;ISO8859-1&quot;),&quot;utf-8&quot;)
         //ISO8859-1 是 tomcat 默认编码，需要将 tomcat 编码后的内容按 utf-8 编码</code></pre><h3 id="与-struts2-不同"><a href="#与-struts2-不同" class="headerlink" title="与 struts2 不同"></a>与 struts2 不同</h3><pre><code>1、 springmvc 的入口是一个 servlet 即前端控制器，而 struts2 入口是一个 filter 过虑器。
2、 springmvc 是基于方法开发(一个 url 对应一个方法)，请求参数传递到方法的形参，可以     
    设计为单例或多例(建议单例)，struts2是基于类开发，传递参数是通过类的属性，只能设计为多例。
3、 Struts 采用值栈存储请求和响应的数据，通过 OGNL 存取数据，
    springmvc 通过参数解 析器是将 request请求内容解析，并给方法形参赋值，将数据和视图封装成 ModelAndView 对象，
    最后又将 ModelAndView 中的模型数据通过 request域传输到页面。Jsp 视图解析 器默认使用 jstl。</code></pre><h1 id="注解开发：高级"><a href="#注解开发：高级" class="headerlink" title="注解开发：高级"></a>注解开发：高级</h1><h2 id="Validation-了解"><a href="#Validation-了解" class="headerlink" title="Validation(了解)"></a>Validation(了解)</h2><h2 id="数据回显"><a href="#数据回显" class="headerlink" title="数据回显"></a>数据回显</h2><h2 id="异常处理器"><a href="#异常处理器" class="headerlink" title="异常处理器"></a>异常处理器</h2><blockquote>
<p>springmvc的异常处理采用：dao,service,action都不try catch处理异常，直接throw抛出,最后由统一异常处理器处理。用户自定义异常处理器实现系统的异常处理逻辑。</p>
</blockquote>
<h3 id="异常处理思路"><a href="#异常处理思路" class="headerlink" title="异常处理思路"></a>异常处理思路</h3><pre><code>两类异常：预期异常 和 运行时异常RuntimeException。

异常抛出，最后由 springmvc 前端控制器交由异常处理器进行异常处理，如下图:</code></pre><p><a href="/2018/04/20/15326656335063/15326656335063/15234605337603.jpg" data-fancybox="group" data-caption="15234605337603" class="fancybox"><img alt="15234605337603" title="15234605337603" data-src="/2018/04/20/15326656335063/15326656335063/15234605337603.jpg" class="lazyload"></a></p>
<h3 id="自定义异常类"><a href="#自定义异常类" class="headerlink" title="自定义异常类"></a>自定义异常类</h3><blockquote>
<p>建一个自定义系统异常，如果抛出此异常 说明是系统预期处理的异常信息。否则就是运行时异常，需要改代码调试。</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 系统自定义异常类</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class CustomException extends Exception &#123;</span><br><span class="line">    &#x2F;&#x2F;错误信息描述</span><br><span class="line">    private String errorMessage;</span><br><span class="line"></span><br><span class="line">    public CustomException(String errorMessage) &#123;</span><br><span class="line">        super(errorMessage);</span><br><span class="line">        this.errorMessage &#x3D; errorMessage;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;get and set</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="自定义异常处理器"><a href="#自定义异常处理器" class="headerlink" title="自定义异常处理器"></a>自定义异常处理器</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import org.springframework.web.servlet.HandlerExceptionResolver;</span><br><span class="line">import org.springframework.web.servlet.ModelAndView;</span><br><span class="line">&#x2F;**</span><br><span class="line"> * 自定义异常处理器：若发生异常，将经过次处理器，统一处理系统抛出的异常</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class CustomExceptionResolver implements HandlerExceptionResolver&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public ModelAndView resolveException</span><br><span class="line">        (javax.servlet.http.HttpServletRequest httpServletRequest,</span><br><span class="line">         javax.servlet.http.HttpServletResponse httpServletResponse,</span><br><span class="line">         Object o, Exception e) &#123;</span><br><span class="line"></span><br><span class="line">        CustomException customException &#x3D; null;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;首先打印错误</span><br><span class="line">        e.printStackTrace();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;判断错误类型</span><br><span class="line">        if(e instanceof CustomException)&#123;</span><br><span class="line">            &#x2F;&#x2F;是系统自定义错误,转化即可</span><br><span class="line">            customException &#x3D; (CustomException)e;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            &#x2F;&#x2F;是未知错误，定义一个 未知错误异常</span><br><span class="line">            customException &#x3D; new CustomException(&quot;未知错误，请联系系统管理员！！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;将错误信息返回给视图</span><br><span class="line">        ModelAndView modelAndView &#x3D; new ModelAndView();</span><br><span class="line">        modelAndView.addObject(&quot;message&quot;,customException.getErrorMessage());</span><br><span class="line">        modelAndView.setViewName(&quot;errorPage&quot;);</span><br><span class="line">        return modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="异常处理器配置"><a href="#异常处理器配置" class="headerlink" title="异常处理器配置"></a>异常处理器配置</h3><blockquote>
<p>自定义的异常处理器需要在 springmvc中申明</p>
</blockquote>
<p>在 springmvc.xml 中添加:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 自定义 系统异常处理器 代替springmvc默认异常处理器HandlerExceptionResolver --&gt;</span><br><span class="line">	&lt;bean id&#x3D;&quot;handlerExceptionResolver&quot;</span><br><span class="line">		  class&#x3D;&quot;hw.base.process.exception.CustomExceptionResolver&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure></div>

<h3 id="异常测试"><a href="#异常测试" class="headerlink" title="异常测试"></a>异常测试</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RequestMapping(&quot;&#x2F;test&quot;)</span><br><span class="line">public @ResponseBody SysUser test(String id) throws CustomException &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    if(id &#x3D;&#x3D;null)&#123;</span><br><span class="line">        &#x2F;*</span><br><span class="line">            输入校验失败，此处因该 抛出自定义异常，</span><br><span class="line">            然后此异常会在 自定义异常类 统一处理 再转到错误页面</span><br><span class="line">         *&#x2F;</span><br><span class="line">        throw new CustomException(&quot;id值不能为空！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   &#x2F;&#x2F;...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>






<h2 id="上传图片"><a href="#上传图片" class="headerlink" title="上传图片"></a>上传图片</h2><h2 id="json数据交互"><a href="#json数据交互" class="headerlink" title="json数据交互"></a>json数据交互</h2><h3 id="RequestBody"><a href="#RequestBody" class="headerlink" title="@RequestBody"></a>@RequestBody</h3><p>作用:</p>
<blockquote>
<p>@RequestBody 注解用于读取 http 请求的内容(字符串)，通过 springmvc 提供的 HttpMessageConverter 接口将读到的内容转换为 json、xml 等格式的数据并绑定到 controller 方法的参数上。</p>
</blockquote>
<p>本例子应用:</p>
<blockquote>
<p>@RequestBody 注解实现接收 http 请求的 json 数据，将 json 数据转换为 java 对象</p>
</blockquote>
<h3 id="ResponseBody"><a href="#ResponseBody" class="headerlink" title="@ResponseBody"></a>@ResponseBody</h3><p>作用：</p>
<blockquote>
<p>该注解用于将 Controller 的方法返回的对象，通过 HttpMessageConverter 接口转换为指定格 式的数据如:json,xml 等，通过 Response 响应给客户端</p>
</blockquote>
<p>本例子应用:</p>
<blockquote>
<p>@ResponseBody 注解实现将 controller 方法返回对象转换为 json 响应给客户端</p>
</blockquote>
<h3 id="案例-请求-json，响应-json-实现"><a href="#案例-请求-json，响应-json-实现" class="headerlink" title="案例: 请求 json，响应 json 实现"></a>案例: 请求 json，响应 json 实现</h3><p><strong>环境准备</strong></p>
<blockquote>
<p>Springmvc 默认用 MappingJacksonHttpMessageConverter 对 json 数据进行转换，需要加入 jackson 的包，如下:</p>
</blockquote>
<pre><code>jackson-core-asl-1.9.11.jar
jackson-mapper-asl-1.9.11.jar</code></pre><p><strong>配置 json 转换器</strong></p>
<p>在注解适配器中加入 messageConverters  </p>
<pre><code>&lt;!--注解适配器 --&gt; 
&lt;bean class=&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMap pingHandlerAdapter&quot;&gt;
    &lt;property name=&quot;messageConverters&quot;&gt; 
        &lt;list&gt;
            &lt;bean class=&quot;org.springframework.http.converter.json.MappingJacksonHttpMessag eConverter&quot;&gt;&lt;/bean&gt;
        &lt;/list&gt;
    &lt;/property&gt;
&lt;/bean&gt;</code></pre><blockquote>
<p>注意: 如果使用&lt;mvc:annotation-driven /&gt; 则不用定义上边的内容。</p>
</blockquote>
<p><strong>controller 编写</strong></p>
<pre><code>// 商品修改提交json信息，响应json信息     
@RequestMapping(&quot;/editItemSubmit_RequestJson&quot;)
public @ResponseBody Items editItemSubmit_RequestJson(@RequestBody
Items items) throws Exception {     
    System.out.println(items);
    //itemService.saveItem(items);
    return items; 
}</code></pre><p><strong>页面 js 方法编写:</strong></p>
<pre><code>//请求json响应json
function request_json(){
       $.ajax({
            type:&quot;post&quot;,
            url:&quot;${pageContext.request.contextPath}/item/editItemSubmit_Request Json.action&quot;,
            contentType:&quot;application/json;charset=utf-8&quot;,
            data:&apos;{&quot;name&quot;:&quot;测试商品&quot;,&quot;price&quot;:99.9}&apos;,     
            success:function(data){
                alert(data);
            }
        }); 
}</code></pre><h3 id="案例：请-key-value，响应-json-实现"><a href="#案例：请-key-value，响应-json-实现" class="headerlink" title="案例：请 key/value，响应 json 实现"></a>案例：请 key/value，响应 json 实现</h3><blockquote>
<p>表单默认请求 application/x-www-form-urlencoded 格式的数据即 key/value，通常有 post 和<br>get 两种方法，响应 json 数据是为了方便客户端处理，实现如下:</p>
</blockquote>
<p>页面 js 方法编写:</p>
<pre><code>//ContentType没指定将默认为:application/x-www-form-urlencoded
//其他代码和上例js一样</code></pre><p>controller</p>
<pre><code>// 商品修改提交，提交普通form表单数据，响应json 
@RequestMapping(&quot;/editItemSubmit_ResponseJson&quot;)
public @ResponseBody Items editItemSubmit_ResponseJson(Items items)
throws Exception { 
    System.out.println(items);
    //itemService.saveItem(items);
    return items; 
}</code></pre><h2 id="RESTful支持"><a href="#RESTful支持" class="headerlink" title="RESTful支持"></a>RESTful支持</h2><h1 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h1>]]></content>
      <categories>
        <category>Spring</category>
        <category>SpringMVC</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring笔记（二）</title>
    <url>/2018/04/20/15326654119854/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[toc]</p>
<h1 id="Spring的AOP"><a href="#Spring的AOP" class="headerlink" title="Spring的AOP"></a>Spring的AOP</h1><h2 id="AOP概述"><a href="#AOP概述" class="headerlink" title="AOP概述"></a>AOP概述</h2><pre><code>1. aop：面向切面（方面）编程，扩展功能不修改源代码实现
2. AOP采取**横向抽取**机制，取代了传统纵向继承体系重复性代码
3. aop底层使用动态代理实现</code></pre><h2 id="AOP底层原理"><a href="#AOP底层原理" class="headerlink" title="AOP底层原理"></a>AOP底层原理</h2><p>图解：<br><a href="/2018/04/20/15326654119854/Spring03.jpg" data-fancybox="group" data-caption="Spring03" class="fancybox"><img alt="Spring03" title="Spring03" data-src="/2018/04/20/15326654119854/Spring03.jpg" class="lazyload"></a></p>
<ol>
<li><p>动态代理方式–jdk</p>
 <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//需要有接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoProxy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserDao <span class="title">getProxy</span><span class="params">(<span class="keyword">final</span> UserDao userDao)</span></span>&#123;</span><br><span class="line">        UserDao proxy = (UserDao)Proxy.newProxyInstance(userDao.getClass().getClassLoader(),</span><br><span class="line">                userDao.getClass().getInterfaces(), <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">   </span><br><span class="line">                    <span class="comment">//每次调用方法前，都会执行一次invoke</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">   </span><br><span class="line">                        <span class="comment">//对类里所有的方法增强</span></span><br><span class="line">                        System.out.println(<span class="string">"AOP增强------"</span>);</span><br><span class="line">                        <span class="comment">//对特定方法增强</span></span><br><span class="line">                        <span class="keyword">if</span>(<span class="string">"add"</span>.equals(method.getName()))&#123;</span><br><span class="line">                            System.out.println(<span class="string">"对add方法增强------"</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//让方法正常执行下去</span></span><br><span class="line">                        <span class="keyword">return</span> method.invoke(userDao,args);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        <span class="keyword">return</span> proxy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>动态代理方式–cglib</p>
 <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//-以子类的方式生成代理，不用接口</span></span><br><span class="line"><span class="comment">//-Spring核心包已引入了cglib jar包</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CglibProxy</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BookDaoImpl <span class="title">getProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">            Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">            <span class="comment">//设置父类</span></span><br><span class="line">            enhancer.setSuperclass(BookDaoImpl<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">   </span><br><span class="line">            <span class="comment">//设置回调函数</span></span><br><span class="line">            enhancer.setCallback(<span class="keyword">new</span> MethodInterceptor() &#123;</span><br><span class="line">   </span><br><span class="line">                <span class="comment">//代理对象的任意方法执行，回调函数就会执行</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object obj, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(<span class="string">"add"</span>.equals(method.getName()))&#123;</span><br><span class="line">                        System.out.println(<span class="string">"add enhance------"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">   </span><br><span class="line">                    <span class="keyword">return</span> methodProxy.invokeSuper(obj,args);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">   </span><br><span class="line">            <span class="comment">//将代理（子类）强转为父类返回</span></span><br><span class="line">            <span class="keyword">return</span> (BookDaoImpl) enhancer.create();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

</li>
</ol>
<h2 id="AOP相关术语"><a href="#AOP相关术语" class="headerlink" title="AOP相关术语"></a>AOP相关术语</h2><pre><code>- Joinpoint(连接点): 类里面可以被增强的方法，这些方法称为连接点

- Pointcut(切入点): 所谓切入点是指我们要对哪些Joinpoint进行拦截的定义.

- Advice(通知/增强):所谓通知是指拦截到Joinpoint之后**所要做的事情**就是通知.通知分为前置通知,后置通知,异常通知,最终通知（在后置通知之后执行）,环绕通知(切面要完成的功能)

- Aspect(切面): 是切入点和通知（引介）的结合

- Introduction(引介):引介是一种特殊的通知在不修改类代码的前提下, Introduction可以在运行期为类**动态地添加**一些方法或Field.
- Target(目标对象):代理的目标对象(要增强的类)
- Weaving(织入):是把增强应用到目标的过程. 把advice 应用到 target的过程
- Proxy（代理）:一个类被AOP织入增强后，就产生一个结果代理类</code></pre><h2 id="Spring的AOP操作-基于Aspectj的XML方式"><a href="#Spring的AOP操作-基于Aspectj的XML方式" class="headerlink" title="Spring的AOP操作(基于Aspectj的XML方式)"></a>Spring的AOP操作(基于Aspectj的XML方式)</h2><pre><code>1.在spring里面进行aop操作，使用aspectj实现
（1）aspectj不是spring一部分，和spring一起使用进行aop操作
（2）Spring2.0以后新增了对AspectJ支持
2.使用aspectj实现aop有两种方式
（1）基于aspectj的xml配置
（2）基于aspectj的注解方式</code></pre><p>jar包</p>
<pre><code>- aopalliance-1.0.jar
- aspectjweaver-1.8.7.jar
- spring-aop-4.2.4.RELEASE.jar
- spring-aspects-4.2.4.RELEASE.jar</code></pre><p>约束</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">    xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">    xmlns:aop&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&quot;</span><br><span class="line">    xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&#x2F;spring-aop.xsd&quot;&gt; &lt;!-- bean definitions here --&gt;</span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure></div>

<p>使用表达书配置切入点</p>
<pre><code>- execution(&lt;访问修饰符&gt;?&lt;返回类型&gt;&lt;方法名&gt;(&lt;参数&gt;)&lt;异常&gt;)
- 访问修饰符指的是public private 等
- 常用的表达式
    1. execution(* cn.itcast.aop.Book.add(..))
    2. execution(* cn.itcast.aop.Book.*(..))
    3. execution(* *.*(..))
    4. 匹配所有save开头的方法 execution(* save*(..))</code></pre><p>aspectj的aop操作</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--1 配置对象--&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;book&quot; class&#x3D;&quot;com.machine.aop2.Book&quot; &#x2F;&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;myBook&quot; class&#x3D;&quot;com.machine.aop2.MyBook&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--2 配置AOP操作--&gt;</span><br><span class="line">&lt;aop:config&gt;</span><br><span class="line">    &lt;!--2.1 配置切入点（要增强哪些方法）--&gt;</span><br><span class="line">    &lt;aop:pointcut id&#x3D;&quot;pointcut1&quot; expression&#x3D;&quot;execution(* com.machine.aop2.Book.*(..))&quot; &#x2F;&gt;</span><br><span class="line">    &lt;!--2.2 配置切面（把增强用到方法上）--&gt;</span><br><span class="line">    &lt;aop:aspect ref&#x3D;&quot;myBook&quot;&gt;</span><br><span class="line">        &lt;!--配置增强类型--&gt;</span><br><span class="line">        &lt;!--method: 增强类的使用哪个方法作为增强方法--&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--前置通知--&gt;</span><br><span class="line">        &lt;aop:before method&#x3D;&quot;before&quot; pointcut-ref&#x3D;&quot;pointcut1&quot; &#x2F;&gt;</span><br><span class="line">        &lt;!--后置通知：正常执行--&gt;</span><br><span class="line">        &lt;aop:after-returning method&#x3D;&quot;after1&quot; pointcut-ref&#x3D;&quot;pointcut1&quot;&#x2F;&gt;</span><br><span class="line">        &lt;!--出现异常--&gt;</span><br><span class="line">        &lt;aop:after-throwing method&#x3D;&quot;after3&quot; pointcut-ref&#x3D;&quot;pointcut1&quot; &#x2F;&gt;</span><br><span class="line">        &lt;!--最终通知:无论是否方法异常都执行--&gt;</span><br><span class="line">        &lt;aop:after method&#x3D;&quot;after2&quot; pointcut-ref&#x3D;&quot;pointcut1&quot; &#x2F;&gt;</span><br><span class="line">        &lt;!--环绕通知--&gt;</span><br><span class="line">        &lt;aop:around method&#x3D;&quot;around&quot; pointcut-ref&#x3D;&quot;pointcut1&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;aop:aspect&gt;</span><br><span class="line">&lt;&#x2F;aop:config&gt;</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;环绕增强</span><br><span class="line">public void around(ProceedingJoinPoint proceedingJoinPoint) throws Throwable&#123;</span><br><span class="line">    System.out.println(&quot;环绕前-----&quot;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;执行被增强的方法</span><br><span class="line">    proceedingJoinPoint.proceed();</span><br><span class="line"></span><br><span class="line">    System.out.println(&quot;环绕后-----&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="Spring的AOP操作-基于Aspectj的注解方式"><a href="#Spring的AOP操作-基于Aspectj的注解方式" class="headerlink" title="Spring的AOP操作(基于Aspectj的注解方式)"></a>Spring的AOP操作(基于Aspectj的注解方式)</h2><p>开启 aop 注解的自动代理:</p>
<pre><code>&lt;aop:aspectj-autoproxy/&gt;</code></pre><p>AspectJ 的 AOP 的注解:</p>
<pre><code>@Aspect:定义切面类的注解
通知类型:
* @Before
   * @AfterReturing
   * @Around
   * @After
   * @AfterThrowing
@Pointcut:定义切入点的注解</code></pre><p>编写切面类:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspectAnno</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//增强的方法</span></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"MyAspectAnno.pointcut1()"</span>) </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"前置通知==========="</span>); </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//设置切入点：要对哪些方法进行增强</span></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* cn.itcast.spring.demo4.ProductDao.save(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">pointcut1</span><span class="params">()</span></span>&#123;&#125; </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        这样，不用改原来的代码，只需要新增aop类就可以达到增强效果</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>ps: 切面类需要加入Spring的Bean管理</p>
<p>其他通知的注解</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspectAnno</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"MyAspectAnno.pointcut1()"</span>) </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"前置通知==========="</span>); </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@AfterReturning</span>(<span class="string">"MyAspectAnno.pointcut2()"</span>) </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"后置通知==========="</span>); </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"MyAspectAnno.pointcut3()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"环绕前通知=========="</span>); </span><br><span class="line">        Object obj = joinPoint.proceed();</span><br><span class="line">        System.out.println(<span class="string">"环绕后通知=========="</span>); </span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@AfterThrowing</span>(<span class="string">"MyAspectAnno.pointcut4()"</span>) </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"异常抛出通知========"</span>); </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@After</span>(<span class="string">"MyAspectAnno.pointcut4()"</span>) </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"最终通知=========="</span>); </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* cn.itcast.spring.demo4.ProductDao.save(..))"</span>) </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">pointcut1</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* cn.itcast.spring.demo4.ProductDao.update(..))"</span>) </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">pointcut2</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* cn.itcast.spring.demo4.ProductDao.delete(..))"</span>) </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">pointcut3</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* cn.itcast.spring.demo4.ProductDao.find(..))"</span>) </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">pointcut4</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="Spring的JDBC的模板"><a href="#Spring的JDBC的模板" class="headerlink" title="Spring的JDBC的模板"></a>Spring的JDBC的模板</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Spring 提供了很多持久层技术的模板类简化编程:</p>
<table>
<thead>
<tr>
<th>ORM持久化技术</th>
<th>模版类</th>
</tr>
</thead>
<tbody><tr>
<td>JDBC</td>
<td>org.springframework.jdbc.core.JdbcTemplete</td>
</tr>
<tr>
<td>Hibernate3</td>
<td>org.springframework.orm.hibernate3.Hibernate3Templete</td>
</tr>
<tr>
<td>IBatis(Mybatis)</td>
<td>org.springframework.orm.ibatis.SqlMapClientTemplete</td>
</tr>
<tr>
<td>JPA</td>
<td>org.springframework.orm.jpa.JpaTemplete</td>
</tr>
</tbody></table>
<h2 id="开始案例"><a href="#开始案例" class="headerlink" title="开始案例"></a>开始案例</h2><p>jar:</p>
<pre><code>spring-jdbc-4.2.4.RELEASE.jar</code></pre><p>测试类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">&#x2F;&#x2F; JDBC模板的基本使用:</span><br><span class="line">public void demo1()&#123;</span><br><span class="line">    &#x2F;&#x2F;配置连接池</span><br><span class="line">    DriverManagerDataSource dataSource &#x3D; new DriverManagerDataSource();</span><br><span class="line">    dataSource.setDriverClassName(&quot;com.mysql.jdbc.Driver&quot;); </span><br><span class="line">    dataSource.setUrl(&quot;jdbc:mysql:&#x2F;&#x2F;&#x2F;spring_day03&quot;); </span><br><span class="line">    dataSource.setUsername(&quot;root&quot;);</span><br><span class="line">    dataSource.setPassword(&quot;123&quot;);</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;JDBC模板</span><br><span class="line">    JdbcTemplate jdbcTemplate &#x3D; new JdbcTemplate(dataSource);</span><br><span class="line">    jdbcTemplate.update(&quot;insert into account values (null,?,?)&quot;, &quot;小明&quot;,10000d);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="将连接池的配置交给-Spring-管理"><a href="#将连接池的配置交给-Spring-管理" class="headerlink" title="将连接池的配置交给 Spring 管理"></a>将连接池的配置交给 Spring 管理</h2><h3 id="Spring-内置的连接池的配置"><a href="#Spring-内置的连接池的配置" class="headerlink" title="Spring 内置的连接池的配置"></a>Spring 内置的连接池的配置</h3><p>配置连接池</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 配置 Spring 的内置连接池 --&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;dataSource&quot; class&#x3D;&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;driverClassName&quot; value&#x3D;&quot;com.mysql.jdbc.Driver&quot;&#x2F;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;&#x2F;spring02&quot;&#x2F;&gt; </span><br><span class="line">    &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;machine&quot;&#x2F;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;4869&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure></div>

<p>将模板配置到 Spring 中</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 配置 JDBC 模板 --&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;jdbcTemplate&quot; class&#x3D;&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot;&#x2F;&gt; </span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure></div>

<p>测试类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class SpringDemo2 &#123;</span><br><span class="line">    @Resource(name&#x3D;&quot;jdbcTemplate&quot;) </span><br><span class="line">    private JdbcTemplate jdbcTemplate;</span><br><span class="line">    </span><br><span class="line">    @Test</span><br><span class="line">    public void demo1()&#123;</span><br><span class="line">        jdbcTemplate.update(&quot;insert into account values (null,?,?)&quot;, &quot;小明&quot;,10000d);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="Spring-中配置-DBCP-连接池"><a href="#Spring-中配置-DBCP-连接池" class="headerlink" title="Spring 中配置 DBCP 连接池"></a>Spring 中配置 DBCP 连接池</h3><p>jar:</p>
<pre><code>commons-dbcp-1.4.jar
commons-pool-1.5.6.jar</code></pre><p>配置连接池</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 配置 DBCP 连接池 --&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;dataSource&quot; class&#x3D;&quot;org.apache.commons.dbcp.BasicDataSource&quot;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;driverClassName&quot; value&#x3D;&quot;com.mysql.jdbc.Driver&quot;&#x2F;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;&#x2F;spring02&quot;&#x2F;&gt; </span><br><span class="line">    &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;root&quot;&#x2F;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;123&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure></div>

<h3 id="配置-c3p0-连接池"><a href="#配置-c3p0-连接池" class="headerlink" title="配置 c3p0 连接池"></a>配置 c3p0 连接池</h3><p>jar:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c3p0-0.9.1.2.jar</span><br></pre></td></tr></table></figure></div>

<p>配置连接池</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 配置 C3P0 连接池 --&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;dataSource&quot; class&#x3D;&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;driverClass&quot; value&#x3D;&quot;com.mysql.jdbc.Driver&quot;&#x2F;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;jdbcUrl&quot; value&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;&#x2F;spring02&quot;&#x2F;&gt; </span><br><span class="line">    &lt;property name&#x3D;&quot;user&quot; value&#x3D;&quot;root&quot;&#x2F;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;123&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure></div>

<p>ps: 将数据库连接的信息配置到属性文件中</p>
<h2 id="JDBC-模板-CRUD-的操作"><a href="#JDBC-模板-CRUD-的操作" class="headerlink" title="JDBC 模板 CRUD 的操作"></a>JDBC 模板 CRUD 的操作</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class SpringDemo3 &#123;</span><br><span class="line">    </span><br><span class="line">    @Resource(name&#x3D;&quot;jdbcTemplate&quot;) </span><br><span class="line">    private JdbcTemplate jdbcTemplate;</span><br><span class="line">    </span><br><span class="line">    @Test</span><br><span class="line">    &#x2F;&#x2F; 插入操作</span><br><span class="line">    public void demo1()&#123;</span><br><span class="line">        jdbcTemplate.update(&quot;insert into account values (null,?,?)&quot;, &quot;小明&quot;,10000d);</span><br><span class="line">    &#125;</span><br><span class="line">    @Test</span><br><span class="line">    &#x2F;&#x2F; 修改操作</span><br><span class="line">    public void demo2()&#123;</span><br><span class="line">        jdbcTemplate.update(&quot;update account set name&#x3D;?,money &#x3D;? where id &#x3D; ?&quot;, &quot; 思雨&quot;,10000d,5);</span><br><span class="line">    &#125;</span><br><span class="line">    @Test</span><br><span class="line">    &#x2F;&#x2F; 删除操作</span><br><span class="line">    public void demo3()&#123;</span><br><span class="line">        jdbcTemplate.update(&quot;delete from account where id &#x3D; ?&quot;, 5); </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Test</span><br><span class="line">    &#x2F;&#x2F; 查询一条记录</span><br><span class="line">    public void demo4()&#123;</span><br><span class="line">        &#x2F;&#x2F;MyRowMapper 说明了数据表字段和pojo的映射关系</span><br><span class="line">        Account account &#x3D; jdbcTemplate.queryForObject(&quot;select * from account id &#x3D; ?&quot;, new MyRowMapper(), 1);</span><br><span class="line">        System.out.println(account); </span><br><span class="line">    &#125;</span><br><span class="line">    @Test</span><br><span class="line">    &#x2F;&#x2F; 查询所有记录</span><br><span class="line">    public void demo5()&#123;</span><br><span class="line">        List&lt;Account&gt; list &#x3D; jdbcTemplate.query(&quot;select * from account&quot;, MyRowMapper());</span><br><span class="line">        for (Account account : list) &#123; </span><br><span class="line">            System.out.println(account);</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    &#x2F;*</span><br><span class="line">        MyRowMapper 继承 RowMapper&lt;pojo类&gt; 接口，</span><br><span class="line">        mapRow方法手动说明了 表字段和pojo的映射关系</span><br><span class="line">    *&#x2F;</span><br><span class="line">    class MyRowMapper implements RowMapper&lt;Account&gt;&#123;</span><br><span class="line">        @Override</span><br><span class="line">        public Account mapRow(ResultSet rs, int rowNum) throws SQLException &#123; </span><br><span class="line">            Account account &#x3D; new Account();</span><br><span class="line">            account.setId(rs.getInt(&quot;id&quot;)); </span><br><span class="line">            account.setName(rs.getString(&quot;name&quot;)); </span><br><span class="line">            account.setMoney(rs.getDouble(&quot;money&quot;));</span><br><span class="line">            return account;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="Spring的事务"><a href="#Spring的事务" class="headerlink" title="Spring的事务"></a>Spring的事务</h1><h2 id="事务概述"><a href="#事务概述" class="headerlink" title="事务概述"></a>事务概述</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 什么是事务:</span><br><span class="line">    事务逻辑上的一组操作,组成这组操作的各个逻辑单元,要么一起成功,要么一起失败.</span><br><span class="line">- 事务特性:</span><br><span class="line">    原子性 :强调事务的不可分割.</span><br><span class="line">    一致性 :事务的执行的前后数据的完整性保持一致.</span><br><span class="line">    隔离性 :一个事务执行的过程中,不应该受到其他事务的干扰 </span><br><span class="line">    持久性 :事务一旦结束,数据就持久到数据库</span><br><span class="line">- 如果不考虑隔离性引发安全性问题:</span><br><span class="line">    脏读       :一个事务读到了另一个事务的未提交（commit）的数据</span><br><span class="line">    不可重复读  :一个事务读到了另一个事务已经提交的 update 的数据,导致多次查询结果不一致. </span><br><span class="line">    虚读       :一个事务读到了另一个事务已经提交的 insert 的数据导致多次查询结果不一致.</span><br><span class="line">- 解决读问题:设置事务隔离级别</span><br><span class="line">    未提交读 :脏读，不可重复读，虚读都有可能发生 </span><br><span class="line">    已提交读 :避免脏读。但是不可重复读和虚读有可能发生 </span><br><span class="line">    可重复读 :避免脏读和不可重复读.但是虚读有可能发生. </span><br><span class="line">    串行化的 :避免以上所有读问题.</span><br></pre></td></tr></table></figure></div>

<h2 id="Spring进行事务管理-相关的类和API"><a href="#Spring进行事务管理-相关的类和API" class="headerlink" title="Spring进行事务管理 相关的类和API"></a>Spring进行事务管理 相关的类和API</h2><pre><code>1. PlatformTransactionManager接口     -- 平台事务管理器.(真正管理事务的类)。该接口有具体的实现类，根据不同的持久层框架，需要选择不同的实现类！
2. TransactionDefinition接口          -- 事务定义信息.(事务的隔离级别,传播行为,超时,只读)
3. TransactionStatus接口              -- 事务的状态

4. 总结：上述对象之间的关系：
    平台事务管理器 真正管理事务对象.
    根据事务定义的信息TransactionDefinition 进行事务管理，
    在管理事务中产生一些状态.将状态记录到TransactionStatus中

5. PlatformTransactionManager接口中实现类和常用的方法
    1. 接口的实现类(真正管理事务的对象)
        * 使用 Spring JDBC 或 iBatis 进行持久化数据时使用
            org.springframework.jdbc.datasource.DataSourceTransactionManager
        * 使用 Hibernate 版本进行持久化数据时使用
            org.springframework.orm.hibernate3.HibernateTransactionManager 
    2. 该接口的常用方法
        * void commit(TransactionStatus status) 
        * TransactionStatus getTransaction(TransactionDefinition definition) 
        * void rollback(TransactionStatus status) 
6. TransactionDefinition（采用默认）
    1. 事务隔离级别的常量
        * static int ISOLATION_DEFAULT              -- 采用数据库的默认隔离级别
        * static int ISOLATION_READ_UNCOMMITTED     -- 未提交
        * static int ISOLATION_READ_COMMITTED       -- 已提交 
        * static int ISOLATION_REPEATABLE_READ      -- 可重复 
        * static int ISOLATION_SERIALIZABLE         -- 串行化
    2. 事务的传播行为常量（不用设置，使用默认值）
        * 先解释什么是事务的传播行为：解决的是业务层之间的方法调用！！例如：A调用B

        * 保证A,B在同一个事务中
        * PROPAGATION_REQUIRED（默认值） -- 若A中有事务,B使用A中的事务(不用再开 ).如果没有，B就会开启一个新的事务,并将A包含进来.默认值！！
        * PROPAGATION_SUPPORTS          -- A中有事务,使用A中的事务.如果A中没有事务.那么B也不使用事务.
        * PROPAGATION_MANDATORY         -- A中有事务,使用A中的事务.如果A没有事务.抛出异常.

        * 保证A,B没有在一个事务中
        * PROPAGATION_REQUIRES_NEW（记）-- A中有事务,将A中的事务挂起.B创建一个新的事务.
        * PROPAGATION_NOT_SUPPORTED     -- A中有事务,将A中的事务挂起.
        * PROPAGATION_NEVER             -- A中有事务,抛出异常.

        * PROPAGATION_NESTED（记）     -- 嵌套事务.当A执行之后,就会在这个位置设置一个保存点.如果B没有问题.执行通过.如果B出现异常,运行客户根据需求回滚(选择回滚到保存点或者是最初始状态) </code></pre><h2 id="Spring-的编程式事务管理-不用"><a href="#Spring-的编程式事务管理-不用" class="headerlink" title="Spring 的编程式事务管理(不用)"></a>Spring 的编程式事务管理(不用)</h2><p>手动编写代码完成事务的管理:</p>
<p>配置：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 配置事务管理器 --&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;transactionManager&quot; class&#x3D;&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot;&#x2F;&gt; </span><br><span class="line">&lt;&#x2F;bean&gt;</span><br><span class="line">&lt;!-- 配置事务管理模板 --&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;transactionTemplate&quot; class&#x3D;&quot;org.springframework.transaction.support.TransactionTemplate&quot;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;transactionManager&quot; ref&#x3D;&quot;transactionManager&quot;&#x2F;&gt; </span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure></div>

<p>需要在业务层注入事务管理模板</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 配置业务层的类 --&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;accountService&quot; class&#x3D;&quot;cn.itcast.transaction.demo1.AccountServiceImpl&quot;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;accountDao&quot; ref&#x3D;&quot;accountDao&quot;&#x2F;&gt;</span><br><span class="line">    &lt;!-- 注入事务管理模板 --&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;transactionTemplate&quot; ref&#x3D;&quot;transactionTemplate&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure></div>

<p>手动编写代码实现事务管理</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void transfer(final String from, final String to, final Double money) &#123; </span><br><span class="line">    &#x2F;&#x2F;Spring注入 transactionTemplate</span><br><span class="line">    transactionTemplate.execute(new TransactionCallbackWithoutResult() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        protected void doInTransactionWithoutResult(TransactionStatus status)&#123;</span><br><span class="line">            </span><br><span class="line">            accountDao.outMoney(from, money);</span><br><span class="line">            int d &#x3D; 1 &#x2F; 0; accountDao.inMoney(to, money);</span><br><span class="line">        &#125; </span><br><span class="line">        </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="Spring的声明式事务管理-XML方式"><a href="#Spring的声明式事务管理-XML方式" class="headerlink" title="Spring的声明式事务管理: XML方式"></a>Spring的声明式事务管理: XML方式</h2><pre><code>- 思想就是AOP
- 不需要进行手动编写代码，通过一段配置完成事务管理</code></pre><p>配置:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 事务管理器 --&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;transactionManager&quot; class&#x3D;&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot;&#x2F;&gt; </span><br><span class="line">&lt;&#x2F;bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 配置事务增强（advice：通知）：对哪些方法事务增强 --&gt;</span><br><span class="line">&lt;!--* 注意：如果是自己编写的切面，使用&lt;aop:aspect&gt;标签，如果是系统制作的，使用&lt;aop:advisor&gt;标签。--&gt;</span><br><span class="line">&lt;tx:advice id&#x3D;&quot;txAdvice&quot; transaction-manager&#x3D;&quot;transactionManager&quot;&gt;</span><br><span class="line">    &lt;tx:attributes&gt;</span><br><span class="line">        &lt;!--</span><br><span class="line">        tx:method的一些属性</span><br><span class="line">            name        ：绑定事务的方法名，可以使用通配符，可以配置多个。</span><br><span class="line">            </span><br><span class="line">            &#x2F;&#x2F;以下采用默认值即可</span><br><span class="line">            propagation&#x3D;&quot;REQUIRED&quot;  ：传播行为-保证A,B在同一个事务中</span><br><span class="line">            isolation&#x3D;&quot;DEFAULT&quot;     ：隔离级别-数据库默认级别</span><br><span class="line">            read-only&#x3D;&quot;false&quot;       ：是否只读-否</span><br><span class="line">            timeout&#x3D;&quot;-1&quot;            ：过期时间</span><br><span class="line">            rollback-for&#x3D;&quot;&quot;         ：发生哪些异常回滚.</span><br><span class="line">            no-rollback-for&#x3D;&quot;&quot;      ：发生哪些异常不回滚.</span><br><span class="line">         --&gt;</span><br><span class="line">         </span><br><span class="line">        &lt;!-- 对哪些方法加事务 --&gt;</span><br><span class="line">        &lt;tx:method name&#x3D;&quot;save*&quot; &#x2F;&gt;</span><br><span class="line">        &lt;tx:method name&#x3D;&quot;update*&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;tx:attributes&gt;</span><br><span class="line">&lt;&#x2F;tx:advice&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 配置AOP切面产生代理 --&gt;</span><br><span class="line">&lt;aop:config&gt;</span><br><span class="line">    &lt;!--配置事务通知，切入点--&gt;</span><br><span class="line">    &lt;aop:advisor advice-ref&#x3D;&quot;txAdvice&quot; pointcut&#x3D;&quot;execution(* execution(* com.machine.tx.Book.*(..))&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;aop:config&gt;</span><br></pre></td></tr></table></figure></div>

<p>测试类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Demo2 &#123;</span><br><span class="line"></span><br><span class="line">    @Resource(name&#x3D;&quot;accountService&quot;)</span><br><span class="line">    private AccountService accountService;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void run1()&#123;</span><br><span class="line">        accountService.pay(&quot;小白&quot;, &quot;大白&quot;, 1000);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="Spring的声明式事务管理-注解方式（推荐）"><a href="#Spring的声明式事务管理-注解方式（推荐）" class="headerlink" title="Spring的声明式事务管理: 注解方式（推荐）"></a>Spring的声明式事务管理: 注解方式（推荐）</h2><p>配置：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 配置事务管理器  --&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;transactionManager&quot; class&#x3D;&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 开启注解事务 --&gt;</span><br><span class="line">&lt;tx:annotation-driven transaction-manager&#x3D;&quot;transactionManager&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure></div>

<p><strong>在业务层上添加一个注解</strong>: @Transactional</p>
<h1 id="Spring整合WEB项目"><a href="#Spring整合WEB项目" class="headerlink" title="Spring整合WEB项目"></a>Spring整合WEB项目</h1><h2 id="整合原理"><a href="#整合原理" class="headerlink" title="整合原理"></a>整合原理</h2><pre><code>1. 老方法加载Spring核心配置文件

    ApplicationContext context = new ClassPathXmlApplicationContext(&quot;bean1.xml&quot;);
    //可行，但效率低

2. 实现思想：把加载文件和创建对象，放在服务器启动时完成。
3. 实现原理：
    * ServletContext对象，ServletContext监听器
    * 具体过程：

        * 服务器启动，一个项目会创建一个ServletContext；
        * 监听器监听到ServletContext创建，就加载配置文件，创建配置文件里的对象；
        * 用setAttribute方法将对象放入ServletContext域，用getAtrribute方法从ServletContext域中取出对象</code></pre><h2 id="整合实例"><a href="#整合实例" class="headerlink" title="整合实例"></a>整合实例</h2><p>jar包：添加</p>
<pre><code>- spring-web-4.2.4.RELEASE.jar</code></pre><p>web.xml</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span> <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>spring_day01<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--修改配置文件路径--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--src目录下--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:bean.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--配置监听器，在服务器启动时 启动Spring框架--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--默认配置文件路径：WEB-INF/applicationContext.xml --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC笔记（一）</title>
    <url>/2018/04/20/15326654830963/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>参考：【itheima】</p>
</blockquote>
<p>[toc]</p>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><pre><code>1. 表现层的框架，是 Spring 框架的一部分,可以从 Spring的整体结构中看得出来
2. MVC
    - C 控制器 controller 
        - 作用：接收请求，响应处理结果，没有业务逻辑
    - M 模型
        pojo service dao
    - V 视图 View 将模型数据展示给用户</code></pre><p>web MVC:<br><a href="/2018/04/20/15326654830963/SpringMVC_01.png" data-fancybox="group" data-caption="SpringMVC_01" class="fancybox"><img alt="SpringMVC_01" title="SpringMVC_01" data-src="/2018/04/20/15326654830963/SpringMVC_01.png" class="lazyload"></a></p>
<h1 id="Spring-web-mvc-架构"><a href="#Spring-web-mvc-架构" class="headerlink" title="Spring web mvc 架构"></a>Spring web mvc 架构</h1><h2 id="Spring-mvc-架构图"><a href="#Spring-mvc-架构图" class="headerlink" title="Spring mvc 架构图"></a>Spring mvc 架构图</h2><p><a href="/2018/04/20/15326654830963/SpringMVC_02.png" data-fancybox="group" data-caption="SpringMVC_02" class="fancybox"><img alt="SpringMVC_02" title="SpringMVC_02" data-src="/2018/04/20/15326654830963/SpringMVC_02.png" class="lazyload"></a></p>
<h2 id="架构流程"><a href="#架构流程" class="headerlink" title="架构流程"></a>架构流程</h2><pre><code>1、 用户发送请求至前端控制器DispatcherServlet
2、 DispatcherServlet收到请求调用HandlerMapping处理器映射器。
3、 处理器映射器根据**请求url**找到具体的处理器，生成处理器对象及处理器拦截器(如果有
则生成)一并返回给DispatcherServlet。
4、 DispatcherServlet通过HandlerAdapter处理器适配器**调用**处理器
5、 执行处理器(**Controller，也叫后端控制器**)。
6、 Controller执行完成返回ModelAndView
7、 HandlerAdapter将controller执行结果ModelAndView返回给DispatcherServlet
8、 DispatcherServlet将ModelAndView传给ViewReslover视图解析器
9、 ViewReslover解析后返回具体View
10、 DispatcherServlet对View进行渲染视图(即将模型数据填充至视图中)。 
11、 DispatcherServlet响应用户</code></pre><h2 id="组件说明"><a href="#组件说明" class="headerlink" title="组件说明"></a>组件说明</h2><pre><code>-- DispatcherServlet:前端控制器 
    - 用户请求到达前端控制器，它就相当于mvc模式中的c，dispatcherServlet是整个流程控制 的中心，由它调用其它组件处理用户的请求，dispatcherServlet的存在降低了组件之间的 耦合性。

-- HandlerMapping:处理器映射器 
    - HandlerMapping负责根据用户请求找到Handler即处理器，springmvc提供了不同的映射器实 现不同的映射方式，例如:配置文件方式，实现接口方式，注解方式等。

-- Handler:处理器
    -Handler 是继DispatcherServlet前端控制器的后端控制器，在DispatcherServlet的控制下 Handler对具体的用户请求进行处理。

-- HandlAdapter:处理器适配器 
    - 通过HandlerAdapter对处理器进行执行，这是适配器模式的应用，通过扩展适配器可以对更 多类型的处理器进行执行。

-- View Resolver:视图解析器
    - View Resolver负责将处理结果生成View视图，View Resolver首先根据逻辑视图名解析成物 理视图名即具体的页面地址，再生成View视图对象，最后对View进行渲染将处理结果通过页 面展示给用户。 springmvc框架提供了很多的View视图类型，包括:jstlView、 freemarkerView、pdfView等。</code></pre><h1 id="SpringMVC快速开始"><a href="#SpringMVC快速开始" class="headerlink" title="SpringMVC快速开始"></a>SpringMVC快速开始</h1><h2 id="开始案例"><a href="#开始案例" class="headerlink" title="开始案例"></a>开始案例</h2><pre><code>-- jar包：
    spring所有jar包和依赖包


-- 配置前端控制器
    &lt;servlet&gt; 
        &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt; 
            &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;
            &lt;init-param&gt;
                &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; 
                &lt;param-value&gt;classpath:springmvc.xml&lt;/param-value&gt;
            &lt;/init-param&gt;
            &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;
    &lt;/servlet&gt;
    &lt;servlet-mapping&gt;
        &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt; 
        &lt;url-pattern&gt;*.action&lt;/url-pattern&gt;
    &lt;/servlet-mapping&gt;
    &lt;!--
        load-on-startup:表示servlet随服务启动; 
        url-pattern:*.action的请交给DispatcherServlet处理。
        contextConfigLocation:指定springmvc配置的加载位置，
            如果不指定则默认加 载WEB-INF/[DispatcherServlet 的Servlet 名字]-servlet.xml。
    --&gt;


-- Servlet 拦截方式
    1、拦截固定后缀的url，比如设置为 *.do、*.action， 
        -- 此方法最简单，不会导致静态资源(jpg,js,css)被拦截。
    2、拦截所有，设置为/
        -- REST风格的url
        -- 但是此方法会导致静态文件(jpg,js,css)被拦截后不能正常显示。需要特殊处理


-- springmvc 配置文件
    &lt;!--
        Springmvc默认加载WEB-INF/[前端控制器的名字]-servlet.xml，也可以在前端控制器定义处指定加载的配置文件
    --&gt;
    &lt;init-param&gt; 
        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; 
        &lt;param-value&gt;classpath:springmvc.xml&lt;/param-value&gt; 
    &lt;/init-param&gt;


-- 配置HandlerAdapter
    springmvc.xml 文件配置如下:
    &lt;bean class=&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;/&gt;   
    &lt;!--
        SimpleControllerHandlerAdapter:即简单控制器处理适配器，
        所有实现了 org.springframework.web.servlet.mvc.Controller 接口的Bean
        作为 Springmvc的后端控制器。
    --&gt;


-- Handler开发

    public class ItemList1 implements Controller {
        @Override
        public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws Exception {
            //商品列表
            List&lt;Items&gt; itemsList = new ArrayList&lt;Items&gt;();

            Items items_1 = new Items(); 
            items_1.setName(&quot;联想笔记本&quot;); 
            items_1.setPrice(6000f); 
            items_1.setDetail(&quot;ThinkPad T430 联想笔记本电脑!&quot;);

            Items items_2 = new Items(); 
            items_2.setName(&quot;苹果手机&quot;); 
            items_2.setPrice(5000f);
            items_2.setDetail(&quot;iphone6苹果手机!&quot;); 
            itemsList.add(items_1);
            itemsList.add(items_2);

            //创建modelAndView准备填充数据、设置视图 
            ModelAndView modelAndView = new ModelAndView();
            //填充数据
            modelAndView.addObject(&quot;itemsList&quot;, itemsList); 
            //视图 ModelAndView:包含了模型数据及逻辑视图名
            modelAndView.setViewName(&quot;order/itemsList&quot;);
            return modelAndView; 
        }
    }


-- 配置文件

    springmvc.xml 文件配置如下:

    &lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; 
        xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
        xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;
        xmlns:context=&quot;http://www.springframework.org/schema/contex t&quot;
        xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot; 
        xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;
        xsi:schemaLocation=&quot;
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
              http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
              http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
              http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
              http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd&quot;&gt;

            &lt;!-- 处理器映射器--&gt;
            &lt;!-- 根据bean的name进行查找Handler 将action的url配置在bean的 name中 --&gt;
            &lt;bean class=&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot; /&gt;

            &lt;!--
                BeanNameUrlHandlerMapping:表示将定义的Bean名字作为请求的url，
                需要将编写的 controller在spring容器中进行配置，且指定bean的name为请求的url，且必须以.action 结尾

            --&gt;

            &lt;!-- controller配置 --&gt;
            &lt;bean name=&quot;/items1.action&quot; id=&quot;itemList1&quot; class=&quot;cn.itcast.springmvc.controller.first.ItemList1&quot;/&gt;

            &lt;!--
                前边配置的处理器映射器为BeanNameUrlHandlerMapping， 
                如果请求的URL 为“上下文/items1.action”将会成功映射到ItemList1控制器。
            --&gt;

            &lt;!-- 配置视图解析器 --&gt;
            &lt;!-- ViewResolver --&gt;
            &lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;
                &lt;property name=&quot;viewClass&quot; value=&quot;org.springframework.web.servlet.view.JstlView&quot;/&gt;
                &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/jsp/&quot;/&gt;
                &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;/&gt;
            &lt;/bean&gt;

            &lt;!--
                InternalResourceViewResolver: 支持JSP视图解析
                viewClass:JstlView表示JSP模板页面需要使用JSTL标签库，所以classpath中必须包含jstl 的相关jar 包;
                prefix 和suffix:查找视图页面的前缀和后缀，最终视图的址为: 前缀+逻辑视图名+后缀
                    逻辑视图名需要在controller中返回ModelAndView指定
                    比如逻辑 视图名为hello，则最终返回的jsp视图地址 “WEB-INF/jsp/hello.jsp”
            --&gt;
    &lt;/beans&gt;


-- 视图开发
    jsp...
    部署在tomcat测试</code></pre><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><pre><code>-- DispatcherServlet：
    DispatcherServlet 创建时会默认从DispatcherServlet.properties文件加载springmvc所用的各各组件

-- HandlerMapping 处理器映射器

    -- BeanNameUrlHandlerMapping
        - 根据请求的url与spring容器中定义的bean的name进行 匹配，从而从 spring 容器中找到 bean 实例

        &lt;!—beanName Url映射器 --&gt;
        &lt;bean class=&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMappin g&quot;/&gt;



    -- SimpleUrlHandlerMapping 
        -- simpleUrlHandlerMapping 是 BeanNameUrlHandlerMapping 的增强版本，它可以将 url 和 处理器 bean 的 id 进行统一映射配置

        &lt;!—简单url映射 --&gt; 
        &lt;bean class=&quot;org.springframework.web.servlet.handler.SimpleUrlHandlerMapping&quot;&gt;
            &lt;property name=&quot;mappings&quot;&gt;
                &lt;props&gt;
                    &lt;prop key=&quot;/items1.action&quot;&gt;controller的bean id&lt;/prop&gt; 
                    &lt;prop key=&quot;/items2.action&quot;&gt;controller的bean id&lt;/prop&gt;
                    &lt;/props&gt;
               &lt;/property&gt;
        &lt;/bean&gt;       


-- HandlerAdapter 处理器适配器

    -- HandlerAdapter 会根据适配器接口对后端控制器进行包装(适配)

    1. SimpleControllerHandlerAdapter
            SimpleControllerHandlerAdapter简单控制器处理器适配器，
            所有实现了 org.springframework.web.servlet.mvc.Controller 接口的Bean通过此适配器进行适配、 执行。

            配置如下:
             &lt;bean class=&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot; /&gt;

    2. HttpRequestHandlerAdapter

        -- HttpRequestHandlerAdapter，http请求处理器适配器，
            所有实现了 org.springframework.web.HttpRequestHandler 接口的Bean通过此适配器进行适配、执行

        -- 适配器配置如下:
        &lt;bean class=&quot;org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter&quot;/&gt;

        -- Controller实现如下:

        public class ItemList2 implements HttpRequestHandler {
            @Override
            public void handleRequest(HttpServletRequest request, HttpServletResponse response) 
                throws ServletException,IOException {

                //...

                // 填充数据
                request.setAttribute(&quot;itemsList&quot;, itemsList);
                // 视图 
                request.getRequestDispatcher(&quot;/WEB-INF/jsp/order/itemsList.jsp&quot;).forward(request, response);
            } 

            /*
                从上边可以看出此适配器器的handleRequest方法没有返回ModelAndView，
                可通过 response修改定义响应内容，比如返回json数据:
                response.setCharacterEncoding(&quot;utf-8&quot;); 
                response.setContentType(&quot;application/json;charset=utf-8&quot;); 
                response.getWriter().write(&quot;json串&quot;);
            */            
        }             </code></pre><h1 id="注解Mapper和Adapter"><a href="#注解Mapper和Adapter" class="headerlink" title="注解Mapper和Adapter"></a>注解Mapper和Adapter</h1><pre><code>-- Controller 的代码:

    @Controller
    public class ItemList3 {    //普通java类，没有继承
        @RequestMapping(&quot;/queryItem.action&quot;)
        public ModelAndView queryItem() {

            //... 

            // 创建modelAndView准备填充数据、设置视图 
            ModelAndView modelAndView = new ModelAndView();
            // 填充数据
            modelAndView.addObject(&quot;itemsList&quot;, itemsList); 
            // 视图 
            modelAndView.setViewName(&quot;order/itemsList&quot;);
            return modelAndView;
        }


-- 组件扫描器
    -- 扫描标记@controller 的控制器类，不用配置bean了

     &lt;!-- 扫描controller注解,多个包中间使用半角逗号分隔 --&gt; 
     &lt;context:component-scan base-package=&quot;cn.itcast.springmvc.controller.first&quot;/&gt;   


-- RequestMappingHandlerMapping

        -- 注解式处理器映射器，对类中标记@ResquestMapping的方法进行映射
            根据 ResquestMapping 定义的 url 匹配 ResquestMapping 标记的方法，
            匹配成功返回 HandlerMethod 对象给前端控制器，

        -- 推荐使用 RequestMappingHandlerMapping 完成注解式处理器映射

        -- 配置如下:

        &lt;!--注解映射器 --&gt;
        &lt;bean class=&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping&quot;/&gt;
        &lt;!--
            @RequestMapping:定义请求 url 到处理器功能方法的映射
        --&gt;


-- RequestMappingHandlerAdapter

        -- 注解式处理器适配器，对标记@ResquestMapping 的方法进行适配。
        -- 推荐使用RequestMappingHandlerAdapter 完成注解式处理器适配。
        -- 配置如下:

        &lt;!--注解适配器 --&gt;
         &lt;bean class=&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter&quot;/&gt;


--  &lt;mvc:annotation-driven&gt;

        -- springmvc 使用 &lt;mvc:annotation-driven&gt; 自动加载
            RequestMappingHandlerMapping 和 RequestMappingHandlerAdapter ， 
        -- 可用在 springmvc.xml 配置文件中使用 
            &lt;mvc:annotation-driven&gt; 替代注解处理器和适配器的配置。</code></pre><h1 id="springmvc-处理流程源码分析"><a href="#springmvc-处理流程源码分析" class="headerlink" title="springmvc 处理流程源码分析"></a>springmvc 处理流程源码分析</h1><pre><code>1. 用户发送请求到 DispatherServlet 前端控制器
2. DispatherServlet 调用 HandlerMapping(处理器映射器)根据 url 查找 Handler
3. DispatherServlet 调用 HandlerAdapter(处理器适配器)对 HandlerMapping 找到 Handler 进行包装、执行。HandlerAdapter 执行 Handler 完成后，返回了一个 ModleAndView(springmvc 封装对象)
4. DispatherServlet 拿着 ModelAndView 调用 ViewResolver(视图解析器)进行视图解 析，解析完成后返回一个 View(很多不同视图类型的 View)
5. DispatcherServlet 进行视图渲染，将 Model 中数据放到 request 域，在页面展示</code></pre>]]></content>
      <categories>
        <category>Spring</category>
        <category>SpringMVC</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis笔记（三）：逆向工程</title>
    <url>/2018/04/20/15326651364004/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[toc]</p>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><ol>
<li>官网提供的mapper自动生成工具mybatis-generator-core-1.3.6.jar</li>
<li>可以生成 po类，mapper映射文件，mapper接口</li>
<li>支持单表查询（简单查询，条件查询，1.3.6提供动态sql）</li>
<li>官网MyBatis Generator使用文档：<a href="http://www.mybatis.org/generator/index.html" target="_blank" rel="noopener">http://www.mybatis.org/generator/index.html</a></li>
</ol>
<h1 id="mybatis-generator逆向工程"><a href="#mybatis-generator逆向工程" class="headerlink" title="mybatis-generator逆向工程"></a>mybatis-generator逆向工程</h1><h2 id="如何搭建"><a href="#如何搭建" class="headerlink" title="如何搭建"></a>如何搭建</h2><ul>
<li><p>jar包</p>
<ul>
<li>log4j</li>
<li>mybatis核心</li>
<li>mybatis-generator-core-1.3.6.jar</li>
<li>数据库连接jar</li>
</ul>
</li>
<li><p>generatorConfig.xml</p>
  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE generatorConfiguration</span><br><span class="line">        PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD MyBatis Generator Configuration 1.0&#x2F;&#x2F;EN&quot;</span><br><span class="line">        &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-generator-config_1_0.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;generatorConfiguration&gt;</span><br><span class="line"></span><br><span class="line">    &lt;context id&#x3D;&quot;testTables&quot; targetRuntime&#x3D;&quot;MyBatis3&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;commentGenerator&gt;</span><br><span class="line">            &lt;!-- 是否 去除自动生成的注释 true：是 ： false:否 --&gt;</span><br><span class="line">            &lt;property name&#x3D;&quot;suppressAllComments&quot; value&#x3D;&quot;true&quot; &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;commentGenerator&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--数据库连接 信息--&gt;</span><br><span class="line">        &lt;jdbcConnection driverClass&#x3D;&quot;com.mysql.jdbc.Driver&quot;</span><br><span class="line">                        connectionURL&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;10.211.55.6:3306&#x2F;mybatis?characterEncoding&#x3D;utf-8&quot;</span><br><span class="line">                        userId&#x3D;&quot;machine&quot;</span><br><span class="line">                        password&#x3D;&quot;4869&quot;&gt;</span><br><span class="line">        &lt;&#x2F;jdbcConnection&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 如使用oracle参考如下 --&gt;</span><br><span class="line">        &lt;!--</span><br><span class="line">        &lt;jdbcConnection</span><br><span class="line">            driverClass&#x3D;&quot;oracle.jdbc.driver.OracleDriver&quot;</span><br><span class="line">            connectionURL&#x3D;&quot;jdbc:oracle:thin:@127.0.0.1:1521:orcl&quot;</span><br><span class="line">            userId&#x3D;&quot;scott&quot;</span><br><span class="line">            password&#x3D;&quot;wcy675600920&quot;&gt;</span><br><span class="line">        &lt;&#x2F;jdbcConnection&gt; --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--</span><br><span class="line">            false(默认): 把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，</span><br><span class="line">            true: 把JDBC DECIMAL 和 NUMERIC 类型解析为java.math.BigDecimal</span><br><span class="line">		--&gt;</span><br><span class="line">        &lt;javaTypeResolver &gt;</span><br><span class="line">            &lt;property name&#x3D;&quot;forceBigDecimals&quot; value&#x3D;&quot;false&quot; &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;javaTypeResolver&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--targetProject: 生成 PO类 的位置--&gt;</span><br><span class="line">        &lt;!--</span><br><span class="line">            mac下路径是.&#x2F;src</span><br><span class="line">            windows 路径是.\src</span><br><span class="line">        --&gt;</span><br><span class="line">        &lt;javaModelGenerator targetPackage&#x3D;&quot;com.machine.pro.pojo&quot; targetProject&#x3D;&quot;.&#x2F;src&quot;&gt;</span><br><span class="line">            &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span><br><span class="line">            &lt;property name&#x3D;&quot;enableSubPackages&quot; value&#x3D;&quot;false&quot; &#x2F;&gt;</span><br><span class="line">            &lt;!-- 从数据库返回的值 被清理前后的空格 --&gt;</span><br><span class="line">            &lt;property name&#x3D;&quot;trimStrings&quot; value&#x3D;&quot;true&quot; &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;javaModelGenerator&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- targetProject: 生成 mapper映射文件 的位置 --&gt;</span><br><span class="line">        &lt;sqlMapGenerator targetPackage&#x3D;&quot;com.machine.pro.mapper&quot;  targetProject&#x3D;&quot;.&#x2F;src&quot;&gt;</span><br><span class="line">            &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span><br><span class="line">            &lt;property name&#x3D;&quot;enableSubPackages&quot; value&#x3D;&quot;false&quot; &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;sqlMapGenerator&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- targetPackage：mapper接口生成的位置 --&gt;</span><br><span class="line">        &lt;javaClientGenerator type&#x3D;&quot;XMLMAPPER&quot; targetPackage&#x3D;&quot;com.machine.pro.mapper&quot;  targetProject&#x3D;&quot;.&#x2F;src&quot;&gt;</span><br><span class="line">            &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span><br><span class="line">            &lt;property name&#x3D;&quot;enableSubPackages&quot; value&#x3D;&quot;false&quot; &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;javaClientGenerator&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;!--指定要生成的 数据库表--&gt;</span><br><span class="line">        &lt;table tableName&#x3D;&quot;user&quot; &#x2F;&gt;</span><br><span class="line">        &lt;table tableName&#x3D;&quot;orders&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--table更多细节--&gt;</span><br><span class="line">        &lt;!--</span><br><span class="line">        &lt;table tableName&#x3D;&quot;&quot; domainObjectName&#x3D;&quot;&quot;&gt;</span><br><span class="line">           &lt;columnOverride column&#x3D;&quot;&quot; javaType&#x3D;&quot;&quot; &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;table&gt;</span><br><span class="line">        --&gt;</span><br><span class="line">    &lt;&#x2F;context&gt;</span><br><span class="line">&lt;&#x2F;generatorConfiguration&gt;</span><br></pre></td></tr></table></figure></div></li>
<li><p>GeneratorSqlMap.java</p>
  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class GeneratorSqlMap &#123;</span><br><span class="line"></span><br><span class="line">    public void generator() throws Exception&#123;</span><br><span class="line">        List&lt;String&gt; warnings &#x3D; new ArrayList&lt;String&gt;();</span><br><span class="line">        boolean overwrite &#x3D; true;</span><br><span class="line">        &#x2F;&#x2F;指定逆向工程配置文件</span><br><span class="line">        File configFile &#x3D; new File(&quot;config&#x2F;generatorConfig.xml&quot;);</span><br><span class="line">        ConfigurationParser cp &#x3D; new ConfigurationParser(warnings);</span><br><span class="line">        Configuration config &#x3D; cp.parseConfiguration(configFile);</span><br><span class="line">        DefaultShellCallback callback &#x3D; new DefaultShellCallback(overwrite);</span><br><span class="line">        MyBatisGenerator myBatisGenerator &#x3D; new MyBatisGenerator(config, callback, warnings);</span><br><span class="line">        myBatisGenerator.generate(null);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            GeneratorSqlMap generator &#x3D; new GeneratorSqlMap();</span><br><span class="line">            generator.generator();</span><br><span class="line"></span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<ul>
<li>运行main可生成相应代码</li>
</ul>
</li>
</ul>
<h2 id="附录：我的代码地址"><a href="#附录：我的代码地址" class="headerlink" title="附录：我的代码地址"></a>附录：我的代码地址</h2><p><a href="https://github.com/Machine4869/MyCode/tree/master/Mybatis逆向工程/" target="_blank" rel="noopener">https://github.com/Machine4869/MyCode/tree/master/Mybatis逆向工程/</a></p>
<h2 id="一些映射-生成规则"><a href="#一些映射-生成规则" class="headerlink" title="一些映射 生成规则"></a>一些映射 生成规则</h2><ul>
<li>如表的creat_time字段 会映射成 pojo的craeteTime属性（去下划线大写）</li>
<li>user表 会映射成 User类</li>
<li>tb_user表会映射成 TbUser类</li>
</ul>
<h1 id="Mapper接口测试与使用"><a href="#Mapper接口测试与使用" class="headerlink" title="Mapper接口测试与使用"></a>Mapper接口测试与使用</h1><h2 id="（法一）采用Example进行条件查询"><a href="#（法一）采用Example进行条件查询" class="headerlink" title="（法一）采用Example进行条件查询"></a>（法一）采用Example进行条件查询</h2><p>配置：targetRuntime=”MyBatis3”</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;context id&#x3D;&quot;testTables&quot; targetRuntime&#x3D;&quot;MyBatis3&quot;&gt;</span><br></pre></td></tr></table></figure></div>


<p>常用接口</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;按id 查询</span><br><span class="line">UserselectByPrimaryKey(String id);</span><br><span class="line">&#x2F;&#x2F;按id 删除</span><br><span class="line">int deleteByPrimaryKey(String id);</span><br><span class="line">&#x2F;&#x2F;按id 更新：对象中所有字段</span><br><span class="line">int updateByPrimaryKey(User record);</span><br><span class="line">&#x2F;&#x2F;按id 更新：对象中非空字段</span><br><span class="line">int updateByPrimaryKeySelective(User record);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;插入对象 所有字段</span><br><span class="line">&#x2F;&#x2F;  :insert into user(id,username,sex....) values..</span><br><span class="line">int insert(User record);</span><br><span class="line">&#x2F;&#x2F;插入对象 非空字段</span><br><span class="line">&#x2F;&#x2F;  :insert into user(username) values..</span><br><span class="line">int insertSelective(User record);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;按条件 删除</span><br><span class="line">int deleteByExample(UserExample example);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;按条件 查询 结果集</span><br><span class="line">List&lt;User&gt; selectByExample(UserExample example);</span><br></pre></td></tr></table></figure></div>

<p>条件查询：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">    UserMapper userMapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询所有</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    UserExample userExample = null;</span></span><br><span class="line"><span class="comment">    List&lt;User&gt; userList = userMapper.selectByExample(userExample);</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//单条件查询</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    UserExample userExample = new UserExample();</span></span><br><span class="line"><span class="comment">    UserExample.Criteria criteria = userExample.createCriteria();</span></span><br><span class="line"><span class="comment">    criteria.andUsernameLike("%m%");</span></span><br><span class="line"><span class="comment">    List&lt;User&gt; userList = userMapper.selectByExample(userExample);</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//多条件查询and</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    UserExample userExample = new UserExample();</span></span><br><span class="line"><span class="comment">    UserExample.Criteria criteria = userExample.createCriteria();</span></span><br><span class="line"><span class="comment">    criteria.andUsernameLike("%m%");</span></span><br><span class="line"><span class="comment">    criteria.andSexEqualTo("女");</span></span><br><span class="line"><span class="comment">    List&lt;User&gt; userList = userMapper.selectByExample(userExample);</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//多条件查询or</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    UserExample userExample = new UserExample();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    UserExample.Criteria criteria1 = userExample.createCriteria();</span></span><br><span class="line"><span class="comment">    criteria1.andUsernameLike("%m%");</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    UserExample.Criteria criteria2 = userExample.createCriteria();</span></span><br><span class="line"><span class="comment">    criteria2.andSexEqualTo("女");</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    userExample.or(criteria1);</span></span><br><span class="line"><span class="comment">    userExample.or(criteria2);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    List&lt;User&gt; userList = userMapper.selectByExample(userExample);</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//排序</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    UserExample userExample = new UserExample();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    UserExample.Criteria criteria = userExample.createCriteria();</span></span><br><span class="line"><span class="comment">    criteria.andUsernameLike("%m%");</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    //userExample.setOrderByClause("id asc");//asc:正序排 desc:逆序排</span></span><br><span class="line"><span class="comment">    //userExample.setOrderByClause("id desc");</span></span><br><span class="line"><span class="comment">    userExample.setOrderByClause("sex asc,username asc");</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    List&lt;User&gt; userList = userMapper.selectByExample(userExample);</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//统计</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    UserExample userExample = new UserExample();</span></span><br><span class="line"><span class="comment">    UserExample.Criteria criteria = userExample.createCriteria();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    criteria.andUsernameLike("%m%");</span></span><br><span class="line"><span class="comment">    criteria.andIdBetween(1,5);//包括1和5</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    long count = userMapper.countByExample(userExample);</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="（法二）MyBatis-Dynamic-SQL-用where子句进行条件查询"><a href="#（法二）MyBatis-Dynamic-SQL-用where子句进行条件查询" class="headerlink" title="（法二）MyBatis Dynamic SQL(用where子句进行条件查询)"></a>（法二）MyBatis Dynamic SQL(用where子句进行条件查询)</h2><ol>
<li><p>概述：</p>
<ul>
<li>generator 使用为MyBatis3DynamicSQL生成代码，这些类依赖于MyBatis Dynamic SQL</li>
<li>MyBatis Dynamic SQL 是生成动态 SQL 语句的框架，可以配合为MyBatis Generator使用</li>
<li>MyBatis Dynamic SQL 使用WHERE子句（可以用任意组合的and和or来创建）进行条件查询</li>
<li>MyBatis Dynamic SQL lib下载地址</li>
</ul>
</li>
<li><p>准备工作</p>
<ul>
<li><p>jar包 ：mybatis-dynamic-sql-1.0.0.jar</p>
<ul>
<li>项目地址 ：<a href="https://github.com/mybatis/mybatis-dynamic-sql/releases" target="_blank" rel="noopener">https://github.com/mybatis/mybatis-dynamic-sql/releases</a></li>
</ul>
</li>
<li><p>配置：targetRuntime=”MyBatis3”</p>
  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;context id&#x3D;&quot;testTables&quot; targetRuntime&#x3D;&quot;MyBatis3DynamicSQL&quot;&gt;</span><br></pre></td></tr></table></figure></div>

</li>
</ul>
</li>
</ol>
<p>使用：</p>
<p>前提：import<strong>静态</strong>支持类</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import static com.machine.pro.mapper.UserDynamicSqlSupport.*;  &#x2F;&#x2F; import 自动生成的 &quot;support&quot; 类</span><br><span class="line">import static org.mybatis.dynamic.sql.SqlBuilder.*;  &#x2F;&#x2F; import MyBatis Dynamic SQL where support</span><br></pre></td></tr></table></figure></div>

<p>使用案例：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">    UserMapper userMapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * MyBatis Dynamic SQL</span></span><br><span class="line"><span class="comment">     * build():所有构建器都通过调用build()方法完成</span></span><br><span class="line"><span class="comment">     * execute():调用execute方法执行语句</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//按主键查询 仍然可用</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    User user = userMapper.selectByPrimaryKey(3);</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询所有(不用where子句)</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    List&lt;User&gt; userList = userMapper.selectByExample()</span></span><br><span class="line"><span class="comment">            .build().execute();</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//单条件查询</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    List&lt;User&gt; userList = userMapper.selectByExample()</span></span><br><span class="line"><span class="comment">            .where(sex, isEqualTo("女"))</span></span><br><span class="line"><span class="comment">            .build().execute();</span></span><br><span class="line"><span class="comment">            //如sex属性就来自import static 的支持类</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//多条件查询and</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    List&lt;User&gt; userList = userMapper.selectByExample()</span></span><br><span class="line"><span class="comment">            .where(sex, isEqualTo("女"))</span></span><br><span class="line"><span class="comment">            .and(username, isLike("%m%"))</span></span><br><span class="line"><span class="comment">            .build().execute();</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//多条件查询or</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    List&lt;User&gt; userList = userMapper.selectByExample()</span></span><br><span class="line"><span class="comment">            .where(sex, isEqualTo("女"))</span></span><br><span class="line"><span class="comment">            .or(username, isLike("%m%"))</span></span><br><span class="line"><span class="comment">            .build().execute();</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//排序:正序</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    List&lt;User&gt; userList = userMapper.selectByExample()</span></span><br><span class="line"><span class="comment">            .where(username, isLike("%m%"))</span></span><br><span class="line"><span class="comment">            .orderBy(id)</span></span><br><span class="line"><span class="comment">            .build().execute();</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//排序:逆序</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    List&lt;User&gt; userList = userMapper.selectByExample()</span></span><br><span class="line"><span class="comment">            .where(username, isLike("%m%"))</span></span><br><span class="line"><span class="comment">            .orderBy(id.descending())</span></span><br><span class="line"><span class="comment">            .build().execute();</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//排序:多字段</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    List&lt;User&gt; userList = userMapper.selectByExample()</span></span><br><span class="line"><span class="comment">            .where(username, isLike("%m%"))</span></span><br><span class="line"><span class="comment">            .orderBy(sex.descending(),username)</span></span><br><span class="line"><span class="comment">            .build().execute();</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//统计</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Long count = userMapper.countByExample()</span></span><br><span class="line"><span class="comment">            .build().execute();</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><h2 id="Mapper文件内容不覆盖而是追加"><a href="#Mapper文件内容不覆盖而是追加" class="headerlink" title="Mapper文件内容不覆盖而是追加"></a>Mapper文件内容不覆盖而是追加</h2><ul>
<li>XXXMapper.xml文件已经存在时，如果进行重新生成则mapper.xml文件内容不被覆盖而是进行内容追加，结果导致mybatis解析失败。</li>
<li>解决方法：删除原来已经生成的mapper xml文件再进行生成。<h2 id="针对oracle数据库的-Table-schema问题"><a href="#针对oracle数据库的-Table-schema问题" class="headerlink" title="针对oracle数据库的 Table schema问题"></a>针对oracle数据库的 Table schema问题</h2></li>
</ul>
]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-RequestParam加与不加的区别</title>
    <url>/2018/04/20/15326659380385/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>有两种写法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RequestMapping(&quot;&#x2F;list&quot;)  </span><br><span class="line">public String test(@RequestParam  Long parentId) &#123;  </span><br><span class="line">      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RequestMapping(&quot;&#x2F;list&quot;)  </span><br><span class="line">public String test( Long parentId) &#123;  </span><br><span class="line">      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>第一种必须带有参数,也就是说你直接输入localhost:8080/list 会报错 不会执行方法</p>
<p>第二种 可带参数也可不带参数  就是说你输入  localhost:8080/list  以及 localhost:8080/list?parentId=?  方法都能执行</p>
<p>当然你也可以设置 @RequestParam 里面的required为false(默认为true 代表必须带参数) 这样就跟第二种是一样的了</p>
<p>如下:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RequestMapping(&quot;&#x2F;list&quot;)  </span><br><span class="line">public String test(@RequestParam(required&#x3D;false)  Long parentId) &#123;  </span><br><span class="line">    .....  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>【实现】用户认证：验证码</title>
    <url>/2018/04/20/15326658481209/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[toc]</p>
<h1 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hw.utils.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.Color;</span><br><span class="line"><span class="keyword">import</span> java.awt.Font;</span><br><span class="line"><span class="keyword">import</span> java.awt.Graphics;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletOutputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成验证码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidateCode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> width = <span class="number">70</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> height = <span class="number">35</span>;</span><br><span class="line">    <span class="keyword">private</span> Random random = <span class="keyword">new</span> Random();</span><br><span class="line">    <span class="keyword">private</span> StringBuilder code = <span class="keyword">new</span> StringBuilder(<span class="number">4</span>);</span><br><span class="line">    <span class="comment">//创建一张有背景色的图片</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> BufferedImage <span class="title">createImage</span><span class="params">()</span></span>&#123;</span><br><span class="line">        BufferedImage img = <span class="keyword">new</span> BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);</span><br><span class="line">        Graphics g = img.getGraphics();</span><br><span class="line">        g.setColor(<span class="keyword">new</span> Color(<span class="number">240</span>,<span class="number">240</span>,<span class="number">240</span>));</span><br><span class="line">        g.fillRect(<span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line">        <span class="keyword">return</span> img;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//此方法必须在getImage方法之后调用</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getCode</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.code.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获得验证码图片</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> BufferedImage <span class="title">getImage</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//获得有背景色的图片</span></span><br><span class="line">        BufferedImage img = <span class="keyword">this</span>.createImage();</span><br><span class="line">        <span class="comment">//绘制字母：颜色随机，字体大小，字体，字号随机，字母随机</span></span><br><span class="line">        Graphics g = img.getGraphics();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">            String str = <span class="keyword">this</span>.getRandomString();<span class="comment">//得到随机字母</span></span><br><span class="line">            <span class="keyword">this</span>.code.append(str);</span><br><span class="line">            g.setFont(<span class="keyword">this</span>.getRandomFont());<span class="comment">//得到随机字体</span></span><br><span class="line">            g.setColor(<span class="keyword">this</span>.getRandomColor());<span class="comment">//得到随机颜色</span></span><br><span class="line">            g.drawString(str, width/<span class="number">4</span>*i, height-<span class="number">5</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//绘制干扰线</span></span><br><span class="line">        <span class="keyword">this</span>.drawLines(img);</span><br><span class="line">        <span class="keyword">return</span> img;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绘制干扰线</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawLines</span><span class="params">(BufferedImage image)</span></span>&#123;</span><br><span class="line">        Graphics g = image.getGraphics();</span><br><span class="line">        g.setColor(Color.BLACK);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> x1 = random.nextInt(<span class="keyword">this</span>.width);</span><br><span class="line">            <span class="keyword">int</span> y1 = random.nextInt(<span class="keyword">this</span>.height);</span><br><span class="line">            <span class="keyword">int</span> x2 = random.nextInt(<span class="keyword">this</span>.width);</span><br><span class="line">            <span class="keyword">int</span> y2 = random.nextInt(<span class="keyword">this</span>.height);</span><br><span class="line">            g.drawLine(x1, y1, x2, y2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> Color <span class="title">getRandomColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> r = <span class="keyword">this</span>.random.nextInt(<span class="number">256</span>);<span class="comment">//0-255</span></span><br><span class="line">        <span class="keyword">int</span> g = <span class="keyword">this</span>.random.nextInt(<span class="number">256</span>);</span><br><span class="line">        <span class="keyword">int</span> b = <span class="keyword">this</span>.random.nextInt(<span class="number">256</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Color(r, g, b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String[] fontNames = &#123;<span class="string">"宋体"</span>,<span class="string">"华文楷体"</span>,<span class="string">"黑体"</span>,<span class="string">"华文新魏"</span>,<span class="string">"华文隶书"</span>,<span class="string">"微软雅黑"</span>,<span class="string">"楷体_GB2312"</span>&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] fontSizes = &#123;<span class="number">24</span>,<span class="number">25</span>,<span class="number">26</span>,<span class="number">27</span>,<span class="number">28</span>&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> Font <span class="title">getRandomFont</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="keyword">this</span>.random.nextInt(<span class="keyword">this</span>.fontNames.length);<span class="comment">//0-6</span></span><br><span class="line">        String name = <span class="keyword">this</span>.fontNames[index];</span><br><span class="line">        <span class="keyword">int</span> style = <span class="keyword">this</span>.random.nextInt(<span class="number">4</span>);</span><br><span class="line">        index = <span class="keyword">this</span>.random.nextInt(<span class="keyword">this</span>.fontSizes.length);</span><br><span class="line">        <span class="keyword">int</span> size = <span class="keyword">this</span>.fontSizes[index];</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Font(name, style, size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String codes = <span class="string">"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getRandomString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = random.nextInt(<span class="keyword">this</span>.codes.length());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.codes.charAt(index)+<span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存图片</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">saveImage</span><span class="params">(BufferedImage im,OutputStream output)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        ImageIO.write(im, <span class="string">"JPEG"</span>, output);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将图片输出到页面，并返回验证码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">outputImage</span><span class="params">(HttpServletResponse response)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">        response.setContentType(<span class="string">"image/jpeg"</span>);</span><br><span class="line">        ServletOutputStream servletOutputStream = response.getOutputStream();</span><br><span class="line">        ValidateCode v = <span class="keyword">new</span> ValidateCode();</span><br><span class="line">        BufferedImage img = v.getImage();</span><br><span class="line">        <span class="comment">//System.out.println(v.getCode());//getCode必须在getImage后面</span></span><br><span class="line">        v.saveImage(img,servletOutputStream);</span><br><span class="line">        servletOutputStream.flush();</span><br><span class="line">        servletOutputStream.close();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> v.getCode();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    public static void main(String[] args) throws Exception &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        //使用说明</span></span><br><span class="line"><span class="comment">        ValidateCode v = new ValidateCode();</span></span><br><span class="line"><span class="comment">        BufferedImage img = v.getImage();</span></span><br><span class="line"><span class="comment">        System.out.println(v.getCode());//getCode必须在getImage后面</span></span><br><span class="line"><span class="comment">        ValidateCode.saveImage(img, new FileOutputStream("/machine/a.jpg"));</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="验证码输出到页面"><a href="#验证码输出到页面" class="headerlink" title="验证码输出到页面"></a>验证码输出到页面</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RequestMapping(&quot;&#x2F;validatecode&quot;)</span><br><span class="line">public String validatecode(HttpServletResponse response,</span><br><span class="line">                       HttpSession session) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;向页面输出验证码，并得到验证码</span><br><span class="line">    String validateCode &#x3D; ValidateCode.outputImage(response);</span><br><span class="line">    &#x2F;&#x2F;把验证码放到session域</span><br><span class="line">    session.setAttribute(&quot;validateCode&quot;,validateCode);</span><br><span class="line"></span><br><span class="line">    return &quot;&#x2F;base&#x2F;login&quot;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="页面请求验证码"><a href="#页面请求验证码" class="headerlink" title="页面请求验证码"></a>页面请求验证码</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;TR&gt;</span><br><span class="line">	&lt;TD&gt;验证码：&lt;&#x2F;TD&gt;</span><br><span class="line">	&lt;TD&gt;</span><br><span class="line">	    &lt;input id&#x3D;&quot;randomcode&quot; name&#x3D;&quot;randomcode&quot; size&#x3D;&quot;8&quot; &#x2F;&gt; </span><br><span class="line">	    &lt;img id&#x3D;&quot;randomcode_img&quot; src&#x3D;&quot;$&#123;baseurl&#125;login&#x2F;validatecode.action&quot; alt&#x3D;&quot;&quot;</span><br><span class="line">		width&#x3D;&quot;56&quot; height&#x3D;&quot;20&quot; align&#x3D;&#39;absMiddle&#39; &#x2F;&gt; &lt;a</span><br><span class="line">		href&#x3D;javascript:randomcode_refresh()&gt;刷新&lt;&#x2F;a&gt;&lt;&#x2F;TD&gt;</span><br><span class="line">&lt;&#x2F;TR&gt;</span><br></pre></td></tr></table></figure></div>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;刷新验证码</span><br><span class="line">&#x2F;&#x2F;实现思路，重新给图片的src赋值，后边加时间，防止缓存 </span><br><span class="line">function randomcode_refresh() &#123;</span><br><span class="line">	$(&quot;#randomcode_img&quot;).attr(&#39;src&#39;,</span><br><span class="line">			&#39;$&#123;baseurl&#125;login&#x2F;validatecode.action?time&#39; + new Date().getTime());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="认证校验"><a href="#认证校验" class="headerlink" title="认证校验"></a>认证校验</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;登录表单提交</span><br><span class="line">@RequestMapping(&quot;&#x2F;loginsubmit&quot;)</span><br><span class="line">public String loginformsubmit(HttpSession session) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;从session获取验证码</span><br><span class="line">    String validateCode_session &#x3D; (String)session.getAttribute(&quot;validateCode&quot;);</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;...进行登录校验</span><br><span class="line">    </span><br><span class="line">    return &quot;&#x2F;base&#x2F;first&quot;;&#x2F;&#x2F;首页</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>


]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>用Mybatis逆向工程时， 如何实现只获取某些特定字段</title>
    <url>/2018/04/20/15326662288873/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[TOC]</p>
<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><ul>
<li>mybatis逆向工程XXMapper.selectXX 方法会查询表所有字段，但是有时我们只需要某些字段    </li>
<li>比如页面只需要json返回user表的id和name,但如果直接将XXMapper.selectXX查询的结果转化json返回，会不安全（里面还有password这些不想要页面看到的信息）</li>
<li>但是单表查询不想自己写sql和dao…</li>
</ul>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><ul>
<li><p>在service层 只取需要的字段，封装到新对象，返回给action…</p>
  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class UserServiceImpl implements UserService&#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private SysUserMapper sysUserMapper;</span><br><span class="line">    </span><br><span class="line">    public List&lt;SysUser&gt; findSysUserList()&#123;</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F;从数据库查到的 含全部字段的 pojo</span><br><span class="line">        List&lt;SysUser&gt; old_sysUserList &#x3D; sysUserMapper.findSysUserList()</span><br><span class="line">        &#x2F;&#x2F;只取了需要的字段，封装到一个新的对象里</span><br><span class="line">        List&lt;SysUser&gt; my_sysUserList &#x3D; (List&lt;SysUser&gt;)PojoUtils.convertToPojoByAddAttr(sysUserList,&quot;name,id&quot;);</span><br><span class="line">        &#x2F;&#x2F;返回的对象 只有name id 两个字段有值</span><br><span class="line">        return my_sysUserList;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>考虑到代码复用，将pojo转换过程封装为了工具类，这里用到反射机制。工具类代码如下</p>
  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package hw.utils;</span><br><span class="line"></span><br><span class="line">import java.lang.reflect.Constructor;</span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public class PojoUtils &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 描述: - 解决Mybatis逆向工程不能查特定字段的问题</span><br><span class="line">     *      - 去掉不需要的字段的值</span><br><span class="line">     * 返回: 新的pojo，只含要求字段</span><br><span class="line">     *&#x2F;</span><br><span class="line">    &#x2F;&#x2F;返回有特定字段的类(SysUser)。输入有全部参数的实例(sysUser)，和需要的属性名字&quot;name&quot;</span><br><span class="line">    public static Object convertToPojoByAddAttr(Object old_pojo, String attrNames) throws Exception&#123;</span><br><span class="line"></span><br><span class="line">        Class clazz &#x3D; old_pojo.getClass();</span><br><span class="line">        &#x2F;&#x2F;创建新pojo</span><br><span class="line">        Constructor c &#x3D; clazz.getConstructor(null);&#x2F;&#x2F;取得无参构造函数</span><br><span class="line">        Object new_pojo &#x3D;  c.newInstance(null);&#x2F;&#x2F;创建对象</span><br><span class="line"></span><br><span class="line">        String[] attrs &#x3D; attrNames.split(&quot;,&quot;);</span><br><span class="line"></span><br><span class="line">        for(String attr_name: attrs)&#123;&#x2F;&#x2F;attr是每一个字段的名字</span><br><span class="line"></span><br><span class="line">            String methodName &#x3D; toMethodName(&quot;get&quot;,attr_name);&#x2F;&#x2F;name变getName</span><br><span class="line"></span><br><span class="line">            Method method &#x3D; clazz.getMethod(methodName);&#x2F;&#x2F;get方法</span><br><span class="line">            Object attr_value &#x3D; method.invoke(old_pojo);&#x2F;&#x2F;得到属性的值</span><br><span class="line">            Class&lt;?&gt; returnType &#x3D; method.getReturnType();&#x2F;&#x2F;属性参数类型</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F;获得set方法</span><br><span class="line">            methodName &#x3D; toMethodName(&quot;set&quot;,attr_name);&#x2F;&#x2F;name变setName</span><br><span class="line">            method &#x3D; clazz.getMethod(methodName,returnType);&#x2F;&#x2F;set方法</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F;执行set方法给新pojo注值</span><br><span class="line">            method.invoke(new_pojo,attr_value);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return new_pojo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     *</span><br><span class="line">     * 同上,只是针对查询结果为List的情况</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static List&lt;?&gt; convertToPojoByAddAttr(List&lt;?&gt; old_pojo_list, String attrNames) throws Exception&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Object&gt; new_pojo_list &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">        for(Object old_pojo: old_pojo_list)&#123;</span><br><span class="line">            Object new_pojo &#x3D; convertToPojoByAddAttr(old_pojo,attrNames);</span><br><span class="line">            new_pojo_list.add(new_pojo);</span><br><span class="line">        &#125;</span><br><span class="line">        return new_pojo_list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;name 变成 getName&#x2F;setName   toMethodName(&quot;set&quot;,&quot;name&quot;);</span><br><span class="line">    private static String toMethodName(String method,String attr)&#123;</span><br><span class="line"></span><br><span class="line">        char first_char &#x3D; Character.toUpperCase(attr.charAt(0));</span><br><span class="line">        String rest_char &#x3D; attr.substring(1);</span><br><span class="line">        StringBuilder stringBuilder &#x3D; new StringBuilder().append(method).append(first_char).append(rest_char);</span><br><span class="line"></span><br><span class="line">        return stringBuilder.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



</li>
</ul>
]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>关于H5的canvas跨域问题</title>
    <url>/2018/04/20/15326662997127/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><pre><code>canvas不支持跨域，本地图片和远程图片都不能操作</code></pre><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><pre><code>方案1： 把代码和图片放服务器跑就不存在跨域问题
方案2：使用filereader的URL把图片转换为base64编码，让src = &quot;这串编码&quot;，再放入canvas。
方案3（不推荐）：改浏览器启动参数，以谷歌浏览器为例。</code></pre>]]></content>
      <categories>
        <category>Web前端</category>
      </categories>
      <tags>
        <tag>Web前端</tag>
      </tags>
  </entry>
  <entry>
    <title>基于H5实现图像处理：灰度化和二值化</title>
    <url>/2018/04/20/15326661157572/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[toc] </p>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><pre><code>1. 利用h5的canvas画布实现图片绘制
2. 灰度化和二值化算法参考自
    https://www.cnblogs.com/rushoooooo/articles/2366154.html
3. 前置知识点： js, canvas</code></pre><h1 id="效果概览"><a href="#效果概览" class="headerlink" title="效果概览"></a>效果概览</h1><p><a href="/2018/04/20/15326661157572/2018041820054467.png" data-fancybox="group" data-caption="2018041820054467" class="fancybox"><img alt="2018041820054467" title="2018041820054467" data-src="/2018/04/20/15326661157572/2018041820054467.png" class="lazyload"></a><br><a href="/2018/04/20/15326661157572/20180418200602949.png" data-fancybox="group" data-caption="20180418200602949" class="fancybox"><img alt="20180418200602949" title="20180418200602949" data-src="/2018/04/20/15326661157572/20180418200602949.png" class="lazyload"></a><br><a href="/2018/04/20/15326661157572/20180418200658350.png" data-fancybox="group" data-caption="20180418200658350" class="fancybox"><img alt="20180418200658350" title="20180418200658350" data-src="/2018/04/20/15326661157572/20180418200658350.png" class="lazyload"></a></p>
<h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"灰度化"</span> <span class="attr">onclick</span>=<span class="string">"javascript:ProcessToGrayImage();"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"二值化"</span> <span class="attr">onclick</span>=<span class="string">"javascript:OTSUAlgorithm();"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"myCanvas"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- demo1. 创建画布 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> img=<span class="keyword">new</span> Image();</span></span><br><span class="line"><span class="actionscript">  <span class="comment">//解决跨域问题</span></span></span><br><span class="line"><span class="actionscript">  img.crossOrigin = <span class="string">"Anonymous"</span>;</span></span><br><span class="line"><span class="actionscript">  img.src=<span class="string">"http://img2.imgtn.bdimg.com/it/u=626341007,68367128&amp;fm=214&amp;gp=0.jpg"</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> canvas;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> ctx;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">//图片加载完成触发</span></span></span><br><span class="line"><span class="actionscript">  img.onload = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123; </span></span><br><span class="line"><span class="javascript">      canvas=<span class="built_in">document</span>.getElementById(<span class="string">"myCanvas"</span>);</span></span><br><span class="line">      canvas.width = img.width;  </span><br><span class="line">      canvas.height = img.height;  </span><br><span class="line"><span class="actionscript">      ctx=canvas.getContext(<span class="string">"2d"</span>);</span></span><br><span class="line">      ctx.drawImage(img,0,0,img.width,img.height);</span><br><span class="line">  &#125;  </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- demo2: 彩色图像灰度化 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="actionscript">  <span class="comment">//彩色图像灰度化</span></span></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">ProcessToGrayImage</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//取得图像数据</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> imgData=ctx.getImageData(<span class="number">10</span>,<span class="number">10</span>,<span class="number">50</span>,<span class="number">50</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> canvasData = ctx.getImageData(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//这个循环是取得图像的每一个点，在计算灰度后将灰度设置给原图像</span></span></span><br><span class="line">    </span><br><span class="line"><span class="actionscript">    <span class="keyword">for</span> (<span class="keyword">var</span> x = <span class="number">0</span>; x &lt; canvasData.width; x++) &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//alert("x="+x);</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">for</span> (<span class="keyword">var</span> y = <span class="number">0</span>; y &lt; canvasData.height; y++) &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//alert("y="+y);</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// Index of the pixel in the array</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> idx = (x + y * canvas.width) * <span class="number">4</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">// The RGB values</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> r = canvasData.data[idx + <span class="number">0</span>];</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> g = canvasData.data[idx + <span class="number">1</span>];</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> b = canvasData.data[idx + <span class="number">2</span>];</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//更新图像数据</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> gray = CalculateGrayValue(r , g , b);</span></span><br><span class="line">            canvasData.data[idx + 0] = gray;</span><br><span class="line">            canvasData.data[idx + 1] = gray;</span><br><span class="line">            canvasData.data[idx + 2] = gray;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">      ctx.putImageData(canvasData, 0, 0);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line"><span class="actionscript">  <span class="comment">//计算图像的灰度值,公式为：Gray = R*0.299 + G*0.587 + B*0.114</span></span></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">CalculateGrayValue</span><span class="params">(rValue,gValue,bValue)</span></span>&#123;</span></span><br><span class="line"><span class="javascript">     <span class="keyword">return</span> <span class="built_in">parseInt</span>(rValue * <span class="number">0.299</span> + gValue * <span class="number">0.587</span> + bValue * <span class="number">0.114</span>);</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- demo3: 二值化--&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">//一维OTSU图像处理算法</span></span></span><br><span class="line"><span class="actionscript"> <span class="function"><span class="keyword">function</span> <span class="title">OTSUAlgorithm</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">   <span class="keyword">var</span> m_pFstdHistogram = <span class="keyword">new</span> <span class="built_in">Array</span>();<span class="comment">//表示灰度值的分布点概率</span></span></span><br><span class="line"><span class="javascript">   <span class="keyword">var</span> m_pFGrayAccu = <span class="keyword">new</span> <span class="built_in">Array</span>();<span class="comment">//其中每一个值等于m_pFstdHistogram中从0到当前下标值的和</span></span></span><br><span class="line"><span class="javascript">   <span class="keyword">var</span> m_pFGrayAve = <span class="keyword">new</span> <span class="built_in">Array</span>();<span class="comment">//其中每一值等于m_pFstdHistogram中从0到当前指定下标值*对应的下标之和</span></span></span><br><span class="line"><span class="actionscript">   <span class="keyword">var</span> m_pAverage=<span class="number">0</span>;<span class="comment">//值为m_pFstdHistogram【256】中每一点的分布概率*当前下标之和</span></span></span><br><span class="line"><span class="javascript">   <span class="keyword">var</span> m_pHistogram = <span class="keyword">new</span> <span class="built_in">Array</span>();<span class="comment">//灰度直方图</span></span></span><br><span class="line"><span class="actionscript">   <span class="keyword">var</span> i,j;</span></span><br><span class="line"><span class="actionscript">   <span class="keyword">var</span> temp=<span class="number">0</span>,fMax=<span class="number">0</span>;<span class="comment">//定义一个临时变量和一个最大类间方差的值</span></span></span><br><span class="line"><span class="actionscript">   <span class="keyword">var</span> nThresh = <span class="number">0</span>;<span class="comment">//最优阀值</span></span></span><br><span class="line"><span class="actionscript">   <span class="comment">//获取灰度图像的信息</span></span></span><br><span class="line"><span class="actionscript">   <span class="keyword">var</span> imageInfo = GetGrayImageInfo();</span></span><br><span class="line"><span class="actionscript">   <span class="keyword">if</span>(imageInfo == <span class="literal">null</span>)&#123;</span></span><br><span class="line"><span class="javascript">     <span class="built_in">window</span>.alert(<span class="string">"图像还没有转化为灰度图像！"</span>);</span></span><br><span class="line"><span class="actionscript">     <span class="keyword">return</span>;</span></span><br><span class="line">   &#125;</span><br><span class="line"><span class="actionscript">   <span class="comment">//初始化各项参数</span></span></span><br><span class="line">   for(i=0; i&lt;256; i++)&#123;</span><br><span class="line">     m_pFstdHistogram[i] = 0;</span><br><span class="line">     m_pFGrayAccu[i] = 0;</span><br><span class="line">     m_pFGrayAve[i] = 0;</span><br><span class="line">     m_pHistogram[i] = 0;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="actionscript">   <span class="comment">//获取图像信息</span></span></span><br><span class="line"><span class="actionscript">   <span class="keyword">var</span> canvasData = imageInfo[<span class="number">0</span>];</span></span><br><span class="line"><span class="actionscript">   <span class="comment">//获取图像的像素</span></span></span><br><span class="line"><span class="actionscript">   <span class="keyword">var</span> pixels = canvasData.data;</span></span><br><span class="line"><span class="actionscript">   <span class="comment">//下面统计图像的灰度分布信息</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">   for(i=0; i<span class="tag">&lt;<span class="name">pixels.length;</span> <span class="attr">i</span>+=<span class="string">4)&#123;</span></span></span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">//获取r的像素值，因为灰度图像，r=g=b，所以取第一个即可</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> r = pixels[i];</span></span><br><span class="line">      m_pHistogram[r]++;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="actionscript">   <span class="comment">//下面计算每一个灰度点在图像中出现的概率</span></span></span><br><span class="line"><span class="actionscript">   <span class="keyword">var</span> size = canvasData.width * canvasData.height;</span></span><br><span class="line">   for(i=0; i&lt;256; i++)&#123;</span><br><span class="line">      m_pFstdHistogram[i] = m_pHistogram[i] / size;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="actionscript">   <span class="comment">//下面开始计算m_pFGrayAccu和m_pFGrayAve和m_pAverage的值</span></span></span><br><span class="line">   for(i=0; i&lt;256; i++)&#123;</span><br><span class="line">      for(j=0; j&lt;=i; j++)&#123;</span><br><span class="line"><span class="actionscript">        <span class="comment">//计算m_pFGaryAccu[256]</span></span></span><br><span class="line">    m_pFGrayAccu[i] += m_pFstdHistogram[j];</span><br><span class="line"><span class="actionscript">    <span class="comment">//计算m_pFGrayAve[256]</span></span></span><br><span class="line">    m_pFGrayAve[i] += j * m_pFstdHistogram[j];</span><br><span class="line">      &#125;</span><br><span class="line"><span class="actionscript">      <span class="comment">//计算平均值</span></span></span><br><span class="line">    m_pAverage += i * m_pFstdHistogram[i];</span><br><span class="line">   &#125;</span><br><span class="line"><span class="actionscript">   <span class="comment">//下面开始就算OSTU的值，从0-255个值中分别计算ostu并寻找出最大值作为分割阀值</span></span></span><br><span class="line">   for (i = 0 ; i &lt; 256 ; i++)&#123;</span><br><span class="line">    temp = (m_pAverage * m_pFGrayAccu[i] - m_pFGrayAve[i]) </span><br><span class="line">         * (m_pAverage * m_pFGrayAccu[i] - m_pFGrayAve[i]) </span><br><span class="line">         / (m_pFGrayAccu[i] * (1 - m_pFGrayAccu[i]));</span><br><span class="line">    if (temp &gt; fMax)</span><br><span class="line">    &#123;</span><br><span class="line">      fMax = temp;</span><br><span class="line">      nThresh = i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="actionscript">   <span class="comment">//下面执行二值化过程 </span></span></span><br><span class="line">   for(i=0; i&lt;canvasData.width; i++)&#123;</span><br><span class="line">      for(j=0; j&lt;canvasData.height; j++)&#123;</span><br><span class="line"><span class="actionscript">         <span class="comment">//取得每一点的位置</span></span></span><br><span class="line"><span class="actionscript">         <span class="keyword">var</span> ids = (i + j*canvasData.width)*<span class="number">4</span>;</span></span><br><span class="line"><span class="actionscript">         <span class="comment">//取得像素的R分量的值</span></span></span><br><span class="line"><span class="actionscript">         <span class="keyword">var</span> r = canvasData.data[ids];</span></span><br><span class="line"><span class="actionscript">         <span class="comment">//与阀值进行比较，如果小于阀值，那么将改点置为0，否则置为255</span></span></span><br><span class="line"><span class="actionscript">         <span class="keyword">var</span> gray = r&gt;nThresh?<span class="number">255</span>:<span class="number">0</span>;</span></span><br><span class="line">         canvasData.data[ids+0] = gray;</span><br><span class="line">         canvasData.data[ids+1] = gray;</span><br><span class="line">         canvasData.data[ids+2] = gray;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="actionscript">   <span class="comment">//显示二值化图像</span></span></span><br><span class="line"><span class="javascript">   <span class="keyword">var</span> newImage = <span class="built_in">document</span>.getElementById(<span class="string">'myCanvas'</span>).getContext(<span class="string">'2d'</span>);</span></span><br><span class="line">   newImage.putImageData(canvasData,0,0);</span><br><span class="line"> &#125;  </span><br><span class="line"> </span><br><span class="line"><span class="actionscript"> <span class="comment">//获取图像的灰度图像的信息</span></span></span><br><span class="line"><span class="actionscript"> <span class="function"><span class="keyword">function</span> <span class="title">GetGrayImageInfo</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'myCanvas'</span>);</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>);</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> canvasData = ctx.getImageData(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height);</span></span><br><span class="line">  if(canvasData.data.length==0)&#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> <span class="literal">null</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="actionscript">  <span class="keyword">return</span> [canvasData,ctx];</span></span><br><span class="line"> &#125;</span><br><span class="line"><span class="actionscript"> <span class="comment">//下面对灰度图像进行处理，将目标信息分割出来</span></span></span><br><span class="line"><span class="actionscript"> <span class="function"><span class="keyword">function</span> <span class="title">DividedTarget</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">   <span class="comment">//读取二值化图像信息</span></span></span><br><span class="line"><span class="javascript">   <span class="keyword">var</span> imageInfo = <span class="built_in">document</span>.getElementById(<span class="string">'myCanvasThreshold'</span>);</span></span><br><span class="line"><span class="actionscript">   <span class="keyword">if</span>(imageInfo == <span class="literal">null</span>)&#123;</span></span><br><span class="line"><span class="javascript">     <span class="built_in">window</span>.alert(<span class="string">"没有发现二值化图像信息！"</span>);</span></span><br><span class="line"><span class="actionscript">     <span class="keyword">return</span>;</span></span><br><span class="line">   &#125;</span><br><span class="line"><span class="actionscript">   <span class="comment">//取得上下文</span></span></span><br><span class="line"><span class="actionscript">   <span class="keyword">var</span> ctx = imageInfo.getContext(<span class="string">'2d'</span>);</span></span><br><span class="line"><span class="actionscript">   <span class="comment">//获取图像数据</span></span></span><br><span class="line"><span class="actionscript">   <span class="keyword">var</span> canvasData = imageInfo.getImageData(<span class="number">0</span>, <span class="number">0</span>, ctx.width, ctx.height);</span></span><br><span class="line"><span class="actionscript">   <span class="keyword">var</span> newVanvasData = canvasData;</span></span><br><span class="line"><span class="actionscript">   <span class="comment">//取得图像的宽和高</span></span></span><br><span class="line"><span class="actionscript">   <span class="keyword">var</span> width = canvasData.width;</span></span><br><span class="line"><span class="actionscript">   <span class="keyword">var</span> height = canvasData.height;</span></span><br><span class="line"><span class="actionscript">   <span class="comment">//算法开始</span></span></span><br><span class="line"><span class="actionscript">   <span class="keyword">var</span> cursor = <span class="number">2</span>;</span></span><br><span class="line"><span class="actionscript">   <span class="keyword">for</span>(<span class="keyword">var</span> x=<span class="number">0</span>; x&lt;width; x++)&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">for</span>(<span class="keyword">var</span> y=<span class="number">0</span>; y&lt;height; y++)&#123;</span></span><br><span class="line"><span class="actionscript">         <span class="comment">//取得每一点的位置</span></span></span><br><span class="line"><span class="actionscript">         <span class="keyword">var</span> ids = (x + y*canvasData.width)*<span class="number">4</span>;</span></span><br><span class="line"><span class="actionscript">         <span class="comment">//取得像素的R分量的值</span></span></span><br><span class="line"><span class="actionscript">         <span class="keyword">var</span> r = canvasData.data[ids];</span></span><br><span class="line"><span class="actionscript">         <span class="comment">//如果是目标点</span></span></span><br><span class="line">         if(r==0)&#123;</span><br><span class="line">            </span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line"> &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>


]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>linux-基于Systemd注册服务</title>
    <url>/2018/04/18/15326635279685/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[toc]</p>
<h1 id="基于Systemd注册服务"><a href="#基于Systemd注册服务" class="headerlink" title="基于Systemd注册服务"></a>基于Systemd注册服务</h1><p><strong>注册</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. cd &#x2F;etc&#x2F;systemd&#x2F;system</span><br><span class="line">2. 新建： vim bootdo.service</span><br></pre></td></tr></table></figure></div>

<p>bootdo.service内容如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description&#x3D;machine-bootdo</span><br><span class="line">After&#x3D;syslog.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart&#x3D; &#x2F;usr&#x2F;bin&#x2F;java -jar &#x2F;home&#x2F;machine&#x2F;project&#x2F;bootdo-1.6.9.jar</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure></div>

<p>说明： </p>
<p>​   Description：服务的名字</p>
<p>​   ExecStart ：执行的操作</p>
<p>开启</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo systemctl start machine-bootdo</span><br></pre></td></tr></table></figure></div>

<p>查看端口是否开放</p>
<p>访问</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">代码里配置的server 默认localhost ，访问时只需要访问【虚拟机的地址：端口号】就可以</span><br><span class="line">http:&#x2F;&#x2F;10.211.55.6:8080&#x2F;</span><br></pre></td></tr></table></figure></div>

<p><strong>Systemd常用操作</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 开启服务：</span><br><span class="line">sudo systemctl start machine-bootdo</span><br><span class="line"># 停止服务</span><br><span class="line">sudo systemctl stop machine-bootdo</span><br><span class="line"># 服务状态</span><br><span class="line">sudo systemctl status machine-bootdo</span><br><span class="line"># 开机启动</span><br><span class="line">sudo systemctl enable machine-bootdo</span><br><span class="line"># 项目日志</span><br><span class="line">journalctl -u machine-bootdo</span><br></pre></td></tr></table></figure></div>



]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>【项目管理利器——maven】笔记</title>
    <url>/2018/04/18/15326632899731/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>以下内容笔记来自慕课网视频《项目管理利器——maven》<br>笔记参考：<a href="https://blog.csdn.net/qq_33547950/article/details/51865451" target="_blank" rel="noopener">https://blog.csdn.net/qq_33547950/article/details/51865451</a></p>
</blockquote>
<p>[toc]</p>
<h1 id="第一章-课程概y述"><a href="#第一章-课程概y述" class="headerlink" title="第一章 课程概y述"></a>第一章 课程概y述</h1><h1 id="第二章-maven快速入门"><a href="#第二章-maven快速入门" class="headerlink" title="第二章 maven快速入门"></a>第二章 maven快速入门</h1><h2 id="2-1-maven介绍及环境搭建"><a href="#2-1-maven介绍及环境搭建" class="headerlink" title="2-1 maven介绍及环境搭建"></a>2-1 maven介绍及环境搭建</h2><ul>
<li><p>maven介绍</p>
<blockquote>
<p>Maven是基于项目对象模型（POM）,可以通过一小段描述信息来管理项目的构建、报告和文档的软件项目管理工具。</p>
</blockquote>
</li>
<li><p>环境搭建</p>
<p>  1.下载maven并解压</p>
<blockquote>
<p><a href="http://maven.apache.org/download.cgi.apache-maven-3.5.2-bin.zip" target="_blank" rel="noopener">http://maven.apache.org/download.cgi.apache-maven-3.5.2-bin.zip</a></p>
</blockquote>
<p>  2.maven目录结构</p>
<blockquote>
<p>bin:包含mvn的运行脚本，其中m2.conf是配置文件<br>boot:包含一个类加载器的框架，maven使用它来加载自己的类库。<br>conf:配置文件目录，经常用到的settings.xml。</p>
</blockquote>
<p>  3.配置环境变量</p>
<blockquote>
<p>(1)新建系统变量，变量名M2_HOME，变量值指向maven的安装目录xx\maven。<br>(2)修改Path，在变量值中添加%M2_HOME%\bin。<br>(3)验证是否配置成功，打开命令行界面，输入mvn -v，可以通过此命令查看maven的版本号、java的版本号，以及系统的一些信息。</p>
</blockquote>
</li>
</ul>
<h2 id="2-2-第一个maven案例helloword"><a href="#2-2-第一个maven案例helloword" class="headerlink" title="2-2 第一个maven案例helloword"></a>2-2 第一个maven案例helloword</h2><ul>
<li><p>maven项目的目录结构</p>
<blockquote>
<p>Src.main.java.(package)<br>项目源代码<br>Src.test.java.(package)<br>项目的测试文件<br>src.resource<br>存放资源文件的目录    </p>
</blockquote>
</li>
<li><p>创建代码文件</p>
</li>
</ul>
<p><strong>HelloWorld.java</strong>(保存在maven01\src\main\java\包名)</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.imooc.maven01.model;</span><br><span class="line">public class HelloWorld &#123;</span><br><span class="line">   public String sayHello()&#123;</span><br><span class="line">       return &quot;Hello World!&quot;;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>HelloWorldTest.java</strong>(保存在maven01\src\test\java\包名)</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.imooc.maven01.model;</span><br><span class="line">import org.junit.*;</span><br><span class="line">import org.junit.Assert.*;</span><br><span class="line">public class HelloWorldTest&#123;</span><br><span class="line">   @Test</span><br><span class="line">   public void testHello()&#123;</span><br><span class="line">       Assert.assertEquals(&quot;Hello World!&quot;,new HelloWorld);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>pom.xml</strong>(保存在项目根目录中)</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot;</span><br><span class="line">xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0</span><br><span class="line">http:&#x2F;&#x2F;maven.apache.org&#x2F;maven-v4_0_0.xsd&quot;&gt;</span><br><span class="line">   &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line">   &lt;!--项目包名--&gt;</span><br><span class="line">   &lt;groupId&gt;com.imooc.maven01&lt;&#x2F;groupId&gt;</span><br><span class="line">   &lt;!--项目模块名--&gt;</span><br><span class="line">   &lt;artifactId&gt;maven01-model&lt;&#x2F;artifactId&gt;</span><br><span class="line">   &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line"> </span><br><span class="line">   &lt;dependencies&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;junit&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;junit&lt;&#x2F;artifactId&gt;</span><br><span class="line">           &lt;version&gt;4.10&lt;&#x2F;version&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br><span class="line">   &lt;&#x2F;dependencies&gt;</span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>编译项目</li>
</ul>
<blockquote>
<p>(1)在命令行界面进入项目根目录执行命令mvn compile，显示BUILD SUCCESS表示编译成功。<br>(2)输入mvn test测试命令,<br>(3)在项目根目录下会自动生成target文件夹，其中classes文件夹存放编译后的二进制.class文件，surefire-reports文件夹存放测试报告 。<br>(4)在命令行界面，项目根目录下，输入mvn package，会在target文件夹中生成项目的jar包。    </p>
</blockquote>
<h1 id="第三章-maven核心知识"><a href="#第三章-maven核心知识" class="headerlink" title="第三章 maven核心知识"></a>第三章 maven核心知识</h1><h2 id="3-1-常用的构建命令"><a href="#3-1-常用的构建命令" class="headerlink" title="3-1 常用的构建命令"></a>3-1 常用的构建命令</h2><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>mvn -v</td>
<td>查看maven版本</td>
</tr>
<tr>
<td>mvn compile</td>
<td>编译</td>
</tr>
<tr>
<td>mvn test</td>
<td>测试</td>
</tr>
<tr>
<td>mvn package</td>
<td>打包</td>
</tr>
<tr>
<td>mvn clean</td>
<td>删除target文件夹</td>
</tr>
<tr>
<td>mvn install</td>
<td>安装jar包到本地仓库中</td>
</tr>
</tbody></table>
<h2 id="3-2-自动建立目录骨架"><a href="#3-2-自动建立目录骨架" class="headerlink" title="3-2 自动建立目录骨架"></a>3-2 自动建立目录骨架</h2><p><strong>archetype插件</strong></p>
<blockquote>
<p>(1)archetype插件用于创建符合maven规定的目录骨架</p>
</blockquote>
<p><strong>archetype插件的两种使用方式</strong></p>
<blockquote>
<p>(1)命令行界面进入项目根目录，输入mvn archetype:generate命令，根据提示依次输入maven-archetype的版本、groupId、arctifactId、version、package。  </p>
<p>(2)或者一次输入所有参数，egmvn archetype:generate -DgroupId:项目包名 -DarctifactId:项目模块名 -Dversion:版本号 -Dpackage:模块包名，根据提示选择maven-archetype版本以及参数的确认。</p>
</blockquote>
<h2 id="3-3-maven中的坐标和仓库"><a href="#3-3-maven中的坐标和仓库" class="headerlink" title="3-3 maven中的坐标和仓库"></a>3-3 maven中的坐标和仓库</h2><p><strong>maven的坐标</strong></p>
<blockquote>
<p>(1)在maven中，任何一个依赖、插件、项目构建的输出等都可以被称为构件。所有构建均通过坐标作为其唯一的标识。<br>(2)标签groupId、artifactId、version标签就是maven项目的基本坐标。</p>
</blockquote>
<p><strong>maven的仓库</strong></p>
<blockquote>
<p>maven的仓库用来管理项目的依赖，仓库又分为两种本地仓库和远程仓库。查找项目所需依赖时，先查找本地仓库，再查找远程仓库。</p>
</blockquote>
<p><strong>查看maven默认的全球仓库地址</strong></p>
<blockquote>
<p>打开maven目录 =&gt; bin&gt;maven-model-builder.jar&gt;org\apache\maven\model\pom.xml(ps:maven提供的超级pom，所有maven项目都会继承这个pom) =&gt; repository标签下的url标签。</p>
<p><a href="http://search.maven.org/" target="_blank" rel="noopener">http://search.maven.org/</a></p>
</blockquote>
<p><strong>设置镜像仓库</strong></p>
<blockquote>
<p>打开maven目录\conf\settings.xml =&gt; 找到mirrors标签，输入以下代码：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;mirror&gt;</span><br><span class="line">  &lt;id&gt;maven.net.cn&lt;&#x2F;id&gt;</span><br><span class="line">  &lt;mirrorOf&gt;central&lt;&#x2F;mirrorOf&gt;</span><br><span class="line">  &lt;name&gt;central mirror in china&lt;&#x2F;name&gt;</span><br><span class="line">  &lt;url&gt;http:&#x2F;&#x2F;maven.net.cn&#x2F;content&#x2F;groups&#x2F;public&lt;&#x2F;url&gt;</span><br><span class="line">&lt;&#x2F;mirror&gt;</span><br></pre></td></tr></table></figure></div>
<p>设置镜像仓库后，中央仓库将无法访问</p>
</blockquote>
<p>阿里镜像仓库：</p>
<blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;mirror&gt;</span><br><span class="line">       &lt;id&gt;nexus-aliyun&lt;&#x2F;id&gt;</span><br><span class="line">       &lt;mirrorOf&gt;central&lt;&#x2F;mirrorOf&gt;</span><br><span class="line">       &lt;name&gt;Nexus aliyun&lt;&#x2F;name&gt;</span><br><span class="line">       &lt;url&gt;http:&#x2F;&#x2F;maven.aliyun.com&#x2F;nexus&#x2F;content&#x2F;groups&#x2F;public&lt;&#x2F;url&gt;</span><br><span class="line">&lt;&#x2F;mirror&gt;</span><br></pre></td></tr></table></figure></div>
<p>设置镜像仓库后，中央仓库将无法访问</p>
</blockquote>
<p><strong>更改本地仓库位置</strong></p>
<blockquote>
<p>(1)maven默认的本地仓库地址:c:\user\用户.m2\repository<br>(2)打开settings.xml =&gt; 找到localRepository标签 =&gt; 输入设置的本地仓库地址，注意：路径文件夹的分隔符要使用“/”。</p>
<p><localrepository>E:/A2018/2_Maven_learn/repo</localrepository></p>
</blockquote>
<p>复制一份setting.xml到本地仓库：</p>
<blockquote>
<p>原因：<br>  1）IDE会找本地仓库里的setting.xml<br>  2）重装maven时，也不用修改配置</p>
</blockquote>
<h2 id="3-4-在eclipse中安装maven插件以及创建maven项目"><a href="#3-4-在eclipse中安装maven插件以及创建maven项目" class="headerlink" title="3-4 在eclipse中安装maven插件以及创建maven项目"></a>3-4 在eclipse中安装maven插件以及创建maven项目</h2><p><strong>安装maven插件</strong></p>
<blockquote>
<p>(1)eclipse4.0及以上版本自带maven插件，无需额外安装。  </p>
</blockquote>
<p><strong>创建maven项目</strong></p>
<blockquote>
<p>New =&gt; Maven =&gt; Maven Project =&gt;2*next =&gt; 选择maven的目录模板quickstart模板 =&gt; next =&gt; 输入项目坐标 =&gt; finish</p>
</blockquote>
<p><strong>运行maven项目</strong></p>
<blockquote>
<p>eclipse的项目目录下pom.xml右键 =&gt; Run As =&gt; Maven Build =&gt; 在Goals文本框输入compile命令 =&gt;run</p>
</blockquote>
<h2 id="3-5-maven的生命周期"><a href="#3-5-maven的生命周期" class="headerlink" title="3-5 maven的生命周期"></a>3-5 maven的生命周期</h2><p><strong>完整的项目构建过程</strong></p>
<blockquote>
<p>清理、编译、测试、打包、集成测试、验证、布署</p>
</blockquote>
<p><strong>maven项目的生命周期</strong></p>
<blockquote>
<p>maven包括三套独立的生命周期，clean(清理项目)、default(构建项目)、site(生成项目站点)。每个生命周期又包含一些阶段，各个生命周期的阶段是有顺序的，且后面的阶段依赖于前面的阶段，执行某个阶段时其前面的阶段会依次顺序执行，但不会触发另外两套生命周期的任何阶段。</p>
</blockquote>
<p><strong>clean的阶段</strong></p>
<table>
<thead>
<tr>
<th>阶段</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>pre-clean</td>
<td>执行清理前的工作</td>
</tr>
<tr>
<td>clean</td>
<td>清理上一次构建生成的所有文件</td>
</tr>
<tr>
<td>post-clean</td>
<td>执行清理后的文件</td>
</tr>
</tbody></table>
<p><strong>default的阶段</strong></p>
<blockquote>
<p>default的阶段比较多，常用的阶段有compile、test、package、install</p>
</blockquote>
<p><strong>site的阶段</strong></p>
<table>
<thead>
<tr>
<th>阶段</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>pre-site</td>
<td>在生成项目站点前要完成的工作</td>
</tr>
<tr>
<td>site</td>
<td>生成项目的站点文档</td>
</tr>
<tr>
<td>post-site</td>
<td>在生成项目站点后要完成的工作</td>
</tr>
<tr>
<td>site-deploy</td>
<td>发布生成的站点到服务器上</td>
</tr>
</tbody></table>
<p><strong>使用maven的第三方插件</strong></p>
<blockquote>
<p>…</p>
</blockquote>
<h2 id="3-6-pom-xml解析"><a href="#3-6-pom-xml解析" class="headerlink" title="3-6 pom.xml解析"></a>3-6 pom.xml解析</h2><blockquote>
<p>pom.xml是maven项目的核心管理文件，用于项目描述、组织管理、依赖管理和构件信息的管理。</p>
</blockquote>
<p><strong>pom.xml的常用标签</strong></p>
<p><strong>pom的重要标签(1)</strong></p>
<p><strong>pom的重要标签(2)</strong></p>
<p><strong>pom的其他标签</strong></p>
<h2 id="3-7-依赖范围"><a href="#3-7-依赖范围" class="headerlink" title="3-7 依赖范围"></a>3-7 依赖范围</h2><blockquote>
<p>scope标签指定依赖的范围，当前项目如果要使用某一个框架，就要把该框架的jar包引入到classpath路径中，这样项目就能使用该框架的方法。maven中提供了三种classpath，分别是<strong>编译、测试、运行</strong>。依赖的范围就是控制依赖与三种classpath的关系。</p>
</blockquote>
<p><strong>scope的六种属性</strong></p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>compile</td>
<td>默认的范围，编译、测试、运行都有效</td>
</tr>
<tr>
<td>provided</td>
<td>在编译和测试时有效</td>
</tr>
<tr>
<td>runtime</td>
<td>在测试和运行时有效</td>
</tr>
<tr>
<td>test</td>
<td>只在测试时有效</td>
</tr>
<tr>
<td>system</td>
<td>在编译、测试有效，但是与本机系统相关联，可移植性差</td>
</tr>
<tr>
<td>import</td>
<td>导入的范围，它只使用在dependencyManagement中，表示从其它的pom中导入dependecy的配置</td>
</tr>
</tbody></table>
<h2 id="3-8-依赖传递"><a href="#3-8-依赖传递" class="headerlink" title="3-8 依赖传递"></a>3-8 依赖传递</h2><blockquote>
<p>依赖的传递，指当A依赖B，B依赖C，则A依赖C。</p>
</blockquote>
<p><strong>排除传递的依赖</strong></p>
<blockquote>
<p>使用exclusions标签</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;坐标&gt;需要依赖项目的坐标&lt;&#x2F;坐标&gt;</span><br><span class="line">  &lt;exclusions&gt;</span><br><span class="line">      &lt;exclusion&gt;</span><br><span class="line">           &lt;坐标&gt;需要排除的依赖项目的坐标&lt;&#x2F;坐标&gt;</span><br><span class="line">      &lt;&#x2F;exclusion&gt;</span><br><span class="line">  &lt;&#x2F;exclusions&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></div>

<h2 id="3-9-依赖冲突"><a href="#3-9-依赖冲突" class="headerlink" title="3-9 依赖冲突"></a>3-9 依赖冲突</h2><blockquote>
<p>依赖冲突，指有A和B分别依赖于C的不同版本。当D同时依赖于A和B时，则D对传递的依赖C的实际版本是哪一个，需要规则去约定。</p>
</blockquote>
<table>
<thead>
<tr>
<th>规则</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>短路优先</td>
<td>即优先选择传递依赖路径最短的版本</td>
</tr>
<tr>
<td>先声明先优先</td>
<td>在传递依赖路径长短相同时，先声明的依赖路径先选择</td>
</tr>
</tbody></table>
<h2 id="3-10-聚合和继承"><a href="#3-10-聚合和继承" class="headerlink" title="3-10 聚合和继承"></a>3-10 聚合和继承</h2><blockquote>
<p><strong>聚合</strong>：将多个项目一起进行install命令，安装到本地仓库中的方法叫聚合<br><strong>步骤</strong>：新建maven项目 =&gt; 将pom.xml中的packaging标签内容修改为”pom” =&gt; 在pom.xml中加入如下代码：</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;modules&gt;</span><br><span class="line">  &lt;module&gt;项目的路径&lt;&#x2F;module&gt;</span><br><span class="line">  &lt;module&gt;项目的路径&lt;&#x2F;module&gt;</span><br><span class="line">  &lt;module&gt;项目的路径&lt;&#x2F;module&gt;</span><br><span class="line">  &lt;!--</span><br><span class="line">    ...</span><br><span class="line">  --&gt;</span><br><span class="line">&lt;&#x2F;modules&gt;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><strong>继承</strong>：多个maven项目需要依赖同一个框架或maven项目。<br><strong>步骤</strong>：<br>(1)新建maven项目 =&gt; 将pom.xml中的packaging标签内容修改为”pom” =&gt; 在pom.xml中加入如下代码：</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependencyManagement&gt;</span><br><span class="line">  &lt;dependencies&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;坐标&gt;被依赖的项目坐标&lt;&#x2F;坐标&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;&#x2F;dependencies&gt;</span><br><span class="line">&lt;&#x2F;dependencyManagement&gt;</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>(2)在需要继承的项目pom.xml中，加入</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">  &lt;坐标&gt;需要被继承的项目&lt;&#x2F;坐标&gt;</span><br><span class="line">&lt;&#x2F;parent&gt;</span><br></pre></td></tr></table></figure></div>

<h1 id="第四章-如何构建web项目"><a href="#第四章-如何构建web项目" class="headerlink" title="第四章 如何构建web项目"></a>第四章 如何构建web项目</h1><h2 id="4-1-使用maven构建web项目"><a href="#4-1-使用maven构建web项目" class="headerlink" title="4-1 使用maven构建web项目"></a>4-1 使用maven构建web项目</h2><blockquote>
<ol>
<li>用eclipse新建maven项目</li>
<li>在maven中央仓库<a href="http://mvnrepository.com中查找servlet坐标，并添加到项目pom.xml文件中" target="_blank" rel="noopener">http://mvnrepository.com中查找servlet坐标，并添加到项目pom.xml文件中</a></li>
<li>…</li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>项目管理</category>
        <category>maven</category>
      </categories>
      <tags>
        <tag>项目管理</tag>
      </tags>
  </entry>
  <entry>
    <title>JDBC</title>
    <url>/2018/04/18/15326643690307/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>jar包：</p>
<pre><code>mysql-connector-java-5.1.8.jar</code></pre><p>概述：</p>
<pre><code>- jdbc是java操作数据库的AP
- 相关包：java.sql.* javax.sql.*</code></pre><p>代码：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test() throws Exception &#123;</span><br><span class="line">    &#x2F;&#x2F;注册驱动</span><br><span class="line">    DriverManager.registerDriver(new com.mysql.jdbc.Driver());</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;获取连接对象</span><br><span class="line">    Connection con &#x3D; DriverManager.getConnection(&quot;jdbc:mysql:&#x2F;&#x2F;10.211.55.6:3306&#x2F;jdbc&quot;,</span><br><span class="line">            &quot;machine&quot;,&quot;4869&quot;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;获取操作sql的Statement</span><br><span class="line">    Statement st &#x3D; con.createStatement();</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;执行sql语句，得到Statement</span><br><span class="line">    ResultSet rs &#x3D; st.executeQuery(&quot;SELECT * FROM USER&quot;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;操作结果集，得到数据</span><br><span class="line">    while(rs.next())&#123;</span><br><span class="line">        System.out.println(&quot;id: &quot;+rs.getInt(&quot;id&quot;)+</span><br><span class="line">                &quot;\tusername: &quot;+rs.getString(&quot;username&quot;)+</span><br><span class="line">                &quot;\tpassword: &quot;+rs.getString(“password&quot;)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;关闭资源</span><br><span class="line">    rs.close();</span><br><span class="line">    st.close();</span><br><span class="line">    con.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>PreparedStatement:处理sql注入</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;获取PreparedStatement</span><br><span class="line">PreparedStatement ps &#x3D; con.prepareStatement(</span><br><span class="line">        &quot;INSERT INTO USER VALUES(NULL,?,?,?)&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;设置字段:第一个？为1，类推</span><br><span class="line">ps.setString(1,&quot;machine&quot;);</span><br><span class="line">ps.setString(2,&quot;123&quot;);</span><br><span class="line">ps.setString(3,&quot;machine@163.com&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;执行</span><br><span class="line">ps.executeUpdate();</span><br><span class="line">&#x2F;&#x2F;若是查找(select)，则ps.executeQuery(), 返回ResultSet结果集</span><br></pre></td></tr></table></figure></div>

<p><strong>Sql:</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE USER( </span><br><span class="line">    id INT PRIMARY KEY AUTO_INCREMENT, </span><br><span class="line">    username VARCHAR(20) , </span><br><span class="line">    password VARCHAR(20) , </span><br><span class="line">    email VARCHAR(40) </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO USER VALUES(NULL,&#39;tom&#39;,&#39;123&#39;,&#39;tom@163.com&#39;); </span><br><span class="line">INSERT INTO USER VALUES(NULL,&#39;fox&#39;,&#39;456&#39;,&#39;fox@163.com&#39;);</span><br><span class="line">INSERT INTO USER VALUES(NULL,&#39;james&#39;,&#39;789&#39;,&#39;james@163.com&#39;);</span><br><span class="line"></span><br><span class="line">select * from USER</span><br></pre></td></tr></table></figure></div>





]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>JavaSE</tag>
      </tags>
  </entry>
  <entry>
    <title>反射机制reflect</title>
    <url>/2018/04/18/15326643428215/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>参考：【itheima】</p>
</blockquote>
<p>[toc]</p>
<h1 id="反射机制reflect"><a href="#反射机制reflect" class="headerlink" title="反射机制reflect"></a>反射机制reflect</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote>
<ol>
<li>Java反射机制 通过Reflection APIs 取得任何已知名称的class的内部消息</li>
<li>Java反射机制容许程序在运行时加载、探知、使用编译期间完全未知的 classes。 </li>
<li><strong>换言之，Java 可以加载一个运行时才得知名称的 class，获得其完整结构。</strong></li>
</ol>
</blockquote>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="加载类的3种方式"><a href="#加载类的3种方式" class="headerlink" title="加载类的3种方式"></a>加载类的3种方式</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun1</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"> <span class="comment">//1.</span></span><br><span class="line"> Class clazz1 = Class.forName(<span class="string">"m.reflect.Student"</span>);<span class="comment">//把硬盘的类加载到内存，封装成Class类</span></span><br><span class="line"> <span class="comment">//2.</span></span><br><span class="line"> Class clazz2 = <span class="keyword">new</span> Student().getClass();</span><br><span class="line"> <span class="comment">//3.</span></span><br><span class="line"> Class clazz3 = Student<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="反射-类的构造函数-并-创建类对象"><a href="#反射-类的构造函数-并-创建类对象" class="headerlink" title="反射 类的构造函数 并 创建类对象"></a>反射 类的构造函数 并 创建类对象</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 获取类【无参构造函数】Student（）》创建类对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">	</span><br><span class="line"> Class clazz = Class.forName(<span class="string">"m.reflect.Student"</span>);</span><br><span class="line">	</span><br><span class="line"> Constructor c = clazz.getConstructor(<span class="keyword">null</span>);<span class="comment">//取得无参构造函数</span></span><br><span class="line">	</span><br><span class="line"> Student s = (Student) c.newInstance(<span class="keyword">null</span>);<span class="comment">//创建对象</span></span><br><span class="line">	</span><br><span class="line"> System.out.println(s.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 获取类【有参构造函数】Student（String name）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun3</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">	</span><br><span class="line"> Class clazz = Class.forName(<span class="string">"m.reflect.Student"</span>);</span><br><span class="line">	</span><br><span class="line"> Constructor c = clazz.getConstructor(String<span class="class">.<span class="keyword">class</span>)</span>;<span class="comment">//取得有参构造函数</span></span><br><span class="line">	</span><br><span class="line"> Student s = (Student) c.newInstance(<span class="string">"www"</span>);</span><br><span class="line">	</span><br><span class="line"> System.out.println(s.name);<span class="comment">//打印mm</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 获取类【多参数构造函数】:Student(String name,int pass)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun4</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">	</span><br><span class="line"> Class clazz = Class.forName(<span class="string">"m.reflect.Student"</span>);</span><br><span class="line">	</span><br><span class="line"> Constructor c = clazz.getConstructor(String<span class="class">.<span class="keyword">class</span>,<span class="title">int</span>.<span class="title">class</span>)</span>;</span><br><span class="line">	</span><br><span class="line"> Student s = (Student) c.newInstance(<span class="string">"www"</span>,<span class="number">3</span>);</span><br><span class="line">	</span><br><span class="line"> System.out.println(s.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 获取类【私有构造函数】:private Student(List list)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun5</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">	</span><br><span class="line"> Class clazz = Class.forName(<span class="string">"m.reflect.Student"</span>);</span><br><span class="line">	</span><br><span class="line"> Constructor c = clazz.getDeclaredConstructor(List<span class="class">.<span class="keyword">class</span>)</span>;<span class="comment">//私有构造函数</span></span><br><span class="line"> c.setAccessible(<span class="keyword">true</span>);<span class="comment">//暴力反射，强制打开访问权限</span></span><br><span class="line"> Student s = (Student) c.newInstance(<span class="keyword">new</span> ArrayList());</span><br><span class="line">	</span><br><span class="line"> System.out.println(s.name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="反射类里的方法"><a href="#反射类里的方法" class="headerlink" title="反射类里的方法"></a>反射类里的方法</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun7</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">	</span><br><span class="line"> Student p=<span class="keyword">new</span> Student();</span><br><span class="line"></span><br><span class="line"> Class clazz = Class.forName(<span class="string">"m.reflect.Student"</span>);</span><br><span class="line">	</span><br><span class="line">    Method method = clazz.getMethod(<span class="string">"method1"</span>,<span class="keyword">null</span>);<span class="comment">//取得方法</span></span><br><span class="line">    </span><br><span class="line">    method.invoke(p, <span class="keyword">null</span>);<span class="comment">//执行方法，非静态方法需要一个实例化对象</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 反射类里的方法:method1(String name ,int a)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun8</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">	</span><br><span class="line"> Student p=<span class="keyword">new</span> Student();</span><br><span class="line"></span><br><span class="line"> Class clazz = Class.forName(<span class="string">"m.reflect.Student"</span>);</span><br><span class="line">	</span><br><span class="line">    Method method = clazz.getMethod(<span class="string">"method1"</span>,String<span class="class">.<span class="keyword">class</span>,<span class="title">int</span>.<span class="title">class</span>)</span>;</span><br><span class="line">    </span><br><span class="line">    method.invoke(p, <span class="string">"MA"</span>,<span class="number">30</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 反射类里的方法:method1(String name ,int[] a)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun9</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">	</span><br><span class="line"> Student p=<span class="keyword">new</span> Student();</span><br><span class="line"></span><br><span class="line"> Class clazz = Class.forName(<span class="string">"m.reflect.Student"</span>);</span><br><span class="line">	</span><br><span class="line">    Method method = clazz.getMethod("method1",String.class,int[].class);</span><br><span class="line">    </span><br><span class="line">    method.invoke(p, <span class="string">"MA"</span>,<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">23</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 反射类里的私有方法:private void method5(String name)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun10</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">	</span><br><span class="line"> Student p=<span class="keyword">new</span> Student();</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line"> Class clazz = Class.forName(<span class="string">"m.reflect.Student"</span>);</span><br><span class="line">	</span><br><span class="line">    Method method = clazz.getDeclaredMethod(<span class="string">"method5"</span>,String<span class="class">.<span class="keyword">class</span>)</span>;<span class="comment">//取得私有方法</span></span><br><span class="line">    method.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    method.invoke(p, <span class="string">"MA"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 反射类里的静态方法:public static void method6()&#123;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun11</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">	</span><br><span class="line"> Class clazz = Class.forName(<span class="string">"m.reflect.Student"</span>);</span><br><span class="line">	</span><br><span class="line">    Method method = clazz.getMethod(<span class="string">"method6"</span>,String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">   </span><br><span class="line">    method.invoke(<span class="keyword">null</span>, <span class="string">"MA"</span>);<span class="comment">//静态方法不需要实例化对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="反射类里字段（属性）"><a href="#反射类里字段（属性）" class="headerlink" title="反射类里字段（属性）"></a>反射类里字段（属性）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun12</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line"> Student s = <span class="keyword">new</span> Student();</span><br><span class="line"> Class clazz = Class.forName(<span class="string">"m.reflect.Student"</span>);</span><br><span class="line">	</span><br><span class="line"> Field field=clazz.getField(<span class="string">"name"</span>);<span class="comment">//得到字段</span></span><br><span class="line">	</span><br><span class="line"> String name = (String) field.get(s);<span class="comment">//得到字段的值(非static属性，需要实例化对象)</span></span><br><span class="line"> </span><br><span class="line"> Class type = field.getType();<span class="comment">//获取字段的类型</span></span><br><span class="line"> System.out.println(name);</span><br><span class="line"> System.out.println(type);</span><br><span class="line">	</span><br><span class="line"> field.set(s, <span class="string">"sssss"</span>);<span class="comment">//为字段赋值</span></span><br><span class="line"> System.out.println(s.name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>






]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>JavaSE</tag>
      </tags>
  </entry>
  <entry>
    <title>访问修饰符</title>
    <url>/2018/04/18/15326643879895/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h1><p>不写访问修饰时默认为defaul</p>
<p>作用域如下：</p>
<table>
<thead>
<tr>
<th>作用域</th>
<th>当前类</th>
<th>同包</th>
<th>子类</th>
<th>其他</th>
</tr>
</thead>
<tbody><tr>
<td>pubilc</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>protected</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td></td>
</tr>
<tr>
<td>default</td>
<td>Y</td>
<td>Y</td>
<td></td>
<td></td>
</tr>
<tr>
<td>private</td>
<td>Y</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>JavaSE</tag>
      </tags>
  </entry>
  <entry>
    <title>注解annotation</title>
    <url>/2018/04/18/15326644308973/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[toc]</p>
<h1 id="java-注解annotation"><a href="#java-注解annotation" class="headerlink" title="java-注解annotation"></a>java-注解annotation</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>JDK5之后出现，和类 接口同级。</p>
<p>格式：@interface 注解名{}</p>
<p>作用：</p>
<pre><code>— 编译检查@overwrite

— 替代配置文件

— 定义注解（元注解：注解上的注解）

— 分析代码（用到反射）</code></pre><h2 id="java中的3个注解"><a href="#java中的3个注解" class="headerlink" title="java中的3个注解"></a>java中的3个注解</h2><p>@Override：声明该方法是从父类继承过来的，执行编译期的检查。</p>
<p>@Suppresswarnings：抑制警告</p>
<p>@Deprecated：声明该方法不赞成使用</p>
<h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><p><strong>定义</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public @interface MyAnno1&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@MyAnno1</span><br><span class="line">public test01()&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="注解属性"><a href="#注解属性" class="headerlink" title="注解属性"></a><strong>注解属性</strong></h3><p>@MyAnno1（“123”）</p>
<p>注解的本质是接口，继承Annotation，接口中可以有常量和抽象方法</p>
<p>抽象方法在注解中称为 注解属性</p>
<p>注解属性类型：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">基本类型</span><br><span class="line">String</span><br><span class="line">Class</span><br><span class="line">Annotation</span><br><span class="line">Enum：枚举</span><br><span class="line">以上类型对应的一位数组</span><br></pre></td></tr></table></figure></div>

<p>注解如果有属性，使用时必须赋值（除非这个属性有默认值）</p>
<p>定义默认值 ：String name() default “machine”;</p>
<p>赋值：</p>
<p>@注解名（属性名1=属性值1，属性名2=属性值2）</p>
<p>若注解类型为数组，且只有一个值的时候，有两种写法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">方式1：</span><br><span class="line">@MyAnno(属性名&#x3D;&#123;值1，值2，值3&#125;)</span><br><span class="line">方式2：</span><br><span class="line">@MyAnno(属性名&#x3D;值)</span><br></pre></td></tr></table></figure></div>

<p>当属性名为value,且只需为这个属性赋值，value属性名可以省略</p>
<h3 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h3><pre><code>元注解是定义在注解上的注解，有4个元注解</code></pre><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Retention	规定注解保留到什么阶段（生命周期）</span><br><span class="line">	SOURCE(默认)：只在代码中保留，在字节码文件中就删除了（像@Override一样，只在编译阶段检查异常）</span><br><span class="line">	CLASS：在代码和字节码文件中保留</span><br><span class="line">	RUNTIME：所有阶段都保留（代替配置文件时）</span><br><span class="line">使用：@Retention（RetentionPolicy.RUNTIME）</span><br><span class="line">@Target 规定注解作用在什么上面</span><br><span class="line">	TYPE：作用在类 接口 等 上面</span><br><span class="line">	METHOD：作用在方法上面</span><br><span class="line">	FIELD：作用在字段上面</span><br><span class="line">使用：@Target(ElementType.METHOD)</span><br></pre></td></tr></table></figure></div>

<h3 id="获取属性值（反射）"><a href="#获取属性值（反射）" class="headerlink" title="获取属性值（反射）"></a>获取属性值（反射）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.itheima.a_annotation.plus;</span><br><span class="line"></span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.DriverManager;</span><br><span class="line"></span><br><span class="line">public class JdbcUtils &#123;</span><br><span class="line">	@JdbcInfo(url &#x3D; &quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;day16&quot;,password&#x3D;&quot;1234&quot;)</span><br><span class="line">	public static Connection getConnection() throws Exception&#123;</span><br><span class="line">		&#x2F;&#x2F;1.获取字节码文件</span><br><span class="line">		Class clazz&#x3D;JdbcUtils.class;</span><br><span class="line">		</span><br><span class="line">		&#x2F;&#x2F;2.获取getConnenction</span><br><span class="line">		Method m &#x3D; clazz.getMethod(&quot;getConnection&quot;);</span><br><span class="line">		</span><br><span class="line">		&#x2F;&#x2F;3.判断该方法上是否有 jdbcinfo注解 若有的话获取</span><br><span class="line">		if(m.isAnnotationPresent(JdbcInfo.class))&#123;</span><br><span class="line">			JdbcInfo info &#x3D; m.getAnnotation(JdbcInfo.class);</span><br><span class="line">			</span><br><span class="line">			&#x2F;&#x2F;4.获取注解四个属性</span><br><span class="line">			String driverClass &#x3D; info.driverClass();</span><br><span class="line">			String url &#x3D; info.url();</span><br><span class="line">			String user &#x3D; info.user();</span><br><span class="line">			String password &#x3D; info.password();</span><br><span class="line">			</span><br><span class="line">			&#x2F;&#x2F;5.注册驱动</span><br><span class="line">			Class.forName(driverClass);</span><br><span class="line">			</span><br><span class="line">			&#x2F;&#x2F;6.获取连接</span><br><span class="line">			return DriverManager.getConnection(url, user, password);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		return null;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public static void main(String[] args) throws Exception &#123;</span><br><span class="line">		System.out.println(getConnection());;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>


]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>JavaSE</tag>
      </tags>
  </entry>
  <entry>
    <title>String类常用方法</title>
    <url>/2018/04/18/15326660186378/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[toc]</p>
<h1 id="字符串-分割：split"><a href="#字符串-分割：split" class="headerlink" title="字符串-分割：split"></a>字符串-分割：split</h1><pre><code>String s = &quot;a,b,cd,efg&quot;;
String[] strs = s.split(&quot;,&quot;);</code></pre><h1 id="字符串-拼接：StringBuilder"><a href="#字符串-拼接：StringBuilder" class="headerlink" title="字符串-拼接：StringBuilder"></a>字符串-拼接：StringBuilder</h1><pre><code>StringBuilder stringBuilder = new StringBuilder().append(&quot;abc&quot;).append(1).append(&apos;d&apos;);

String new_str = stringBuilder.toString();</code></pre><h1 id="字符串-截取：substring"><a href="#字符串-截取：substring" class="headerlink" title="字符串-截取：substring"></a>字符串-截取：substring</h1><pre><code>//index从标号0开始算，截取包括前，但包括后
String ss1 = str.substring(index, index + 30);</code></pre><h1 id="取字符串的-某个字符：charAt"><a href="#取字符串的-某个字符：charAt" class="headerlink" title="取字符串的 某个字符：charAt"></a>取字符串的 某个字符：charAt</h1><pre><code>char c = attr.charAt(0);//首字符</code></pre><h1 id="大小写转换：toUpperCase"><a href="#大小写转换：toUpperCase" class="headerlink" title="大小写转换：toUpperCase"></a>大小写转换：toUpperCase</h1><pre><code>char c1 = Character.toUpperCase(c);</code></pre><h1 id="查下标：indexOf"><a href="#查下标：indexOf" class="headerlink" title="查下标：indexOf"></a>查下标：indexOf</h1><pre><code>public void test02() throws Exception{
    String str = &quot;1234567&quot;;
    int i = str.indexOf(&quot;5&quot;);//从0开始
    System.out.println(&quot;=====&quot;+i);
}</code></pre>]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>JavaSE</tag>
      </tags>
  </entry>
  <entry>
    <title>sublim快捷键</title>
    <url>/2018/04/17/15326648700588/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>格式化json: command+control+J</p>
]]></content>
      <categories>
        <category>工具类</category>
      </categories>
      <tags>
        <tag>工具类</tag>
      </tags>
  </entry>
  <entry>
    <title>数据字典</title>
    <url>/2018/04/11/15326659887487/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[toc]</p>
<h1 id="数据字典-需求"><a href="#数据字典-需求" class="headerlink" title="数据字典 需求"></a>数据字典 需求</h1><pre><code>1. 相同类型的配置项，使用数据表维护

2. 需要【数组字典类型表】，【数据字典明细表】

3. 两种类型：
    - 随业务灵活变化
    - 系统设计时就固定了</code></pre><h1 id="数据字典-表结构"><a href="#数据字典-表结构" class="headerlink" title="数据字典 表结构"></a>数据字典 表结构</h1><pre><code>dict_type：字典类型
    typeCode: 主键,字典类型代码
    typeName: 字典类型名称
dict_info：字典明细
    id: 主键
    typeCode: 外键：dict_type的id
    dictCode: 业务代码（0暂停 1启用）
    info: 配置项的名称</code></pre><hr>
<p><strong>明细表如何存储普通配置项和业务代码？</strong></p>
<pre><code>1. 公共：
    名称 存在dict_info的info
    类别 存在dict_info的typeCode
2. 普通配置项：变化灵活
    - dictCode不用存值
3. 固定配置项：每个配置项都有一个业务代码（0暂停 1启用）
    - 业务代码 存在dict_info的dictCode（0暂停 1启用）</code></pre><h1 id="数据字典-使用"><a href="#数据字典-使用" class="headerlink" title="数据字典 使用"></a>数据字典 使用</h1><pre><code>在下拉框显示 普通配置项 或 固定配置项

例：用户查询页面，用户类型，不能jsp硬编码
做法：根据user表type字段的内容（业务代码），关联查询字典表得到名称</code></pre><hr>
<pre><code>sql: 根据用户表的type和state 关联查询字典表 得到对应的名字
   select
    u.id, u.name,u.state,u.type,u.deptId,
    d.name deptName ,
    (
        select di.info
        from dict_info di
        where di.typeCode = &apos;0001&apos; and di.dictCode=u.type
    ) typeName ,

    (
        select di.info
        from dict_info di
        where di.typeCode = &apos;0002&apos; and di.dictCode=u.state
    ) stateName

    from sys_user u
    left join sys_dept d on u.deptId = d.id </code></pre>]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>IDEA的热加载与热部署</title>
    <url>/2018/04/11/15326663281601/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[TOC]</p>
<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><ul>
<li><p>在开发时，需要debug,各种调试，不能一改代码就重新启动tomcat吧…所以出现了热加载热部署…</p>
<h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1></li>
<li><p>热加载只更新有变化的class和jsp（类加载机制）</p>
</li>
<li><p>热部署是把整个项目重新打包发布（慢）</p>
</li>
</ul>
<h1 id="IDEA配置"><a href="#IDEA配置" class="headerlink" title="IDEA配置"></a>IDEA配置</h1><ul>
<li><p>进入tomcat配置页面</p>
</li>
<li><p>选择war exploded 而不是war。war是项目打包放tomcat,无法进行热加载，war exploded是把目录文件发布到tomcat,支持热加载</p>
</li>
</ul>
<p><a href="/2018/04/11/15326663281601/15234460700217.jpg" data-fancybox="group" data-caption="15234460700217" class="fancybox"><img alt="15234460700217" title="15234460700217" data-src="/2018/04/11/15326663281601/15234460700217.jpg" class="lazyload"></a></p>
<ul>
<li>update classes and resources 就是热加载，redploy就是热部署</li>
</ul>
<p><a href="/2018/04/11/15326663281601/15234461315390.jpg" data-fancybox="group" data-caption="15234461315390" class="fancybox"><img alt="15234461315390" title="15234461315390" data-src="/2018/04/11/15326663281601/15234461315390.jpg" class="lazyload"></a></p>
<ul>
<li>配置如：</li>
</ul>
<p><a href="/2018/04/11/15326663281601/15234462265887.jpg" data-fancybox="group" data-caption="15234462265887" class="fancybox"><img alt="15234462265887" title="15234462265887" data-src="/2018/04/11/15326663281601/15234462265887.jpg" class="lazyload"></a></p>
<ul>
<li>热加载在debug时有效，手动点击时会选择：<br><a href="/2018/04/11/15326663281601/15234465283408.jpg" data-fancybox="group" data-caption="15234465283408" class="fancybox"><img alt="15234465283408" title="15234465283408" data-src="/2018/04/11/15326663281601/15234465283408.jpg" class="lazyload"></a></li>
</ul>
]]></content>
      <categories>
        <category>工具类</category>
      </categories>
      <tags>
        <tag>工具类</tag>
      </tags>
  </entry>
  <entry>
    <title>Sunny_Ngrok(外网映射工具)</title>
    <url>/2018/04/07/15326658193417/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><a id="more"></a>

<p>1.注册账号  <a href="https://www.ngrok.cc/" target="_blank" rel="noopener">https://www.ngrok.cc/</a><br>    账号：<a href="mailto:hhdwwt@163.com">hhdwwt@163.com</a><br>    密码：199511204869<br>2.下载Ngrok客户端<br>3.开通隧道     官方教程：<a href="https://www.sunnyos.com/article-show-67.html" target="_blank" rel="noopener">https://www.sunnyos.com/article-show-67.html</a><br>4.放置    E:\A2018\Sunny_Ngrok\sunny.exe<br>5.cmd进入目录运行     sunny.exe clientid 07cdad652786048c<br>    ps:07cdad652786048c为隧道id<br>6.运行后出现   <a href="http://machine4869.free.ngrok.cc" target="_blank" rel="noopener">http://machine4869.free.ngrok.cc</a> -&gt; 127.0.0.1:80<br>7.映射成功<br>8.关闭cmd就会关闭映射</p>
]]></content>
      <categories>
        <category>工具类</category>
      </categories>
      <tags>
        <tag>工具类</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA杂</title>
    <url>/2018/03/27/15326646247481/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>IDEA杂</p>
<a id="more"></a>

<p>[toc]</p>
<h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><p>全局查找类：shift+shift<br>代码提示：alt+/</p>
<p>自动补全返回值：alt+command+v<br>动导包/错误修改：alt+enter</p>
<p>System.out.println()   :   sout<br>etter and getter : control+enter</p>
<h1 id="IDEA-将文件夹加入classpath"><a href="#IDEA-将文件夹加入classpath" class="headerlink" title="IDEA 将文件夹加入classpath"></a>IDEA 将文件夹加入classpath</h1><p>加入方法：<br>1、File - Project Structure<br>2、如图<br>modules - 选择需要加入的文件夹， 点击上面的mark as Sources 看到文件夹颜色变成蓝色，即可。<br><a href="/2018/03/27/15326646247481/295427-20160711103109701-530628451.png" data-fancybox="group" data-caption="295427-20160711103109701-530628451" class="fancybox"><img alt="295427-20160711103109701-530628451" title="295427-20160711103109701-530628451" data-src="/2018/03/27/15326646247481/295427-20160711103109701-530628451.png" class="lazyload"></a></p>
<p>添加内置Junit<br> 在.iml文件中加入：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;orderEntry type&#x3D;&quot;module-library&quot;&gt;</span><br><span class="line">          &lt;library name&#x3D;&quot;JUnit4&quot;&gt;</span><br><span class="line">            &lt;CLASSES&gt;</span><br><span class="line">              &lt;root url&#x3D;&quot;jar:&#x2F;&#x2F;$APPLICATION_HOME_DIR$&#x2F;lib&#x2F;junit-4.12.jar!&#x2F;&quot; &#x2F;&gt;</span><br><span class="line">              &lt;root url&#x3D;&quot;jar:&#x2F;&#x2F;$APPLICATION_HOME_DIR$&#x2F;lib&#x2F;hamcrest-core-1.3.jar!&#x2F;&quot; &#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;CLASSES&gt;</span><br><span class="line">            &lt;JAVADOC &#x2F;&gt;</span><br><span class="line">            &lt;SOURCES &#x2F;&gt;</span><br><span class="line">          &lt;&#x2F;library&gt;</span><br><span class="line">&lt;&#x2F;orderEntry&gt;</span><br></pre></td></tr></table></figure></div>

<h1 id="IDEA安装-ignore插件"><a href="#IDEA安装-ignore插件" class="headerlink" title="IDEA安装.ignore插件"></a>IDEA安装.ignore插件</h1><p><a href="https://blog.csdn.net/qq_34590097/article/details/56284935" target="_blank" rel="noopener">https://blog.csdn.net/qq_34590097/article/details/56284935</a></p>
]]></content>
      <categories>
        <category>工具类</category>
      </categories>
      <tags>
        <tag>工具类</tag>
      </tags>
  </entry>
  <entry>
    <title>linux-文件上传</title>
    <url>/2018/03/26/15326635663399/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[toc]</p>
<h1 id="使用mac的终端"><a href="#使用mac的终端" class="headerlink" title="使用mac的终端"></a>使用mac的终端</h1><p><strong>连接</strong></p>
<p>Shell &gt; 新建远程连接 &gt; sftp &gt; 新增服务器 &gt; sftp <a href="mailto:machine@10.211.55.6">machine@10.211.55.6</a></p>
<p><strong>使用</strong></p>
<p>上传到linux：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">put 本地路径 远程路径</span><br></pre></td></tr></table></figure></div>

<p>下载到本地：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">get 远程路径 本地路径</span><br></pre></td></tr></table></figure></div>


]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux-防火墙</title>
    <url>/2018/03/26/15326636517733/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>firewalld</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">启动firewalld ：systemctl start firewalld</span><br><span class="line"></span><br><span class="line">查看防火墙是否运行 ：firewall-cmd --state</span><br><span class="line"></span><br><span class="line">添加：irewall-cmd --zone&#x3D;public --add-port&#x3D;80&#x2F;tcp --permanent    （--permanent永久生效，没有此参数重启后失效）</span><br><span class="line"></span><br><span class="line">重新载入：firewall-cmd --reload</span><br><span class="line"></span><br><span class="line">查看：firewall-cmd --zone&#x3D; public --query-port&#x3D;80&#x2F;tcp</span><br><span class="line"></span><br><span class="line">删除：firewall-cmd --zone&#x3D; public --remove-port&#x3D;80&#x2F;tcp —permanent</span><br></pre></td></tr></table></figure></div>



<p>iptables</p>
<p>CentOS 7.0默认使用的是firewall作为防火墙，这里改为iptables防火墙。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、关闭firewall：</span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line">systemctl disable firewalld.service</span><br><span class="line">systemctl mask firewalld.service</span><br><span class="line"></span><br><span class="line">2、安装iptables防火墙</span><br><span class="line">yum install iptables-services -y</span><br><span class="line"></span><br><span class="line">3.启动设置防火墙</span><br><span class="line"></span><br><span class="line">systemctl enable iptables</span><br><span class="line">systemctl start iptables</span><br><span class="line"></span><br><span class="line">4.查看防火墙状态</span><br><span class="line">systemctl status iptables</span><br><span class="line"></span><br><span class="line">5编辑防火墙，增加端口</span><br><span class="line">vi &#x2F;etc&#x2F;sysconfig&#x2F;iptables #编辑防火墙配置文件</span><br><span class="line"></span><br><span class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT</span><br><span class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT</span><br><span class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT</span><br><span class="line"></span><br><span class="line">:wq! #保存退出</span><br></pre></td></tr></table></figure></div>


<p>iptables指令</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">重启配置，重启系统</span><br><span class="line">systemctl restart iptables.service #重启防火墙使配置生效</span><br><span class="line">systemctl enable iptables.service #设置防火墙开机启动</span><br><span class="line"></span><br><span class="line">查看已开放的端口号</span><br><span class="line">iptables -nvL</span><br><span class="line"></span><br><span class="line">查询防火墙状态:</span><br><span class="line">[root@localhost ~]# service   iptables status</span><br><span class="line"></span><br><span class="line">停止防火墙:</span><br><span class="line">[root@localhost ~]# service   iptables stop</span><br><span class="line"></span><br><span class="line">启动防火墙:</span><br><span class="line">[root@localhost ~]# service   iptables start</span><br><span class="line"></span><br><span class="line">重启防火墙:</span><br><span class="line">[root@localhost ~]# service   iptables restart</span><br><span class="line"></span><br><span class="line">永久关闭防火墙:</span><br><span class="line">[root@localhost ~]# chkconfig   iptables off</span><br><span class="line"></span><br><span class="line">永久关闭后启用:</span><br><span class="line">[root@localhost ~]# chkconfig   iptables on</span><br></pre></td></tr></table></figure></div>



]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux-杂</title>
    <url>/2018/03/26/15326635951231/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>[toc]</p>
<h1 id="查看当前目录：pwd"><a href="#查看当前目录：pwd" class="headerlink" title="查看当前目录：pwd"></a>查看当前目录：pwd</h1><h1 id="paralells虚拟机-相关"><a href="#paralells虚拟机-相关" class="headerlink" title="paralells虚拟机 相关"></a>paralells虚拟机 相关</h1><p>  挂载的盘：   psf 目录下</p>
<h1 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h1><p>  移动文件：  mv  原路径  目标路径<br>  我的当前路径：pwd</p>
<h1 id="mac客户端"><a href="#mac客户端" class="headerlink" title="mac客户端"></a>mac客户端</h1><p>  ssh连接：ssh machine@ip地址或主机名<br>  ssh -p xx user@ip</p>
<h1 id="网络-相关"><a href="#网络-相关" class="headerlink" title="网络 相关"></a>网络 相关</h1><p>  查看ip地址： ip addr</p>
<h1 id="图形界面开启与关闭"><a href="#图形界面开启与关闭" class="headerlink" title="图形界面开启与关闭"></a>图形界面开启与关闭</h1><p>root用户下<br>1, 关闭图形界面：<br>init 3 关闭图形界面（XServer服务也会关闭）<br>2. 开启图形界面：<br>init 5 或   startx<br>3. 开机时，不进入 X Window：<br>vi /etc/inittab<br>id:5:initdefault:<br>改成<br>id:3:initdefault:</p>
<h1 id="更改文件权限：chmod"><a href="#更改文件权限：chmod" class="headerlink" title="更改文件权限：chmod"></a>更改文件权限：chmod</h1><p>r:4  w:2 x:1<br>rwx=4+2+1 = 7</p>
<p>chmod  [-r]  xyz 档案或目录<br>例：chmod -R 777 my<br>    -R:递归持续变更，将my目录权限改为所有人可读可写可执行</p>
<h1 id="tomcat"><a href="#tomcat" class="headerlink" title="tomcat"></a>tomcat</h1><p>./catalina.sh run<br>./catalina.sh stop</p>
<h1 id="端口占用"><a href="#端口占用" class="headerlink" title="端口占用"></a>端口占用</h1><p>netstat -nap #会列出所有正在使用的端口及关联的进程/应用<br>netstat -lnp|grep 88 #检查端口被哪个进程占用<br>ps 1777 #查看进程的详细信息<br>kill -9 1777 # #杀掉编号为1777的进程</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Git笔记</title>
    <url>/2018/03/07/15204272648525/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>参考:《廖雪峰Git教程》<br><a href="http://www.liaoxuefeng.com/" target="_blank" rel="noopener">http://www.liaoxuefeng.com/</a></p>
</blockquote>
<p>[toc]</p>
<h1 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h1><h2 id="创建账户​"><a href="#创建账户​" class="headerlink" title="创建账户​"></a>创建账户​</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name &quot;Your Name&quot;</span><br><span class="line">​$ git config --global user.email &quot;email@example.com&quot;</span><br><span class="line"> </span><br><span class="line">​$ git config --global user.name &quot;machine&quot;</span><br><span class="line">​$ git config --global user.email &quot;hhdwwt@163.com&quot;</span><br><span class="line">&#96;&#96;&#96; </span><br><span class="line"></span><br><span class="line">查看自己的用户名和邮箱地址：</span><br></pre></td></tr></table></figure></div>
<p>$ git config user.name<br>$ git config user.email</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">## 创建仓库</span><br></pre></td></tr></table></figure></div>
<p>​$ mkdir learngit<br>​$ cd learngit<br>​$ pwd<br>​/c/Users/Machine/learngit</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">## 管理仓库</span><br></pre></td></tr></table></figure></div>
<p>​$ git init<br>​Initialized empty Git repository in C:/Users/Machine/learngit/.git/<br>​如果你没有看到.git目录，那是因为这个目录默认是隐藏的</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">## 添加文件到仓库</span><br></pre></td></tr></table></figure></div>
<p>​readme.txt放到learngit目录下（子目录也行）<br>​$ git add readme.txt<br>​$ git commit -m “wrote a readme file”<br>​​-m后面输入的是本次提交的说明<br>将所有文件添加到缓存区<br>$ git add *</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">## 修改文件，掌握变化</span><br><span class="line">&#96;&#96;&#96;​</span><br><span class="line">$ git status</span><br><span class="line">​​掌握仓库当前的状态</span><br><span class="line">​$ git diff readme.txt</span><br><span class="line">​​查看修改内容</span><br></pre></td></tr></table></figure></div>
<h2 id="提交修改"><a href="#提交修改" class="headerlink" title="提交修改"></a>提交修改</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git add readme.txt</span><br><span class="line">​$ git commit -m &quot;add distributed&quot;</span><br></pre></td></tr></table></figure></div>
<h1 id="版本穿梭"><a href="#版本穿梭" class="headerlink" title="版本穿梭"></a>版本穿梭</h1><p>​$ git log<br>​$ git log –pretty=oneline<br>​​显示从最近到最远的提交日志</p>
<h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><p>​$ git reset –hard HEAD^<br>​​回退到上一个版本<br>​$ cat readme.txt<br>​​查看文本<br>​$ git reflog<br>​​查看命令历史，以便确定要回到未来的哪个版本<br>​$ git reset –hard 3628164<br>​​指定回到未来的某个版本（版本号没必要写全）</p>
<h2 id="工作区和暂存区"><a href="#工作区和暂存区" class="headerlink" title="工作区和暂存区"></a>工作区和暂存区</h2><p>​git add把文件添加进去，实际上就是把文件修改添加到暂存区<br>​git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支</p>
<h2 id="管理修改"><a href="#管理修改" class="headerlink" title="管理修改"></a>管理修改</h2><p>​git commit只负责把暂存区的修改提交了。每次修改，如果不add到暂存区，那就不会加入到commit中</p>
<h2 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h2><p>​$ git checkout – readme.txt<br>​​就是让这个文件回到最近一次git commit或git add时的状态<br>​场景1：修改工作区，没有add。用命令git checkout – file。</p>
<p>​场景2：修改工作区，已经add。分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。</p>
<p>​场景3：修改工作区，已add,已commmit,还没推送远程，使用回退$ git reset –hard HEAD^</p>
<h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><p>​场景1：本地删，也想在仓库删。$ git rm test.txt  –》 $ git commit<br>​场景2：本地删，误删想恢复。$ git checkout – test.txt​“一键还原”</p>
<h1 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h1><h2 id="GitHub："><a href="#GitHub：" class="headerlink" title="GitHub："></a>GitHub：</h2><p>这个网站就是提供Git仓库托管服务的，所以，只要注册一个GitHub账号，就可以免费获得Git远程仓库。</p>
<p>你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的</p>
<p>创建SSH Key：<br><code>$ ssh-keygen -t rsa -C &quot;hhdwwt@163.com&quot;</code></p>
<p>GitHub，打开“Account settings”，“SSH Keys”页面：然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：</p>
<h2 id="添加远程库"><a href="#添加远程库" class="headerlink" title="添加远程库"></a>添加远程库</h2><p>要关联一个远程库，使用命令<br>$ git remote add origin git@server-name:path/repo-name.git<br>$ git remote add origin <a href="mailto:git@github.com">git@github.com</a>:Machine4869/learngit.git<br>关联后，使用命令第一次推送master分支的所有内容；<br>git push -u origin master<br>此后，每次本地提交后，只要有必要，就可以使用命令推送最新修改；<br>git push origin master<br>*分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候​是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！</p>
<h2 id="从远程仓库克隆"><a href="#从远程仓库克隆" class="headerlink" title="从远程仓库克隆"></a>从远程仓库克隆</h2><p>远程库已经准备好了，下一步是用命令git clone克隆一个本地库：<br>$ git clone <a href="mailto:git@github.com">git@github.com</a>:Machine4869/gitskills.git<br>Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。<br>分支管理<br>创建与合并分支<br>创建dev分支，然后切换到dev分支：<br>$ git checkout -b dev<br>相当于：<br>$ git branch dev<br>$ git checkout dev</p>
<p>查看当前分支：<br>$ git branch</p>
<p>合并某分支到当前分支：<br>$ git merge dev</p>
<p>删除分支：<br>$ git branch -d dev</p>
<p>解决冲突</p>
<p>用带参数的git log也可以看到分支的合并情况：<br>$ git log –graph –pretty=oneline –abbrev-commit</p>
<p>*当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。<br>用git log –graph命令可以看到分支合并图。</p>
<p>分支管理策略<br>不使用Fast forward模式，merge后就像这样：</p>
<p>no-ff参数，表示禁用Fast forward,合并后分支信息会被保留：<br>$ git merge –no-ff -m “merge with no-ff” dev</p>
<p>团队合作的分支看起来就像这样：</p>
<p>干活都在dev上，master仅用来发布新版本。Dev和master两个分支在远程要和本地同步</p>
<p>BUG分支<br>*修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；<br>当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。</p>
<p>把当前工作现场“储藏”起来：<br>$ git stash<br>查看：<br>$ git stash list<br>恢复后，stash内容并不删除：<br>git stash apply<br>删除<br>git stash drop<br>恢复的同时把stash内容也删了：<br>git stash pop</p>
<p>Feature分支<br>*开发一个新feature，最好新建一个分支；<br>如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。$ git branch -d feature-vulcan删不掉</name></p>
<p>强行删除未合并的分支：<br>$ git branch -D feature-vulcan<br>多人协作<br>推送分支<br>$ git push origin dev</p>
<p><em>因此，多人协作的工作模式通常是这样：<br>首先，可以试图用git push origin branch-name推送自己的修改；<br>如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；<br>如果合并有冲突，则解决冲突，并在本地提交；<br>没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！<br>如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch –set-upstream branch-name ​origin/branch-name。<br>​<br>​</em>查看远程库信息，使用git remote -v；<br>​ 本地新建的分支如果不推送到远程，对其他人就是不可见的；<br>从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；<br>在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；<br>建立本地分支和远程分支的关联，使用git branch –set-upstream branch-name origin/branch-name；<br>从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。​<br>​<br>标签管理<br>创建标签<br>打一个新标签：<br>$ git tag v1.0<br>查看所有标签：<br>$ git tag</p>
<p>*默认标签是打在最新提交的commit上的</p>
<p>找到历史提交的commit id：<br>$ git log –pretty=oneline –abbrev-commit<br>对指定的commit id打标签：<br>$ git tag v0.9 6224937<br>查看标签信息：​<br>$ git show v0.9</p>
<p>*用PGP签名的标签是不可伪造的，因为可以验证PGP签名。<br>​<br>操作标签<br>删除标签：<br>$ git tag -d v0.1​<br>推送某个标签到远程：<br>$ git push origin v1.0<br>一次性推送全部尚未推送到远程的本地标签：<br>$ git push origin –tags<br>删除远程标签：<br>​先从本地删除：<br>​$ git tag -d v0.9​<br>​然后，从远程删除：<br>​$ git push origin :refs/tags/v0.9<br>使用GITHUB<br>下载别人的项目：<br>​你可以访问它的项目主页，点“Fork”就在自己的账号下克隆了一个仓库。<br>​然后，从自己的账号下clone：<br>​git clone <a href="mailto:git@github.com">git@github.com</a>:自己的账号/bootstrap.git<br>自定义GIT<br>忽略特殊文件<br>在Git工作区的根目录下创建一个特殊的.gitignore文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件。<br>不需要从头写.gitignore文件，GitHub已经为我们准备了各种配置文件，只需要组合一下就可以使用了。所有配置文件可以直接在线浏览：<a href="https://github.com/github/gitignore​" target="_blank" rel="noopener">https://github.com/github/gitignore​</a><br>​<br>​<br>​</p>
]]></content>
      <categories>
        <category>项目管理</category>
        <category>git</category>
      </categories>
      <tags>
        <tag>项目管理</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言笔记</title>
    <url>/2018/02/24/15326721810026/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>参考：【itheima】</p>
</blockquote>
<p>[TOC]</p>
<h1 id="C语言概述"><a href="#C语言概述" class="headerlink" title="C语言概述"></a>C语言概述</h1><h2 id="第一个C程序"><a href="#第一个C程序" class="headerlink" title="第一个C程序"></a>第一个C程序</h2><h3 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//这是第一个C语言代码</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"hello world\n"</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="gcc编译器"><a href="#gcc编译器" class="headerlink" title="gcc编译器"></a>gcc编译器</h3><p>1） gcc编译器介绍</p>
<p>​    编译器是将高级计算机语言翻译为低级机器语言的程序。</p>
<p>​    gcc（GNU Compiler Collection，GNU 编译器套件），是由 GNU 开发的编程语言编译器。gcc原本作为GNU操作系统的官方编译器，现已被大多数类Unix操作系统（如Linux、BSD、Mac OS X等）采纳为标准的编译器，gcc同样适用于微软的Windows。</p>
<p>​    gcc最初用于编译C语言，随着项目的发展gcc已经成为了能够编译C、C++、Java、Ada、fortran、Object C、Object C++、Go语言的编译器大家族。</p>
<p>2） 编译命令使用</p>
<p>格式</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gcc [-option1] ... &lt;filename&gt;</span><br><span class="line">g++ [-option1] ... &lt;filename&gt;</span><br></pre></td></tr></table></figure></div>

<p>常用选项说明</p>
<table>
<thead>
<tr>
<th><strong>选项</strong></th>
<th><strong>含义</strong></th>
</tr>
</thead>
<tbody><tr>
<td>-o file</td>
<td>指定生成的输出文件名为file</td>
</tr>
<tr>
<td>-E</td>
<td>只进行预处理</td>
</tr>
<tr>
<td>-S(大写)</td>
<td>只进行预处理和编译</td>
</tr>
<tr>
<td>-c(小写)</td>
<td>只进行预处理、编译和汇编</td>
</tr>
</tbody></table>
<p>使用(Linux下)：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gcc hello.c  &#x2F;&#x2F;没有指定可执行程序文件名，默认生成a.out</span><br><span class="line">.&#x2F;a.out		 &#x2F;&#x2F;执行</span><br><span class="line">gccc hello.c -o hello	&#x2F;&#x2F;指定名字</span><br></pre></td></tr></table></figure></div>

<p>3）win下gcc环境配置</p>
<h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. #include&lt; &gt; 与 #include &quot;&quot;的区别：</span><br><span class="line">	&lt; &gt; 表示系统直接按系统指定的目录检索</span><br><span class="line">	&quot;&quot; 表示系统先在 &quot;&quot; 指定的路径(没写路径代表当前路径)查找头文件，如果找不到，再按系统指定的目录检索</span><br><span class="line">2. return语句</span><br><span class="line">	main定义的时候前面是void，那么return后面什么也不需要写</span><br><span class="line">	在main函数中return 0代表程序执行成功，return -1代表程序执行失败</span><br><span class="line">	int main()和void main()在C语言中是一样的，但C++只接受int main这种定义方式</span><br></pre></td></tr></table></figure></div>

<h2 id="system函数"><a href="#system函数" class="headerlink" title="system函数"></a>system函数</h2><p>使用</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">int system(const char *command);</span><br><span class="line">功能：在已经运行的程序中执行另外一个外部程序</span><br><span class="line">参数：外部可执行程序名字</span><br><span class="line">返回值：</span><br><span class="line">    成功：不同系统返回值不一样</span><br><span class="line">    失败：通常是 - 1</span><br></pre></td></tr></table></figure></div>

<p>示例</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//system("calc"); //windows平台</span></span><br><span class="line">	system(<span class="string">"ls"</span>); <span class="comment">//Linux平台, 需要头文件#include &lt;stdlib.h&gt;</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="C语言编译过程"><a href="#C语言编译过程" class="headerlink" title="C语言编译过程"></a>C语言编译过程</h2><h3 id="C程序编译步骤"><a href="#C程序编译步骤" class="headerlink" title="C程序编译步骤"></a>C程序编译步骤</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4步：</span><br><span class="line">1. 预处理：宏定义展开、头文件展开、条件编译等，同时将代码中的注释删除，这里并不会检查语法</span><br><span class="line">2. 编译：检查语法，将预处理后文件编译生成汇编文件</span><br><span class="line">3. 汇编：将汇编文件生成目标文件(二进制文件)</span><br><span class="line">4. 链接：C语言写的程序是需要依赖各种库的，所以编译之后还需要把库链接到最终的可执行程序中去</span><br></pre></td></tr></table></figure></div>

<h3 id="gcc编译过程"><a href="#gcc编译过程" class="headerlink" title="gcc编译过程"></a>gcc编译过程</h3><p>分步编译</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">预处理：gcc -E hello.c -o hello.i</span><br><span class="line">编  译：gcc -S hello.i -o hello.s</span><br><span class="line">汇  编：gcc -c hello.s -o hello.o</span><br><span class="line">链  接：gcc    hello.o -o hello_elf</span><br></pre></td></tr></table></figure></div>

<table>
<thead>
<tr>
<th><strong>选项</strong></th>
<th><strong>含义</strong></th>
</tr>
</thead>
<tbody><tr>
<td>-E</td>
<td>只进行预处理</td>
</tr>
<tr>
<td>-S(大写)</td>
<td>只进行预处理和编译</td>
</tr>
<tr>
<td>-c(小写)</td>
<td>只进行预处理、编译和汇编</td>
</tr>
<tr>
<td>-o file</td>
<td>指定生成的输出文件名为 file</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th><strong>文件后缀</strong></th>
<th><strong>含义</strong></th>
</tr>
</thead>
<tbody><tr>
<td>.c</td>
<td>C 语言文件</td>
</tr>
<tr>
<td>.i</td>
<td>预处理后的 C 语言文件</td>
</tr>
<tr>
<td>.s</td>
<td>编译后的汇编文件</td>
</tr>
<tr>
<td>.o</td>
<td>编译后的目标文件</td>
</tr>
</tbody></table>
<p>一步编译</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gcc hello.c -o demo		&#x2F;&#x2F;经过：预处理、编译、汇编、链接的过程</span><br></pre></td></tr></table></figure></div>

<h2 id="集成开发环境IDE"><a href="#集成开发环境IDE" class="headerlink" title="集成开发环境IDE"></a>集成开发环境IDE</h2><h3 id="Qt-Creator"><a href="#Qt-Creator" class="headerlink" title="Qt Creator"></a>Qt Creator</h3><h3 id="Microsoft-Visual-Studio"><a href="#Microsoft-Visual-Studio" class="headerlink" title="Microsoft Visual Studio"></a>Microsoft Visual Studio</h3><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="常量与变量"><a href="#常量与变量" class="headerlink" title="常量与变量"></a>常量与变量</h2><h3 id="32个关键字"><a href="#32个关键字" class="headerlink" title="32个关键字"></a>32个关键字</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 数据类型关键字（12个）：</span><br><span class="line">	char short int long float double unsigned signed struct enum void</span><br><span class="line">2. 控制语句关键字（12个）：</span><br><span class="line">	A循环语句 for do while break continue</span><br><span class="line">	B条件语句 if else goto</span><br><span class="line">	C开关语句 switch case default</span><br><span class="line">	D返回语句 return</span><br><span class="line">3. 存储类型关键字（5个）：</span><br><span class="line">    auto extern register static const</span><br><span class="line">4. 其它关键字（3个）：</span><br><span class="line">	sizeof typedef volatile</span><br></pre></td></tr></table></figure></div>

<h3 id="数据类型-1"><a href="#数据类型-1" class="headerlink" title="数据类型"></a>数据类型</h3><p>数据类型的作用：编译器预算对象（变量）分配的内存空间大小。</p>
<p><a href="/2018/02/24/15326721810026/1.png" data-fancybox="group" data-caption="1" class="fancybox"><img alt="1" title="1" data-src="/2018/02/24/15326721810026/1.png" class="lazyload"></a></p>
<h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><table>
<thead>
<tr>
<th>整型常量</th>
<th>100，200，-100，0</th>
</tr>
</thead>
<tbody><tr>
<td>实型常量</td>
<td>3.14  ， 0.125，-3.123</td>
</tr>
<tr>
<td>字符型常量</td>
<td>‘a’,‘b’,‘1’,‘\n’</td>
</tr>
<tr>
<td>字符串常量</td>
<td>“a”,“ab”，“12356”</td>
</tr>
</tbody></table>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 变量在编译时为其分配相应的内存空间</span><br><span class="line">2. 可以通过其名字和地址访问相应内存</span><br><span class="line">3. 声明和定义区别</span><br><span class="line">	声明变量不需要建立存储空间，如：extern int a;</span><br><span class="line">	定义变量需要建立存储空间，如：int b;</span><br><span class="line">	int b 它既是声明，同时又是定义</span><br></pre></td></tr></table></figure></div>

<h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 10 <span class="comment">//声明了一个常量，名字叫MAX，值是10，常量的值一旦初始化不可改</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a;	<span class="comment">//定义了一个变量，其类型为int，名字叫a</span></span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">int</span> b = <span class="number">10</span>; <span class="comment">//定义一个const常量，名为叫b，值为10</span></span><br><span class="line">	<span class="comment">//b = 11; //err,常量的值不能改变</span></span><br><span class="line">	<span class="comment">//MAX = 100;	//err,常量的值不能改变</span></span><br><span class="line">	a = MAX;<span class="comment">//将abc的值设置为MAX的值</span></span><br><span class="line">	a = <span class="number">123</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a); <span class="comment">//打印变量a的值</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h2><h3 id="C语言如何表示相应进制数"><a href="#C语言如何表示相应进制数" class="headerlink" title="C语言如何表示相应进制数"></a>C语言如何表示相应进制数</h3><table>
<thead>
<tr>
<th>十进制</th>
<th>以正常数字1-9开头，如123</th>
</tr>
</thead>
<tbody><tr>
<td>八进制</td>
<td>以数字0开头，如0123</td>
</tr>
<tr>
<td>十六进制</td>
<td>以0x开头，如0x123</td>
</tr>
<tr>
<td>二进制</td>
<td>C语言不能直接书写二进制数</td>
</tr>
</tbody></table>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">123</span>;		<span class="comment">//十进制方式赋值</span></span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">0123</span>;		<span class="comment">//八进制方式赋值， 以数字0开头</span></span><br><span class="line">	<span class="keyword">int</span> c = <span class="number">0xABC</span>;	<span class="comment">//十六进制方式赋值</span></span><br><span class="line">	<span class="comment">//如果在printf中输出一个十进制数那么用%d，八进制用%o，十六进制是%x</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"十进制：%d\n"</span>,a );</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"八进制：%o\n"</span>, b);	<span class="comment">//%o,为字母o,不是数字</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"十六进制：%x\n"</span>, c);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="计算机内存数值存储方式"><a href="#计算机内存数值存储方式" class="headerlink" title="计算机内存数值存储方式"></a>计算机内存数值存储方式</h2><h3 id="原码"><a href="#原码" class="headerlink" title="原码"></a>原码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一个数的原码(原始的二进制码)有如下特点：</span><br><span class="line">    - 最高位做为符号位，0表示正,为1表示负</span><br><span class="line">    - 其它数值部分就是数值本身绝对值的二进制数</span><br><span class="line">    - 负数的原码是在其绝对值的基础上，最高位变为1</span><br></pre></td></tr></table></figure></div>

<table>
<thead>
<tr>
<th><strong>十进制数</strong></th>
<th><strong>原码</strong></th>
</tr>
</thead>
<tbody><tr>
<td>+15</td>
<td>0000 1111</td>
</tr>
<tr>
<td>-15</td>
<td>1000 1111</td>
</tr>
<tr>
<td>+0</td>
<td>0000 0000</td>
</tr>
<tr>
<td>-0</td>
<td>1000 0000</td>
</tr>
</tbody></table>
<p>原码不便于加减运算</p>
<h3 id="反码"><a href="#反码" class="headerlink" title="反码"></a>反码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对于正数，反码与原码相同</span><br><span class="line">对于负数，符号位不变，其它部分取反(1变0,0变1)</span><br></pre></td></tr></table></figure></div>

<table>
<thead>
<tr>
<th><strong>十进制数</strong></th>
<th><strong>反码</strong></th>
</tr>
</thead>
<tbody><tr>
<td>+15</td>
<td>0000 1111</td>
</tr>
<tr>
<td>-15</td>
<td>1111 0000</td>
</tr>
<tr>
<td>+0</td>
<td>0000 0000</td>
</tr>
<tr>
<td>-0</td>
<td>1111 1111</td>
</tr>
</tbody></table>
<p>反码运算也不方便，通常用来作为求补码的中间过渡。</p>
<h3 id="补码"><a href="#补码" class="headerlink" title="补码"></a>补码</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在计算机系统中，数值一律用补码来存储。</span><br><span class="line">补码特点：</span><br><span class="line">	1. 对于正数，原码、反码、补码相同</span><br><span class="line">    2. 对于负数，其补码为它的反码加1</span><br><span class="line">    3. 补码符号位不动，其他位求反，最后整个数加1，得到原码</span><br></pre></td></tr></table></figure></div>

<table>
<thead>
<tr>
<th><strong>十进制数</strong></th>
<th><strong>补码</strong></th>
</tr>
</thead>
<tbody><tr>
<td>+15</td>
<td>0000 1111</td>
</tr>
<tr>
<td>-15</td>
<td>1111 0001</td>
</tr>
<tr>
<td>+0</td>
<td>0000 0000</td>
</tr>
<tr>
<td>-0</td>
<td>0000 0000</td>
</tr>
</tbody></table>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span>  a = <span class="number">-15</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%x\n"</span>, a);</span><br><span class="line">    <span class="comment">//补码符号位不动，其他位求反，最后整个数加1，得到原码</span></span><br><span class="line">	<span class="comment">//结果为 fffffff1(计算机存储的反码)</span></span><br><span class="line">	<span class="comment">//fffffff1对应的二进制：1111 1111 1111 1111 1111 1111 1111 0001</span></span><br><span class="line">	<span class="comment">//符号位不变，其它取反：1000 0000 0000 0000 0000 0000 0000 1110</span></span><br><span class="line">	<span class="comment">//上面加1：1000 0000 0000 0000 0000 0000 0000 1111  最高位1代表负数，就是-15</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="补码的意义"><a href="#补码的意义" class="headerlink" title="补码的意义"></a>补码的意义</h3><p>示例1：用8位二进制数分别表示+0和-0</p>
<table>
<thead>
<tr>
<th><strong>十进制数</strong></th>
<th><strong>原码</strong></th>
</tr>
</thead>
<tbody><tr>
<td>+0</td>
<td>0000 0000</td>
</tr>
<tr>
<td>-0</td>
<td>1000 0000</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th><strong>十进制数</strong></th>
<th><strong>反码</strong></th>
</tr>
</thead>
<tbody><tr>
<td>+0</td>
<td>0000 0000</td>
</tr>
<tr>
<td>-0</td>
<td>1111 1111</td>
</tr>
</tbody></table>
<p>但是如果以补码方式存储，补码统一了零的编码：</p>
<table>
<thead>
<tr>
<th><strong>十进制数</strong></th>
<th><strong>补码</strong></th>
</tr>
</thead>
<tbody><tr>
<td>+0</td>
<td>0000 0000</td>
</tr>
<tr>
<td>-0</td>
<td>10000 0000  //由于只用8位描述，最高位1丢弃，变为0000 0000</td>
</tr>
</tbody></table>
<p>示例2：计算9-6的结果</p>
<p>以原码方式相加：</p>
<table>
<thead>
<tr>
<th><strong>十进制数</strong></th>
<th><strong>原码</strong></th>
</tr>
</thead>
<tbody><tr>
<td>9</td>
<td>0000 1001</td>
</tr>
<tr>
<td>-6</td>
<td>1000 0110</td>
</tr>
</tbody></table>
<p>结果为1000 1111 =  -15，不正确。</p>
<p>以补码方式相加：</p>
<table>
<thead>
<tr>
<th><strong>十进制数</strong></th>
<th><strong>补码</strong></th>
</tr>
</thead>
<tbody><tr>
<td>9</td>
<td>0000 1001</td>
</tr>
<tr>
<td>-6</td>
<td>1111 1010</td>
</tr>
</tbody></table>
<p>相加为1 0000 0001 益处，剩余8位二进制表示的是3，正确。</p>
<p><strong>在计算机系统中，数值一律用补码来存储</strong>，主要原因是：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">统一了零的编码</span><br><span class="line">将符号位和其它位统一处理</span><br><span class="line">将减法运算转变为加法运算</span><br><span class="line">两个用补码表示的数相加时，如果最高位(符号位)有进位，则进位被舍弃</span><br></pre></td></tr></table></figure></div>

<h2 id="sizeof关键字"><a href="#sizeof关键字" class="headerlink" title="sizeof关键字"></a>sizeof关键字</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	- sizeof不是函数，所以不需要包含任何头文件，它的功能是计算一个数据类型的大小，单位为字节</span></span><br><span class="line"><span class="comment">    - sizeof的返回值为size_t</span></span><br><span class="line"><span class="comment">    - size_t类型在32位操作系统下是unsigned int，是一个无符号的整数</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="keyword">sizeof</span>(a);<span class="comment">//sizeof得到指定值占用内存的大小，单位：字节</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"b = %d\n"</span>, b);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">size_t</span> c = <span class="keyword">sizeof</span>(a);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"c = %u\n"</span>, c);<span class="comment">//用无符号数的方式输出c的值</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="整型：int"><a href="#整型：int" class="headerlink" title="整型：int"></a>整型：int</h2><h3 id="整型变量的定义和输出"><a href="#整型变量的定义和输出" class="headerlink" title="整型变量的定义和输出"></a>整型变量的定义和输出</h3><table>
<thead>
<tr>
<th><strong>打印格式</strong></th>
<th><strong>含义</strong></th>
</tr>
</thead>
<tbody><tr>
<td>%d</td>
<td>输出一个有符号的10进制int类型</td>
</tr>
<tr>
<td>%o(字母o)</td>
<td>输出8进制的int类型</td>
</tr>
<tr>
<td>%x</td>
<td>输出16进制的int类型，字母以小写输出</td>
</tr>
<tr>
<td>%X</td>
<td>输出16进制的int类型，字母以大写写输出</td>
</tr>
<tr>
<td>%u</td>
<td>输出一个10进制的无符号数</td>
</tr>
</tbody></table>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">123</span>;	<span class="comment">//定义变量a，以10进制方式赋值为123</span></span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">0567</span>;	<span class="comment">//定义变量b，以8进制方式赋值为0567</span></span><br><span class="line">	<span class="keyword">int</span> c = <span class="number">0xabc</span>;	<span class="comment">//定义变量c，以16进制方式赋值为0xabc</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"a = %d\n"</span>, a);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"8进制：b = %o\n"</span>, b);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"10进制：b = %d\n"</span>, b);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"16进制：c = %x\n"</span>, c);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"16进制：c = %X\n"</span>, c);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"10进制：c = %d\n"</span>, c);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> d = <span class="number">0xffffffff</span>; <span class="comment">//定义无符号int变量d，以16进制方式赋值</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"有符号方式打印：d = %d\n"</span>, d);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"无符号方式打印：d = %u\n"</span>, d);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="整型变量的输入"><a href="#整型变量的输入" class="headerlink" title="整型变量的输入"></a>整型变量的输入</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"请输入a的值："</span>);</span><br><span class="line">	<span class="comment">//不要加“\n”</span></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"a = %d\n"</span>, a); <span class="comment">//打印a的值</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="short、int、long、long-long"><a href="#short、int、long、long-long" class="headerlink" title="short、int、long、long long"></a>short、int、long、long long</h3><table>
<thead>
<tr>
<th><strong>数据类型</strong></th>
<th><strong>占用空间</strong></th>
</tr>
</thead>
<tbody><tr>
<td>short(短整型)</td>
<td>2字节</td>
</tr>
<tr>
<td>int(整型)</td>
<td>4字节</td>
</tr>
<tr>
<td>long(长整形)</td>
<td>Windows为4字节，Linux为4字节(32位)，8字节(64位)</td>
</tr>
<tr>
<td>long long(长长整形)</td>
<td>8字节</td>
</tr>
</tbody></table>
<p>注意</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">当一个小的数据类型赋值给一个大的数据类型，不会出错，因为编译器会自动转化。但当一个大的类型赋值给一个小的数据类型，那么就可能丢失高位。</span><br></pre></td></tr></table></figure></div>

<table>
<thead>
<tr>
<th><strong>整型常量</strong></th>
<th><strong>所需类型</strong></th>
</tr>
</thead>
<tbody><tr>
<td>10</td>
<td>代表int类型</td>
</tr>
<tr>
<td>10l, 10L</td>
<td>代表long类型</td>
</tr>
<tr>
<td>10ll, 10LL</td>
<td>代表long long类型</td>
</tr>
<tr>
<td>10u, 10U</td>
<td>代表unsigned int类型</td>
</tr>
<tr>
<td>10ul, 10UL</td>
<td>代表unsigned long类型</td>
</tr>
<tr>
<td>10ull, 10ULL</td>
<td>代表unsigned long long类型</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th><strong>打印格式</strong></th>
<th><strong>含义</strong></th>
</tr>
</thead>
<tbody><tr>
<td>%hd</td>
<td>输出short类型</td>
</tr>
<tr>
<td>%d</td>
<td>输出int类型</td>
</tr>
<tr>
<td>%l</td>
<td>输出long类型</td>
</tr>
<tr>
<td>%ll</td>
<td>输出long long类型</td>
</tr>
<tr>
<td>%hu</td>
<td>输出unsigned short类型</td>
</tr>
<tr>
<td>%u</td>
<td>输出unsigned int类型</td>
</tr>
<tr>
<td>%lu</td>
<td>输出unsigned long类型</td>
</tr>
<tr>
<td>%llu</td>
<td>输出unsigned long long类型</td>
</tr>
</tbody></table>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	short a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">long</span> c = <span class="number">10l</span>; <span class="comment">//或者10L</span></span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> d = <span class="number">10l</span>l; <span class="comment">//或者10LL</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"sizeof(a) = %u\n"</span>, <span class="keyword">sizeof</span>(a));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"sizeof(b) = %u\n"</span>, <span class="keyword">sizeof</span>(b));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"sizeof(c) = %u\n"</span>, <span class="keyword">sizeof</span>(c));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"sizeof(c) = %u\n"</span>, <span class="keyword">sizeof</span>(d));</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"short a = %hd\n"</span>, a);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"int b = %d\n"</span>, b);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"long c = %ld\n"</span>, c);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"long long d = %lld\n"</span>, d);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">unsigned</span> short a2 = <span class="number">20u</span>;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> b2 = <span class="number">20u</span>;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">long</span> c2= <span class="number">20u</span>l; </span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> d2 = <span class="number">20u</span>ll; </span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"unsigned short a = %hu\n"</span>, a2);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"unsigned int b = %u\n"</span>, b2);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"unsigned long c = %lu\n"</span>, c2);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"unsigned long long d = %llu\n"</span>, d2);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="有符号数和无符号数区别"><a href="#有符号数和无符号数区别" class="headerlink" title="有符号数和无符号数区别"></a>有符号数和无符号数区别</h3><p>1) 有符号数</p>
<p>​    有符号数是最高位为符号位，0代表正数，1代表负数。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">signed</span> <span class="keyword">int</span> a = <span class="number">-1089474374</span>; <span class="comment">//定义有符号整型变量a</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%X\n"</span>, a); <span class="comment">//结果为 BF0FF0BA</span></span><br><span class="line">	<span class="comment">//B    F    0    F    F    0    B	  A</span></span><br><span class="line">	<span class="comment">//1011 1111 0000 1111 1111 0000 1011 1010(补码)</span></span><br><span class="line">    <span class="comment">//把首位作为符号位，计算成原码后为-1089474374</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>2) 无符号数</p>
<p>​    无符号数最高位不是符号位，而就是数的一部分，无符号数不可能是负数。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> a = <span class="number">3236958022</span>; <span class="comment">//定义无符号整型变量a</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%X\n"</span>, a); </span><br><span class="line">    <span class="comment">//结果为 C0F00F46(补码)</span></span><br><span class="line">    <span class="comment">//首位不是符号位，正数，其原码=反码=补码，换算后为3236958022</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	当我们写程序要处理一个不可能出现负值的时候，一般用无符号数，这样可以增大数的表达最大值。</span></span><br><span class="line"><span class="comment">	（因为可以把原来的符号位当作数字）</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div>

<p>3) 有符号和无符号整型取值范围</p>
<p><a href="/2018/02/24/15326721810026/2.png" data-fancybox="group" data-caption="2" class="fancybox"><img alt="2" title="2" data-src="/2018/02/24/15326721810026/2.png" class="lazyload"></a></p>
<h2 id="字符型：char"><a href="#字符型：char" class="headerlink" title="字符型：char"></a>字符型：char</h2><h3 id="字符变量的定义和输出"><a href="#字符变量的定义和输出" class="headerlink" title="字符变量的定义和输出"></a>字符变量的定义和输出</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	- char的本质就是一个1字节大小的整型</span></span><br><span class="line"><span class="comment">	- 将该字符对应的 ASCII 编码放到变量的存储单元中</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> ch = <span class="string">'a'</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"sizeof(ch) = %u\n"</span>, <span class="keyword">sizeof</span>(ch));</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"ch[%%c] = %c\n"</span>, ch); <span class="comment">//打印字符</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"ch[%%d] = %d\n"</span>, ch); <span class="comment">//打印‘a’ ASCII的值</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">char</span> A = <span class="string">'A'</span>;</span><br><span class="line">	<span class="keyword">char</span> a = <span class="string">'a'</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"a = %d\n"</span>, a);		<span class="comment">//97</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"A = %d\n"</span>, A);	<span class="comment">//65</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"A = %c\n"</span>, <span class="string">'a'</span> - <span class="number">32</span>); <span class="comment">//小写a转大写A</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"a = %c\n"</span>, <span class="string">'A'</span> + <span class="number">32</span>); <span class="comment">//大写A转小写a</span></span><br><span class="line">	ch = <span class="string">' '</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"空字符：%d\n"</span>, ch); <span class="comment">//空字符ASCII的值为32</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"A = %c\n"</span>, <span class="string">'a'</span> - <span class="string">' '</span>); <span class="comment">//小写a转大写A</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"a = %c\n"</span>, <span class="string">'A'</span> + <span class="string">' '</span>); <span class="comment">//大写A转小写a</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="字符变量的输入"><a href="#字符变量的输入" class="headerlink" title="字符变量的输入"></a>字符变量的输入</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> ch;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"请输入ch的值："</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//不要加“\n”</span></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;ch);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"ch = %c\n"</span>, ch); <span class="comment">//打印ch的字符</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="ASCII对照表"><a href="#ASCII对照表" class="headerlink" title="ASCII对照表"></a>ASCII对照表</h3><table>
<thead>
<tr>
<th><em>ASCII</em>值</th>
<th>控制字符</th>
<th>ASCII值</th>
<th>字符</th>
<th>ASCII值</th>
<th>字符</th>
<th>ASCII值</th>
<th>字符</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>NUT</td>
<td>32</td>
<td>(space)</td>
<td>64</td>
<td>@</td>
<td>96</td>
<td>、</td>
</tr>
<tr>
<td>1</td>
<td>SOH</td>
<td>33</td>
<td>!</td>
<td>65</td>
<td>A</td>
<td>97</td>
<td>a</td>
</tr>
<tr>
<td>2</td>
<td>STX</td>
<td>34</td>
<td>“</td>
<td>66</td>
<td>B</td>
<td>98</td>
<td>b</td>
</tr>
<tr>
<td>3</td>
<td>ETX</td>
<td>35</td>
<td>#</td>
<td>67</td>
<td>C</td>
<td>99</td>
<td>c</td>
</tr>
<tr>
<td>4</td>
<td>EOT</td>
<td>36</td>
<td>$</td>
<td>68</td>
<td>D</td>
<td>100</td>
<td>d</td>
</tr>
<tr>
<td>5</td>
<td>ENQ</td>
<td>37</td>
<td>%</td>
<td>69</td>
<td>E</td>
<td>101</td>
<td>e</td>
</tr>
<tr>
<td>6</td>
<td>ACK</td>
<td>38</td>
<td>&amp;</td>
<td>70</td>
<td>F</td>
<td>102</td>
<td>f</td>
</tr>
<tr>
<td>7</td>
<td>BEL</td>
<td>39</td>
<td>,</td>
<td>71</td>
<td>G</td>
<td>103</td>
<td>g</td>
</tr>
<tr>
<td>8</td>
<td>BS</td>
<td>40</td>
<td>(</td>
<td>72</td>
<td>H</td>
<td>104</td>
<td>h</td>
</tr>
<tr>
<td>9</td>
<td>HT</td>
<td>41</td>
<td>)</td>
<td>73</td>
<td>I</td>
<td>105</td>
<td>i</td>
</tr>
<tr>
<td>10</td>
<td>LF</td>
<td>42</td>
<td>*</td>
<td>74</td>
<td>J</td>
<td>106</td>
<td>j</td>
</tr>
<tr>
<td>11</td>
<td>VT</td>
<td>43</td>
<td>+</td>
<td>75</td>
<td>K</td>
<td>107</td>
<td>k</td>
</tr>
<tr>
<td>12</td>
<td>FF</td>
<td>44</td>
<td>,</td>
<td>76</td>
<td>L</td>
<td>108</td>
<td>l</td>
</tr>
<tr>
<td>13</td>
<td>CR</td>
<td>45</td>
<td>-</td>
<td>77</td>
<td>M</td>
<td>109</td>
<td>m</td>
</tr>
<tr>
<td>14</td>
<td>SO</td>
<td>46</td>
<td>.</td>
<td>78</td>
<td>N</td>
<td>110</td>
<td>n</td>
</tr>
<tr>
<td>15</td>
<td>SI</td>
<td>47</td>
<td>/</td>
<td>79</td>
<td>O</td>
<td>111</td>
<td>o</td>
</tr>
<tr>
<td>16</td>
<td>DLE</td>
<td>48</td>
<td>0</td>
<td>80</td>
<td>P</td>
<td>112</td>
<td>p</td>
</tr>
<tr>
<td>17</td>
<td>DCI</td>
<td>49</td>
<td>1</td>
<td>81</td>
<td>Q</td>
<td>113</td>
<td>q</td>
</tr>
<tr>
<td>18</td>
<td>DC2</td>
<td>50</td>
<td>2</td>
<td>82</td>
<td>R</td>
<td>114</td>
<td>r</td>
</tr>
<tr>
<td>19</td>
<td>DC3</td>
<td>51</td>
<td>3</td>
<td>83</td>
<td>S</td>
<td>115</td>
<td>s</td>
</tr>
<tr>
<td>20</td>
<td>DC4</td>
<td>52</td>
<td>4</td>
<td>84</td>
<td>T</td>
<td>116</td>
<td>t</td>
</tr>
<tr>
<td>21</td>
<td>NAK</td>
<td>53</td>
<td>5</td>
<td>85</td>
<td>U</td>
<td>117</td>
<td>u</td>
</tr>
<tr>
<td>22</td>
<td>SYN</td>
<td>54</td>
<td>6</td>
<td>86</td>
<td>V</td>
<td>118</td>
<td>v</td>
</tr>
<tr>
<td>23</td>
<td>TB</td>
<td>55</td>
<td>7</td>
<td>87</td>
<td>W</td>
<td>119</td>
<td>w</td>
</tr>
<tr>
<td>24</td>
<td>CAN</td>
<td>56</td>
<td>8</td>
<td>88</td>
<td>X</td>
<td>120</td>
<td>x</td>
</tr>
<tr>
<td>25</td>
<td>EM</td>
<td>57</td>
<td>9</td>
<td>89</td>
<td>Y</td>
<td>121</td>
<td>y</td>
</tr>
<tr>
<td>26</td>
<td>SUB</td>
<td>58</td>
<td>:</td>
<td>90</td>
<td>Z</td>
<td>122</td>
<td>z</td>
</tr>
<tr>
<td>27</td>
<td>ESC</td>
<td>59</td>
<td>;</td>
<td>91</td>
<td>[</td>
<td>123</td>
<td>{</td>
</tr>
<tr>
<td>28</td>
<td>FS</td>
<td>60</td>
<td>&lt;</td>
<td>92</td>
<td>/</td>
<td>124</td>
<td>|</td>
</tr>
<tr>
<td>29</td>
<td>GS</td>
<td>61</td>
<td>=</td>
<td>93</td>
<td>]</td>
<td>125</td>
<td>}</td>
</tr>
<tr>
<td>30</td>
<td>RS</td>
<td>62</td>
<td>&gt;</td>
<td>94</td>
<td>^</td>
<td>126</td>
<td>`</td>
</tr>
<tr>
<td>31</td>
<td>US</td>
<td>63</td>
<td>?</td>
<td>95</td>
<td>_</td>
<td>127</td>
<td>DEL</td>
</tr>
</tbody></table>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ASCII 码大致由以下两部分组成：</span><br><span class="line">	1. ASCII 非打印控制字符： ASCII 表上的数字 0-31 分配给了控制字符，用于控制像打印机等一些外围设备。</span><br><span class="line">	2. ASCII 打印字符：数字 32-126 分配给了能在键盘上找到的字符，当查看或打印文档时就会出现。数字 127 代表 Del 命令。</span><br></pre></td></tr></table></figure></div>

<h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><table>
<thead>
<tr>
<th><strong>转义字符</strong></th>
<th><strong>含义</strong></th>
<th><strong>ASCII**</strong>码值（十进制）**</th>
</tr>
</thead>
<tbody><tr>
<td>\a</td>
<td>警报</td>
<td>007</td>
</tr>
<tr>
<td>\b</td>
<td>退格(BS) ，将当前位置移到前一列</td>
<td>008</td>
</tr>
<tr>
<td>\f</td>
<td>换页(FF)，将当前位置移到下页开头</td>
<td>012</td>
</tr>
<tr>
<td>\n</td>
<td>换行(LF) ，将当前位置移到下一行开头</td>
<td>010</td>
</tr>
<tr>
<td>\r</td>
<td>回车(CR) ，将当前位置移到本行开头</td>
<td>013</td>
</tr>
<tr>
<td>\t</td>
<td>水平制表(HT)  （跳到下一个TAB位置）</td>
<td>009</td>
</tr>
<tr>
<td>\v</td>
<td>垂直制表(VT)</td>
<td>011</td>
</tr>
<tr>
<td>\</td>
<td>代表一个反斜线字符”&quot;</td>
<td>092</td>
</tr>
<tr>
<td>&#39;</td>
<td>代表一个单引号（撇号）字符</td>
<td>039</td>
</tr>
<tr>
<td>&quot;</td>
<td>代表一个双引号字符</td>
<td>034</td>
</tr>
<tr>
<td>?</td>
<td>代表一个问号</td>
<td>063</td>
</tr>
<tr>
<td>\0</td>
<td>数字0</td>
<td>000</td>
</tr>
<tr>
<td>\ddd</td>
<td>8进制转义字符，d范围0~7</td>
<td>3位8进制</td>
</tr>
<tr>
<td>\xhh</td>
<td>16进制转义字符，h范围0<del>9，a</del>f，A~F</td>
<td>3位16进制</td>
</tr>
</tbody></table>
<p>注意： \a–\v  为不可打印字符。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"abc"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\refg\n"</span>); <span class="comment">//\r切换到句首， \n为换行键</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"abc"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\befg\n"</span>);<span class="comment">//\b为退格键， \n为换行键</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, <span class="string">'\123'</span>);<span class="comment">// '\123'为8进制转义字符，0123对应10进制数为83</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, <span class="string">'\x23'</span>);<span class="comment">// '\x23'为16进制转义字符，0x23对应10进制数为35</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="数值溢出"><a href="#数值溢出" class="headerlink" title="数值溢出"></a>数值溢出</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 当超过一个数据类型能够存放最大的范围时，数值会溢出。</span><br><span class="line">- 有符号位最高位溢出的区别：符号位溢出会导致数的正负发生改变，但最高位的溢出会导致最高位丢失。</span><br></pre></td></tr></table></figure></div>

<table>
<thead>
<tr>
<th><strong>数据类型</strong></th>
<th><strong>占用空间</strong></th>
<th><strong>取值范围</strong></th>
</tr>
</thead>
<tbody><tr>
<td>char</td>
<td>1字节</td>
<td>-128到 127(-27  ~ 27-1)</td>
</tr>
<tr>
<td>unsigned char</td>
<td>1字节</td>
<td>0 到 255(0 ~ 28-1)</td>
</tr>
</tbody></table>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> ch;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//符号位溢出会导致数的正负发生改变</span></span><br><span class="line">	ch = <span class="number">0x7f</span> + <span class="number">2</span>; <span class="comment">//127+2</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ch);</span><br><span class="line">	<span class="comment">//	0111 1111</span></span><br><span class="line">	<span class="comment">//+2后 1000 0001，这是负数补码，其原码为 1111 1111，结果为-127</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//最高位的溢出会导致最高位丢失</span></span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">char</span> ch2;</span><br><span class="line">	ch2 = <span class="number">0xff</span>+<span class="number">1</span>; <span class="comment">//255+1</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%u\n"</span>, ch2);</span><br><span class="line">	<span class="comment">//	  1111 1111</span></span><br><span class="line">	<span class="comment">//+1后 10000 0000， char只有8位最高位的溢出，结果为0000 0000，十进制为0</span></span><br><span class="line"></span><br><span class="line">	ch2 = <span class="number">0xff</span> + <span class="number">2</span>; <span class="comment">//255+1</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%u\n"</span>, ch2);</span><br><span class="line">	<span class="comment">//	  1111 1111</span></span><br><span class="line">	<span class="comment">//+1后 10000 0001， char只有8位最高位的溢出，结果为0000 0001，十进制为1</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="实型-浮点型-：float、double"><a href="#实型-浮点型-：float、double" class="headerlink" title="实型(浮点型)：float、double"></a>实型(浮点型)：float、double</h2><table>
<thead>
<tr>
<th><strong>数据类型</strong></th>
<th><strong>占用空间</strong></th>
<th><strong>有效数字范围</strong></th>
</tr>
</thead>
<tbody><tr>
<td>float</td>
<td>4字节</td>
<td>7位有效数字</td>
</tr>
<tr>
<td>double</td>
<td>8字节</td>
<td>15～16位有效数字</td>
</tr>
</tbody></table>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	- 不以f结尾的常量是double类型，以f结尾的常量(如3.14f)是float类型。</span></span><br><span class="line"><span class="comment">	- 由于浮点型变量是由有限的存储单元组成的，因此只能提供有限的有效数字。在有效位以外的数字将被舍去，这样可能会产生一些误差。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//传统方式赋值</span></span><br><span class="line">	<span class="keyword">float</span> a = <span class="number">3.14f</span>; <span class="comment">//或3.14F</span></span><br><span class="line">	<span class="keyword">double</span> b = <span class="number">3.14</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"a = %f\n"</span>, a);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"b = %lf\n"</span>, b);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//科学法赋值</span></span><br><span class="line">	a = <span class="number">3.2e3</span>f; <span class="comment">//3.2*1000 = 32000，e可以写E</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"a1 = %f\n"</span>, a);</span><br><span class="line"></span><br><span class="line">	a = <span class="number">100e-3</span>f; <span class="comment">//100*0.001 = 0.1</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"a2 = %f\n"</span>, a);</span><br><span class="line"></span><br><span class="line">	a = <span class="number">3.1415926f</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"a3 = %f\n"</span>, a); <span class="comment">//结果为3.141593</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="类型限定符"><a href="#类型限定符" class="headerlink" title="类型限定符"></a>类型限定符</h2><table>
<thead>
<tr>
<th><strong>限定符</strong></th>
<th><strong>含义</strong></th>
</tr>
</thead>
<tbody><tr>
<td>extern</td>
<td>声明一个变量，extern声明的变量没有建立存储空间。  extern int a;</td>
</tr>
<tr>
<td>const</td>
<td>定义一个常量，常量的值不能修改。  const int a = 10;</td>
</tr>
<tr>
<td>volatile</td>
<td>防止编译器优化代码</td>
</tr>
<tr>
<td>register</td>
<td>定义寄存器变量，提高效率。register是建议型的指令，而不是命令型的指令，如果CPU有空闲寄存器，那么register就生效，如果没有空闲寄存器，那么register无效。</td>
</tr>
</tbody></table>
<h2 id="字符串格式化输出和输入"><a href="#字符串格式化输出和输入" class="headerlink" title="字符串格式化输出和输入"></a>字符串格式化输出和输入</h2><h3 id="字符串常量"><a href="#字符串常量" class="headerlink" title="字符串常量"></a>字符串常量</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 字符串是内存中一段连续的char空间，以&#39;\0&#39;(数字0)结尾。</span><br><span class="line"></span><br><span class="line">- 字符串常量与字符常量的不同：每个字符串的结尾，编译器会自动的添加一个结束标志位&#39;\0&#39;，即 &quot;a&quot; 包含两个字符&#39;a&#39;和’\0’</span><br></pre></td></tr></table></figure></div>

<h3 id="printf函数和putchar函数"><a href="#printf函数和putchar函数" class="headerlink" title="printf函数和putchar函数"></a>printf函数和putchar函数</h3><p>​    printf是输出一个字符串，putchar输出一个char。</p>
<p>printf格式字符：</p>
<table>
<thead>
<tr>
<th align="left">打印格式</th>
<th>对应数据类型</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">%d</td>
<td>int</td>
<td>接受整数值并将它表示为有符号的十进制整数</td>
</tr>
<tr>
<td align="left">%hd</td>
<td>short int</td>
<td>短整数</td>
</tr>
<tr>
<td align="left">%hu</td>
<td>unsigned short</td>
<td>无符号短整数</td>
</tr>
<tr>
<td align="left">%o</td>
<td>unsigned int</td>
<td>无符号8进制整数</td>
</tr>
<tr>
<td align="left">%u</td>
<td>unsigned int</td>
<td>无符号10进制整数</td>
</tr>
<tr>
<td align="left">%x,%X</td>
<td>unsigned int</td>
<td>无符号16进制整数，x对应的是abcdef，X对应的是ABCDEF</td>
</tr>
<tr>
<td align="left">%f</td>
<td>float</td>
<td>单精度浮点数</td>
</tr>
<tr>
<td align="left">%lf</td>
<td>double</td>
<td>双精度浮点数</td>
</tr>
<tr>
<td align="left">%e,%E</td>
<td>double</td>
<td>科学计数法表示的数，此处”e”的大小写代表在输出时用的”e”的大小写</td>
</tr>
<tr>
<td align="left">%c</td>
<td>char</td>
<td>字符型。可以把输入的数字按照ASCII码相应转换为对应的字符</td>
</tr>
<tr>
<td align="left">%s</td>
<td>char *</td>
<td>字符串。输出字符串中的字符直至字符串中的空字符（字符串以’\0‘结尾，这个’\0’即空字符）</td>
</tr>
<tr>
<td align="left">%p</td>
<td>void *</td>
<td>以16进制形式输出指针</td>
</tr>
<tr>
<td align="left">%%</td>
<td>%</td>
<td>输出一个百分号</td>
</tr>
</tbody></table>
<p>printf附加格式：</p>
<table>
<thead>
<tr>
<th><strong>字符</strong></th>
<th><strong>含义</strong></th>
</tr>
</thead>
<tbody><tr>
<td>l(字母l)</td>
<td>附加在d,u,x,o前面，表示长整数</td>
</tr>
<tr>
<td>-</td>
<td>左对齐</td>
</tr>
<tr>
<td>m(代表一个整数)</td>
<td>数据最小宽度</td>
</tr>
<tr>
<td>0(数字0)</td>
<td>将输出的前面补上0直到占满指定列宽为止不可以搭配使用-</td>
</tr>
<tr>
<td>m.n(代表一个整数)</td>
<td>m指域宽，即对应的输出项在输出设备上所占的字符数。n指精度，用于说明输出的实型数的小数位数。对数值型的来说，未指定n时，隐含的精度为n=6位。</td>
</tr>
</tbody></table>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"a = %d\n"</span>, a);<span class="comment">//格式化输出一个字符串</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%p\n"</span>, &amp;a);<span class="comment">//输出变量a在内存中的地址编号</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%%d\n"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">char</span> c = <span class="string">'a'</span>;</span><br><span class="line">	<span class="built_in">putchar</span>(c);<span class="comment">//putchar只有一个参数，就是要输出的char</span></span><br><span class="line">	<span class="keyword">long</span> a2 = <span class="number">100</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%ld, %lx, %lo\n"</span>, a2, a2, a2);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> a3 = <span class="number">1000</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%lld, %llx, %llo\n"</span>, a3, a3, a3);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> abc = <span class="number">10</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"abc = '%6d'\n"</span>, abc);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"abc = '%-6d'\n"</span>, abc);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"abc = '%06d'\n"</span>, abc);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"abc = '%-06d'\n"</span>, abc);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">double</span> d = <span class="number">12.3</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"d = \' %-10.3lf \'\n"</span>, d);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="scanf函数与getchar函数"><a href="#scanf函数与getchar函数" class="headerlink" title="scanf函数与getchar函数"></a>scanf函数与getchar函数</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> ch1;</span><br><span class="line">	<span class="keyword">char</span> ch2;</span><br><span class="line">	<span class="keyword">char</span> ch3;</span><br><span class="line">	<span class="keyword">int</span> a;</span><br><span class="line">	<span class="keyword">int</span> b;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"请输入ch1的字符："</span>);</span><br><span class="line">	ch1 = getchar();</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"ch1 = %c\n"</span>, ch1);</span><br><span class="line"></span><br><span class="line">	getchar(); <span class="comment">//测试此处getchar()的作用,回车</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"请输入ch2的字符："</span>);</span><br><span class="line">	ch2 = getchar();</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\'ch2 = %ctest\'\n"</span>, ch2);</span><br><span class="line"></span><br><span class="line">	getchar(); <span class="comment">//测试此处getchar()的作用</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"请输入ch3的字符："</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;ch3);<span class="comment">//这里第二个参数一定是变量的地址，而不是变量名</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"ch3 = %c\n"</span>, ch3);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"请输入a的值："</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"a = %d\n"</span>, a);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"请输入b的值："</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;b);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"b = %d\n"</span>, b);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="运算符与表达式"><a href="#运算符与表达式" class="headerlink" title="运算符与表达式"></a>运算符与表达式</h1>]]></content>
      <categories>
        <category>c_c++</category>
      </categories>
      <tags>
        <tag>c_c++</tag>
      </tags>
  </entry>
</search>
